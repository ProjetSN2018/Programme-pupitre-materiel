
A2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b1dc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008b1dc  0008b1dc  0001b1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000fdc  20000000  0008b1e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001a18  20000fdc  0008c1c0  00020fdc  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020fdc  2**0
                  CONTENTS, READONLY
  6 .comment      000000b2  00000000  00000000  00021005  2**0
                  CONTENTS, READONLY
  7 .debug_info   00029df2  00000000  00000000  000210b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005f4a  00000000  00000000  0004aea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006a60  00000000  00000000  00050df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ef0  00000000  00000000  00057853  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d58  00000000  00000000  00058743  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d11b  00000000  00000000  0005949b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001e103  00000000  00000000  000765b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005488c  00000000  00000000  000946b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002dd4  00000000  00000000  000e8f48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 e1 48 08 00 dd 48 08 00 dd 48 08 00     .@. .H...H...H..
   80010:	dd 48 08 00 dd 48 08 00 dd 48 08 00 00 00 00 00     .H...H...H......
	...
   8002c:	dd 48 08 00 dd 48 08 00 00 00 00 00 dd 48 08 00     .H...H.......H..
   8003c:	dd 48 08 00 dd 48 08 00 dd 48 08 00 49 15 08 00     .H...H...H..I...
   8004c:	dd 48 08 00 dd 48 08 00 dd 48 08 00 dd 48 08 00     .H...H...H...H..
   8005c:	dd 48 08 00 a9 36 08 00 dd 48 08 00 e9 02 08 00     .H...6...H......
   8006c:	fd 02 08 00 dd 48 08 00 b1 0d 08 00 dd 48 08 00     .....H.......H..
   8007c:	dd 48 08 00 dd 48 08 00 dd 48 08 00 dd 48 08 00     .H...H...H...H..
   8008c:	dd 48 08 00 dd 48 08 00 dd 48 08 00 29 3a 08 00     .H...H...H..):..
   8009c:	dd 48 08 00 dd 48 08 00 dd 48 08 00 dd 48 08 00     .H...H...H...H..
   800ac:	dd 48 08 00 dd 48 08 00 dd 48 08 00 dd 48 08 00     .H...H...H...H..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000fdc 	.word	0x20000fdc
   800d8:	00000000 	.word	0x00000000
   800dc:	0008b1e4 	.word	0x0008b1e4

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	0008b1e4 	.word	0x0008b1e4
   8011c:	20000fe0 	.word	0x20000fe0
   80120:	0008b1e4 	.word	0x0008b1e4
   80124:	00000000 	.word	0x00000000

00080128 <Appli>:




uint32_t Appli(uint32_t sc, ...)
{
   80128:	b40f      	push	{r0, r1, r2, r3}
   8012a:	b538      	push	{r3, r4, r5, lr}
   8012c:	9904      	ldr	r1, [sp, #16]
	switch(sc)
   8012e:	2964      	cmp	r1, #100	; 0x64
   80130:	d005      	beq.n	8013e <Appli+0x16>
   80132:	2966      	cmp	r1, #102	; 0x66
   80134:	d05b      	beq.n	801ee <Appli+0xc6>
//#endif
		break;


	default:
		Error(ERROR_APPLI_SWITCH_BAD_SC,sc);
   80136:	2010      	movs	r0, #16
   80138:	4b2f      	ldr	r3, [pc, #188]	; (801f8 <Appli+0xd0>)
   8013a:	4798      	blx	r3
   8013c:	e057      	b.n	801ee <Appli+0xc6>
		gpio_configure_pin(CMD_MOSFET,			CMD_MOSFET_FLAGS);
   8013e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80142:	2020      	movs	r0, #32
   80144:	4c2d      	ldr	r4, [pc, #180]	; (801fc <Appli+0xd4>)
   80146:	47a0      	blx	r4
		gpio_configure_pin(CMD_MOT_SERRURE,		CMD_MOT_SERRURE_FLAGS);
   80148:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8014c:	2021      	movs	r0, #33	; 0x21
   8014e:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS,			CMD_RELAIS_FLAGS);
   80150:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80154:	2022      	movs	r0, #34	; 0x22
   80156:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS_1,		CMD_RELAIS_1_FLAGS);
   80158:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8015c:	2023      	movs	r0, #35	; 0x23
   8015e:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS_2,		CMD_RELAIS_2_FLAGS);
   80160:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80164:	2024      	movs	r0, #36	; 0x24
   80166:	47a0      	blx	r4
		pmc_enable_periph_clk(ID_PIOA);
   80168:	200a      	movs	r0, #10
   8016a:	4d25      	ldr	r5, [pc, #148]	; (80200 <Appli+0xd8>)
   8016c:	47a8      	blx	r5
		pmc_enable_periph_clk(ID_PIOB);
   8016e:	200b      	movs	r0, #11
   80170:	47a8      	blx	r5
		gpio_configure_pin(PENE_OUVERT,			PENE_OUVERT_FLAGS);
   80172:	4d24      	ldr	r5, [pc, #144]	; (80204 <Appli+0xdc>)
   80174:	4629      	mov	r1, r5
   80176:	200e      	movs	r0, #14
   80178:	47a0      	blx	r4
		gpio_configure_pin(PENE_FERME,			PENE_FERME_FLAGS);
   8017a:	4629      	mov	r1, r5
   8017c:	200f      	movs	r0, #15
   8017e:	47a0      	blx	r4
		gpio_configure_pin(IN_ILS,				IN_ILS_FLAGS);
   80180:	4629      	mov	r1, r5
   80182:	2010      	movs	r0, #16
   80184:	47a0      	blx	r4
		gpio_configure_pin(IN_SV,				IN_SV_FLAGS);
   80186:	4629      	mov	r1, r5
   80188:	2011      	movs	r0, #17
   8018a:	47a0      	blx	r4
		gpio_configure_pin(IN_RADAR,			IN_RADAR_FLAGS);
   8018c:	4629      	mov	r1, r5
   8018e:	2018      	movs	r0, #24
   80190:	47a0      	blx	r4
		gpio_configure_pin(IN_DVU,				IN_DVU_FLAGS);
   80192:	4629      	mov	r1, r5
   80194:	2019      	movs	r0, #25
   80196:	47a0      	blx	r4
		gpio_configure_pin(IN_PREMIERE_ENTREE,	IN_PREMIERE_ENTREE_FLAGS);
   80198:	4629      	mov	r1, r5
   8019a:	201a      	movs	r0, #26
   8019c:	47a0      	blx	r4
		gpio_configure_pin(IN_DVU_GENERAL,		IN_DVU_GENERAL_FLAGS);
   8019e:	4629      	mov	r1, r5
   801a0:	201b      	movs	r0, #27
   801a2:	47a0      	blx	r4
		gpio_configure_pin(IN_ENTREE_LIBRE,		IN_ENTREE_OPTION_FLAGS);
   801a4:	4629      	mov	r1, r5
   801a6:	201c      	movs	r0, #28
   801a8:	47a0      	blx	r4
		gpio_configure_pin(IN_ENTREE_OPTION,	IN_ENTREE_OPTION_FLAGS);
   801aa:	4629      	mov	r1, r5
   801ac:	201d      	movs	r0, #29
   801ae:	47a0      	blx	r4
		gpio_configure_pin(SW1_PUSHBUTTON,		SWS_PUSHBUTTON_FLAGS);
   801b0:	4629      	mov	r1, r5
   801b2:	2036      	movs	r0, #54	; 0x36
   801b4:	47a0      	blx	r4
		gpio_configure_pin(SW2_PUSHBUTTON,		SWS_PUSHBUTTON_FLAGS);
   801b6:	4629      	mov	r1, r5
   801b8:	2037      	movs	r0, #55	; 0x37
   801ba:	47a0      	blx	r4
		gpio_configure_pin(SW2_PUSHBUTTON,		SWS_PUSHBUTTON_FLAGS);
   801bc:	4629      	mov	r1, r5
   801be:	2037      	movs	r0, #55	; 0x37
   801c0:	47a0      	blx	r4
		Putstr(WELCOME_MSG);
   801c2:	4911      	ldr	r1, [pc, #68]	; (80208 <Appli+0xe0>)
   801c4:	2067      	movs	r0, #103	; 0x67
   801c6:	4b11      	ldr	r3, [pc, #68]	; (8020c <Appli+0xe4>)
   801c8:	4798      	blx	r3
		LcdPutstr("CPU.ACX  ATSAM3U4C",2,1);
   801ca:	2301      	movs	r3, #1
   801cc:	2202      	movs	r2, #2
   801ce:	4910      	ldr	r1, [pc, #64]	; (80210 <Appli+0xe8>)
   801d0:	2068      	movs	r0, #104	; 0x68
   801d2:	4c10      	ldr	r4, [pc, #64]	; (80214 <Appli+0xec>)
   801d4:	47a0      	blx	r4
		Menu(MENU_NEW);
   801d6:	2064      	movs	r0, #100	; 0x64
   801d8:	4b0f      	ldr	r3, [pc, #60]	; (80218 <Appli+0xf0>)
   801da:	4798      	blx	r3
		ComRS485(COMRS485_NEW);
   801dc:	2064      	movs	r0, #100	; 0x64
   801de:	4b0f      	ldr	r3, [pc, #60]	; (8021c <Appli+0xf4>)
   801e0:	4798      	blx	r3
		Module(MODULE_NEW);
   801e2:	2064      	movs	r0, #100	; 0x64
   801e4:	4b0e      	ldr	r3, [pc, #56]	; (80220 <Appli+0xf8>)
   801e6:	4798      	blx	r3
		ModbusNew();
   801e8:	2064      	movs	r0, #100	; 0x64
   801ea:	4b0e      	ldr	r3, [pc, #56]	; (80224 <Appli+0xfc>)
   801ec:	4798      	blx	r3
	}
	return 0;
}
   801ee:	2000      	movs	r0, #0
   801f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   801f4:	b004      	add	sp, #16
   801f6:	4770      	bx	lr
   801f8:	00080f15 	.word	0x00080f15
   801fc:	000841e1 	.word	0x000841e1
   80200:	000843e1 	.word	0x000843e1
   80204:	28000001 	.word	0x28000001
   80208:	00089a70 	.word	0x00089a70
   8020c:	00083495 	.word	0x00083495
   80210:	00089ab0 	.word	0x00089ab0
   80214:	00081579 	.word	0x00081579
   80218:	00083c71 	.word	0x00083c71
   8021c:	00080b25 	.word	0x00080b25
   80220:	00083ec5 	.word	0x00083ec5
   80224:	000819d1 	.word	0x000819d1

00080228 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8022c:	4604      	mov	r4, r0
   8022e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80230:	4b0e      	ldr	r3, [pc, #56]	; (8026c <pio_handler_process+0x44>)
   80232:	4798      	blx	r3
   80234:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80236:	4620      	mov	r0, r4
   80238:	4b0d      	ldr	r3, [pc, #52]	; (80270 <pio_handler_process+0x48>)
   8023a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8023c:	4005      	ands	r5, r0
   8023e:	d013      	beq.n	80268 <pio_handler_process+0x40>
   80240:	4c0c      	ldr	r4, [pc, #48]	; (80274 <pio_handler_process+0x4c>)
   80242:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80246:	e003      	b.n	80250 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80248:	42b4      	cmp	r4, r6
   8024a:	d00d      	beq.n	80268 <pio_handler_process+0x40>
   8024c:	3410      	adds	r4, #16
		while (status != 0) {
   8024e:	b15d      	cbz	r5, 80268 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80250:	6820      	ldr	r0, [r4, #0]
   80252:	4540      	cmp	r0, r8
   80254:	d1f8      	bne.n	80248 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80256:	6861      	ldr	r1, [r4, #4]
   80258:	4229      	tst	r1, r5
   8025a:	d0f5      	beq.n	80248 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8025c:	68e3      	ldr	r3, [r4, #12]
   8025e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80260:	6863      	ldr	r3, [r4, #4]
   80262:	ea25 0503 	bic.w	r5, r5, r3
   80266:	e7ef      	b.n	80248 <pio_handler_process+0x20>
   80268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8026c:	00084167 	.word	0x00084167
   80270:	0008416b 	.word	0x0008416b
   80274:	20000ff8 	.word	0x20000ff8

00080278 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8027a:	4c18      	ldr	r4, [pc, #96]	; (802dc <pio_handler_set+0x64>)
   8027c:	6826      	ldr	r6, [r4, #0]
   8027e:	2e06      	cmp	r6, #6
   80280:	d829      	bhi.n	802d6 <pio_handler_set+0x5e>
   80282:	f04f 0c00 	mov.w	ip, #0
   80286:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80288:	4f15      	ldr	r7, [pc, #84]	; (802e0 <pio_handler_set+0x68>)
   8028a:	e004      	b.n	80296 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   8028c:	3401      	adds	r4, #1
   8028e:	b2e4      	uxtb	r4, r4
   80290:	46a4      	mov	ip, r4
   80292:	42a6      	cmp	r6, r4
   80294:	d309      	bcc.n	802aa <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   80296:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80298:	0125      	lsls	r5, r4, #4
   8029a:	597d      	ldr	r5, [r7, r5]
   8029c:	428d      	cmp	r5, r1
   8029e:	d1f5      	bne.n	8028c <pio_handler_set+0x14>
   802a0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   802a4:	686d      	ldr	r5, [r5, #4]
   802a6:	4295      	cmp	r5, r2
   802a8:	d1f0      	bne.n	8028c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   802aa:	4d0d      	ldr	r5, [pc, #52]	; (802e0 <pio_handler_set+0x68>)
   802ac:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   802b0:	eb05 040e 	add.w	r4, r5, lr
   802b4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   802b8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   802ba:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   802bc:	9906      	ldr	r1, [sp, #24]
   802be:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   802c0:	3601      	adds	r6, #1
   802c2:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   802c4:	bf04      	itt	eq
   802c6:	4905      	ldreq	r1, [pc, #20]	; (802dc <pio_handler_set+0x64>)
   802c8:	600e      	streq	r6, [r1, #0]
   802ca:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   802cc:	461a      	mov	r2, r3
   802ce:	4b05      	ldr	r3, [pc, #20]	; (802e4 <pio_handler_set+0x6c>)
   802d0:	4798      	blx	r3

	return 0;
   802d2:	2000      	movs	r0, #0
   802d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   802d6:	2001      	movs	r0, #1
}
   802d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   802da:	bf00      	nop
   802dc:	20001068 	.word	0x20001068
   802e0:	20000ff8 	.word	0x20000ff8
   802e4:	00084135 	.word	0x00084135

000802e8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   802e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   802ea:	210a      	movs	r1, #10
   802ec:	4801      	ldr	r0, [pc, #4]	; (802f4 <PIOA_Handler+0xc>)
   802ee:	4b02      	ldr	r3, [pc, #8]	; (802f8 <PIOA_Handler+0x10>)
   802f0:	4798      	blx	r3
   802f2:	bd08      	pop	{r3, pc}
   802f4:	400e0c00 	.word	0x400e0c00
   802f8:	00080229 	.word	0x00080229

000802fc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   802fc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   802fe:	210b      	movs	r1, #11
   80300:	4801      	ldr	r0, [pc, #4]	; (80308 <PIOB_Handler+0xc>)
   80302:	4b02      	ldr	r3, [pc, #8]	; (8030c <PIOB_Handler+0x10>)
   80304:	4798      	blx	r3
   80306:	bd08      	pop	{r3, pc}
   80308:	400e0e00 	.word	0x400e0e00
   8030c:	00080229 	.word	0x00080229

00080310 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   80310:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   80312:	010b      	lsls	r3, r1, #4
   80314:	4293      	cmp	r3, r2
   80316:	d914      	bls.n	80342 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80318:	00c9      	lsls	r1, r1, #3
   8031a:	084b      	lsrs	r3, r1, #1
   8031c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   80320:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   80324:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80326:	1e5c      	subs	r4, r3, #1
   80328:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8032c:	428c      	cmp	r4, r1
   8032e:	d901      	bls.n	80334 <usart_set_async_baudrate+0x24>
		return 1;
   80330:	2001      	movs	r0, #1
   80332:	e017      	b.n	80364 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   80334:	6841      	ldr	r1, [r0, #4]
   80336:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   8033a:	6041      	str	r1, [r0, #4]
   8033c:	e00c      	b.n	80358 <usart_set_async_baudrate+0x48>
		return 1;
   8033e:	2001      	movs	r0, #1
   80340:	e010      	b.n	80364 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80342:	0859      	lsrs	r1, r3, #1
   80344:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   80348:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   8034c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8034e:	1e5c      	subs	r4, r3, #1
   80350:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   80354:	428c      	cmp	r4, r1
   80356:	d8f2      	bhi.n	8033e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   80358:	0412      	lsls	r2, r2, #16
   8035a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   8035e:	431a      	orrs	r2, r3
   80360:	6202      	str	r2, [r0, #32]

	return 0;
   80362:	2000      	movs	r0, #0
}
   80364:	bc10      	pop	{r4}
   80366:	4770      	bx	lr

00080368 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   80368:	4b0a      	ldr	r3, [pc, #40]	; (80394 <usart_reset+0x2c>)
   8036a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   8036e:	2300      	movs	r3, #0
   80370:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   80372:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80374:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80376:	2388      	movs	r3, #136	; 0x88
   80378:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8037a:	2324      	movs	r3, #36	; 0x24
   8037c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   8037e:	f44f 7380 	mov.w	r3, #256	; 0x100
   80382:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   80384:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   80388:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   8038a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   8038e:	6003      	str	r3, [r0, #0]
   80390:	4770      	bx	lr
   80392:	bf00      	nop
   80394:	55534100 	.word	0x55534100

00080398 <usart_init_rs232>:
{
   80398:	b570      	push	{r4, r5, r6, lr}
   8039a:	4605      	mov	r5, r0
   8039c:	460c      	mov	r4, r1
   8039e:	4616      	mov	r6, r2
	usart_reset(p_usart);
   803a0:	4b0f      	ldr	r3, [pc, #60]	; (803e0 <usart_init_rs232+0x48>)
   803a2:	4798      	blx	r3
	ul_reg_val = 0;
   803a4:	2200      	movs	r2, #0
   803a6:	4b0f      	ldr	r3, [pc, #60]	; (803e4 <usart_init_rs232+0x4c>)
   803a8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   803aa:	b1a4      	cbz	r4, 803d6 <usart_init_rs232+0x3e>
   803ac:	4632      	mov	r2, r6
   803ae:	6821      	ldr	r1, [r4, #0]
   803b0:	4628      	mov	r0, r5
   803b2:	4b0d      	ldr	r3, [pc, #52]	; (803e8 <usart_init_rs232+0x50>)
   803b4:	4798      	blx	r3
   803b6:	4602      	mov	r2, r0
   803b8:	b978      	cbnz	r0, 803da <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   803ba:	6863      	ldr	r3, [r4, #4]
   803bc:	68a1      	ldr	r1, [r4, #8]
   803be:	430b      	orrs	r3, r1
   803c0:	6921      	ldr	r1, [r4, #16]
   803c2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   803c4:	68e1      	ldr	r1, [r4, #12]
   803c6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   803c8:	4906      	ldr	r1, [pc, #24]	; (803e4 <usart_init_rs232+0x4c>)
   803ca:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   803cc:	6869      	ldr	r1, [r5, #4]
   803ce:	430b      	orrs	r3, r1
   803d0:	606b      	str	r3, [r5, #4]
}
   803d2:	4610      	mov	r0, r2
   803d4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   803d6:	2201      	movs	r2, #1
   803d8:	e7fb      	b.n	803d2 <usart_init_rs232+0x3a>
   803da:	2201      	movs	r2, #1
   803dc:	e7f9      	b.n	803d2 <usart_init_rs232+0x3a>
   803de:	bf00      	nop
   803e0:	00080369 	.word	0x00080369
   803e4:	2000106c 	.word	0x2000106c
   803e8:	00080311 	.word	0x00080311

000803ec <usart_init_rs485>:
{
   803ec:	b510      	push	{r4, lr}
   803ee:	4604      	mov	r4, r0
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
   803f0:	4b06      	ldr	r3, [pc, #24]	; (8040c <usart_init_rs485+0x20>)
   803f2:	4798      	blx	r3
   803f4:	b940      	cbnz	r0, 80408 <usart_init_rs485+0x1c>
   803f6:	4602      	mov	r2, r0
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
   803f8:	6863      	ldr	r3, [r4, #4]
   803fa:	f023 030f 	bic.w	r3, r3, #15
   803fe:	f043 0301 	orr.w	r3, r3, #1
   80402:	6063      	str	r3, [r4, #4]
}
   80404:	4610      	mov	r0, r2
   80406:	bd10      	pop	{r4, pc}
		return 1;
   80408:	2201      	movs	r2, #1
   8040a:	e7fb      	b.n	80404 <usart_init_rs485+0x18>
   8040c:	00080399 	.word	0x00080399

00080410 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   80410:	2340      	movs	r3, #64	; 0x40
   80412:	6003      	str	r3, [r0, #0]
   80414:	4770      	bx	lr

00080416 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   80416:	2310      	movs	r3, #16
   80418:	6003      	str	r3, [r0, #0]
   8041a:	4770      	bx	lr

0008041c <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   8041c:	6081      	str	r1, [r0, #8]
   8041e:	4770      	bx	lr

00080420 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   80420:	60c1      	str	r1, [r0, #12]
   80422:	4770      	bx	lr

00080424 <usart_get_status>:
	return p_usart->US_CSR;
   80424:	6940      	ldr	r0, [r0, #20]
}
   80426:	4770      	bx	lr

00080428 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   80428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8042c:	6043      	str	r3, [r0, #4]
   8042e:	4770      	bx	lr

00080430 <Test>:
	PH_CMD_RELAIS_1,
	PH_CMD_RELAIS_2
};

void Test(uint32_t sc, uint32_t phase)
{
   80430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80434:	b084      	sub	sp, #16
   80436:	9103      	str	r1, [sp, #12]
	switch(sc)
   80438:	2864      	cmp	r0, #100	; 0x64
   8043a:	f000 80dd 	beq.w	805f8 <Test+0x1c8>
   8043e:	2866      	cmp	r0, #102	; 0x66
   80440:	f040 8127 	bne.w	80692 <Test+0x262>
		phase<<=8;
		phase&=0xFFFF00;
		phase|=PH_CMD_MOSFET;
		//no break;
	case TEST_RUN:
		sprintf(buf,"\r\nPH:%d--%d\r\n",*((uint16_t*)((uint8_t*)&phase+1)),*((char*)&phase));
   80444:	f8bd 700d 	ldrh.w	r7, [sp, #13]
   80448:	4c9e      	ldr	r4, [pc, #632]	; (806c4 <Test+0x294>)
   8044a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   8044e:	463a      	mov	r2, r7
   80450:	499d      	ldr	r1, [pc, #628]	; (806c8 <Test+0x298>)
   80452:	4620      	mov	r0, r4
   80454:	4d9d      	ldr	r5, [pc, #628]	; (806cc <Test+0x29c>)
   80456:	47a8      	blx	r5
		Putstr(buf);
   80458:	4621      	mov	r1, r4
   8045a:	2067      	movs	r0, #103	; 0x67
   8045c:	4c9c      	ldr	r4, [pc, #624]	; (806d0 <Test+0x2a0>)
   8045e:	47a0      	blx	r4

		Putstr(PENE_OUVERT_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_OUVERT)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   80460:	499c      	ldr	r1, [pc, #624]	; (806d4 <Test+0x2a4>)
   80462:	2067      	movs	r0, #103	; 0x67
   80464:	47a0      	blx	r4
   80466:	4d9c      	ldr	r5, [pc, #624]	; (806d8 <Test+0x2a8>)
   80468:	4629      	mov	r1, r5
   8046a:	2067      	movs	r0, #103	; 0x67
   8046c:	47a0      	blx	r4
   8046e:	200e      	movs	r0, #14
   80470:	4b9a      	ldr	r3, [pc, #616]	; (806dc <Test+0x2ac>)
   80472:	4798      	blx	r3
   80474:	2800      	cmp	r0, #0
   80476:	f040 80cd 	bne.w	80614 <Test+0x1e4>
   8047a:	4999      	ldr	r1, [pc, #612]	; (806e0 <Test+0x2b0>)
   8047c:	2067      	movs	r0, #103	; 0x67
   8047e:	47a0      	blx	r4
   80480:	4c98      	ldr	r4, [pc, #608]	; (806e4 <Test+0x2b4>)
   80482:	4621      	mov	r1, r4
   80484:	2067      	movs	r0, #103	; 0x67
   80486:	4e92      	ldr	r6, [pc, #584]	; (806d0 <Test+0x2a0>)
   80488:	47b0      	blx	r6
		Putstr(PENE_FERME_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_FERME)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   8048a:	4997      	ldr	r1, [pc, #604]	; (806e8 <Test+0x2b8>)
   8048c:	2067      	movs	r0, #103	; 0x67
   8048e:	47b0      	blx	r6
   80490:	4629      	mov	r1, r5
   80492:	2067      	movs	r0, #103	; 0x67
   80494:	47b0      	blx	r6
   80496:	200f      	movs	r0, #15
   80498:	4b90      	ldr	r3, [pc, #576]	; (806dc <Test+0x2ac>)
   8049a:	4798      	blx	r3
   8049c:	2800      	cmp	r0, #0
   8049e:	f040 80be 	bne.w	8061e <Test+0x1ee>
   804a2:	498f      	ldr	r1, [pc, #572]	; (806e0 <Test+0x2b0>)
   804a4:	2067      	movs	r0, #103	; 0x67
   804a6:	47b0      	blx	r6
   804a8:	4621      	mov	r1, r4
   804aa:	2067      	movs	r0, #103	; 0x67
   804ac:	f8df 8220 	ldr.w	r8, [pc, #544]	; 806d0 <Test+0x2a0>
   804b0:	47c0      	blx	r8
		Putstr(IN_ILS_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_ILS)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   804b2:	498e      	ldr	r1, [pc, #568]	; (806ec <Test+0x2bc>)
   804b4:	2067      	movs	r0, #103	; 0x67
   804b6:	47c0      	blx	r8
   804b8:	4e8d      	ldr	r6, [pc, #564]	; (806f0 <Test+0x2c0>)
   804ba:	4631      	mov	r1, r6
   804bc:	2067      	movs	r0, #103	; 0x67
   804be:	47c0      	blx	r8
   804c0:	2010      	movs	r0, #16
   804c2:	4b86      	ldr	r3, [pc, #536]	; (806dc <Test+0x2ac>)
   804c4:	4798      	blx	r3
   804c6:	2800      	cmp	r0, #0
   804c8:	f040 80ae 	bne.w	80628 <Test+0x1f8>
   804cc:	4984      	ldr	r1, [pc, #528]	; (806e0 <Test+0x2b0>)
   804ce:	2067      	movs	r0, #103	; 0x67
   804d0:	47c0      	blx	r8
   804d2:	4621      	mov	r1, r4
   804d4:	2067      	movs	r0, #103	; 0x67
   804d6:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 806d0 <Test+0x2a0>
   804da:	47c0      	blx	r8
		Putstr(IN_SV_NAME);					Putstr("\t\t: ");	gpio_pin_is_low(IN_SV)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   804dc:	4985      	ldr	r1, [pc, #532]	; (806f4 <Test+0x2c4>)
   804de:	2067      	movs	r0, #103	; 0x67
   804e0:	47c0      	blx	r8
   804e2:	4631      	mov	r1, r6
   804e4:	2067      	movs	r0, #103	; 0x67
   804e6:	47c0      	blx	r8
   804e8:	2011      	movs	r0, #17
   804ea:	4b7c      	ldr	r3, [pc, #496]	; (806dc <Test+0x2ac>)
   804ec:	4798      	blx	r3
   804ee:	2800      	cmp	r0, #0
   804f0:	f040 809f 	bne.w	80632 <Test+0x202>
   804f4:	497a      	ldr	r1, [pc, #488]	; (806e0 <Test+0x2b0>)
   804f6:	2067      	movs	r0, #103	; 0x67
   804f8:	47c0      	blx	r8
   804fa:	4621      	mov	r1, r4
   804fc:	2067      	movs	r0, #103	; 0x67
   804fe:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 806d0 <Test+0x2a0>
   80502:	47c0      	blx	r8
		Putstr(IN_RADAR_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_RADAR)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   80504:	497c      	ldr	r1, [pc, #496]	; (806f8 <Test+0x2c8>)
   80506:	2067      	movs	r0, #103	; 0x67
   80508:	47c0      	blx	r8
   8050a:	4631      	mov	r1, r6
   8050c:	2067      	movs	r0, #103	; 0x67
   8050e:	47c0      	blx	r8
   80510:	2018      	movs	r0, #24
   80512:	4b72      	ldr	r3, [pc, #456]	; (806dc <Test+0x2ac>)
   80514:	4798      	blx	r3
   80516:	2800      	cmp	r0, #0
   80518:	f040 8090 	bne.w	8063c <Test+0x20c>
   8051c:	4970      	ldr	r1, [pc, #448]	; (806e0 <Test+0x2b0>)
   8051e:	2067      	movs	r0, #103	; 0x67
   80520:	47c0      	blx	r8
   80522:	4621      	mov	r1, r4
   80524:	2067      	movs	r0, #103	; 0x67
   80526:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 806d0 <Test+0x2a0>
   8052a:	47c0      	blx	r8
		Putstr(IN_DVU_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_DVU)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   8052c:	4973      	ldr	r1, [pc, #460]	; (806fc <Test+0x2cc>)
   8052e:	2067      	movs	r0, #103	; 0x67
   80530:	47c0      	blx	r8
   80532:	4631      	mov	r1, r6
   80534:	2067      	movs	r0, #103	; 0x67
   80536:	47c0      	blx	r8
   80538:	2019      	movs	r0, #25
   8053a:	4b68      	ldr	r3, [pc, #416]	; (806dc <Test+0x2ac>)
   8053c:	4798      	blx	r3
   8053e:	2800      	cmp	r0, #0
   80540:	f040 8081 	bne.w	80646 <Test+0x216>
   80544:	4966      	ldr	r1, [pc, #408]	; (806e0 <Test+0x2b0>)
   80546:	2067      	movs	r0, #103	; 0x67
   80548:	47c0      	blx	r8
   8054a:	4621      	mov	r1, r4
   8054c:	2067      	movs	r0, #103	; 0x67
   8054e:	4e60      	ldr	r6, [pc, #384]	; (806d0 <Test+0x2a0>)
   80550:	47b0      	blx	r6
		Putstr(IN_PREMIERE_ENTREE_NAME);	Putstr("\t: ");		gpio_pin_is_low(IN_PREMIERE_ENTREE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   80552:	496b      	ldr	r1, [pc, #428]	; (80700 <Test+0x2d0>)
   80554:	2067      	movs	r0, #103	; 0x67
   80556:	47b0      	blx	r6
   80558:	4629      	mov	r1, r5
   8055a:	2067      	movs	r0, #103	; 0x67
   8055c:	47b0      	blx	r6
   8055e:	201a      	movs	r0, #26
   80560:	4b5e      	ldr	r3, [pc, #376]	; (806dc <Test+0x2ac>)
   80562:	4798      	blx	r3
   80564:	2800      	cmp	r0, #0
   80566:	d173      	bne.n	80650 <Test+0x220>
   80568:	495d      	ldr	r1, [pc, #372]	; (806e0 <Test+0x2b0>)
   8056a:	2067      	movs	r0, #103	; 0x67
   8056c:	47b0      	blx	r6
   8056e:	4621      	mov	r1, r4
   80570:	2067      	movs	r0, #103	; 0x67
   80572:	4e57      	ldr	r6, [pc, #348]	; (806d0 <Test+0x2a0>)
   80574:	47b0      	blx	r6
		Putstr(IN_DVU_GENERAL_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_DVU_GENERAL)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   80576:	4963      	ldr	r1, [pc, #396]	; (80704 <Test+0x2d4>)
   80578:	2067      	movs	r0, #103	; 0x67
   8057a:	47b0      	blx	r6
   8057c:	4629      	mov	r1, r5
   8057e:	2067      	movs	r0, #103	; 0x67
   80580:	47b0      	blx	r6
   80582:	201b      	movs	r0, #27
   80584:	4b55      	ldr	r3, [pc, #340]	; (806dc <Test+0x2ac>)
   80586:	4798      	blx	r3
   80588:	2800      	cmp	r0, #0
   8058a:	d166      	bne.n	8065a <Test+0x22a>
   8058c:	4954      	ldr	r1, [pc, #336]	; (806e0 <Test+0x2b0>)
   8058e:	2067      	movs	r0, #103	; 0x67
   80590:	47b0      	blx	r6
   80592:	4621      	mov	r1, r4
   80594:	2067      	movs	r0, #103	; 0x67
   80596:	4e4e      	ldr	r6, [pc, #312]	; (806d0 <Test+0x2a0>)
   80598:	47b0      	blx	r6
		Putstr(IN_ENTREE_LIBRE_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_LIBRE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   8059a:	495b      	ldr	r1, [pc, #364]	; (80708 <Test+0x2d8>)
   8059c:	2067      	movs	r0, #103	; 0x67
   8059e:	47b0      	blx	r6
   805a0:	4629      	mov	r1, r5
   805a2:	2067      	movs	r0, #103	; 0x67
   805a4:	47b0      	blx	r6
   805a6:	201c      	movs	r0, #28
   805a8:	4b4c      	ldr	r3, [pc, #304]	; (806dc <Test+0x2ac>)
   805aa:	4798      	blx	r3
   805ac:	2800      	cmp	r0, #0
   805ae:	d159      	bne.n	80664 <Test+0x234>
   805b0:	494b      	ldr	r1, [pc, #300]	; (806e0 <Test+0x2b0>)
   805b2:	2067      	movs	r0, #103	; 0x67
   805b4:	47b0      	blx	r6
   805b6:	4621      	mov	r1, r4
   805b8:	2067      	movs	r0, #103	; 0x67
   805ba:	4e45      	ldr	r6, [pc, #276]	; (806d0 <Test+0x2a0>)
   805bc:	47b0      	blx	r6
		Putstr(IN_ENTREE_OPTION_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_OPTION)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   805be:	4953      	ldr	r1, [pc, #332]	; (8070c <Test+0x2dc>)
   805c0:	2067      	movs	r0, #103	; 0x67
   805c2:	47b0      	blx	r6
   805c4:	4629      	mov	r1, r5
   805c6:	2067      	movs	r0, #103	; 0x67
   805c8:	47b0      	blx	r6
   805ca:	201d      	movs	r0, #29
   805cc:	4b43      	ldr	r3, [pc, #268]	; (806dc <Test+0x2ac>)
   805ce:	4798      	blx	r3
   805d0:	2800      	cmp	r0, #0
   805d2:	d14c      	bne.n	8066e <Test+0x23e>
   805d4:	4942      	ldr	r1, [pc, #264]	; (806e0 <Test+0x2b0>)
   805d6:	2067      	movs	r0, #103	; 0x67
   805d8:	47b0      	blx	r6
   805da:	4621      	mov	r1, r4
   805dc:	2067      	movs	r0, #103	; 0x67
   805de:	4b3c      	ldr	r3, [pc, #240]	; (806d0 <Test+0x2a0>)
   805e0:	4798      	blx	r3

		switch(mBitsMsk(phase,0xFF))
   805e2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   805e6:	3b01      	subs	r3, #1
   805e8:	2b04      	cmp	r3, #4
   805ea:	f200 80a4 	bhi.w	80736 <Test+0x306>
   805ee:	e8df f003 	tbb	[pc, r3]
   805f2:	5343      	.short	0x5343
   805f4:	615a      	.short	0x615a
   805f6:	9b          	.byte	0x9b
   805f7:	00          	.byte	0x00
		Putstr("\r\nTest started...\r\n");
   805f8:	4945      	ldr	r1, [pc, #276]	; (80710 <Test+0x2e0>)
   805fa:	2067      	movs	r0, #103	; 0x67
   805fc:	4b34      	ldr	r3, [pc, #208]	; (806d0 <Test+0x2a0>)
   805fe:	4798      	blx	r3
		phase<<=8;
   80600:	9b03      	ldr	r3, [sp, #12]
   80602:	021b      	lsls	r3, r3, #8
		phase&=0xFFFF00;
   80604:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   80608:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
		phase|=PH_CMD_MOSFET;
   8060c:	f043 0301 	orr.w	r3, r3, #1
   80610:	9303      	str	r3, [sp, #12]
   80612:	e717      	b.n	80444 <Test+0x14>
		Putstr(PENE_OUVERT_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_OUVERT)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   80614:	493f      	ldr	r1, [pc, #252]	; (80714 <Test+0x2e4>)
   80616:	2067      	movs	r0, #103	; 0x67
   80618:	4b2d      	ldr	r3, [pc, #180]	; (806d0 <Test+0x2a0>)
   8061a:	4798      	blx	r3
   8061c:	e730      	b.n	80480 <Test+0x50>
		Putstr(PENE_FERME_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_FERME)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   8061e:	493d      	ldr	r1, [pc, #244]	; (80714 <Test+0x2e4>)
   80620:	2067      	movs	r0, #103	; 0x67
   80622:	4b2b      	ldr	r3, [pc, #172]	; (806d0 <Test+0x2a0>)
   80624:	4798      	blx	r3
   80626:	e73f      	b.n	804a8 <Test+0x78>
		Putstr(IN_ILS_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_ILS)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   80628:	493a      	ldr	r1, [pc, #232]	; (80714 <Test+0x2e4>)
   8062a:	2067      	movs	r0, #103	; 0x67
   8062c:	4b28      	ldr	r3, [pc, #160]	; (806d0 <Test+0x2a0>)
   8062e:	4798      	blx	r3
   80630:	e74f      	b.n	804d2 <Test+0xa2>
		Putstr(IN_SV_NAME);					Putstr("\t\t: ");	gpio_pin_is_low(IN_SV)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   80632:	4938      	ldr	r1, [pc, #224]	; (80714 <Test+0x2e4>)
   80634:	2067      	movs	r0, #103	; 0x67
   80636:	4b26      	ldr	r3, [pc, #152]	; (806d0 <Test+0x2a0>)
   80638:	4798      	blx	r3
   8063a:	e75e      	b.n	804fa <Test+0xca>
		Putstr(IN_RADAR_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_RADAR)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   8063c:	4935      	ldr	r1, [pc, #212]	; (80714 <Test+0x2e4>)
   8063e:	2067      	movs	r0, #103	; 0x67
   80640:	4b23      	ldr	r3, [pc, #140]	; (806d0 <Test+0x2a0>)
   80642:	4798      	blx	r3
   80644:	e76d      	b.n	80522 <Test+0xf2>
		Putstr(IN_DVU_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_DVU)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   80646:	4933      	ldr	r1, [pc, #204]	; (80714 <Test+0x2e4>)
   80648:	2067      	movs	r0, #103	; 0x67
   8064a:	4b21      	ldr	r3, [pc, #132]	; (806d0 <Test+0x2a0>)
   8064c:	4798      	blx	r3
   8064e:	e77c      	b.n	8054a <Test+0x11a>
		Putstr(IN_PREMIERE_ENTREE_NAME);	Putstr("\t: ");		gpio_pin_is_low(IN_PREMIERE_ENTREE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   80650:	4930      	ldr	r1, [pc, #192]	; (80714 <Test+0x2e4>)
   80652:	2067      	movs	r0, #103	; 0x67
   80654:	4b1e      	ldr	r3, [pc, #120]	; (806d0 <Test+0x2a0>)
   80656:	4798      	blx	r3
   80658:	e789      	b.n	8056e <Test+0x13e>
		Putstr(IN_DVU_GENERAL_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_DVU_GENERAL)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   8065a:	492e      	ldr	r1, [pc, #184]	; (80714 <Test+0x2e4>)
   8065c:	2067      	movs	r0, #103	; 0x67
   8065e:	4b1c      	ldr	r3, [pc, #112]	; (806d0 <Test+0x2a0>)
   80660:	4798      	blx	r3
   80662:	e796      	b.n	80592 <Test+0x162>
		Putstr(IN_ENTREE_LIBRE_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_LIBRE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   80664:	492b      	ldr	r1, [pc, #172]	; (80714 <Test+0x2e4>)
   80666:	2067      	movs	r0, #103	; 0x67
   80668:	4b19      	ldr	r3, [pc, #100]	; (806d0 <Test+0x2a0>)
   8066a:	4798      	blx	r3
   8066c:	e7a3      	b.n	805b6 <Test+0x186>
		Putstr(IN_ENTREE_OPTION_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_OPTION)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   8066e:	4929      	ldr	r1, [pc, #164]	; (80714 <Test+0x2e4>)
   80670:	2067      	movs	r0, #103	; 0x67
   80672:	4b17      	ldr	r3, [pc, #92]	; (806d0 <Test+0x2a0>)
   80674:	4798      	blx	r3
   80676:	e7b0      	b.n	805da <Test+0x1aa>
		{
		case PH_CMD_MOSFET:
			gpio_set_pin_high(CMD_MOSFET);
   80678:	2020      	movs	r0, #32
   8067a:	4b27      	ldr	r3, [pc, #156]	; (80718 <Test+0x2e8>)
   8067c:	4798      	blx	r3
		}
		break;
	default:
		return;
	}
	PushTask(Test,TEST_RUN,++phase,1000);
   8067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80682:	9300      	str	r3, [sp, #0]
   80684:	9b03      	ldr	r3, [sp, #12]
   80686:	3301      	adds	r3, #1
   80688:	2266      	movs	r2, #102	; 0x66
   8068a:	4924      	ldr	r1, [pc, #144]	; (8071c <Test+0x2ec>)
   8068c:	4610      	mov	r0, r2
   8068e:	4c24      	ldr	r4, [pc, #144]	; (80720 <Test+0x2f0>)
   80690:	47a0      	blx	r4
}
   80692:	b004      	add	sp, #16
   80694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_set_pin_low(CMD_MOSFET);
   80698:	2020      	movs	r0, #32
   8069a:	4b22      	ldr	r3, [pc, #136]	; (80724 <Test+0x2f4>)
   8069c:	4798      	blx	r3
			gpio_set_pin_high(CMD_MOT_SERRURE);
   8069e:	2021      	movs	r0, #33	; 0x21
   806a0:	4b1d      	ldr	r3, [pc, #116]	; (80718 <Test+0x2e8>)
   806a2:	4798      	blx	r3
			break;
   806a4:	e7eb      	b.n	8067e <Test+0x24e>
			gpio_set_pin_low(CMD_MOT_SERRURE);
   806a6:	2021      	movs	r0, #33	; 0x21
   806a8:	4b1e      	ldr	r3, [pc, #120]	; (80724 <Test+0x2f4>)
   806aa:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS);
   806ac:	2022      	movs	r0, #34	; 0x22
   806ae:	4b1a      	ldr	r3, [pc, #104]	; (80718 <Test+0x2e8>)
   806b0:	4798      	blx	r3
			break;
   806b2:	e7e4      	b.n	8067e <Test+0x24e>
			gpio_set_pin_low(CMD_RELAIS);
   806b4:	2022      	movs	r0, #34	; 0x22
   806b6:	4b1b      	ldr	r3, [pc, #108]	; (80724 <Test+0x2f4>)
   806b8:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS_1);
   806ba:	2023      	movs	r0, #35	; 0x23
   806bc:	4b16      	ldr	r3, [pc, #88]	; (80718 <Test+0x2e8>)
   806be:	4798      	blx	r3
			break;
   806c0:	e7dd      	b.n	8067e <Test+0x24e>
   806c2:	bf00      	nop
   806c4:	20001a14 	.word	0x20001a14
   806c8:	00089ae4 	.word	0x00089ae4
   806cc:	00085125 	.word	0x00085125
   806d0:	00083495 	.word	0x00083495
   806d4:	00089af4 	.word	0x00089af4
   806d8:	00089b00 	.word	0x00089b00
   806dc:	0008416f 	.word	0x0008416f
   806e0:	00089b04 	.word	0x00089b04
   806e4:	0008a1b4 	.word	0x0008a1b4
   806e8:	00089b0c 	.word	0x00089b0c
   806ec:	00089b18 	.word	0x00089b18
   806f0:	00089b1c 	.word	0x00089b1c
   806f4:	00089b24 	.word	0x00089b24
   806f8:	00089b28 	.word	0x00089b28
   806fc:	00089b30 	.word	0x00089b30
   80700:	00089b34 	.word	0x00089b34
   80704:	00089b44 	.word	0x00089b44
   80708:	00089b50 	.word	0x00089b50
   8070c:	00089b60 	.word	0x00089b60
   80710:	00089ad0 	.word	0x00089ad0
   80714:	00089b08 	.word	0x00089b08
   80718:	0008418b 	.word	0x0008418b
   8071c:	00080431 	.word	0x00080431
   80720:	00083829 	.word	0x00083829
   80724:	000841a5 	.word	0x000841a5
			gpio_set_pin_low(CMD_RELAIS_1);
   80728:	2023      	movs	r0, #35	; 0x23
   8072a:	4b13      	ldr	r3, [pc, #76]	; (80778 <Test+0x348>)
   8072c:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS_2);
   8072e:	2024      	movs	r0, #36	; 0x24
   80730:	4b12      	ldr	r3, [pc, #72]	; (8077c <Test+0x34c>)
   80732:	4798      	blx	r3
			break;
   80734:	e7a3      	b.n	8067e <Test+0x24e>
			gpio_set_pin_low(CMD_MOSFET);
   80736:	2020      	movs	r0, #32
   80738:	4c0f      	ldr	r4, [pc, #60]	; (80778 <Test+0x348>)
   8073a:	47a0      	blx	r4
			gpio_set_pin_low(CMD_MOT_SERRURE);
   8073c:	2021      	movs	r0, #33	; 0x21
   8073e:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS);
   80740:	2022      	movs	r0, #34	; 0x22
   80742:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS_1);
   80744:	2023      	movs	r0, #35	; 0x23
   80746:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS_2);
   80748:	2024      	movs	r0, #36	; 0x24
   8074a:	47a0      	blx	r4
			if(*((uint16_t*)((uint8_t*)&phase+1)))
   8074c:	b127      	cbz	r7, 80758 <Test+0x328>
				if(--(*((uint16_t*)((uint8_t*)&phase+1))))
   8074e:	3f01      	subs	r7, #1
   80750:	b2bf      	uxth	r7, r7
   80752:	f8ad 700d 	strh.w	r7, [sp, #13]
   80756:	b927      	cbnz	r7, 80762 <Test+0x332>
			Putstr("\r\nTest terminated...\r\n");
   80758:	4909      	ldr	r1, [pc, #36]	; (80780 <Test+0x350>)
   8075a:	2067      	movs	r0, #103	; 0x67
   8075c:	4b09      	ldr	r3, [pc, #36]	; (80784 <Test+0x354>)
   8075e:	4798      	blx	r3
			return;
   80760:	e797      	b.n	80692 <Test+0x262>
					PushTask(Test,TEST_NEW,phase>>8,0);
   80762:	2300      	movs	r3, #0
   80764:	9300      	str	r3, [sp, #0]
   80766:	9b03      	ldr	r3, [sp, #12]
   80768:	0a1b      	lsrs	r3, r3, #8
   8076a:	2264      	movs	r2, #100	; 0x64
   8076c:	4906      	ldr	r1, [pc, #24]	; (80788 <Test+0x358>)
   8076e:	2066      	movs	r0, #102	; 0x66
   80770:	4c06      	ldr	r4, [pc, #24]	; (8078c <Test+0x35c>)
   80772:	47a0      	blx	r4
   80774:	e7f0      	b.n	80758 <Test+0x328>
   80776:	bf00      	nop
   80778:	000841a5 	.word	0x000841a5
   8077c:	0008418b 	.word	0x0008418b
   80780:	00089b70 	.word	0x00089b70
   80784:	00083495 	.word	0x00083495
   80788:	00080431 	.word	0x00080431
   8078c:	00083829 	.word	0x00083829

00080790 <stop>:
	}
	mstrtokRestore();
}

void stop(uint32_t sc, void*pParam)
{
   80790:	b510      	push	{r4, lr}
	char *pToken;
	switch(sc)
   80792:	f242 6316 	movw	r3, #9750	; 0x2616
   80796:	4298      	cmp	r0, r3
   80798:	d022      	beq.n	807e0 <stop+0x50>
   8079a:	f245 13db 	movw	r3, #20955	; 0x51db
   8079e:	4298      	cmp	r0, r3
   807a0:	d01d      	beq.n	807de <stop+0x4e>
//#else
		//gpio_set_pin_high(BUZZER_PWR);
//#endif
		break;
	default:
		pToken = mstrtok(NULL," \r\n");
   807a2:	491c      	ldr	r1, [pc, #112]	; (80814 <stop+0x84>)
   807a4:	2000      	movs	r0, #0
   807a6:	4b1c      	ldr	r3, [pc, #112]	; (80818 <stop+0x88>)
   807a8:	4798      	blx	r3
		if(pToken)
   807aa:	4604      	mov	r4, r0
   807ac:	b1a8      	cbz	r0, 807da <stop+0x4a>
		{
			switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   807ae:	4b1b      	ldr	r3, [pc, #108]	; (8081c <stop+0x8c>)
   807b0:	4798      	blx	r3
   807b2:	4601      	mov	r1, r0
   807b4:	4620      	mov	r0, r4
   807b6:	4b1a      	ldr	r3, [pc, #104]	; (80820 <stop+0x90>)
   807b8:	4798      	blx	r3
   807ba:	f242 6316 	movw	r3, #9750	; 0x2616
   807be:	4298      	cmp	r0, r3
   807c0:	d020      	beq.n	80804 <stop+0x74>
   807c2:	d912      	bls.n	807ea <stop+0x5a>
   807c4:	f243 132b 	movw	r3, #12587	; 0x312b
   807c8:	4298      	cmp	r0, r3
   807ca:	d017      	beq.n	807fc <stop+0x6c>
   807cc:	f24c 6398 	movw	r3, #50840	; 0xc698
   807d0:	4298      	cmp	r0, r3
   807d2:	d102      	bne.n	807da <stop+0x4a>
			{
			case 0xC698:	//lcd
				Lcd(LCD_DEL);
   807d4:	2065      	movs	r0, #101	; 0x65
   807d6:	4b13      	ldr	r3, [pc, #76]	; (80824 <stop+0x94>)
   807d8:	4798      	blx	r3
				break;
			default:
				break;
			}
		}
		mstrtokRestore();
   807da:	4b13      	ldr	r3, [pc, #76]	; (80828 <stop+0x98>)
   807dc:	4798      	blx	r3
   807de:	bd10      	pop	{r4, pc}
		Putstr("\r\nBuzzer off...\r\n");
   807e0:	4912      	ldr	r1, [pc, #72]	; (8082c <stop+0x9c>)
   807e2:	2067      	movs	r0, #103	; 0x67
   807e4:	4b12      	ldr	r3, [pc, #72]	; (80830 <stop+0xa0>)
   807e6:	4798      	blx	r3
		break;
   807e8:	bd10      	pop	{r4, pc}
			switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   807ea:	f240 6334 	movw	r3, #1588	; 0x634
   807ee:	4298      	cmp	r0, r3
   807f0:	d1f3      	bne.n	807da <stop+0x4a>
				LcdBacklight(false);
   807f2:	2100      	movs	r1, #0
   807f4:	2066      	movs	r0, #102	; 0x66
   807f6:	4b0b      	ldr	r3, [pc, #44]	; (80824 <stop+0x94>)
   807f8:	4798      	blx	r3
				break;
   807fa:	e7ee      	b.n	807da <stop+0x4a>
				gpio_set_pin_high(BLUETOOTH_PWR);
   807fc:	2035      	movs	r0, #53	; 0x35
   807fe:	4b0d      	ldr	r3, [pc, #52]	; (80834 <stop+0xa4>)
   80800:	4798      	blx	r3
				break;
   80802:	e7ea      	b.n	807da <stop+0x4a>
				Putstr("\r\nBuzzer off...\r\n");
   80804:	4909      	ldr	r1, [pc, #36]	; (8082c <stop+0x9c>)
   80806:	2067      	movs	r0, #103	; 0x67
   80808:	4b09      	ldr	r3, [pc, #36]	; (80830 <stop+0xa0>)
   8080a:	4798      	blx	r3
				gpio_set_pin_low(BUZZER_PWR);
   8080c:	2030      	movs	r0, #48	; 0x30
   8080e:	4b0a      	ldr	r3, [pc, #40]	; (80838 <stop+0xa8>)
   80810:	4798      	blx	r3
				break;
   80812:	e7e2      	b.n	807da <stop+0x4a>
   80814:	00089dfc 	.word	0x00089dfc
   80818:	00083aa1 	.word	0x00083aa1
   8081c:	00085171 	.word	0x00085171
   80820:	00080ea9 	.word	0x00080ea9
   80824:	00081579 	.word	0x00081579
   80828:	00083a5d 	.word	0x00083a5d
   8082c:	00089c00 	.word	0x00089c00
   80830:	00083495 	.word	0x00083495
   80834:	0008418b 	.word	0x0008418b
   80838:	000841a5 	.word	0x000841a5

0008083c <start>:
{
   8083c:	b570      	push	{r4, r5, r6, lr}
   8083e:	b090      	sub	sp, #64	; 0x40
	pToken = mstrtok(NULL," \r\n");
   80840:	4951      	ldr	r1, [pc, #324]	; (80988 <start+0x14c>)
   80842:	2000      	movs	r0, #0
   80844:	4b51      	ldr	r3, [pc, #324]	; (8098c <start+0x150>)
   80846:	4798      	blx	r3
	if(pToken)
   80848:	2800      	cmp	r0, #0
   8084a:	f000 8088 	beq.w	8095e <start+0x122>
   8084e:	4604      	mov	r4, r0
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   80850:	4b4f      	ldr	r3, [pc, #316]	; (80990 <start+0x154>)
   80852:	4798      	blx	r3
   80854:	4601      	mov	r1, r0
   80856:	4620      	mov	r0, r4
   80858:	4b4e      	ldr	r3, [pc, #312]	; (80994 <start+0x158>)
   8085a:	4798      	blx	r3
   8085c:	f243 132b 	movw	r3, #12587	; 0x312b
   80860:	4298      	cmp	r0, r3
   80862:	f000 8087 	beq.w	80974 <start+0x138>
   80866:	d850      	bhi.n	8090a <start+0xce>
   80868:	f240 6334 	movw	r3, #1588	; 0x634
   8086c:	4298      	cmp	r0, r3
   8086e:	d07a      	beq.n	80966 <start+0x12a>
   80870:	f242 6316 	movw	r3, #9750	; 0x2616
   80874:	4298      	cmp	r0, r3
   80876:	d172      	bne.n	8095e <start+0x122>
			mstrtokRestore();
   80878:	4b47      	ldr	r3, [pc, #284]	; (80998 <start+0x15c>)
   8087a:	4798      	blx	r3
			pToken = mstrtok(NULL," \r\n");
   8087c:	4942      	ldr	r1, [pc, #264]	; (80988 <start+0x14c>)
   8087e:	2000      	movs	r0, #0
   80880:	4b42      	ldr	r3, [pc, #264]	; (8098c <start+0x150>)
   80882:	4798      	blx	r3
			pParam=atoi((char*)pToken);
   80884:	4b45      	ldr	r3, [pc, #276]	; (8099c <start+0x160>)
   80886:	4798      	blx	r3
			if(pParam)
   80888:	4606      	mov	r6, r0
   8088a:	2800      	cmp	r0, #0
   8088c:	d067      	beq.n	8095e <start+0x122>
				Putstr("\r\nBuzzer on for ");
   8088e:	4944      	ldr	r1, [pc, #272]	; (809a0 <start+0x164>)
   80890:	2067      	movs	r0, #103	; 0x67
   80892:	4c44      	ldr	r4, [pc, #272]	; (809a4 <start+0x168>)
   80894:	47a0      	blx	r4
				sprintf(buf,"%d ms...\r\n",(int)pParam);
   80896:	4d44      	ldr	r5, [pc, #272]	; (809a8 <start+0x16c>)
   80898:	4632      	mov	r2, r6
   8089a:	4944      	ldr	r1, [pc, #272]	; (809ac <start+0x170>)
   8089c:	4628      	mov	r0, r5
   8089e:	4b44      	ldr	r3, [pc, #272]	; (809b0 <start+0x174>)
   808a0:	4798      	blx	r3
				Putstr(buf);
   808a2:	4629      	mov	r1, r5
   808a4:	2067      	movs	r0, #103	; 0x67
   808a6:	47a0      	blx	r4
				gpio_configure_pin(BUZZER_PWR,BUZZER_FLAGS);
   808a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   808ac:	2030      	movs	r0, #48	; 0x30
   808ae:	4b41      	ldr	r3, [pc, #260]	; (809b4 <start+0x178>)
   808b0:	4798      	blx	r3
					const pwm_clock_t clockSetting ={
   808b2:	4b41      	ldr	r3, [pc, #260]	; (809b8 <start+0x17c>)
   808b4:	ad03      	add	r5, sp, #12
   808b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   808ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
					pmc_enable_periph_clk(ID_PWM);
   808be:	2019      	movs	r0, #25
   808c0:	4b3e      	ldr	r3, [pc, #248]	; (809bc <start+0x180>)
   808c2:	4798      	blx	r3
					pwm_channel_disable(PWM,PWM_CHANNEL_3);
   808c4:	4c3e      	ldr	r4, [pc, #248]	; (809c0 <start+0x184>)
   808c6:	2103      	movs	r1, #3
   808c8:	4620      	mov	r0, r4
   808ca:	4b3e      	ldr	r3, [pc, #248]	; (809c4 <start+0x188>)
   808cc:	4798      	blx	r3
					pwm_init(PWM,(pwm_clock_t*)&clockSetting);
   808ce:	4629      	mov	r1, r5
   808d0:	4620      	mov	r0, r4
   808d2:	4b3d      	ldr	r3, [pc, #244]	; (809c8 <start+0x18c>)
   808d4:	4798      	blx	r3
					pwmChannelInstance.ul_prescaler=PWM_CMR_CPRE_CLKB;
   808d6:	230c      	movs	r3, #12
   808d8:	9307      	str	r3, [sp, #28]
					pwmChannelInstance.ul_period=100;
   808da:	2364      	movs	r3, #100	; 0x64
   808dc:	930a      	str	r3, [sp, #40]	; 0x28
					pwmChannelInstance.ul_duty=50;
   808de:	2332      	movs	r3, #50	; 0x32
   808e0:	9309      	str	r3, [sp, #36]	; 0x24
					pwmChannelInstance.channel=PWM_CHANNEL_3;
   808e2:	2503      	movs	r5, #3
   808e4:	a910      	add	r1, sp, #64	; 0x40
   808e6:	f841 5d28 	str.w	r5, [r1, #-40]!
					pwm_channel_init(PWM,&pwmChannelInstance);
   808ea:	4620      	mov	r0, r4
   808ec:	4b37      	ldr	r3, [pc, #220]	; (809cc <start+0x190>)
   808ee:	4798      	blx	r3
					pwm_channel_enable(PWM,PWM_CHANNEL_3);
   808f0:	4629      	mov	r1, r5
   808f2:	4620      	mov	r0, r4
   808f4:	4b36      	ldr	r3, [pc, #216]	; (809d0 <start+0x194>)
   808f6:	4798      	blx	r3
				PushTask(stop,0x2616,0,(uint32_t)pParam);
   808f8:	9600      	str	r6, [sp, #0]
   808fa:	2300      	movs	r3, #0
   808fc:	f242 6216 	movw	r2, #9750	; 0x2616
   80900:	4934      	ldr	r1, [pc, #208]	; (809d4 <start+0x198>)
   80902:	2066      	movs	r0, #102	; 0x66
   80904:	4c34      	ldr	r4, [pc, #208]	; (809d8 <start+0x19c>)
   80906:	47a0      	blx	r4
   80908:	e029      	b.n	8095e <start+0x122>
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   8090a:	f24c 6398 	movw	r3, #50840	; 0xc698
   8090e:	4298      	cmp	r0, r3
   80910:	d020      	beq.n	80954 <start+0x118>
   80912:	f64d 432e 	movw	r3, #56366	; 0xdc2e
   80916:	4298      	cmp	r0, r3
   80918:	d121      	bne.n	8095e <start+0x122>
			mstrtokRestore();
   8091a:	4b1f      	ldr	r3, [pc, #124]	; (80998 <start+0x15c>)
   8091c:	4798      	blx	r3
			pToken = mstrtok(NULL," \r\n");
   8091e:	491a      	ldr	r1, [pc, #104]	; (80988 <start+0x14c>)
   80920:	2000      	movs	r0, #0
   80922:	4b1a      	ldr	r3, [pc, #104]	; (8098c <start+0x150>)
   80924:	4798      	blx	r3
			if(pToken)
   80926:	b318      	cbz	r0, 80970 <start+0x134>
				 sc=atoi((char*)pToken);
   80928:	4b1c      	ldr	r3, [pc, #112]	; (8099c <start+0x160>)
   8092a:	4798      	blx	r3
   8092c:	4604      	mov	r4, r0
				 sprintf(buf,"\r\nNbTest: %d\r\n",(int)sc);
   8092e:	4d1e      	ldr	r5, [pc, #120]	; (809a8 <start+0x16c>)
   80930:	4602      	mov	r2, r0
   80932:	492a      	ldr	r1, [pc, #168]	; (809dc <start+0x1a0>)
   80934:	4628      	mov	r0, r5
   80936:	4b1e      	ldr	r3, [pc, #120]	; (809b0 <start+0x174>)
   80938:	4798      	blx	r3
				 Putstr(buf);
   8093a:	4629      	mov	r1, r5
   8093c:	2067      	movs	r0, #103	; 0x67
   8093e:	4b19      	ldr	r3, [pc, #100]	; (809a4 <start+0x168>)
   80940:	4798      	blx	r3
			PushTask(Test,TEST_NEW,sc,0);
   80942:	2300      	movs	r3, #0
   80944:	9300      	str	r3, [sp, #0]
   80946:	4623      	mov	r3, r4
   80948:	2264      	movs	r2, #100	; 0x64
   8094a:	4925      	ldr	r1, [pc, #148]	; (809e0 <start+0x1a4>)
   8094c:	2066      	movs	r0, #102	; 0x66
   8094e:	4c22      	ldr	r4, [pc, #136]	; (809d8 <start+0x19c>)
   80950:	47a0      	blx	r4
			break;
   80952:	e004      	b.n	8095e <start+0x122>
			Lcd(LCD_DEL);
   80954:	2065      	movs	r0, #101	; 0x65
   80956:	4c23      	ldr	r4, [pc, #140]	; (809e4 <start+0x1a8>)
   80958:	47a0      	blx	r4
			Lcd(LCD_NEW);
   8095a:	2064      	movs	r0, #100	; 0x64
   8095c:	47a0      	blx	r4
	mstrtokRestore();
   8095e:	4b0e      	ldr	r3, [pc, #56]	; (80998 <start+0x15c>)
   80960:	4798      	blx	r3
}
   80962:	b010      	add	sp, #64	; 0x40
   80964:	bd70      	pop	{r4, r5, r6, pc}
			LcdBacklight(true);
   80966:	2101      	movs	r1, #1
   80968:	2066      	movs	r0, #102	; 0x66
   8096a:	4b1e      	ldr	r3, [pc, #120]	; (809e4 <start+0x1a8>)
   8096c:	4798      	blx	r3
			break;
   8096e:	e7f6      	b.n	8095e <start+0x122>
				sc=1;
   80970:	2401      	movs	r4, #1
   80972:	e7e6      	b.n	80942 <start+0x106>
			gpio_configure_pin(BLUETOOTH_PWR,BLUETOOTH_FLAGS);
   80974:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80978:	2035      	movs	r0, #53	; 0x35
   8097a:	4b0e      	ldr	r3, [pc, #56]	; (809b4 <start+0x178>)
   8097c:	4798      	blx	r3
			gpio_set_pin_low(BLUETOOTH_PWR);
   8097e:	2035      	movs	r0, #53	; 0x35
   80980:	4b19      	ldr	r3, [pc, #100]	; (809e8 <start+0x1ac>)
   80982:	4798      	blx	r3
			break;
   80984:	e7eb      	b.n	8095e <start+0x122>
   80986:	bf00      	nop
   80988:	00089dfc 	.word	0x00089dfc
   8098c:	00083aa1 	.word	0x00083aa1
   80990:	00085171 	.word	0x00085171
   80994:	00080ea9 	.word	0x00080ea9
   80998:	00083a5d 	.word	0x00083a5d
   8099c:	00085031 	.word	0x00085031
   809a0:	00089be0 	.word	0x00089be0
   809a4:	00083495 	.word	0x00083495
   809a8:	20001a14 	.word	0x20001a14
   809ac:	00089bf4 	.word	0x00089bf4
   809b0:	00085125 	.word	0x00085125
   809b4:	000841e1 	.word	0x000841e1
   809b8:	00089ac4 	.word	0x00089ac4
   809bc:	000843e1 	.word	0x000843e1
   809c0:	4008c000 	.word	0x4008c000
   809c4:	0008459d 	.word	0x0008459d
   809c8:	00084469 	.word	0x00084469
   809cc:	000844ad 	.word	0x000844ad
   809d0:	00084593 	.word	0x00084593
   809d4:	00080791 	.word	0x00080791
   809d8:	00083829 	.word	0x00083829
   809dc:	00089bd0 	.word	0x00089bd0
   809e0:	00080431 	.word	0x00080431
   809e4:	00081579 	.word	0x00081579
   809e8:	000841a5 	.word	0x000841a5

000809ec <send>:
	};
}t_RTC_TIMR;


void send(uint32_t sc, void*pParam)
{
   809ec:	b510      	push	{r4, lr}
   809ee:	b082      	sub	sp, #8
	char *pToken;
	pToken = mstrtok(NULL," \r\n");
   809f0:	4942      	ldr	r1, [pc, #264]	; (80afc <send+0x110>)
   809f2:	2000      	movs	r0, #0
   809f4:	4b42      	ldr	r3, [pc, #264]	; (80b00 <send+0x114>)
   809f6:	4798      	blx	r3
	if(pToken)
   809f8:	b338      	cbz	r0, 80a4a <send+0x5e>
   809fa:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   809fc:	4b41      	ldr	r3, [pc, #260]	; (80b04 <send+0x118>)
   809fe:	4798      	blx	r3
   80a00:	4601      	mov	r1, r0
   80a02:	4620      	mov	r0, r4
   80a04:	4b40      	ldr	r3, [pc, #256]	; (80b08 <send+0x11c>)
   80a06:	4798      	blx	r3
   80a08:	f24b 3340 	movw	r3, #45888	; 0xb340
   80a0c:	4298      	cmp	r0, r3
   80a0e:	d11c      	bne.n	80a4a <send+0x5e>
		{
		case 0xB340:		//synchro
			Putstr("\r\n\tBroadcast synchronization token\r\n");
   80a10:	493e      	ldr	r1, [pc, #248]	; (80b0c <send+0x120>)
   80a12:	2067      	movs	r0, #103	; 0x67
   80a14:	4b3e      	ldr	r3, [pc, #248]	; (80b10 <send+0x124>)
   80a16:	4798      	blx	r3
			registerValue[0]=RTC->RTC_TIMR;
   80a18:	4b3e      	ldr	r3, [pc, #248]	; (80b14 <send+0x128>)
   80a1a:	689b      	ldr	r3, [r3, #8]
   80a1c:	4a3e      	ldr	r2, [pc, #248]	; (80b18 <send+0x12c>)
   80a1e:	6013      	str	r3, [r2, #0]
			if((((t_RTC_TIMR*)&registerValue[0])->SEC_QL+=2)>9)
   80a20:	3302      	adds	r3, #2
   80a22:	f003 030f 	and.w	r3, r3, #15
   80a26:	2b09      	cmp	r3, #9
   80a28:	dc13      	bgt.n	80a52 <send+0x66>
   80a2a:	7811      	ldrb	r1, [r2, #0]
   80a2c:	f363 0103 	bfi	r1, r3, #0, #4
   80a30:	7011      	strb	r1, [r2, #0]
							}
						}
					}
				}
			}
			registerValue[1]=RTC->RTC_CALR;
   80a32:	4b38      	ldr	r3, [pc, #224]	; (80b14 <send+0x128>)
   80a34:	68da      	ldr	r2, [r3, #12]
   80a36:	4b38      	ldr	r3, [pc, #224]	; (80b18 <send+0x12c>)
   80a38:	605a      	str	r2, [r3, #4]
			WriteMultipleRegisters(MODBUS_BROADCAST_ADDRESS,0x1000,4,registerValue); 
   80a3a:	9300      	str	r3, [sp, #0]
   80a3c:	2304      	movs	r3, #4
   80a3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80a42:	217f      	movs	r1, #127	; 0x7f
   80a44:	2066      	movs	r0, #102	; 0x66
   80a46:	4c35      	ldr	r4, [pc, #212]	; (80b1c <send+0x130>)
   80a48:	47a0      	blx	r4
				break;
		default:
			break;
		}
	}
	mstrtokRestore();
   80a4a:	4b35      	ldr	r3, [pc, #212]	; (80b20 <send+0x134>)
   80a4c:	4798      	blx	r3
}
   80a4e:	b002      	add	sp, #8
   80a50:	bd10      	pop	{r4, pc}
				((t_RTC_TIMR*)&registerValue[0])->SEC_QL=0;
   80a52:	4a31      	ldr	r2, [pc, #196]	; (80b18 <send+0x12c>)
   80a54:	7813      	ldrb	r3, [r2, #0]
   80a56:	f36f 0303 	bfc	r3, #0, #4
   80a5a:	7013      	strb	r3, [r2, #0]
				if((((t_RTC_TIMR*)&registerValue[0])->SEC_QH++)>5)
   80a5c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   80a60:	2b05      	cmp	r3, #5
   80a62:	dc05      	bgt.n	80a70 <send+0x84>
   80a64:	3301      	adds	r3, #1
   80a66:	7811      	ldrb	r1, [r2, #0]
   80a68:	f363 1106 	bfi	r1, r3, #4, #3
   80a6c:	7011      	strb	r1, [r2, #0]
   80a6e:	e7e0      	b.n	80a32 <send+0x46>
					((t_RTC_TIMR*)&registerValue[0])->SEC_QH=0;
   80a70:	4b29      	ldr	r3, [pc, #164]	; (80b18 <send+0x12c>)
   80a72:	781a      	ldrb	r2, [r3, #0]
   80a74:	f36f 1206 	bfc	r2, #4, #3
   80a78:	701a      	strb	r2, [r3, #0]
					if((((t_RTC_TIMR*)&registerValue[0])->MIN_QL++)>9)
   80a7a:	785b      	ldrb	r3, [r3, #1]
   80a7c:	f003 030f 	and.w	r3, r3, #15
   80a80:	2b09      	cmp	r3, #9
   80a82:	dc06      	bgt.n	80a92 <send+0xa6>
   80a84:	4a24      	ldr	r2, [pc, #144]	; (80b18 <send+0x12c>)
   80a86:	3301      	adds	r3, #1
   80a88:	7851      	ldrb	r1, [r2, #1]
   80a8a:	f363 0103 	bfi	r1, r3, #0, #4
   80a8e:	7051      	strb	r1, [r2, #1]
   80a90:	e7cf      	b.n	80a32 <send+0x46>
						((t_RTC_TIMR*)&registerValue[0])->MIN_QL=0;
   80a92:	4a21      	ldr	r2, [pc, #132]	; (80b18 <send+0x12c>)
   80a94:	7853      	ldrb	r3, [r2, #1]
   80a96:	f36f 0303 	bfc	r3, #0, #4
   80a9a:	7053      	strb	r3, [r2, #1]
						if((((t_RTC_TIMR*)&registerValue[0])->MIN_QH++)>5)
   80a9c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   80aa0:	2b05      	cmp	r3, #5
   80aa2:	dc05      	bgt.n	80ab0 <send+0xc4>
   80aa4:	3301      	adds	r3, #1
   80aa6:	7851      	ldrb	r1, [r2, #1]
   80aa8:	f363 1106 	bfi	r1, r3, #4, #3
   80aac:	7051      	strb	r1, [r2, #1]
   80aae:	e7c0      	b.n	80a32 <send+0x46>
							((t_RTC_TIMR*)&registerValue[0])->MIN_QH=0;
   80ab0:	4b19      	ldr	r3, [pc, #100]	; (80b18 <send+0x12c>)
   80ab2:	785a      	ldrb	r2, [r3, #1]
   80ab4:	f36f 1206 	bfc	r2, #4, #3
   80ab8:	705a      	strb	r2, [r3, #1]
							if((((t_RTC_TIMR*)&registerValue[0])->HOUR_QL++)>9)
   80aba:	789b      	ldrb	r3, [r3, #2]
   80abc:	f003 030f 	and.w	r3, r3, #15
   80ac0:	2b09      	cmp	r3, #9
   80ac2:	dc06      	bgt.n	80ad2 <send+0xe6>
   80ac4:	4a14      	ldr	r2, [pc, #80]	; (80b18 <send+0x12c>)
   80ac6:	3301      	adds	r3, #1
   80ac8:	7891      	ldrb	r1, [r2, #2]
   80aca:	f363 0103 	bfi	r1, r3, #0, #4
   80ace:	7091      	strb	r1, [r2, #2]
   80ad0:	e7af      	b.n	80a32 <send+0x46>
								((t_RTC_TIMR*)&registerValue[0])->HOUR_QL=0;
   80ad2:	4a11      	ldr	r2, [pc, #68]	; (80b18 <send+0x12c>)
   80ad4:	7893      	ldrb	r3, [r2, #2]
   80ad6:	f36f 0303 	bfc	r3, #0, #4
   80ada:	7093      	strb	r3, [r2, #2]
								if((((t_RTC_TIMR*)&registerValue[0])->HOUR_QH++)>2)
   80adc:	f3c3 1301 	ubfx	r3, r3, #4, #2
   80ae0:	2b02      	cmp	r3, #2
   80ae2:	dc05      	bgt.n	80af0 <send+0x104>
   80ae4:	3301      	adds	r3, #1
   80ae6:	7891      	ldrb	r1, [r2, #2]
   80ae8:	f363 1105 	bfi	r1, r3, #4, #2
   80aec:	7091      	strb	r1, [r2, #2]
   80aee:	e7a0      	b.n	80a32 <send+0x46>
									((t_RTC_TIMR*)&registerValue[0])->HOUR_QH=0;
   80af0:	4b09      	ldr	r3, [pc, #36]	; (80b18 <send+0x12c>)
   80af2:	789a      	ldrb	r2, [r3, #2]
   80af4:	f36f 1205 	bfc	r2, #4, #2
   80af8:	709a      	strb	r2, [r3, #2]
   80afa:	e79a      	b.n	80a32 <send+0x46>
   80afc:	00089dfc 	.word	0x00089dfc
   80b00:	00083aa1 	.word	0x00083aa1
   80b04:	00085171 	.word	0x00085171
   80b08:	00080ea9 	.word	0x00080ea9
   80b0c:	00089ba8 	.word	0x00089ba8
   80b10:	00083495 	.word	0x00083495
   80b14:	400e1260 	.word	0x400e1260
   80b18:	200011bc 	.word	0x200011bc
   80b1c:	000819d1 	.word	0x000819d1
   80b20:	00083a5d 	.word	0x00083a5d

00080b24 <ComRS485>:

#define _rs485_Flush()					ComRS485(_COMRS485_FLUSH)


uint32_t ComRS485(uint32_t sc, ...)
{
   80b24:	b40f      	push	{r0, r1, r2, r3}
   80b26:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b28:	b083      	sub	sp, #12
	switch(sc)
   80b2a:	9908      	ldr	r1, [sp, #32]
   80b2c:	2964      	cmp	r1, #100	; 0x64
   80b2e:	d016      	beq.n	80b5e <ComRS485+0x3a>
   80b30:	d80e      	bhi.n	80b50 <ComRS485+0x2c>
   80b32:	2901      	cmp	r1, #1
   80b34:	d07b      	beq.n	80c2e <ComRS485+0x10a>
   80b36:	2902      	cmp	r1, #2
   80b38:	f040 80fb 	bne.w	80d32 <ComRS485+0x20e>
		_MODBUS_SLAVE_NOT_ACK,
		_MODBUS_PROCESS_ACK_FRAME
	};

	case _COMRS485_FLUSH:
		comRS485.pRead=comRS485.pWrite=comRS485TxRxBuf;
   80b3c:	4b80      	ldr	r3, [pc, #512]	; (80d40 <ComRS485+0x21c>)
   80b3e:	4a81      	ldr	r2, [pc, #516]	; (80d44 <ComRS485+0x220>)
   80b40:	601a      	str	r2, [r3, #0]
   80b42:	605a      	str	r2, [r3, #4]
		comRS485.crcA=0xFFFF;
   80b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80b48:	811a      	strh	r2, [r3, #8]
		comRS485.nChar=0;
   80b4a:	2000      	movs	r0, #0
   80b4c:	8298      	strh	r0, [r3, #20]
		break;
   80b4e:	e03c      	b.n	80bca <ComRS485+0xa6>
	switch(sc)
   80b50:	2966      	cmp	r1, #102	; 0x66
   80b52:	d03f      	beq.n	80bd4 <ComRS485+0xb0>
   80b54:	2967      	cmp	r1, #103	; 0x67
   80b56:	f040 80ec 	bne.w	80d32 <ComRS485+0x20e>
		return comRS485TxRxBuf;
   80b5a:	487a      	ldr	r0, [pc, #488]	; (80d44 <ComRS485+0x220>)
   80b5c:	e035      	b.n	80bca <ComRS485+0xa6>
		comRS485.state = IDLE;
   80b5e:	4d78      	ldr	r5, [pc, #480]	; (80d40 <ComRS485+0x21c>)
   80b60:	2701      	movs	r7, #1
   80b62:	74af      	strb	r7, [r5, #18]
		_rs485_Flush();
   80b64:	2002      	movs	r0, #2
   80b66:	f7ff ffdd 	bl	80b24 <ComRS485>
		comRS485.timer = 0;
   80b6a:	2400      	movs	r4, #0
   80b6c:	822c      	strh	r4, [r5, #16]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80b6e:	200d      	movs	r0, #13
   80b70:	4b75      	ldr	r3, [pc, #468]	; (80d48 <ComRS485+0x224>)
   80b72:	4798      	blx	r3
		usart_init_rs485(COMRS485_USART, &usart_console_settings, sysclk_get_cpu_hz());
   80b74:	4d75      	ldr	r5, [pc, #468]	; (80d4c <ComRS485+0x228>)
   80b76:	4a76      	ldr	r2, [pc, #472]	; (80d50 <ComRS485+0x22c>)
   80b78:	4976      	ldr	r1, [pc, #472]	; (80d54 <ComRS485+0x230>)
   80b7a:	4628      	mov	r0, r5
   80b7c:	4b76      	ldr	r3, [pc, #472]	; (80d58 <ComRS485+0x234>)
   80b7e:	4798      	blx	r3
		gpio_configure_pin(COMRS485_TX,		COMRS485_TX_FLAGS);
   80b80:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b84:	2012      	movs	r0, #18
   80b86:	4e75      	ldr	r6, [pc, #468]	; (80d5c <ComRS485+0x238>)
   80b88:	47b0      	blx	r6
		gpio_configure_pin(COMRS485_RX,		COMRS485_RX_FLAGS);
   80b8a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b8e:	2013      	movs	r0, #19
   80b90:	47b0      	blx	r6
		gpio_configure_pin(COMRS485_TXEN,	COMRS485_TXEN_FLAGS);
   80b92:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b96:	2027      	movs	r0, #39	; 0x27
   80b98:	47b0      	blx	r6
		usart_disable_interrupt(COMRS485_USART,0xFFFFFFFF);
   80b9a:	f04f 31ff 	mov.w	r1, #4294967295
   80b9e:	4628      	mov	r0, r5
   80ba0:	4b6f      	ldr	r3, [pc, #444]	; (80d60 <ComRS485+0x23c>)
   80ba2:	4798      	blx	r3
		usart_enable_interrupt(COMRS485_USART, US_IER_RXRDY);
   80ba4:	4639      	mov	r1, r7
   80ba6:	4628      	mov	r0, r5
   80ba8:	4b6e      	ldr	r3, [pc, #440]	; (80d64 <ComRS485+0x240>)
   80baa:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80bb0:	4b6d      	ldr	r3, [pc, #436]	; (80d68 <ComRS485+0x244>)
   80bb2:	601a      	str	r2, [r3, #0]
		usart_enable_tx(COMRS485_USART);
   80bb4:	4628      	mov	r0, r5
   80bb6:	4b6d      	ldr	r3, [pc, #436]	; (80d6c <ComRS485+0x248>)
   80bb8:	4798      	blx	r3
		usart_enable_rx(COMRS485_USART);
   80bba:	4628      	mov	r0, r5
   80bbc:	4b6c      	ldr	r3, [pc, #432]	; (80d70 <ComRS485+0x24c>)
   80bbe:	4798      	blx	r3
		Putstr("\r\n\tCOMRS485_NEW:\r\n");
   80bc0:	496c      	ldr	r1, [pc, #432]	; (80d74 <ComRS485+0x250>)
   80bc2:	2067      	movs	r0, #103	; 0x67
   80bc4:	4b6c      	ldr	r3, [pc, #432]	; (80d78 <ComRS485+0x254>)
   80bc6:	4798      	blx	r3
	default:
		Error(ERROR_COMRS485_SWITCH_BAD_SC, sc);
	}


	return 0;
   80bc8:	4620      	mov	r0, r4
}
   80bca:	b003      	add	sp, #12
   80bcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   80bd0:	b004      	add	sp, #16
   80bd2:	4770      	bx	lr
		sprintf(buf, "\r\nRS485 NEED ACK: %d\r\n", _needAck);
   80bd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   80bd6:	4c69      	ldr	r4, [pc, #420]	; (80d7c <ComRS485+0x258>)
   80bd8:	4632      	mov	r2, r6
   80bda:	4969      	ldr	r1, [pc, #420]	; (80d80 <ComRS485+0x25c>)
   80bdc:	4620      	mov	r0, r4
   80bde:	4b69      	ldr	r3, [pc, #420]	; (80d84 <ComRS485+0x260>)
   80be0:	4798      	blx	r3
		Putstr(buf);
   80be2:	4621      	mov	r1, r4
   80be4:	2067      	movs	r0, #103	; 0x67
   80be6:	4c64      	ldr	r4, [pc, #400]	; (80d78 <ComRS485+0x254>)
   80be8:	47a0      	blx	r4
		Putstr("\r\n========================================================\r\n");
   80bea:	4f67      	ldr	r7, [pc, #412]	; (80d88 <ComRS485+0x264>)
   80bec:	4639      	mov	r1, r7
   80bee:	2067      	movs	r0, #103	; 0x67
   80bf0:	47a0      	blx	r4
		Puthexacode(comRS485TxRxBuf,_frameLen);
   80bf2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   80bf4:	462a      	mov	r2, r5
   80bf6:	4953      	ldr	r1, [pc, #332]	; (80d44 <ComRS485+0x220>)
   80bf8:	2069      	movs	r0, #105	; 0x69
   80bfa:	47a0      	blx	r4
		Putstr("\r\n========================================================\r\n");	
   80bfc:	4639      	mov	r1, r7
   80bfe:	2067      	movs	r0, #103	; 0x67
   80c00:	47a0      	blx	r4
		_rs485_Flush();
   80c02:	2002      	movs	r0, #2
   80c04:	f7ff ff8e 	bl	80b24 <ComRS485>
		if(_needAck)
   80c08:	b13e      	cbz	r6, 80c1a <ComRS485+0xf6>
			comRS485.frameLen = _frameLen;
   80c0a:	4b4d      	ldr	r3, [pc, #308]	; (80d40 <ComRS485+0x21c>)
   80c0c:	831d      	strh	r5, [r3, #24]
			comRS485.nbTries = COMRS485_NB_TRIES;
   80c0e:	2203      	movs	r2, #3
   80c10:	759a      	strb	r2, [r3, #22]
			comRS485.state=	M_WAIT_ACK;
   80c12:	749a      	strb	r2, [r3, #18]
			comRS485.timer= COMRS485_TX_TRY_TIMEOUT_VAL;
   80c14:	f640 32b8 	movw	r2, #3000	; 0xbb8
   80c18:	821a      	strh	r2, [r3, #16]
		comRS485.pWrite=comRS485TxRxBuf + _frameLen;
   80c1a:	4a4a      	ldr	r2, [pc, #296]	; (80d44 <ComRS485+0x220>)
   80c1c:	442a      	add	r2, r5
   80c1e:	4b48      	ldr	r3, [pc, #288]	; (80d40 <ComRS485+0x21c>)
   80c20:	601a      	str	r2, [r3, #0]
		usart_enable_interrupt(COMRS485_USART,US_IER_TXRDY);
   80c22:	2102      	movs	r1, #2
   80c24:	4849      	ldr	r0, [pc, #292]	; (80d4c <ComRS485+0x228>)
   80c26:	4b4f      	ldr	r3, [pc, #316]	; (80d64 <ComRS485+0x240>)
   80c28:	4798      	blx	r3
	return 0;
   80c2a:	2000      	movs	r0, #0
		break;
   80c2c:	e7cd      	b.n	80bca <ComRS485+0xa6>
		if(comRS485.timer)
   80c2e:	4b44      	ldr	r3, [pc, #272]	; (80d40 <ComRS485+0x21c>)
   80c30:	8a1b      	ldrh	r3, [r3, #16]
   80c32:	2b00      	cmp	r3, #0
   80c34:	f000 8082 	beq.w	80d3c <ComRS485+0x218>
			if(--comRS485.timer==0)
   80c38:	3b01      	subs	r3, #1
   80c3a:	b29b      	uxth	r3, r3
   80c3c:	4a40      	ldr	r2, [pc, #256]	; (80d40 <ComRS485+0x21c>)
   80c3e:	8213      	strh	r3, [r2, #16]
   80c40:	b10b      	cbz	r3, 80c46 <ComRS485+0x122>
	return 0;
   80c42:	2000      	movs	r0, #0
   80c44:	e7c1      	b.n	80bca <ComRS485+0xa6>
				Putstr("\r\n=======================FRAME RECEIVED=================================\r\n");
   80c46:	4951      	ldr	r1, [pc, #324]	; (80d8c <ComRS485+0x268>)
   80c48:	2067      	movs	r0, #103	; 0x67
   80c4a:	4d4b      	ldr	r5, [pc, #300]	; (80d78 <ComRS485+0x254>)
   80c4c:	47a8      	blx	r5
				Puthexacode(comRS485TxRxBuf,comRS485.nChar);
   80c4e:	4c3c      	ldr	r4, [pc, #240]	; (80d40 <ComRS485+0x21c>)
   80c50:	8aa2      	ldrh	r2, [r4, #20]
   80c52:	493c      	ldr	r1, [pc, #240]	; (80d44 <ComRS485+0x220>)
   80c54:	2069      	movs	r0, #105	; 0x69
   80c56:	47a8      	blx	r5
				sprintf(buf,"\trecCrc:%04X crcC:%04X ",comRS485.recCrc,comRS485.crcC);
   80c58:	4e48      	ldr	r6, [pc, #288]	; (80d7c <ComRS485+0x258>)
   80c5a:	89a3      	ldrh	r3, [r4, #12]
   80c5c:	89e2      	ldrh	r2, [r4, #14]
   80c5e:	494c      	ldr	r1, [pc, #304]	; (80d90 <ComRS485+0x26c>)
   80c60:	4630      	mov	r0, r6
   80c62:	4f48      	ldr	r7, [pc, #288]	; (80d84 <ComRS485+0x260>)
   80c64:	47b8      	blx	r7
				Putstr(buf);
   80c66:	4631      	mov	r1, r6
   80c68:	2067      	movs	r0, #103	; 0x67
   80c6a:	47a8      	blx	r5
				Putstr("\r\n======================================================================\r\n");
   80c6c:	4949      	ldr	r1, [pc, #292]	; (80d94 <ComRS485+0x270>)
   80c6e:	2067      	movs	r0, #103	; 0x67
   80c70:	47a8      	blx	r5
				switch(comRS485.state)
   80c72:	7ca3      	ldrb	r3, [r4, #18]
   80c74:	2b04      	cmp	r3, #4
   80c76:	d00b      	beq.n	80c90 <ComRS485+0x16c>
   80c78:	2b07      	cmp	r3, #7
   80c7a:	d009      	beq.n	80c90 <ComRS485+0x16c>
   80c7c:	2b03      	cmp	r3, #3
   80c7e:	d021      	beq.n	80cc4 <ComRS485+0x1a0>
					comRS485.state = IDLE;
   80c80:	2201      	movs	r2, #1
   80c82:	4b2f      	ldr	r3, [pc, #188]	; (80d40 <ComRS485+0x21c>)
   80c84:	749a      	strb	r2, [r3, #18]
					_rs485_Flush();
   80c86:	2002      	movs	r0, #2
   80c88:	f7ff ff4c 	bl	80b24 <ComRS485>
	return 0;
   80c8c:	2000      	movs	r0, #0
					break;
   80c8e:	e79c      	b.n	80bca <ComRS485+0xa6>
					if(comRS485.recCrc==comRS485.crcC)
   80c90:	4b2b      	ldr	r3, [pc, #172]	; (80d40 <ComRS485+0x21c>)
   80c92:	89da      	ldrh	r2, [r3, #14]
   80c94:	899b      	ldrh	r3, [r3, #12]
   80c96:	429a      	cmp	r2, r3
   80c98:	d007      	beq.n	80caa <ComRS485+0x186>
						comRS485.state = IDLE;
   80c9a:	2201      	movs	r2, #1
   80c9c:	4b28      	ldr	r3, [pc, #160]	; (80d40 <ComRS485+0x21c>)
   80c9e:	749a      	strb	r2, [r3, #18]
						_rs485_Flush();
   80ca0:	2002      	movs	r0, #2
   80ca2:	f7ff ff3f 	bl	80b24 <ComRS485>
	return 0;
   80ca6:	2000      	movs	r0, #0
   80ca8:	e78f      	b.n	80bca <ComRS485+0xa6>
						PushTask(Modbus,_MODBUS_PROCESS_RECEIVED_FRAME,0,0);
   80caa:	2400      	movs	r4, #0
   80cac:	9400      	str	r4, [sp, #0]
   80cae:	4623      	mov	r3, r4
   80cb0:	2201      	movs	r2, #1
   80cb2:	4939      	ldr	r1, [pc, #228]	; (80d98 <ComRS485+0x274>)
   80cb4:	2066      	movs	r0, #102	; 0x66
   80cb6:	4d39      	ldr	r5, [pc, #228]	; (80d9c <ComRS485+0x278>)
   80cb8:	47a8      	blx	r5
						_rs485_Flush();
   80cba:	2002      	movs	r0, #2
   80cbc:	f7ff ff32 	bl	80b24 <ComRS485>
	return 0;
   80cc0:	4620      	mov	r0, r4
   80cc2:	e782      	b.n	80bca <ComRS485+0xa6>
					if(--comRS485.nbTries)
   80cc4:	4a1e      	ldr	r2, [pc, #120]	; (80d40 <ComRS485+0x21c>)
   80cc6:	7d93      	ldrb	r3, [r2, #22]
   80cc8:	3b01      	subs	r3, #1
   80cca:	b2db      	uxtb	r3, r3
   80ccc:	7593      	strb	r3, [r2, #22]
   80cce:	b193      	cbz	r3, 80cf6 <ComRS485+0x1d2>
						Putstr("\r\nm_WAIT_ACK\r\n");
   80cd0:	4933      	ldr	r1, [pc, #204]	; (80da0 <ComRS485+0x27c>)
   80cd2:	2067      	movs	r0, #103	; 0x67
   80cd4:	4b28      	ldr	r3, [pc, #160]	; (80d78 <ComRS485+0x254>)
   80cd6:	4798      	blx	r3
						comRS485.pRead = comRS485TxRxBuf;
   80cd8:	4b19      	ldr	r3, [pc, #100]	; (80d40 <ComRS485+0x21c>)
   80cda:	4a1a      	ldr	r2, [pc, #104]	; (80d44 <ComRS485+0x220>)
   80cdc:	605a      	str	r2, [r3, #4]
						comRS485.pWrite=comRS485TxRxBuf + comRS485.frameLen;
   80cde:	8b19      	ldrh	r1, [r3, #24]
   80ce0:	440a      	add	r2, r1
   80ce2:	601a      	str	r2, [r3, #0]
						comRS485.timer=COMRS485_TX_TRY_TIMEOUT_VAL;
   80ce4:	f640 32b8 	movw	r2, #3000	; 0xbb8
   80ce8:	821a      	strh	r2, [r3, #16]
						usart_enable_interrupt(COMRS485_USART,US_IER_TXRDY);
   80cea:	2102      	movs	r1, #2
   80cec:	4817      	ldr	r0, [pc, #92]	; (80d4c <ComRS485+0x228>)
   80cee:	4b1d      	ldr	r3, [pc, #116]	; (80d64 <ComRS485+0x240>)
   80cf0:	4798      	blx	r3
	return 0;
   80cf2:	2000      	movs	r0, #0
   80cf4:	e769      	b.n	80bca <ComRS485+0xa6>
						Putstr("\r\n\t***** COMRS485 NO ACK FROM SLAVE #");
   80cf6:	492b      	ldr	r1, [pc, #172]	; (80da4 <ComRS485+0x280>)
   80cf8:	2067      	movs	r0, #103	; 0x67
   80cfa:	4d1f      	ldr	r5, [pc, #124]	; (80d78 <ComRS485+0x254>)
   80cfc:	47a8      	blx	r5
						sprintf(buf, "%02X by %d tries *****\r\n", comRS485TxRxBuf[0], COMRS485_NB_TRIES);
   80cfe:	4c11      	ldr	r4, [pc, #68]	; (80d44 <ComRS485+0x220>)
   80d00:	2303      	movs	r3, #3
   80d02:	7822      	ldrb	r2, [r4, #0]
   80d04:	4928      	ldr	r1, [pc, #160]	; (80da8 <ComRS485+0x284>)
   80d06:	481d      	ldr	r0, [pc, #116]	; (80d7c <ComRS485+0x258>)
   80d08:	4f1e      	ldr	r7, [pc, #120]	; (80d84 <ComRS485+0x260>)
   80d0a:	47b8      	blx	r7
						Putstr(buf);
   80d0c:	4631      	mov	r1, r6
   80d0e:	2067      	movs	r0, #103	; 0x67
   80d10:	47a8      	blx	r5
						PushTask(Modbus, _MODBUS_SLAVE_NOT_ACK, comRS485TxRxBuf[0], 0);
   80d12:	7823      	ldrb	r3, [r4, #0]
   80d14:	2400      	movs	r4, #0
   80d16:	9400      	str	r4, [sp, #0]
   80d18:	2202      	movs	r2, #2
   80d1a:	491f      	ldr	r1, [pc, #124]	; (80d98 <ComRS485+0x274>)
   80d1c:	2066      	movs	r0, #102	; 0x66
   80d1e:	4d1f      	ldr	r5, [pc, #124]	; (80d9c <ComRS485+0x278>)
   80d20:	47a8      	blx	r5
						comRS485.state = IDLE;
   80d22:	2201      	movs	r2, #1
   80d24:	4b06      	ldr	r3, [pc, #24]	; (80d40 <ComRS485+0x21c>)
   80d26:	749a      	strb	r2, [r3, #18]
						_rs485_Flush();
   80d28:	2002      	movs	r0, #2
   80d2a:	f7ff fefb 	bl	80b24 <ComRS485>
	return 0;
   80d2e:	4620      	mov	r0, r4
   80d30:	e74b      	b.n	80bca <ComRS485+0xa6>
		Error(ERROR_COMRS485_SWITCH_BAD_SC, sc);
   80d32:	2020      	movs	r0, #32
   80d34:	4b1d      	ldr	r3, [pc, #116]	; (80dac <ComRS485+0x288>)
   80d36:	4798      	blx	r3
	return 0;
   80d38:	2000      	movs	r0, #0
   80d3a:	e746      	b.n	80bca <ComRS485+0xa6>
   80d3c:	2000      	movs	r0, #0
   80d3e:	e744      	b.n	80bca <ComRS485+0xa6>
   80d40:	200011cc 	.word	0x200011cc
   80d44:	20001070 	.word	0x20001070
   80d48:	000843e1 	.word	0x000843e1
   80d4c:	40090000 	.word	0x40090000
   80d50:	05b8d800 	.word	0x05b8d800
   80d54:	00089d84 	.word	0x00089d84
   80d58:	000803ed 	.word	0x000803ed
   80d5c:	000841e1 	.word	0x000841e1
   80d60:	00080421 	.word	0x00080421
   80d64:	0008041d 	.word	0x0008041d
   80d68:	e000e100 	.word	0xe000e100
   80d6c:	00080411 	.word	0x00080411
   80d70:	00080417 	.word	0x00080417
   80d74:	00089c14 	.word	0x00089c14
   80d78:	00083495 	.word	0x00083495
   80d7c:	20001a14 	.word	0x20001a14
   80d80:	00089c28 	.word	0x00089c28
   80d84:	00085125 	.word	0x00085125
   80d88:	00089c40 	.word	0x00089c40
   80d8c:	00089c80 	.word	0x00089c80
   80d90:	00089ccc 	.word	0x00089ccc
   80d94:	00089ce4 	.word	0x00089ce4
   80d98:	000819d1 	.word	0x000819d1
   80d9c:	00083829 	.word	0x00083829
   80da0:	00089d30 	.word	0x00089d30
   80da4:	00089d40 	.word	0x00089d40
   80da8:	00089d68 	.word	0x00089d68
   80dac:	00080f15 	.word	0x00080f15

00080db0 <USART0_Handler>:


void COMRS485_Handler()
{
   80db0:	b538      	push	{r3, r4, r5, lr}
	uint32_t dw_status = usart_get_status(COMRS485_USART);
   80db2:	4c35      	ldr	r4, [pc, #212]	; (80e88 <USART0_Handler+0xd8>)
   80db4:	4620      	mov	r0, r4
   80db6:	4b35      	ldr	r3, [pc, #212]	; (80e8c <USART0_Handler+0xdc>)
   80db8:	4798      	blx	r3
   80dba:	4605      	mov	r5, r0
	uint8_t dummy;
	
	if((mIsBitsSet(COMRS485_USART->US_IMR,US_IMR_RXRDY))&&(dw_status & US_CSR_RXRDY))
   80dbc:	6923      	ldr	r3, [r4, #16]
   80dbe:	f013 0f01 	tst.w	r3, #1
   80dc2:	d034      	beq.n	80e2e <USART0_Handler+0x7e>
   80dc4:	f010 0f01 	tst.w	r0, #1
   80dc8:	d031      	beq.n	80e2e <USART0_Handler+0x7e>
	{
#ifdef MASTER
		switch(comRS485.state)
   80dca:	4b31      	ldr	r3, [pc, #196]	; (80e90 <USART0_Handler+0xe0>)
   80dcc:	7c9b      	ldrb	r3, [r3, #18]
   80dce:	2b03      	cmp	r3, #3
   80dd0:	d00a      	beq.n	80de8 <USART0_Handler+0x38>
   80dd2:	2b04      	cmp	r3, #4
   80dd4:	d00b      	beq.n	80dee <USART0_Handler+0x3e>
			if(++comRS485.pWrite>=comRS485TxRxBuf+COMRS485_TXRX_BUFFER_LEN+COMRS485_BUFFER_GUARD) /*comRS485.pWrite=comRS485TxRxBuf;*/
			Error(ERROR_COMRS485_RX_BUFFER_FULL,0);
			break;
		case IDLE:
		default:
			dummy = COMRS485_USART->US_RHR & US_RHR_RXCHR_Msk;
   80dd6:	4b2c      	ldr	r3, [pc, #176]	; (80e88 <USART0_Handler+0xd8>)
   80dd8:	699b      	ldr	r3, [r3, #24]
			_rs485_Flush();
   80dda:	2002      	movs	r0, #2
   80ddc:	4b2d      	ldr	r3, [pc, #180]	; (80e94 <USART0_Handler+0xe4>)
   80dde:	4798      	blx	r3
			comRS485.state = IDLE;
   80de0:	2201      	movs	r2, #1
   80de2:	4b2b      	ldr	r3, [pc, #172]	; (80e90 <USART0_Handler+0xe0>)
   80de4:	749a      	strb	r2, [r3, #18]
			break;
   80de6:	e022      	b.n	80e2e <USART0_Handler+0x7e>
			comRS485.state=M_WAIT_END_ACK_FRAME;
   80de8:	2204      	movs	r2, #4
   80dea:	4b29      	ldr	r3, [pc, #164]	; (80e90 <USART0_Handler+0xe0>)
   80dec:	749a      	strb	r2, [r3, #18]
			comRS485.timer=COMRS485_RX_TIMEOUT_VAL;
   80dee:	4c28      	ldr	r4, [pc, #160]	; (80e90 <USART0_Handler+0xe0>)
   80df0:	23c8      	movs	r3, #200	; 0xc8
   80df2:	8223      	strh	r3, [r4, #16]
			*comRS485.pWrite=COMRS485_USART->US_RHR & US_RHR_RXCHR_Msk;
   80df4:	6823      	ldr	r3, [r4, #0]
   80df6:	4a24      	ldr	r2, [pc, #144]	; (80e88 <USART0_Handler+0xd8>)
   80df8:	6992      	ldr	r2, [r2, #24]
   80dfa:	701a      	strb	r2, [r3, #0]
			comRS485.crcC=comRS485.crcB;
   80dfc:	8963      	ldrh	r3, [r4, #10]
   80dfe:	81a3      	strh	r3, [r4, #12]
			comRS485.crcB=comRS485.crcA;
   80e00:	8921      	ldrh	r1, [r4, #8]
   80e02:	8161      	strh	r1, [r4, #10]
			comRS485.crcA=CRC16MODBUSbyte(*comRS485.pWrite,comRS485.crcA);
   80e04:	6823      	ldr	r3, [r4, #0]
   80e06:	7818      	ldrb	r0, [r3, #0]
   80e08:	4b23      	ldr	r3, [pc, #140]	; (80e98 <USART0_Handler+0xe8>)
   80e0a:	4798      	blx	r3
   80e0c:	8120      	strh	r0, [r4, #8]
			comRS485.recCrc<<=8;
   80e0e:	89e3      	ldrh	r3, [r4, #14]
   80e10:	021b      	lsls	r3, r3, #8
   80e12:	b29b      	uxth	r3, r3
   80e14:	81e3      	strh	r3, [r4, #14]
			comRS485.recCrc|=*comRS485.pWrite;
   80e16:	6822      	ldr	r2, [r4, #0]
   80e18:	f812 1b01 	ldrb.w	r1, [r2], #1
   80e1c:	430b      	orrs	r3, r1
   80e1e:	81e3      	strh	r3, [r4, #14]
			comRS485.nChar++;
   80e20:	8aa3      	ldrh	r3, [r4, #20]
   80e22:	3301      	adds	r3, #1
   80e24:	82a3      	strh	r3, [r4, #20]
			if(++comRS485.pWrite>=comRS485TxRxBuf+COMRS485_TXRX_BUFFER_LEN+COMRS485_BUFFER_GUARD) /*comRS485.pWrite=comRS485TxRxBuf;*/
   80e26:	6022      	str	r2, [r4, #0]
   80e28:	4b1c      	ldr	r3, [pc, #112]	; (80e9c <USART0_Handler+0xec>)
   80e2a:	429a      	cmp	r2, r3
   80e2c:	d216      	bcs.n	80e5c <USART0_Handler+0xac>
		}
#endif	//MASTER
	}

	
	if((mIsBitsSet(COMRS485_USART->US_IMR,US_IMR_TXRDY))&&(dw_status & US_CSR_TXRDY))
   80e2e:	4b16      	ldr	r3, [pc, #88]	; (80e88 <USART0_Handler+0xd8>)
   80e30:	691b      	ldr	r3, [r3, #16]
   80e32:	f013 0f02 	tst.w	r3, #2
   80e36:	d010      	beq.n	80e5a <USART0_Handler+0xaa>
   80e38:	f015 0f02 	tst.w	r5, #2
   80e3c:	d00d      	beq.n	80e5a <USART0_Handler+0xaa>
	{
		if(comRS485.pRead!=comRS485.pWrite)
   80e3e:	4a14      	ldr	r2, [pc, #80]	; (80e90 <USART0_Handler+0xe0>)
   80e40:	6853      	ldr	r3, [r2, #4]
   80e42:	6812      	ldr	r2, [r2, #0]
   80e44:	4293      	cmp	r3, r2
   80e46:	d016      	beq.n	80e76 <USART0_Handler+0xc6>
		{
			COMRS485_USART->US_THR = US_THR_TXCHR(*comRS485.pRead++);
   80e48:	1c5a      	adds	r2, r3, #1
   80e4a:	4911      	ldr	r1, [pc, #68]	; (80e90 <USART0_Handler+0xe0>)
   80e4c:	604a      	str	r2, [r1, #4]
   80e4e:	7819      	ldrb	r1, [r3, #0]
   80e50:	4b0d      	ldr	r3, [pc, #52]	; (80e88 <USART0_Handler+0xd8>)
   80e52:	61d9      	str	r1, [r3, #28]
			if(comRS485.pRead>=comRS485TxRxBuf+COMRS485_TXRX_BUFFER_LEN+COMRS485_BUFFER_GUARD) /* comRS485.pRead=comRS485TxRxBuf;*/
   80e54:	4b11      	ldr	r3, [pc, #68]	; (80e9c <USART0_Handler+0xec>)
   80e56:	429a      	cmp	r2, r3
   80e58:	d205      	bcs.n	80e66 <USART0_Handler+0xb6>
   80e5a:	bd38      	pop	{r3, r4, r5, pc}
			Error(ERROR_COMRS485_RX_BUFFER_FULL,0);
   80e5c:	2100      	movs	r1, #0
   80e5e:	2023      	movs	r0, #35	; 0x23
   80e60:	4b0f      	ldr	r3, [pc, #60]	; (80ea0 <USART0_Handler+0xf0>)
   80e62:	4798      	blx	r3
   80e64:	e7e3      	b.n	80e2e <USART0_Handler+0x7e>
			{
				usart_disable_interrupt(COMRS485_USART,US_IER_TXRDY);
   80e66:	2102      	movs	r1, #2
   80e68:	4807      	ldr	r0, [pc, #28]	; (80e88 <USART0_Handler+0xd8>)
   80e6a:	4b0e      	ldr	r3, [pc, #56]	; (80ea4 <USART0_Handler+0xf4>)
   80e6c:	4798      	blx	r3
				_rs485_Flush();
   80e6e:	2002      	movs	r0, #2
   80e70:	4b08      	ldr	r3, [pc, #32]	; (80e94 <USART0_Handler+0xe4>)
   80e72:	4798      	blx	r3
   80e74:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
		else
		{
			usart_disable_interrupt(COMRS485_USART,US_IER_TXRDY);
   80e76:	2102      	movs	r1, #2
   80e78:	4803      	ldr	r0, [pc, #12]	; (80e88 <USART0_Handler+0xd8>)
   80e7a:	4b0a      	ldr	r3, [pc, #40]	; (80ea4 <USART0_Handler+0xf4>)
   80e7c:	4798      	blx	r3
			_rs485_Flush();
   80e7e:	2002      	movs	r0, #2
   80e80:	4b04      	ldr	r3, [pc, #16]	; (80e94 <USART0_Handler+0xe4>)
   80e82:	4798      	blx	r3
		}
	}
   80e84:	e7e9      	b.n	80e5a <USART0_Handler+0xaa>
   80e86:	bf00      	nop
   80e88:	40090000 	.word	0x40090000
   80e8c:	00080425 	.word	0x00080425
   80e90:	200011cc 	.word	0x200011cc
   80e94:	00080b25 	.word	0x00080b25
   80e98:	00080edd 	.word	0x00080edd
   80e9c:	20001172 	.word	0x20001172
   80ea0:	00080f15 	.word	0x00080f15
   80ea4:	00080421 	.word	0x00080421

00080ea8 <CRC16MODBUSFRAME>:
   80ea8:	b189      	cbz	r1, 80ece <CRC16MODBUSFRAME+0x26>
   80eaa:	b410      	push	{r4}
   80eac:	1841      	adds	r1, r0, r1
   80eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80eb2:	4c09      	ldr	r4, [pc, #36]	; (80ed8 <CRC16MODBUSFRAME+0x30>)
   80eb4:	f810 3b01 	ldrb.w	r3, [r0], #1
   80eb8:	4053      	eors	r3, r2
   80eba:	b2db      	uxtb	r3, r3
   80ebc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   80ec0:	ea83 2212 	eor.w	r2, r3, r2, lsr #8
   80ec4:	4281      	cmp	r1, r0
   80ec6:	d1f5      	bne.n	80eb4 <CRC16MODBUSFRAME+0xc>
   80ec8:	4610      	mov	r0, r2
   80eca:	bc10      	pop	{r4}
   80ecc:	4770      	bx	lr
   80ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80ed2:	4610      	mov	r0, r2
   80ed4:	4770      	bx	lr
   80ed6:	bf00      	nop
   80ed8:	20000124 	.word	0x20000124

00080edc <CRC16MODBUSbyte>:
   80edc:	4048      	eors	r0, r1
   80ede:	b2c0      	uxtb	r0, r0
   80ee0:	4b02      	ldr	r3, [pc, #8]	; (80eec <CRC16MODBUSbyte+0x10>)
   80ee2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   80ee6:	ea80 2011 	eor.w	r0, r0, r1, lsr #8
   80eea:	4770      	bx	lr
   80eec:	20000124 	.word	0x20000124

00080ef0 <CRC16MODBUSword>:
   80ef0:	4a07      	ldr	r2, [pc, #28]	; (80f10 <CRC16MODBUSword+0x20>)
   80ef2:	ea80 0301 	eor.w	r3, r0, r1
   80ef6:	b2db      	uxtb	r3, r3
   80ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80efc:	ea83 2111 	eor.w	r1, r3, r1, lsr #8
   80f00:	ea81 2310 	eor.w	r3, r1, r0, lsr #8
   80f04:	b2db      	uxtb	r3, r3
   80f06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   80f0a:	ea80 2011 	eor.w	r0, r0, r1, lsr #8
   80f0e:	4770      	bx	lr
   80f10:	20000124 	.word	0x20000124

00080f14 <Error>:



extern char buf[];
void Error(uint32_t sc, ...)
{
   80f14:	b40f      	push	{r0, r1, r2, r3}
   80f16:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i,k;
#define er sc
#define exEr	pa1
	sprintf(buf, "\r\n\t*****ERROR:%d\tSC:%d*****\r\n", (int)er, (int)exEr);
   80f1a:	4c6e      	ldr	r4, [pc, #440]	; (810d4 <Error+0x1c0>)
   80f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80f1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80f20:	496d      	ldr	r1, [pc, #436]	; (810d8 <Error+0x1c4>)
   80f22:	4620      	mov	r0, r4
   80f24:	4d6d      	ldr	r5, [pc, #436]	; (810dc <Error+0x1c8>)
   80f26:	47a8      	blx	r5
	Putstr(buf);
   80f28:	4621      	mov	r1, r4
   80f2a:	2067      	movs	r0, #103	; 0x67
   80f2c:	4b6c      	ldr	r3, [pc, #432]	; (810e0 <Error+0x1cc>)
   80f2e:	4798      	blx	r3
	delay_ms(1000);
   80f30:	486c      	ldr	r0, [pc, #432]	; (810e4 <Error+0x1d0>)
   80f32:	4b6d      	ldr	r3, [pc, #436]	; (810e8 <Error+0x1d4>)
   80f34:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80f36:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80f38:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80f3c:	2200      	movs	r2, #0
   80f3e:	4b6b      	ldr	r3, [pc, #428]	; (810ec <Error+0x1d8>)
   80f40:	701a      	strb	r2, [r3, #0]
	gpio_configure_pin(ERROR_LED, ERROR_LED_FLAGS);
   80f42:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f46:	2033      	movs	r0, #51	; 0x33
   80f48:	4b69      	ldr	r3, [pc, #420]	; (810f0 <Error+0x1dc>)
   80f4a:	4798      	blx	r3
   80f4c:	f04f 0805 	mov.w	r8, #5
//#if HEART_LED_ACTIVE_LEVEL==1	
	
	for(k=0;k<5;k++)
	{
		gpio_set_pin_high(ERROR_LED);
		delay_ms(3000);
   80f50:	4c65      	ldr	r4, [pc, #404]	; (810e8 <Error+0x1d4>)
			delay_ms(1500);
			gpio_set_pin_low(ERROR_LED);
		}
		else
		{
			for(i=0;i<(er/10)*2;i++)
   80f52:	4f68      	ldr	r7, [pc, #416]	; (810f4 <Error+0x1e0>)
   80f54:	e031      	b.n	80fba <Error+0xa6>
			gpio_set_pin_high(ERROR_LED);
   80f56:	2033      	movs	r0, #51	; 0x33
   80f58:	4b67      	ldr	r3, [pc, #412]	; (810f8 <Error+0x1e4>)
   80f5a:	4798      	blx	r3
			delay_ms(1500);
   80f5c:	4867      	ldr	r0, [pc, #412]	; (810fc <Error+0x1e8>)
   80f5e:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   80f60:	2033      	movs	r0, #51	; 0x33
   80f62:	4b67      	ldr	r3, [pc, #412]	; (81100 <Error+0x1ec>)
   80f64:	4798      	blx	r3
   80f66:	e048      	b.n	80ffa <Error+0xe6>
		}
		delay_ms(800);

		if((er%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   80f68:	2033      	movs	r0, #51	; 0x33
   80f6a:	4b63      	ldr	r3, [pc, #396]	; (810f8 <Error+0x1e4>)
   80f6c:	4798      	blx	r3
			delay_ms(1500);
   80f6e:	4863      	ldr	r0, [pc, #396]	; (810fc <Error+0x1e8>)
   80f70:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   80f72:	2033      	movs	r0, #51	; 0x33
   80f74:	4b62      	ldr	r3, [pc, #392]	; (81100 <Error+0x1ec>)
   80f76:	4798      	blx	r3
   80f78:	e057      	b.n	8102a <Error+0x116>
		delay_ms(1000);
#undef er
#define _param	pa1
		if((_param/100)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   80f7a:	2033      	movs	r0, #51	; 0x33
   80f7c:	4b5e      	ldr	r3, [pc, #376]	; (810f8 <Error+0x1e4>)
   80f7e:	4798      	blx	r3
			delay_ms(1500);
   80f80:	485e      	ldr	r0, [pc, #376]	; (810fc <Error+0x1e8>)
   80f82:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   80f84:	2033      	movs	r0, #51	; 0x33
   80f86:	4b5e      	ldr	r3, [pc, #376]	; (81100 <Error+0x1ec>)
   80f88:	4798      	blx	r3
   80f8a:	e067      	b.n	8105c <Error+0x148>
		}
		delay_ms(800);

		if(((_param/10)%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   80f8c:	2033      	movs	r0, #51	; 0x33
   80f8e:	4b5a      	ldr	r3, [pc, #360]	; (810f8 <Error+0x1e4>)
   80f90:	4798      	blx	r3
			delay_ms(1500);
   80f92:	485a      	ldr	r0, [pc, #360]	; (810fc <Error+0x1e8>)
   80f94:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   80f96:	2033      	movs	r0, #51	; 0x33
   80f98:	4b59      	ldr	r3, [pc, #356]	; (81100 <Error+0x1ec>)
   80f9a:	4798      	blx	r3
   80f9c:	e079      	b.n	81092 <Error+0x17e>
		delay_ms(800);


		if((_param%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   80f9e:	2033      	movs	r0, #51	; 0x33
   80fa0:	4b55      	ldr	r3, [pc, #340]	; (810f8 <Error+0x1e4>)
   80fa2:	4798      	blx	r3
			delay_ms(1500);
   80fa4:	4855      	ldr	r0, [pc, #340]	; (810fc <Error+0x1e8>)
   80fa6:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   80fa8:	2033      	movs	r0, #51	; 0x33
   80faa:	4b55      	ldr	r3, [pc, #340]	; (81100 <Error+0x1ec>)
   80fac:	4798      	blx	r3
				gpio_toggle_pin(ERROR_LED);
				delay_ms(200);
			}
		}
		
		delay_ms(1000);
   80fae:	484d      	ldr	r0, [pc, #308]	; (810e4 <Error+0x1d0>)
   80fb0:	47a0      	blx	r4
	for(k=0;k<5;k++)
   80fb2:	f1b8 0801 	subs.w	r8, r8, #1
   80fb6:	f000 8086 	beq.w	810c6 <Error+0x1b2>
		gpio_set_pin_high(ERROR_LED);
   80fba:	2033      	movs	r0, #51	; 0x33
   80fbc:	4b4e      	ldr	r3, [pc, #312]	; (810f8 <Error+0x1e4>)
   80fbe:	4798      	blx	r3
		delay_ms(3000);
   80fc0:	4850      	ldr	r0, [pc, #320]	; (81104 <Error+0x1f0>)
   80fc2:	47a0      	blx	r4
		gpio_set_pin_low(ERROR_LED);
   80fc4:	2033      	movs	r0, #51	; 0x33
   80fc6:	4b4e      	ldr	r3, [pc, #312]	; (81100 <Error+0x1ec>)
   80fc8:	4798      	blx	r3
		delay_ms(800);
   80fca:	484f      	ldr	r0, [pc, #316]	; (81108 <Error+0x1f4>)
   80fcc:	47a0      	blx	r4
		if((er/10)==0)
   80fce:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   80fd2:	f1b9 0f09 	cmp.w	r9, #9
   80fd6:	d9be      	bls.n	80f56 <Error+0x42>
			for(i=0;i<(er/10)*2;i++)
   80fd8:	fba7 2309 	umull	r2, r3, r7, r9
   80fdc:	08db      	lsrs	r3, r3, #3
   80fde:	005e      	lsls	r6, r3, #1
   80fe0:	b15b      	cbz	r3, 80ffa <Error+0xe6>
   80fe2:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   80fe4:	f8df b130 	ldr.w	fp, [pc, #304]	; 81118 <Error+0x204>
				delay_ms(200);
   80fe8:	f8df a130 	ldr.w	sl, [pc, #304]	; 8111c <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   80fec:	2033      	movs	r0, #51	; 0x33
   80fee:	47d8      	blx	fp
				delay_ms(200);
   80ff0:	4650      	mov	r0, sl
   80ff2:	47a0      	blx	r4
			for(i=0;i<(er/10)*2;i++)
   80ff4:	3501      	adds	r5, #1
   80ff6:	42b5      	cmp	r5, r6
   80ff8:	d1f8      	bne.n	80fec <Error+0xd8>
		delay_ms(800);
   80ffa:	4843      	ldr	r0, [pc, #268]	; (81108 <Error+0x1f4>)
   80ffc:	47a0      	blx	r4
		if((er%10)==0)
   80ffe:	fba7 3609 	umull	r3, r6, r7, r9
   81002:	08f6      	lsrs	r6, r6, #3
   81004:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   81008:	ebb9 0646 	subs.w	r6, r9, r6, lsl #1
   8100c:	d0ac      	beq.n	80f68 <Error+0x54>
			for(i=0;i<(er%10)*2;i++)
   8100e:	0076      	lsls	r6, r6, #1
   81010:	d00b      	beq.n	8102a <Error+0x116>
   81012:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   81014:	f8df a100 	ldr.w	sl, [pc, #256]	; 81118 <Error+0x204>
				delay_ms(200);
   81018:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8111c <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   8101c:	2033      	movs	r0, #51	; 0x33
   8101e:	47d0      	blx	sl
				delay_ms(200);
   81020:	4648      	mov	r0, r9
   81022:	47a0      	blx	r4
			for(i=0;i<(er%10)*2;i++)
   81024:	3501      	adds	r5, #1
   81026:	42b5      	cmp	r5, r6
   81028:	d1f8      	bne.n	8101c <Error+0x108>
		delay_ms(1000);
   8102a:	482e      	ldr	r0, [pc, #184]	; (810e4 <Error+0x1d0>)
   8102c:	47a0      	blx	r4
		if((_param/100)==0)
   8102e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   81032:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
   81036:	d9a0      	bls.n	80f7a <Error+0x66>
			for(i=0;i<(_param/100)*2;i++)
   81038:	4b34      	ldr	r3, [pc, #208]	; (8110c <Error+0x1f8>)
   8103a:	fba3 2309 	umull	r2, r3, r3, r9
   8103e:	095b      	lsrs	r3, r3, #5
   81040:	005e      	lsls	r6, r3, #1
   81042:	b15b      	cbz	r3, 8105c <Error+0x148>
   81044:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   81046:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 81118 <Error+0x204>
				delay_ms(200);
   8104a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8111c <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   8104e:	2033      	movs	r0, #51	; 0x33
   81050:	47d8      	blx	fp
				delay_ms(200);
   81052:	4650      	mov	r0, sl
   81054:	47a0      	blx	r4
			for(i=0;i<(_param/100)*2;i++)
   81056:	3501      	adds	r5, #1
   81058:	42b5      	cmp	r5, r6
   8105a:	d1f8      	bne.n	8104e <Error+0x13a>
		delay_ms(800);
   8105c:	482a      	ldr	r0, [pc, #168]	; (81108 <Error+0x1f4>)
   8105e:	47a0      	blx	r4
		if(((_param/10)%10)==0)
   81060:	fba7 2309 	umull	r2, r3, r7, r9
   81064:	08db      	lsrs	r3, r3, #3
   81066:	fba7 2603 	umull	r2, r6, r7, r3
   8106a:	08f6      	lsrs	r6, r6, #3
   8106c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   81070:	ebb3 0646 	subs.w	r6, r3, r6, lsl #1
   81074:	d08a      	beq.n	80f8c <Error+0x78>
			for(i=0;i<((_param/10)%10)*2;i++)
   81076:	0076      	lsls	r6, r6, #1
   81078:	d00b      	beq.n	81092 <Error+0x17e>
   8107a:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   8107c:	f8df b098 	ldr.w	fp, [pc, #152]	; 81118 <Error+0x204>
				delay_ms(200);
   81080:	f8df a098 	ldr.w	sl, [pc, #152]	; 8111c <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   81084:	2033      	movs	r0, #51	; 0x33
   81086:	47d8      	blx	fp
				delay_ms(200);
   81088:	4650      	mov	r0, sl
   8108a:	47a0      	blx	r4
			for(i=0;i<((_param/10)%10)*2;i++)
   8108c:	3501      	adds	r5, #1
   8108e:	42b5      	cmp	r5, r6
   81090:	d1f8      	bne.n	81084 <Error+0x170>
		delay_ms(800);
   81092:	481d      	ldr	r0, [pc, #116]	; (81108 <Error+0x1f4>)
   81094:	47a0      	blx	r4
		if((_param%10)==0)
   81096:	fba7 3609 	umull	r3, r6, r7, r9
   8109a:	08f6      	lsrs	r6, r6, #3
   8109c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   810a0:	ebb9 0646 	subs.w	r6, r9, r6, lsl #1
   810a4:	f43f af7b 	beq.w	80f9e <Error+0x8a>
			for(i=0;i<(_param%10)*2;i++)
   810a8:	0076      	lsls	r6, r6, #1
   810aa:	d080      	beq.n	80fae <Error+0x9a>
   810ac:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   810ae:	f8df a068 	ldr.w	sl, [pc, #104]	; 81118 <Error+0x204>
				delay_ms(200);
   810b2:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8111c <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   810b6:	2033      	movs	r0, #51	; 0x33
   810b8:	47d0      	blx	sl
				delay_ms(200);
   810ba:	4648      	mov	r0, r9
   810bc:	47a0      	blx	r4
			for(i=0;i<(_param%10)*2;i++)
   810be:	3501      	adds	r5, #1
   810c0:	42b5      	cmp	r5, r6
   810c2:	d1f8      	bne.n	810b6 <Error+0x1a2>
   810c4:	e773      	b.n	80fae <Error+0x9a>

#undef _param
	}
	rstc_start_software_reset(RSTC);
   810c6:	4812      	ldr	r0, [pc, #72]	; (81110 <Error+0x1fc>)
   810c8:	4b12      	ldr	r3, [pc, #72]	; (81114 <Error+0x200>)
   810ca:	4798      	blx	r3
   810cc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   810d0:	b004      	add	sp, #16
   810d2:	4770      	bx	lr
   810d4:	20001a14 	.word	0x20001a14
   810d8:	00089d9c 	.word	0x00089d9c
   810dc:	00085125 	.word	0x00085125
   810e0:	00083495 	.word	0x00083495
   810e4:	0068a1b7 	.word	0x0068a1b7
   810e8:	20000001 	.word	0x20000001
   810ec:	20000628 	.word	0x20000628
   810f0:	000841e1 	.word	0x000841e1
   810f4:	cccccccd 	.word	0xcccccccd
   810f8:	0008418b 	.word	0x0008418b
   810fc:	009cf293 	.word	0x009cf293
   81100:	000841a5 	.word	0x000841a5
   81104:	0139e525 	.word	0x0139e525
   81108:	0053b493 	.word	0x0053b493
   8110c:	51eb851f 	.word	0x51eb851f
   81110:	400e1200 	.word	0x400e1200
   81114:	00084865 	.word	0x00084865
   81118:	000841bf 	.word	0x000841bf
   8111c:	0014ed25 	.word	0x0014ed25

00081120 <Framesbuf>:
 }requestsBuffer;
 
 extern char* buf[];
 
 uint32_t Framesbuf(uint32_t sc, ...)
 {
   81120:	b40f      	push	{r0, r1, r2, r3}
   81122:	b570      	push	{r4, r5, r6, lr}
	 switch(sc)
   81124:	9904      	ldr	r1, [sp, #16]
   81126:	2966      	cmp	r1, #102	; 0x66
   81128:	d014      	beq.n	81154 <Framesbuf+0x34>
   8112a:	2967      	cmp	r1, #103	; 0x67
   8112c:	d038      	beq.n	811a0 <Framesbuf+0x80>
   8112e:	2965      	cmp	r1, #101	; 0x65
   81130:	d003      	beq.n	8113a <Framesbuf+0x1a>
		return 0;
#undef _sc	

		break;
	default:
		Error(ERROR_FRAMESBUF_SWITCH_BAD_SC, sc);
   81132:	203d      	movs	r0, #61	; 0x3d
   81134:	4b33      	ldr	r3, [pc, #204]	; (81204 <Framesbuf+0xe4>)
   81136:	4798      	blx	r3

	 }
   81138:	e007      	b.n	8114a <Framesbuf+0x2a>
		requestsBuffer.pPop = requestsBuffer.pPush = requestsBufList;
   8113a:	4b33      	ldr	r3, [pc, #204]	; (81208 <Framesbuf+0xe8>)
   8113c:	4a33      	ldr	r2, [pc, #204]	; (8120c <Framesbuf+0xec>)
   8113e:	601a      	str	r2, [r3, #0]
   81140:	605a      	str	r2, [r3, #4]
		Putstr("\r\n\tFRAMEBUF_NEW\r\n");
   81142:	4933      	ldr	r1, [pc, #204]	; (81210 <Framesbuf+0xf0>)
   81144:	2067      	movs	r0, #103	; 0x67
   81146:	4b33      	ldr	r3, [pc, #204]	; (81214 <Framesbuf+0xf4>)
   81148:	4798      	blx	r3
   8114a:	4620      	mov	r0, r4
   8114c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   81150:	b004      	add	sp, #16
   81152:	4770      	bx	lr
		Putstr("\r\n\t FRME_PUSH \r\n");
   81154:	4930      	ldr	r1, [pc, #192]	; (81218 <Framesbuf+0xf8>)
   81156:	2067      	movs	r0, #103	; 0x67
   81158:	4d2e      	ldr	r5, [pc, #184]	; (81214 <Framesbuf+0xf4>)
   8115a:	47a8      	blx	r5
		sprintf(buf,"\r\n\tSC:%X\r\n", _sc);
   8115c:	9c05      	ldr	r4, [sp, #20]
   8115e:	4e2f      	ldr	r6, [pc, #188]	; (8121c <Framesbuf+0xfc>)
   81160:	4622      	mov	r2, r4
   81162:	492f      	ldr	r1, [pc, #188]	; (81220 <Framesbuf+0x100>)
   81164:	4630      	mov	r0, r6
   81166:	4b2f      	ldr	r3, [pc, #188]	; (81224 <Framesbuf+0x104>)
   81168:	4798      	blx	r3
		Putstr(buf);
   8116a:	4631      	mov	r1, r6
   8116c:	2067      	movs	r0, #103	; 0x67
   8116e:	47a8      	blx	r5
		*requestsBuffer.pPush = _sc;
   81170:	4b25      	ldr	r3, [pc, #148]	; (81208 <Framesbuf+0xe8>)
   81172:	681a      	ldr	r2, [r3, #0]
   81174:	6014      	str	r4, [r2, #0]
		requestsBuffer.pPush++;
   81176:	681b      	ldr	r3, [r3, #0]
   81178:	3304      	adds	r3, #4
		if(requestsBuffer.pPush >= requestsBufList + SERVICES_BUF_LIST_LEN) requestsBuffer.pPush = requestsBufList;
   8117a:	4a2b      	ldr	r2, [pc, #172]	; (81228 <Framesbuf+0x108>)
   8117c:	4293      	cmp	r3, r2
   8117e:	d20b      	bcs.n	81198 <Framesbuf+0x78>
		requestsBuffer.pPush++;
   81180:	4a21      	ldr	r2, [pc, #132]	; (81208 <Framesbuf+0xe8>)
   81182:	6013      	str	r3, [r2, #0]
		if(requestsBuffer.pPush == requestsBuffer.pPop) Error(ERROR_FRAMESBUF_LIST_FULL, 0);
   81184:	4b20      	ldr	r3, [pc, #128]	; (81208 <Framesbuf+0xe8>)
   81186:	681a      	ldr	r2, [r3, #0]
   81188:	685b      	ldr	r3, [r3, #4]
   8118a:	429a      	cmp	r2, r3
   8118c:	d1dd      	bne.n	8114a <Framesbuf+0x2a>
   8118e:	2100      	movs	r1, #0
   81190:	203e      	movs	r0, #62	; 0x3e
   81192:	4b1c      	ldr	r3, [pc, #112]	; (81204 <Framesbuf+0xe4>)
   81194:	4798      	blx	r3
   81196:	e7d8      	b.n	8114a <Framesbuf+0x2a>
		if(requestsBuffer.pPush >= requestsBufList + SERVICES_BUF_LIST_LEN) requestsBuffer.pPush = requestsBufList;
   81198:	4a1c      	ldr	r2, [pc, #112]	; (8120c <Framesbuf+0xec>)
   8119a:	4b1b      	ldr	r3, [pc, #108]	; (81208 <Framesbuf+0xe8>)
   8119c:	601a      	str	r2, [r3, #0]
   8119e:	e7f1      	b.n	81184 <Framesbuf+0x64>
		Putstr("\r\n\t FRME_POP \r\n"); 
   811a0:	4922      	ldr	r1, [pc, #136]	; (8122c <Framesbuf+0x10c>)
   811a2:	2067      	movs	r0, #103	; 0x67
   811a4:	4b1b      	ldr	r3, [pc, #108]	; (81214 <Framesbuf+0xf4>)
   811a6:	4798      	blx	r3
		if(requestsBuffer.pPop != requestsBuffer.pPush)
   811a8:	4b17      	ldr	r3, [pc, #92]	; (81208 <Framesbuf+0xe8>)
   811aa:	685a      	ldr	r2, [r3, #4]
   811ac:	681b      	ldr	r3, [r3, #0]
   811ae:	429a      	cmp	r2, r3
   811b0:	d021      	beq.n	811f6 <Framesbuf+0xd6>
			sprintf(buf, "\r\n\tpPOP: %X", *requestsBuffer.pPop);
   811b2:	4d1a      	ldr	r5, [pc, #104]	; (8121c <Framesbuf+0xfc>)
   811b4:	6812      	ldr	r2, [r2, #0]
   811b6:	491e      	ldr	r1, [pc, #120]	; (81230 <Framesbuf+0x110>)
   811b8:	4628      	mov	r0, r5
   811ba:	4b1a      	ldr	r3, [pc, #104]	; (81224 <Framesbuf+0x104>)
   811bc:	4798      	blx	r3
			Putstr(buf);
   811be:	4629      	mov	r1, r5
   811c0:	2067      	movs	r0, #103	; 0x67
   811c2:	4b14      	ldr	r3, [pc, #80]	; (81214 <Framesbuf+0xf4>)
   811c4:	4798      	blx	r3
			_sc = *requestsBuffer.pPop;
   811c6:	4b10      	ldr	r3, [pc, #64]	; (81208 <Framesbuf+0xe8>)
   811c8:	685b      	ldr	r3, [r3, #4]
   811ca:	f853 4b04 	ldr.w	r4, [r3], #4
   811ce:	9404      	str	r4, [sp, #16]
			if(requestsBuffer.pPop >= requestsBufList + SERVICES_BUF_LIST_LEN) requestsBuffer.pPop = requestsBufList;
   811d0:	4a15      	ldr	r2, [pc, #84]	; (81228 <Framesbuf+0x108>)
   811d2:	4293      	cmp	r3, r2
   811d4:	d30c      	bcc.n	811f0 <Framesbuf+0xd0>
   811d6:	4a0d      	ldr	r2, [pc, #52]	; (8120c <Framesbuf+0xec>)
   811d8:	4b0b      	ldr	r3, [pc, #44]	; (81208 <Framesbuf+0xe8>)
   811da:	605a      	str	r2, [r3, #4]
			sprintf(buf,"\r\n\tSC:%X\r\n", _sc);
   811dc:	4622      	mov	r2, r4
   811de:	4910      	ldr	r1, [pc, #64]	; (81220 <Framesbuf+0x100>)
   811e0:	480e      	ldr	r0, [pc, #56]	; (8121c <Framesbuf+0xfc>)
   811e2:	4b10      	ldr	r3, [pc, #64]	; (81224 <Framesbuf+0x104>)
   811e4:	4798      	blx	r3
			Putstr(buf);
   811e6:	4629      	mov	r1, r5
   811e8:	2067      	movs	r0, #103	; 0x67
   811ea:	4b0a      	ldr	r3, [pc, #40]	; (81214 <Framesbuf+0xf4>)
   811ec:	4798      	blx	r3
			return _sc;
   811ee:	e7ac      	b.n	8114a <Framesbuf+0x2a>
			requestsBuffer.pPop++;
   811f0:	4a05      	ldr	r2, [pc, #20]	; (81208 <Framesbuf+0xe8>)
   811f2:	6053      	str	r3, [r2, #4]
   811f4:	e7f2      	b.n	811dc <Framesbuf+0xbc>
		Putstr("\r\n\t FRME_POP EMPTY \r\n");
   811f6:	490f      	ldr	r1, [pc, #60]	; (81234 <Framesbuf+0x114>)
   811f8:	2067      	movs	r0, #103	; 0x67
   811fa:	4b06      	ldr	r3, [pc, #24]	; (81214 <Framesbuf+0xf4>)
   811fc:	4798      	blx	r3
		return 0;
   811fe:	2400      	movs	r4, #0
   81200:	e7a3      	b.n	8114a <Framesbuf+0x2a>
   81202:	bf00      	nop
   81204:	00080f15 	.word	0x00080f15
   81208:	200011e8 	.word	0x200011e8
   8120c:	200011f0 	.word	0x200011f0
   81210:	00089dbc 	.word	0x00089dbc
   81214:	00083495 	.word	0x00083495
   81218:	00089dd0 	.word	0x00089dd0
   8121c:	20001a14 	.word	0x20001a14
   81220:	00089de4 	.word	0x00089de4
   81224:	00085125 	.word	0x00085125
   81228:	200019f0 	.word	0x200019f0
   8122c:	00089df0 	.word	0x00089df0
   81230:	00089e00 	.word	0x00089e00
   81234:	00089e0c 	.word	0x00089e0c

00081238 <kRtc>:
#define _rtcCalr	((t_RTC_CALR*)&RTC->RTC_CALR)
#define _rtcTimr	((t_RTC_TIMR*)&RTC->RTC_TIMR)


uint32_t kRtc(uint32_t sc,...)
{
   81238:	b40f      	push	{r0, r1, r2, r3}
   8123a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8123c:	b087      	sub	sp, #28
	uint32_t u1,u2,u3,u4;
	
	switch(sc)
   8123e:	990c      	ldr	r1, [sp, #48]	; 0x30
   81240:	2964      	cmp	r1, #100	; 0x64
   81242:	d021      	beq.n	81288 <kRtc+0x50>
   81244:	d814      	bhi.n	81270 <kRtc+0x38>
   81246:	2901      	cmp	r1, #1
   81248:	f000 810e 	beq.w	81468 <kRtc+0x230>
   8124c:	2900      	cmp	r1, #0
   8124e:	f000 80bb 	beq.w	813c8 <kRtc+0x190>
   81252:	2902      	cmp	r1, #2
   81254:	d113      	bne.n	8127e <kRtc+0x46>
	case _KRTC_IS_SUMMER_TIME:
#define _day	pa1
#define _date	pa2
#define _month	pa3
#define _hour	pa4
		if((_month>MARCH)&&(_month<OCTOBER)) return 1;
   81256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81258:	1f1a      	subs	r2, r3, #4
   8125a:	2a05      	cmp	r2, #5
   8125c:	f240 8148 	bls.w	814f0 <kRtc+0x2b8>
		else
		{
			if(_month==MARCH)
   81260:	2b03      	cmp	r3, #3
   81262:	f000 811b 	beq.w	8149c <kRtc+0x264>
					{
						return (((int8_t)(_date-24)-(int8_t)_day)>0);
					}
				}
			}
			else if(_month==OCTOBER)
   81266:	2b0a      	cmp	r3, #10
   81268:	f000 812d 	beq.w	814c6 <kRtc+0x28e>
						return (((int8_t)(_date-24)-(int8_t)_day)<=0);
					}
				}
			}
		}
		return 0;
   8126c:	2400      	movs	r4, #0
   8126e:	e0d1      	b.n	81414 <kRtc+0x1dc>
	switch(sc)
   81270:	2967      	cmp	r1, #103	; 0x67
   81272:	d040      	beq.n	812f6 <kRtc+0xbe>
   81274:	2968      	cmp	r1, #104	; 0x68
   81276:	f000 808d 	beq.w	81394 <kRtc+0x15c>
   8127a:	2966      	cmp	r1, #102	; 0x66
   8127c:	d01a      	beq.n	812b4 <kRtc+0x7c>
		//no break;


	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_KRTC_SWITCH_BAD_SC,sc);
   8127e:	200e      	movs	r0, #14
   81280:	4b9e      	ldr	r3, [pc, #632]	; (814fc <kRtc+0x2c4>)
   81282:	4798      	blx	r3
}
	return 0;
   81284:	2400      	movs	r4, #0
   81286:	e0c5      	b.n	81414 <kRtc+0x1dc>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   81288:	2000      	movs	r0, #0
   8128a:	4b9d      	ldr	r3, [pc, #628]	; (81500 <kRtc+0x2c8>)
   8128c:	4798      	blx	r3
		while (!pmc_osc_is_ready_32kxtal());
   8128e:	4c9d      	ldr	r4, [pc, #628]	; (81504 <kRtc+0x2cc>)
   81290:	47a0      	blx	r4
   81292:	2800      	cmp	r0, #0
   81294:	d0fc      	beq.n	81290 <kRtc+0x58>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   81296:	4b9c      	ldr	r3, [pc, #624]	; (81508 <kRtc+0x2d0>)
   81298:	2104      	movs	r1, #4
   8129a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8129e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   812a2:	2210      	movs	r2, #16
   812a4:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   812a8:	6019      	str	r1, [r3, #0]
		rtc_enable_interrupt(RTC,RTC_IER_SECEN);	//Second IRQ enabled
   812aa:	4898      	ldr	r0, [pc, #608]	; (8150c <kRtc+0x2d4>)
   812ac:	4b98      	ldr	r3, [pc, #608]	; (81510 <kRtc+0x2d8>)
   812ae:	4798      	blx	r3
	return 0;
   812b0:	2400      	movs	r4, #0
		break;
   812b2:	e0af      	b.n	81414 <kRtc+0x1dc>
		_res = rtc_set_time(RTC,_hour,_minute,_second);
   812b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   812b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   812b8:	990d      	ldr	r1, [sp, #52]	; 0x34
   812ba:	4894      	ldr	r0, [pc, #592]	; (8150c <kRtc+0x2d4>)
   812bc:	4c95      	ldr	r4, [pc, #596]	; (81514 <kRtc+0x2dc>)
   812be:	47a0      	blx	r4
   812c0:	4604      	mov	r4, r0
   812c2:	900c      	str	r0, [sp, #48]	; 0x30
		if(_res	== 0)
   812c4:	2800      	cmp	r0, #0
   812c6:	f040 80a5 	bne.w	81414 <kRtc+0x1dc>
			rtc.summerTime = _kRtcIsSummerTime(_rtcCalr->DAY,_rtcCalr->DATE,_rtcCalr->MONTH,_rtcTimr->HOUR);
   812ca:	4b93      	ldr	r3, [pc, #588]	; (81518 <kRtc+0x2e0>)
   812cc:	7899      	ldrb	r1, [r3, #2]
   812ce:	78da      	ldrb	r2, [r3, #3]
   812d0:	3b04      	subs	r3, #4
   812d2:	789b      	ldrb	r3, [r3, #2]
   812d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   812d8:	9300      	str	r3, [sp, #0]
   812da:	f001 031f 	and.w	r3, r1, #31
   812de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   812e2:	0949      	lsrs	r1, r1, #5
   812e4:	2002      	movs	r0, #2
   812e6:	f7ff ffa7 	bl	81238 <kRtc>
   812ea:	4b8c      	ldr	r3, [pc, #560]	; (8151c <kRtc+0x2e4>)
   812ec:	781a      	ldrb	r2, [r3, #0]
   812ee:	f360 0282 	bfi	r2, r0, #2, #1
   812f2:	701a      	strb	r2, [r3, #0]
   812f4:	e08e      	b.n	81414 <kRtc+0x1dc>
		if((_month==0)||(_month)>12) return -1;
   812f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   812f8:	1e63      	subs	r3, r4, #1
   812fa:	2b0b      	cmp	r3, #11
   812fc:	d902      	bls.n	81304 <kRtc+0xcc>
   812fe:	f04f 34ff 	mov.w	r4, #4294967295
   81302:	e087      	b.n	81414 <kRtc+0x1dc>
		if(_date>nbDaysInMonth[_month-1]+_kRtcIsLeapYear(_centyear)?1:0) return -1;
   81304:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   81306:	4a86      	ldr	r2, [pc, #536]	; (81520 <kRtc+0x2e8>)
   81308:	5cd5      	ldrb	r5, [r2, r3]
   8130a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   8130c:	4631      	mov	r1, r6
   8130e:	2001      	movs	r0, #1
   81310:	f7ff ff92 	bl	81238 <kRtc>
   81314:	4428      	add	r0, r5
   81316:	4287      	cmp	r7, r0
   81318:	d902      	bls.n	81320 <kRtc+0xe8>
   8131a:	f04f 34ff 	mov.w	r4, #4294967295
   8131e:	e079      	b.n	81414 <kRtc+0x1dc>
		if((_centyear/100>20)||(_centyear/100<19)||(_centyear%100>99)) return -1;
   81320:	f2a6 736c 	subw	r3, r6, #1900	; 0x76c
   81324:	2bc7      	cmp	r3, #199	; 0xc7
   81326:	d902      	bls.n	8132e <kRtc+0xf6>
   81328:	f04f 34ff 	mov.w	r4, #4294967295
   8132c:	e072      	b.n	81414 <kRtc+0x1dc>
   8132e:	4d7d      	ldr	r5, [pc, #500]	; (81524 <kRtc+0x2ec>)
   81330:	fba5 3506 	umull	r3, r5, r5, r6
   81334:	096d      	lsrs	r5, r5, #5
   81336:	2364      	movs	r3, #100	; 0x64
   81338:	fb03 6515 	mls	r5, r3, r5, r6
   8133c:	2d63      	cmp	r5, #99	; 0x63
   8133e:	d902      	bls.n	81346 <kRtc+0x10e>
   81340:	f04f 34ff 	mov.w	r4, #4294967295
   81344:	e066      	b.n	81414 <kRtc+0x1dc>
		_day = _kRtcDayByDate(_date,_month,_centyear);
   81346:	4633      	mov	r3, r6
   81348:	4622      	mov	r2, r4
   8134a:	4639      	mov	r1, r7
   8134c:	2000      	movs	r0, #0
   8134e:	f7ff ff73 	bl	81238 <kRtc>
		_res = rtc_set_date(RTC,_centyear%100,_month,_date,_day);
   81352:	9000      	str	r0, [sp, #0]
   81354:	463b      	mov	r3, r7
   81356:	4622      	mov	r2, r4
   81358:	4629      	mov	r1, r5
   8135a:	486c      	ldr	r0, [pc, #432]	; (8150c <kRtc+0x2d4>)
   8135c:	4c72      	ldr	r4, [pc, #456]	; (81528 <kRtc+0x2f0>)
   8135e:	47a0      	blx	r4
   81360:	4604      	mov	r4, r0
   81362:	900c      	str	r0, [sp, #48]	; 0x30
		if(_res == 0)
   81364:	2800      	cmp	r0, #0
   81366:	d155      	bne.n	81414 <kRtc+0x1dc>
			rtc.summerTime = _kRtcIsSummerTime(_rtcCalr->DAY,_rtcCalr->DATE,_rtcCalr->MONTH,_rtcTimr->HOUR);
   81368:	4b6b      	ldr	r3, [pc, #428]	; (81518 <kRtc+0x2e0>)
   8136a:	7899      	ldrb	r1, [r3, #2]
   8136c:	78da      	ldrb	r2, [r3, #3]
   8136e:	3b04      	subs	r3, #4
   81370:	789b      	ldrb	r3, [r3, #2]
   81372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   81376:	9300      	str	r3, [sp, #0]
   81378:	f001 031f 	and.w	r3, r1, #31
   8137c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   81380:	0949      	lsrs	r1, r1, #5
   81382:	2002      	movs	r0, #2
   81384:	f7ff ff58 	bl	81238 <kRtc>
   81388:	4b64      	ldr	r3, [pc, #400]	; (8151c <kRtc+0x2e4>)
   8138a:	781a      	ldrb	r2, [r3, #0]
   8138c:	f360 0282 	bfi	r2, r0, #2, #1
   81390:	701a      	strb	r2, [r3, #0]
   81392:	e03f      	b.n	81414 <kRtc+0x1dc>
		rtc_get_date(RTC,&_year,&_month,&_date,&_day);
   81394:	ab02      	add	r3, sp, #8
   81396:	9300      	str	r3, [sp, #0]
   81398:	ab03      	add	r3, sp, #12
   8139a:	aa04      	add	r2, sp, #16
   8139c:	a905      	add	r1, sp, #20
   8139e:	485b      	ldr	r0, [pc, #364]	; (8150c <kRtc+0x2d4>)
   813a0:	4c62      	ldr	r4, [pc, #392]	; (8152c <kRtc+0x2f4>)
   813a2:	47a0      	blx	r4
		sprintf((char*)_pStr,"%s %d %s %4d",daysOfWeek[_day-1],(int)_date,months[_month-1],(int)_year);
   813a4:	9b02      	ldr	r3, [sp, #8]
   813a6:	3b01      	subs	r3, #1
   813a8:	4a61      	ldr	r2, [pc, #388]	; (81530 <kRtc+0x2f8>)
   813aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   813ae:	9b05      	ldr	r3, [sp, #20]
   813b0:	9301      	str	r3, [sp, #4]
   813b2:	9b04      	ldr	r3, [sp, #16]
   813b4:	3b01      	subs	r3, #1
   813b6:	495f      	ldr	r1, [pc, #380]	; (81534 <kRtc+0x2fc>)
   813b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   813bc:	9300      	str	r3, [sp, #0]
   813be:	9b03      	ldr	r3, [sp, #12]
   813c0:	495d      	ldr	r1, [pc, #372]	; (81538 <kRtc+0x300>)
   813c2:	980d      	ldr	r0, [sp, #52]	; 0x34
   813c4:	4c5d      	ldr	r4, [pc, #372]	; (8153c <kRtc+0x304>)
   813c6:	47a0      	blx	r4
		if(_month>=3)
   813c8:	990e      	ldr	r1, [sp, #56]	; 0x38
   813ca:	2902      	cmp	r1, #2
   813cc:	d928      	bls.n	81420 <kRtc+0x1e8>
			_day = ((_month*23)/9 + _date + 4 + _centyear + _centyear/4 - _centyear/100 + _centyear/400 - 2 ) % 7 + 1;
   813ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
   813d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   813d2:	1883      	adds	r3, r0, r2
   813d4:	3302      	adds	r3, #2
   813d6:	eb03 0390 	add.w	r3, r3, r0, lsr #2
   813da:	4a52      	ldr	r2, [pc, #328]	; (81524 <kRtc+0x2ec>)
   813dc:	fba2 2000 	umull	r2, r0, r2, r0
   813e0:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
   813e4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   813e8:	ebc1 02c2 	rsb	r2, r1, r2, lsl #3
   813ec:	4954      	ldr	r1, [pc, #336]	; (81540 <kRtc+0x308>)
   813ee:	fba1 1202 	umull	r1, r2, r1, r2
   813f2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   813f6:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
   813fa:	4a52      	ldr	r2, [pc, #328]	; (81544 <kRtc+0x30c>)
   813fc:	fba2 1203 	umull	r1, r2, r2, r3
   81400:	1a99      	subs	r1, r3, r2
   81402:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   81406:	0892      	lsrs	r2, r2, #2
   81408:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   8140c:	1a9b      	subs	r3, r3, r2
   8140e:	3301      	adds	r3, #1
   81410:	930c      	str	r3, [sp, #48]	; 0x30
		return _day; //Normally 1 to 7 !!!!
   81412:	9c0c      	ldr	r4, [sp, #48]	; 0x30
}
   81414:	4620      	mov	r0, r4
   81416:	b007      	add	sp, #28
   81418:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   8141c:	b004      	add	sp, #16
   8141e:	4770      	bx	lr
			_day = ((_month*23)/9 + _date + 4 + _centyear + (_centyear-1)/4 - (_centyear-1)/100 + (_centyear-1)/400 ) % 7 + 1;
   81420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81422:	1e50      	subs	r0, r2, #1
   81424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81426:	4413      	add	r3, r2
   81428:	3304      	adds	r3, #4
   8142a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   8142e:	ebc1 02c2 	rsb	r2, r1, r2, lsl #3
   81432:	4943      	ldr	r1, [pc, #268]	; (81540 <kRtc+0x308>)
   81434:	fba1 1202 	umull	r1, r2, r1, r2
   81438:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   8143c:	eb03 0390 	add.w	r3, r3, r0, lsr #2
   81440:	4a38      	ldr	r2, [pc, #224]	; (81524 <kRtc+0x2ec>)
   81442:	fba2 1200 	umull	r1, r2, r2, r0
   81446:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
   8144a:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
   8144e:	4a3d      	ldr	r2, [pc, #244]	; (81544 <kRtc+0x30c>)
   81450:	fba2 1203 	umull	r1, r2, r2, r3
   81454:	1a99      	subs	r1, r3, r2
   81456:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   8145a:	0892      	lsrs	r2, r2, #2
   8145c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   81460:	1a9b      	subs	r3, r3, r2
   81462:	3301      	adds	r3, #1
   81464:	930c      	str	r3, [sp, #48]	; 0x30
   81466:	e7d4      	b.n	81412 <kRtc+0x1da>
		return (((_centyear%4==0)&&(_centyear%100!=0)) || (_centyear%400==0));
   81468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8146a:	f013 0f03 	tst.w	r3, #3
   8146e:	d107      	bne.n	81480 <kRtc+0x248>
   81470:	4a2c      	ldr	r2, [pc, #176]	; (81524 <kRtc+0x2ec>)
   81472:	fba2 1203 	umull	r1, r2, r2, r3
   81476:	0952      	lsrs	r2, r2, #5
   81478:	2164      	movs	r1, #100	; 0x64
   8147a:	fb01 3212 	mls	r2, r1, r2, r3
   8147e:	b95a      	cbnz	r2, 81498 <kRtc+0x260>
   81480:	4c28      	ldr	r4, [pc, #160]	; (81524 <kRtc+0x2ec>)
   81482:	fba4 2403 	umull	r2, r4, r4, r3
   81486:	09e4      	lsrs	r4, r4, #7
   81488:	f44f 72c8 	mov.w	r2, #400	; 0x190
   8148c:	fb02 3414 	mls	r4, r2, r4, r3
   81490:	fab4 f484 	clz	r4, r4
   81494:	0964      	lsrs	r4, r4, #5
   81496:	e7bd      	b.n	81414 <kRtc+0x1dc>
   81498:	2401      	movs	r4, #1
   8149a:	e7bb      	b.n	81414 <kRtc+0x1dc>
				if(_date>=25)
   8149c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8149e:	2c18      	cmp	r4, #24
   814a0:	d928      	bls.n	814f4 <kRtc+0x2bc>
					if(_day==SUNDAY)
   814a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   814a4:	2a01      	cmp	r2, #1
   814a6:	d008      	beq.n	814ba <kRtc+0x282>
						return (((int8_t)(_date-24)-(int8_t)_day)>0);
   814a8:	3c18      	subs	r4, #24
   814aa:	b264      	sxtb	r4, r4
   814ac:	b252      	sxtb	r2, r2
   814ae:	1aa4      	subs	r4, r4, r2
   814b0:	2c00      	cmp	r4, #0
   814b2:	bfd4      	ite	le
   814b4:	2400      	movle	r4, #0
   814b6:	2401      	movgt	r4, #1
   814b8:	e7ac      	b.n	81414 <kRtc+0x1dc>
						if(_hour>=2) return 1;
   814ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
   814bc:	2c01      	cmp	r4, #1
   814be:	bf94      	ite	ls
   814c0:	2400      	movls	r4, #0
   814c2:	2401      	movhi	r4, #1
   814c4:	e7a6      	b.n	81414 <kRtc+0x1dc>
				if(_date>=25)
   814c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   814c8:	2c18      	cmp	r4, #24
   814ca:	d915      	bls.n	814f8 <kRtc+0x2c0>
					if(_day==SUNDAY)
   814cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   814ce:	2a01      	cmp	r2, #1
   814d0:	d008      	beq.n	814e4 <kRtc+0x2ac>
						return (((int8_t)(_date-24)-(int8_t)_day)<=0);
   814d2:	3c18      	subs	r4, #24
   814d4:	b264      	sxtb	r4, r4
   814d6:	b252      	sxtb	r2, r2
   814d8:	1aa4      	subs	r4, r4, r2
   814da:	2c00      	cmp	r4, #0
   814dc:	bfcc      	ite	gt
   814de:	2400      	movgt	r4, #0
   814e0:	2401      	movle	r4, #1
   814e2:	e797      	b.n	81414 <kRtc+0x1dc>
						if(_hour<2) return 1;
   814e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
   814e6:	2c01      	cmp	r4, #1
   814e8:	bf8c      	ite	hi
   814ea:	2400      	movhi	r4, #0
   814ec:	2401      	movls	r4, #1
   814ee:	e791      	b.n	81414 <kRtc+0x1dc>
		if((_month>MARCH)&&(_month<OCTOBER)) return 1;
   814f0:	2401      	movs	r4, #1
   814f2:	e78f      	b.n	81414 <kRtc+0x1dc>
		return 0;
   814f4:	2400      	movs	r4, #0
   814f6:	e78d      	b.n	81414 <kRtc+0x1dc>
   814f8:	2400      	movs	r4, #0
   814fa:	e78b      	b.n	81414 <kRtc+0x1dc>
   814fc:	00080f15 	.word	0x00080f15
   81500:	00084315 	.word	0x00084315
   81504:	00084339 	.word	0x00084339
   81508:	e000e100 	.word	0xe000e100
   8150c:	400e1260 	.word	0x400e1260
   81510:	000845a7 	.word	0x000845a7
   81514:	00084605 	.word	0x00084605
   81518:	400e126c 	.word	0x400e126c
   8151c:	200019f0 	.word	0x200019f0
   81520:	00089e34 	.word	0x00089e34
   81524:	51eb851f 	.word	0x51eb851f
   81528:	0008470d 	.word	0x0008470d
   8152c:	00084699 	.word	0x00084699
   81530:	20000524 	.word	0x20000524
   81534:	20000540 	.word	0x20000540
   81538:	00089e24 	.word	0x00089e24
   8153c:	00085125 	.word	0x00085125
   81540:	38e38e39 	.word	0x38e38e39
   81544:	24924925 	.word	0x24924925

00081548 <RTC_Handler>:
enum{
	_SHELL_PROMPT = 4
};

void RTC_Handler(void)
{
   81548:	b510      	push	{r4, lr}
   8154a:	b082      	sub	sp, #8
	rtc_clear_status(RTC,RTC_SCCR_SECCLR);
   8154c:	2104      	movs	r1, #4
   8154e:	4806      	ldr	r0, [pc, #24]	; (81568 <RTC_Handler+0x20>)
   81550:	4b06      	ldr	r3, [pc, #24]	; (8156c <RTC_Handler+0x24>)
   81552:	4798      	blx	r3
	PushTask(Shell,_SHELL_PROMPT,0,0);
   81554:	2300      	movs	r3, #0
   81556:	9300      	str	r3, [sp, #0]
   81558:	2204      	movs	r2, #4
   8155a:	4905      	ldr	r1, [pc, #20]	; (81570 <RTC_Handler+0x28>)
   8155c:	2066      	movs	r0, #102	; 0x66
   8155e:	4c05      	ldr	r4, [pc, #20]	; (81574 <RTC_Handler+0x2c>)
   81560:	47a0      	blx	r4
}
   81562:	b002      	add	sp, #8
   81564:	bd10      	pop	{r4, pc}
   81566:	bf00      	nop
   81568:	400e1260 	.word	0x400e1260
   8156c:	000847c5 	.word	0x000847c5
   81570:	00082365 	.word	0x00082365
   81574:	00083829 	.word	0x00083829

00081578 <Lcd>:

#define ST_LCD_ON		0x0000001


uint32_t Lcd(uint32_t sc, ...)
{
   81578:	b40f      	push	{r0, r1, r2, r3}
   8157a:	b538      	push	{r3, r4, r5, lr}
	switch(sc)
   8157c:	9904      	ldr	r1, [sp, #16]
   8157e:	1e4b      	subs	r3, r1, #1
   81580:	2b68      	cmp	r3, #104	; 0x68
   81582:	f200 8200 	bhi.w	81986 <Lcd+0x40e>
   81586:	e8df f013 	tbh	[pc, r3, lsl #1]
   8158a:	010d      	.short	0x010d
   8158c:	0167015d 	.word	0x0167015d
   81590:	01830171 	.word	0x01830171
   81594:	019b018f 	.word	0x019b018f
   81598:	01a90203 	.word	0x01a90203
   8159c:	01fe01db 	.word	0x01fe01db
   815a0:	01fe01fe 	.word	0x01fe01fe
   815a4:	01fe01fe 	.word	0x01fe01fe
   815a8:	01fe01fe 	.word	0x01fe01fe
   815ac:	01fe01fe 	.word	0x01fe01fe
   815b0:	01fe01fe 	.word	0x01fe01fe
   815b4:	01fe01fe 	.word	0x01fe01fe
   815b8:	01fe01fe 	.word	0x01fe01fe
   815bc:	01fe01fe 	.word	0x01fe01fe
   815c0:	01fe01fe 	.word	0x01fe01fe
   815c4:	01fe01fe 	.word	0x01fe01fe
   815c8:	01fe01fe 	.word	0x01fe01fe
   815cc:	01fe01fe 	.word	0x01fe01fe
   815d0:	01fe01fe 	.word	0x01fe01fe
   815d4:	01fe01fe 	.word	0x01fe01fe
   815d8:	01fe01fe 	.word	0x01fe01fe
   815dc:	01fe01fe 	.word	0x01fe01fe
   815e0:	01fe01fe 	.word	0x01fe01fe
   815e4:	01fe01fe 	.word	0x01fe01fe
   815e8:	01fe01fe 	.word	0x01fe01fe
   815ec:	01fe01fe 	.word	0x01fe01fe
   815f0:	01fe01fe 	.word	0x01fe01fe
   815f4:	01fe01fe 	.word	0x01fe01fe
   815f8:	01fe01fe 	.word	0x01fe01fe
   815fc:	01fe01fe 	.word	0x01fe01fe
   81600:	01fe01fe 	.word	0x01fe01fe
   81604:	01fe01fe 	.word	0x01fe01fe
   81608:	01fe01fe 	.word	0x01fe01fe
   8160c:	01fe01fe 	.word	0x01fe01fe
   81610:	01fe01fe 	.word	0x01fe01fe
   81614:	01fe01fe 	.word	0x01fe01fe
   81618:	01fe01fe 	.word	0x01fe01fe
   8161c:	01fe01fe 	.word	0x01fe01fe
   81620:	01fe01fe 	.word	0x01fe01fe
   81624:	01fe01fe 	.word	0x01fe01fe
   81628:	01fe01fe 	.word	0x01fe01fe
   8162c:	01fe01fe 	.word	0x01fe01fe
   81630:	01fe01fe 	.word	0x01fe01fe
   81634:	01fe01fe 	.word	0x01fe01fe
   81638:	01fe01fe 	.word	0x01fe01fe
   8163c:	01fe01fe 	.word	0x01fe01fe
   81640:	01fe01fe 	.word	0x01fe01fe
   81644:	01fe01fe 	.word	0x01fe01fe
   81648:	01fe01fe 	.word	0x01fe01fe
   8164c:	01fe01fe 	.word	0x01fe01fe
   81650:	00b80069 	.word	0x00b80069
   81654:	00e20102 	.word	0x00e20102
   81658:	00dd00ed 	.word	0x00dd00ed
	{
	case LCD_NEW:
		_LcdSetDataLineOut();
   8165c:	2009      	movs	r0, #9
   8165e:	f7ff ff8b 	bl	81578 <Lcd>
		gpio_configure_pin(LCD_E,			LCD_PIN_OUT_FLAGS);
   81662:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81666:	2004      	movs	r0, #4
   81668:	4cae      	ldr	r4, [pc, #696]	; (81924 <Lcd+0x3ac>)
   8166a:	47a0      	blx	r4
		gpio_configure_pin(LCD_RWB,			LCD_PIN_OUT_FLAGS);
   8166c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81670:	2005      	movs	r0, #5
   81672:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,			LCD_PIN_OUT_FLAGS);
   81674:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81678:	2006      	movs	r0, #6
   8167a:	47a0      	blx	r4
		gpio_configure_pin(LCD_BACKLIGHT,	LCD_PIN_OUT_FLAGS);
   8167c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81680:	2007      	movs	r0, #7
   81682:	47a0      	blx	r4

		gpio_set_pin_low(LCD_E);
   81684:	2004      	movs	r0, #4
   81686:	4ca8      	ldr	r4, [pc, #672]	; (81928 <Lcd+0x3b0>)
   81688:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   8168a:	2006      	movs	r0, #6
   8168c:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RWB);
   8168e:	2005      	movs	r0, #5
   81690:	47a0      	blx	r4
		gpio_set_pin_high(LCD_BACKLIGHT);
   81692:	2007      	movs	r0, #7
   81694:	4ba5      	ldr	r3, [pc, #660]	; (8192c <Lcd+0x3b4>)
   81696:	4798      	blx	r3

		delay_ms(500);
   81698:	48a5      	ldr	r0, [pc, #660]	; (81930 <Lcd+0x3b8>)
   8169a:	4ca6      	ldr	r4, [pc, #664]	; (81934 <Lcd+0x3bc>)
   8169c:	47a0      	blx	r4

#ifdef LCD_USE_8_BIT_INTERFACE
		//8 bit data interface/////////////////////////////
		_LcdWriteInst(0x30);
   8169e:	2130      	movs	r1, #48	; 0x30
   816a0:	2002      	movs	r0, #2
   816a2:	f7ff ff69 	bl	81578 <Lcd>
		delay_ms(6);
   816a6:	f24a 00b7 	movw	r0, #41143	; 0xa0b7
   816aa:	47a0      	blx	r4
		_LcdWriteInst(0x30);
   816ac:	2130      	movs	r1, #48	; 0x30
   816ae:	2002      	movs	r0, #2
   816b0:	f7ff ff62 	bl	81578 <Lcd>
		delay_ms(2);
   816b4:	f243 5093 	movw	r0, #13715	; 0x3593
   816b8:	47a0      	blx	r4
		_LcdWriteInst(0x30);
   816ba:	2130      	movs	r1, #48	; 0x30
   816bc:	2002      	movs	r0, #2
   816be:	f7ff ff5b 	bl	81578 <Lcd>
		delay_ms(2);
   816c2:	f243 5093 	movw	r0, #13715	; 0x3593
   816c6:	47a0      	blx	r4
		_LcdWriteInst(0x38);	//SET FUNCTION : 8 bits interface/2 line display/5x7 dots
   816c8:	2138      	movs	r1, #56	; 0x38
   816ca:	2002      	movs	r0, #2
   816cc:	f7ff ff54 	bl	81578 <Lcd>
		delay_ms(10);
		_LcdWriteByte(0x20);
		delay_ms(10);
		_LcdWriteInst(0x28);	//SET FUNCTION : 4 bits interface/2 line display/5x7 dots
#endif
		_LcdWriteInst(0x08);	//DISPLAY OFF
   816d0:	2108      	movs	r1, #8
   816d2:	2002      	movs	r0, #2
   816d4:	f7ff ff50 	bl	81578 <Lcd>
		_LcdWriteInst(0x01);	//DISPLAY CLEAR
   816d8:	2101      	movs	r1, #1
   816da:	2002      	movs	r0, #2
   816dc:	f7ff ff4c 	bl	81578 <Lcd>
		_LcdWriteInst(0x06);	//ENTRY MODE SET : Cursor Increase/Display is not shift
   816e0:	2106      	movs	r1, #6
   816e2:	2002      	movs	r0, #2
   816e4:	f7ff ff48 	bl	81578 <Lcd>
		_LcdWriteInst(0x0C);	//DISPLAY ON/CURSOR OFF
   816e8:	210c      	movs	r1, #12
   816ea:	2002      	movs	r0, #2
   816ec:	f7ff ff44 	bl	81578 <Lcd>

		lcd.status = ST_LCD_ON;
   816f0:	2201      	movs	r2, #1
   816f2:	4b91      	ldr	r3, [pc, #580]	; (81938 <Lcd+0x3c0>)
   816f4:	601a      	str	r2, [r3, #0]

	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_LCD_SWITCH_BAD_SC,sc);
	}
	return 0;
   816f6:	2400      	movs	r4, #0
		break;
   816f8:	e14b      	b.n	81992 <Lcd+0x41a>
		_LcdWriteInst(0x08);	//DISPLAY OFF
   816fa:	2108      	movs	r1, #8
   816fc:	2002      	movs	r0, #2
   816fe:	f7ff ff3b 	bl	81578 <Lcd>
		_LcdSetDataLineIn();
   81702:	200a      	movs	r0, #10
   81704:	f7ff ff38 	bl	81578 <Lcd>
		gpio_configure_pin(LCD_E,			LCD_PIN_OUT_FLAGS);
   81708:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8170c:	2004      	movs	r0, #4
   8170e:	4c85      	ldr	r4, [pc, #532]	; (81924 <Lcd+0x3ac>)
   81710:	47a0      	blx	r4
		gpio_configure_pin(LCD_RWB,			LCD_PIN_OUT_FLAGS);
   81712:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81716:	2005      	movs	r0, #5
   81718:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,			LCD_PIN_OUT_FLAGS);
   8171a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8171e:	2006      	movs	r0, #6
   81720:	47a0      	blx	r4
		gpio_configure_pin(LCD_BACKLIGHT,	LCD_PIN_OUT_FLAGS);
   81722:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81726:	2007      	movs	r0, #7
   81728:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   8172a:	2004      	movs	r0, #4
   8172c:	4c7e      	ldr	r4, [pc, #504]	; (81928 <Lcd+0x3b0>)
   8172e:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   81730:	2006      	movs	r0, #6
   81732:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RWB);
   81734:	2005      	movs	r0, #5
   81736:	47a0      	blx	r4
		gpio_set_pin_low(LCD_BACKLIGHT);
   81738:	2007      	movs	r0, #7
   8173a:	47a0      	blx	r4
		lcd.status=0;
   8173c:	2400      	movs	r4, #0
   8173e:	4b7e      	ldr	r3, [pc, #504]	; (81938 <Lcd+0x3c0>)
   81740:	601c      	str	r4, [r3, #0]
		break;
   81742:	e126      	b.n	81992 <Lcd+0x41a>
		return (uint32_t)(mIsBitsSet(lcd.status,ST_LCD_ON));
   81744:	4b7c      	ldr	r3, [pc, #496]	; (81938 <Lcd+0x3c0>)
   81746:	681c      	ldr	r4, [r3, #0]
   81748:	f004 0401 	and.w	r4, r4, #1
   8174c:	e121      	b.n	81992 <Lcd+0x41a>
		_LcdSetCursor(_line,_col);
   8174e:	9a07      	ldr	r2, [sp, #28]
   81750:	9906      	ldr	r1, [sp, #24]
   81752:	2007      	movs	r0, #7
   81754:	f7ff ff10 	bl	81578 <Lcd>
		_LcdWriteData(_ch);
   81758:	9905      	ldr	r1, [sp, #20]
   8175a:	2003      	movs	r0, #3
   8175c:	f7ff ff0c 	bl	81578 <Lcd>
	return 0;
   81760:	2400      	movs	r4, #0
break;
   81762:	e116      	b.n	81992 <Lcd+0x41a>
		_LcdSetCursor(_line,_col);
   81764:	9a07      	ldr	r2, [sp, #28]
   81766:	9906      	ldr	r1, [sp, #24]
   81768:	2007      	movs	r0, #7
   8176a:	f7ff ff05 	bl	81578 <Lcd>
		while(*(char*)_str)
   8176e:	9c05      	ldr	r4, [sp, #20]
   81770:	7821      	ldrb	r1, [r4, #0]
   81772:	2900      	cmp	r1, #0
   81774:	f000 8112 	beq.w	8199c <Lcd+0x424>
			_LcdWriteData(*(char*)_str++);
   81778:	2503      	movs	r5, #3
   8177a:	3401      	adds	r4, #1
   8177c:	9405      	str	r4, [sp, #20]
   8177e:	4628      	mov	r0, r5
   81780:	f7ff fefa 	bl	81578 <Lcd>
		while(*(char*)_str)
   81784:	7821      	ldrb	r1, [r4, #0]
   81786:	2900      	cmp	r1, #0
   81788:	d1f7      	bne.n	8177a <Lcd+0x202>
	return 0;
   8178a:	2400      	movs	r4, #0
   8178c:	e101      	b.n	81992 <Lcd+0x41a>
		if(_onOff)
   8178e:	9c05      	ldr	r4, [sp, #20]
   81790:	b124      	cbz	r4, 8179c <Lcd+0x224>
			gpio_set_pin_high(LCD_BACKLIGHT);
   81792:	2007      	movs	r0, #7
   81794:	4b65      	ldr	r3, [pc, #404]	; (8192c <Lcd+0x3b4>)
   81796:	4798      	blx	r3
	return 0;
   81798:	2400      	movs	r4, #0
   8179a:	e0fa      	b.n	81992 <Lcd+0x41a>
			gpio_set_pin_low(LCD_BACKLIGHT);
   8179c:	2007      	movs	r0, #7
   8179e:	4b62      	ldr	r3, [pc, #392]	; (81928 <Lcd+0x3b0>)
   817a0:	4798      	blx	r3
   817a2:	e0f6      	b.n	81992 <Lcd+0x41a>
		_LcdSetDataLineOut();
   817a4:	2009      	movs	r0, #9
   817a6:	f7ff fee7 	bl	81578 <Lcd>
		gpio_set_pin_low(LCD_RWB);
   817aa:	2005      	movs	r0, #5
   817ac:	4b5e      	ldr	r3, [pc, #376]	; (81928 <Lcd+0x3b0>)
   817ae:	4798      	blx	r3
		_LcdEup();
   817b0:	2005      	movs	r0, #5
   817b2:	f7ff fee1 	bl	81578 <Lcd>
		(_byte&0x80)?gpio_set_pin_high(LCD_DB7):gpio_set_pin_low(LCD_DB7);
   817b6:	9c05      	ldr	r4, [sp, #20]
   817b8:	f014 0f80 	tst.w	r4, #128	; 0x80
   817bc:	f04f 0003 	mov.w	r0, #3
   817c0:	bf14      	ite	ne
   817c2:	4b5a      	ldrne	r3, [pc, #360]	; (8192c <Lcd+0x3b4>)
   817c4:	4b58      	ldreq	r3, [pc, #352]	; (81928 <Lcd+0x3b0>)
   817c6:	4798      	blx	r3
		(_byte&0x40)?gpio_set_pin_high(LCD_DB6):gpio_set_pin_low(LCD_DB6);
   817c8:	b2e4      	uxtb	r4, r4
   817ca:	f014 0f40 	tst.w	r4, #64	; 0x40
   817ce:	f04f 0002 	mov.w	r0, #2
   817d2:	bf14      	ite	ne
   817d4:	4b55      	ldrne	r3, [pc, #340]	; (8192c <Lcd+0x3b4>)
   817d6:	4b54      	ldreq	r3, [pc, #336]	; (81928 <Lcd+0x3b0>)
   817d8:	4798      	blx	r3
		(_byte&0x20)?gpio_set_pin_high(LCD_DB5):gpio_set_pin_low(LCD_DB5);
   817da:	f014 0f20 	tst.w	r4, #32
   817de:	f04f 0001 	mov.w	r0, #1
   817e2:	bf14      	ite	ne
   817e4:	4b51      	ldrne	r3, [pc, #324]	; (8192c <Lcd+0x3b4>)
   817e6:	4b50      	ldreq	r3, [pc, #320]	; (81928 <Lcd+0x3b0>)
   817e8:	4798      	blx	r3
		(_byte&0x10)?gpio_set_pin_high(LCD_DB4):gpio_set_pin_low(LCD_DB4);
   817ea:	f014 0f10 	tst.w	r4, #16
   817ee:	f04f 0000 	mov.w	r0, #0
   817f2:	bf14      	ite	ne
   817f4:	4b4d      	ldrne	r3, [pc, #308]	; (8192c <Lcd+0x3b4>)
   817f6:	4b4c      	ldreq	r3, [pc, #304]	; (81928 <Lcd+0x3b0>)
   817f8:	4798      	blx	r3
		(_byte&0x08)?gpio_set_pin_high(LCD_DB3):gpio_set_pin_low(LCD_DB3);
   817fa:	f014 0f08 	tst.w	r4, #8
   817fe:	f04f 002b 	mov.w	r0, #43	; 0x2b
   81802:	bf14      	ite	ne
   81804:	4b49      	ldrne	r3, [pc, #292]	; (8192c <Lcd+0x3b4>)
   81806:	4b48      	ldreq	r3, [pc, #288]	; (81928 <Lcd+0x3b0>)
   81808:	4798      	blx	r3
		(_byte&0x04)?gpio_set_pin_high(LCD_DB2):gpio_set_pin_low(LCD_DB2);
   8180a:	f014 0f04 	tst.w	r4, #4
   8180e:	f04f 002a 	mov.w	r0, #42	; 0x2a
   81812:	bf14      	ite	ne
   81814:	4b45      	ldrne	r3, [pc, #276]	; (8192c <Lcd+0x3b4>)
   81816:	4b44      	ldreq	r3, [pc, #272]	; (81928 <Lcd+0x3b0>)
   81818:	4798      	blx	r3
		(_byte&0x02)?gpio_set_pin_high(LCD_DB1):gpio_set_pin_low(LCD_DB1);
   8181a:	f014 0f02 	tst.w	r4, #2
   8181e:	f04f 0029 	mov.w	r0, #41	; 0x29
   81822:	bf14      	ite	ne
   81824:	4b41      	ldrne	r3, [pc, #260]	; (8192c <Lcd+0x3b4>)
   81826:	4b40      	ldreq	r3, [pc, #256]	; (81928 <Lcd+0x3b0>)
   81828:	4798      	blx	r3
		(_byte&0x01)?gpio_set_pin_high(LCD_DB0):gpio_set_pin_low(LCD_DB0);
   8182a:	f014 0f01 	tst.w	r4, #1
   8182e:	f04f 0028 	mov.w	r0, #40	; 0x28
   81832:	bf14      	ite	ne
   81834:	4b3d      	ldrne	r3, [pc, #244]	; (8192c <Lcd+0x3b4>)
   81836:	4b3c      	ldreq	r3, [pc, #240]	; (81928 <Lcd+0x3b0>)
   81838:	4798      	blx	r3
		_LcdEdown();
   8183a:	2006      	movs	r0, #6
   8183c:	f7ff fe9c 	bl	81578 <Lcd>
	return 0;
   81840:	2400      	movs	r4, #0
		break;
   81842:	e0a6      	b.n	81992 <Lcd+0x41a>
		gpio_set_pin_low(LCD_RS);
   81844:	2006      	movs	r0, #6
   81846:	4b38      	ldr	r3, [pc, #224]	; (81928 <Lcd+0x3b0>)
   81848:	4798      	blx	r3
		_LcdWriteByte(_inst);
   8184a:	f89d 1014 	ldrb.w	r1, [sp, #20]
   8184e:	2001      	movs	r0, #1
   81850:	f7ff fe92 	bl	81578 <Lcd>
	return 0;
   81854:	2400      	movs	r4, #0
		break;
   81856:	e09c      	b.n	81992 <Lcd+0x41a>
		gpio_set_pin_high(LCD_RS);
   81858:	2006      	movs	r0, #6
   8185a:	4b34      	ldr	r3, [pc, #208]	; (8192c <Lcd+0x3b4>)
   8185c:	4798      	blx	r3
		_LcdWriteByte(_data);
   8185e:	f89d 1014 	ldrb.w	r1, [sp, #20]
   81862:	2001      	movs	r0, #1
   81864:	f7ff fe88 	bl	81578 <Lcd>
	return 0;
   81868:	2400      	movs	r4, #0
		break;
   8186a:	e092      	b.n	81992 <Lcd+0x41a>
		delay_us(500);
   8186c:	f640 5065 	movw	r0, #3429	; 0xd65
   81870:	4c30      	ldr	r4, [pc, #192]	; (81934 <Lcd+0x3bc>)
   81872:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   81874:	2004      	movs	r0, #4
   81876:	4b2d      	ldr	r3, [pc, #180]	; (8192c <Lcd+0x3b4>)
   81878:	4798      	blx	r3
		delay_us(100);
   8187a:	f240 20ae 	movw	r0, #686	; 0x2ae
   8187e:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   81880:	2004      	movs	r0, #4
   81882:	4b29      	ldr	r3, [pc, #164]	; (81928 <Lcd+0x3b0>)
   81884:	4798      	blx	r3
		delay_us(500);
   81886:	f640 5065 	movw	r0, #3429	; 0xd65
   8188a:	47a0      	blx	r4
	return 0;
   8188c:	2400      	movs	r4, #0
		break;
   8188e:	e080      	b.n	81992 <Lcd+0x41a>
		delay_us(500);
   81890:	f640 5065 	movw	r0, #3429	; 0xd65
   81894:	4c27      	ldr	r4, [pc, #156]	; (81934 <Lcd+0x3bc>)
   81896:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   81898:	2004      	movs	r0, #4
   8189a:	4b24      	ldr	r3, [pc, #144]	; (8192c <Lcd+0x3b4>)
   8189c:	4798      	blx	r3
		delay_us(50);
   8189e:	f240 1057 	movw	r0, #343	; 0x157
   818a2:	47a0      	blx	r4
	return 0;
   818a4:	2400      	movs	r4, #0
		break;
   818a6:	e074      	b.n	81992 <Lcd+0x41a>
		delay_us(50);
   818a8:	f240 1057 	movw	r0, #343	; 0x157
   818ac:	4c21      	ldr	r4, [pc, #132]	; (81934 <Lcd+0x3bc>)
   818ae:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   818b0:	2004      	movs	r0, #4
   818b2:	4b1d      	ldr	r3, [pc, #116]	; (81928 <Lcd+0x3b0>)
   818b4:	4798      	blx	r3
		delay_us(500);
   818b6:	f640 5065 	movw	r0, #3429	; 0xd65
   818ba:	47a0      	blx	r4
	return 0;
   818bc:	2400      	movs	r4, #0
		break;
   818be:	e068      	b.n	81992 <Lcd+0x41a>
		_LcdWriteInst((line2addr[_nLine&0x03]+_nCol)|0x80);
   818c0:	9b05      	ldr	r3, [sp, #20]
   818c2:	f003 0303 	and.w	r3, r3, #3
   818c6:	4a1d      	ldr	r2, [pc, #116]	; (8193c <Lcd+0x3c4>)
   818c8:	5cd1      	ldrb	r1, [r2, r3]
   818ca:	9b06      	ldr	r3, [sp, #24]
   818cc:	4419      	add	r1, r3
   818ce:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   818d2:	2002      	movs	r0, #2
   818d4:	f7ff fe50 	bl	81578 <Lcd>
	return 0;
   818d8:	2400      	movs	r4, #0
		break;
   818da:	e05a      	b.n	81992 <Lcd+0x41a>
		gpio_configure_pin(LCD_DB4,			LCD_PIN_OUT_FLAGS);
   818dc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   818e0:	2000      	movs	r0, #0
   818e2:	4c10      	ldr	r4, [pc, #64]	; (81924 <Lcd+0x3ac>)
   818e4:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB5,			LCD_PIN_OUT_FLAGS);
   818e6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   818ea:	2001      	movs	r0, #1
   818ec:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB6,			LCD_PIN_OUT_FLAGS);
   818ee:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   818f2:	2002      	movs	r0, #2
   818f4:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB7,			LCD_PIN_OUT_FLAGS);
   818f6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   818fa:	2003      	movs	r0, #3
   818fc:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB0,			LCD_PIN_OUT_FLAGS);
   818fe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81902:	2028      	movs	r0, #40	; 0x28
   81904:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB1,			LCD_PIN_OUT_FLAGS);
   81906:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8190a:	2029      	movs	r0, #41	; 0x29
   8190c:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB2,			LCD_PIN_OUT_FLAGS);
   8190e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81912:	202a      	movs	r0, #42	; 0x2a
   81914:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB3,			LCD_PIN_OUT_FLAGS);
   81916:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8191a:	202b      	movs	r0, #43	; 0x2b
   8191c:	47a0      	blx	r4
	return 0;
   8191e:	2400      	movs	r4, #0
		break;
   81920:	e037      	b.n	81992 <Lcd+0x41a>
   81922:	bf00      	nop
   81924:	000841e1 	.word	0x000841e1
   81928:	000841a5 	.word	0x000841a5
   8192c:	0008418b 	.word	0x0008418b
   81930:	003450dc 	.word	0x003450dc
   81934:	20000001 	.word	0x20000001
   81938:	200019f4 	.word	0x200019f4
   8193c:	00089ef0 	.word	0x00089ef0
		gpio_configure_pin(LCD_DB4,			LCD_PIN_IN_FLAGS);
   81940:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81944:	2000      	movs	r0, #0
   81946:	4c16      	ldr	r4, [pc, #88]	; (819a0 <Lcd+0x428>)
   81948:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB5,			LCD_PIN_IN_FLAGS);
   8194a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8194e:	2001      	movs	r0, #1
   81950:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB6,			LCD_PIN_IN_FLAGS);
   81952:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81956:	2002      	movs	r0, #2
   81958:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB7,			LCD_PIN_IN_FLAGS);
   8195a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8195e:	2003      	movs	r0, #3
   81960:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB0,			LCD_PIN_IN_FLAGS);
   81962:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81966:	2028      	movs	r0, #40	; 0x28
   81968:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB1,			LCD_PIN_IN_FLAGS);
   8196a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8196e:	2029      	movs	r0, #41	; 0x29
   81970:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB2,			LCD_PIN_IN_FLAGS);
   81972:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81976:	202a      	movs	r0, #42	; 0x2a
   81978:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB3,			LCD_PIN_IN_FLAGS);
   8197a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8197e:	202b      	movs	r0, #43	; 0x2b
   81980:	47a0      	blx	r4
	return 0;
   81982:	2400      	movs	r4, #0
		break;
   81984:	e005      	b.n	81992 <Lcd+0x41a>
		Error(ERROR_LCD_SWITCH_BAD_SC,sc);
   81986:	200f      	movs	r0, #15
   81988:	4b06      	ldr	r3, [pc, #24]	; (819a4 <Lcd+0x42c>)
   8198a:	4798      	blx	r3
	return 0;
   8198c:	2400      	movs	r4, #0
   8198e:	e000      	b.n	81992 <Lcd+0x41a>
   81990:	2400      	movs	r4, #0
}
   81992:	4620      	mov	r0, r4
   81994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81998:	b004      	add	sp, #16
   8199a:	4770      	bx	lr
	return 0;
   8199c:	2400      	movs	r4, #0
   8199e:	e7f8      	b.n	81992 <Lcd+0x41a>
   819a0:	000841e1 	.word	0x000841e1
   819a4:	00080f15 	.word	0x00080f15

000819a8 <LcdFindHalf>:

uint8_t LcdFindHalf(uint32_t len)
{
   819a8:	b508      	push	{r3, lr}
	float col;
	col = 20 - len;
   819aa:	f1c0 0014 	rsb	r0, r0, #20
   819ae:	4b05      	ldr	r3, [pc, #20]	; (819c4 <LcdFindHalf+0x1c>)
   819b0:	4798      	blx	r3
	col = col/2;
   819b2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   819b6:	4b04      	ldr	r3, [pc, #16]	; (819c8 <LcdFindHalf+0x20>)
   819b8:	4798      	blx	r3
	return col;
   819ba:	4b04      	ldr	r3, [pc, #16]	; (819cc <LcdFindHalf+0x24>)
   819bc:	4798      	blx	r3
   819be:	b2c0      	uxtb	r0, r0
   819c0:	bd08      	pop	{r3, pc}
   819c2:	bf00      	nop
   819c4:	00084ca1 	.word	0x00084ca1
   819c8:	00084d51 	.word	0x00084d51
   819cc:	00084ff1 	.word	0x00084ff1

000819d0 <Modbus>:
	_COMRS485_FLUSH
};
int i;

uint32_t Modbus(uint32_t sc,...)
{
   819d0:	b40f      	push	{r0, r1, r2, r3}
   819d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   819d6:	b083      	sub	sp, #12
	switch(sc)
   819d8:	990c      	ldr	r1, [sp, #48]	; 0x30
   819da:	2964      	cmp	r1, #100	; 0x64
   819dc:	f000 80cb 	beq.w	81b76 <Modbus+0x1a6>
   819e0:	d837      	bhi.n	81a52 <Modbus+0x82>
   819e2:	2904      	cmp	r1, #4
   819e4:	f000 847e 	beq.w	822e4 <Modbus+0x914>
   819e8:	d912      	bls.n	81a10 <Modbus+0x40>
   819ea:	2906      	cmp	r1, #6
   819ec:	d06c      	beq.n	81ac8 <Modbus+0xf8>
   819ee:	f0c0 84a0 	bcc.w	82332 <Modbus+0x962>
   819f2:	2907      	cmp	r1, #7
   819f4:	f040 80bb 	bne.w	81b6e <Modbus+0x19e>
	case _MODBUS_COMMAND_ACKNOWNLEDGING_WRITE_SINGLE_COIL:
		Putstr("\r\n\nWRITE SINGLE COIL ACK!!\r\n");
		rs485_Send(modbus.frameLen = MODBUS_WRITE_SINGLE_COIL_FRAME_LEN, 0);
		break;
	case _MODBUS_COMMAND_ACKNOWNLEDGING_READ_COILS:
		Putstr("\r\n\nREAD COILS ACK!!\r\n");
   819f8:	49a3      	ldr	r1, [pc, #652]	; (81c88 <Modbus+0x2b8>)
   819fa:	2067      	movs	r0, #103	; 0x67
   819fc:	4ba3      	ldr	r3, [pc, #652]	; (81c8c <Modbus+0x2bc>)
   819fe:	4798      	blx	r3
		rs485_Send(modbus.frameLen = MODBUS_READ_COILS_FRAME_LEN, 0);
   81a00:	2108      	movs	r1, #8
   81a02:	4ba3      	ldr	r3, [pc, #652]	; (81c90 <Modbus+0x2c0>)
   81a04:	8259      	strh	r1, [r3, #18]
   81a06:	2200      	movs	r2, #0
   81a08:	2066      	movs	r0, #102	; 0x66
   81a0a:	4ba2      	ldr	r3, [pc, #648]	; (81c94 <Modbus+0x2c4>)
   81a0c:	4798      	blx	r3
		break;
   81a0e:	e05b      	b.n	81ac8 <Modbus+0xf8>
	switch(sc)
   81a10:	2901      	cmp	r1, #1
   81a12:	f000 8244 	beq.w	81e9e <Modbus+0x4ce>
   81a16:	2902      	cmp	r1, #2
   81a18:	f040 80a9 	bne.w	81b6e <Modbus+0x19e>
	case _MODBUS_SLAVE_NOT_ACK:
#define _slaveAddr		pa1
		Putstr("\r\n\t***** MODBUS_SLAVE_NOT_ACK FROM SLAVE #");
   81a1c:	499e      	ldr	r1, [pc, #632]	; (81c98 <Modbus+0x2c8>)
   81a1e:	2067      	movs	r0, #103	; 0x67
   81a20:	4c9a      	ldr	r4, [pc, #616]	; (81c8c <Modbus+0x2bc>)
   81a22:	47a0      	blx	r4
		sprintf(buf, "%02x *****\r\n", _slaveAddr);
   81a24:	4d9d      	ldr	r5, [pc, #628]	; (81c9c <Modbus+0x2cc>)
   81a26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81a28:	499d      	ldr	r1, [pc, #628]	; (81ca0 <Modbus+0x2d0>)
   81a2a:	4628      	mov	r0, r5
   81a2c:	4b9d      	ldr	r3, [pc, #628]	; (81ca4 <Modbus+0x2d4>)
   81a2e:	4798      	blx	r3
		Putstr(buf);
   81a30:	4629      	mov	r1, r5
   81a32:	2067      	movs	r0, #103	; 0x67
   81a34:	47a0      	blx	r4
		mBitsClr(modbus.status, ST_SLAVE_ASK);
   81a36:	4a96      	ldr	r2, [pc, #600]	; (81c90 <Modbus+0x2c0>)
   81a38:	8813      	ldrh	r3, [r2, #0]
   81a3a:	f023 0308 	bic.w	r3, r3, #8
   81a3e:	8013      	strh	r3, [r2, #0]
		PushTask(Modbus, MODBUS_SLAVE_SEND, 0, 100);
   81a40:	2364      	movs	r3, #100	; 0x64
   81a42:	9300      	str	r3, [sp, #0]
   81a44:	2300      	movs	r3, #0
   81a46:	226e      	movs	r2, #110	; 0x6e
   81a48:	4997      	ldr	r1, [pc, #604]	; (81ca8 <Modbus+0x2d8>)
   81a4a:	2066      	movs	r0, #102	; 0x66
   81a4c:	4c97      	ldr	r4, [pc, #604]	; (81cac <Modbus+0x2dc>)
   81a4e:	47a0      	blx	r4
		#undef _slaveAddr
		break;
   81a50:	e03a      	b.n	81ac8 <Modbus+0xf8>
	switch(sc)
   81a52:	2968      	cmp	r1, #104	; 0x68
   81a54:	f000 81dd 	beq.w	81e12 <Modbus+0x442>
   81a58:	d93c      	bls.n	81ad4 <Modbus+0x104>
   81a5a:	296e      	cmp	r1, #110	; 0x6e
   81a5c:	f000 80be 	beq.w	81bdc <Modbus+0x20c>
   81a60:	29c9      	cmp	r1, #201	; 0xc9
   81a62:	f040 8082 	bne.w	81b6a <Modbus+0x19a>
		sc=rs485_GetBufPtr();
   81a66:	2067      	movs	r0, #103	; 0x67
   81a68:	4f8a      	ldr	r7, [pc, #552]	; (81c94 <Modbus+0x2c4>)
   81a6a:	47b8      	blx	r7
   81a6c:	4605      	mov	r5, r0
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->moduleAddr=MODBUS_BROADCAST_ADDRESS),0xFFFF);
   81a6e:	207f      	movs	r0, #127	; 0x7f
   81a70:	7028      	strb	r0, [r5, #0]
   81a72:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81a76:	4e8e      	ldr	r6, [pc, #568]	; (81cb0 <Modbus+0x2e0>)
   81a78:	47b0      	blx	r6
   81a7a:	4c85      	ldr	r4, [pc, #532]	; (81c90 <Modbus+0x2c0>)
   81a7c:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->functionCode=NETWORK_ATTACH),modbus.crc);
   81a7e:	2064      	movs	r0, #100	; 0x64
   81a80:	7068      	strb	r0, [r5, #1]
   81a82:	8921      	ldrh	r1, [r4, #8]
   81a84:	47b0      	blx	r6
   81a86:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->attach_header.slaveID = 0),modbus.crc);
   81a88:	f04f 0800 	mov.w	r8, #0
   81a8c:	f885 8002 	strb.w	r8, [r5, #2]
   81a90:	8921      	ldrh	r1, [r4, #8]
   81a92:	4640      	mov	r0, r8
   81a94:	47b0      	blx	r6
   81a96:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->attach_header.slaveSerialNumber=0),modbus.crc);
   81a98:	f885 8003 	strb.w	r8, [r5, #3]
   81a9c:	8921      	ldrh	r1, [r4, #8]
   81a9e:	4640      	mov	r0, r8
   81aa0:	47b0      	blx	r6
   81aa2:	b283      	uxth	r3, r0
   81aa4:	8123      	strh	r3, [r4, #8]
		_pModbusTxFramePtr->attach_header.attach_crc = swap16(modbus.crc);
   81aa6:	0200      	lsls	r0, r0, #8
   81aa8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81aac:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   81ab0:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   81ab4:	80a8      	strh	r0, [r5, #4]
		mBitsSet(modbus.status, ST_FRAME_ACK_REQ);
   81ab6:	8823      	ldrh	r3, [r4, #0]
   81ab8:	f043 0302 	orr.w	r3, r3, #2
   81abc:	8023      	strh	r3, [r4, #0]
		rs485_Send((modbus.frameLen = MODBUS_ATTACH_FRAME_LEN),IsAckReq());
   81abe:	2106      	movs	r1, #6
   81ac0:	8261      	strh	r1, [r4, #18]
   81ac2:	2201      	movs	r2, #1
   81ac4:	2066      	movs	r0, #102	; 0x66
   81ac6:	47b8      	blx	r7
		Error(ERROR_MODBUS_SWITCH_BAD_SC,sc);
	}


	return 0;
}
   81ac8:	2000      	movs	r0, #0
   81aca:	b003      	add	sp, #12
   81acc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81ad0:	b004      	add	sp, #16
   81ad2:	4770      	bx	lr
	switch(sc)
   81ad4:	2966      	cmp	r1, #102	; 0x66
   81ad6:	f000 80ff 	beq.w	81cd8 <Modbus+0x308>
   81ada:	2967      	cmp	r1, #103	; 0x67
   81adc:	d147      	bne.n	81b6e <Modbus+0x19e>
		sc=rs485_GetBufPtr();
   81ade:	2067      	movs	r0, #103	; 0x67
   81ae0:	4f6c      	ldr	r7, [pc, #432]	; (81c94 <Modbus+0x2c4>)
   81ae2:	47b8      	blx	r7
   81ae4:	4605      	mov	r5, r0
		modbus.crc=CRC16MODBUSbyte((modbus.destAddr = _pModbusTxFramePtr->moduleAddr=_slaveAddr),0xFFFF);
   81ae6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
   81aea:	7006      	strb	r6, [r0, #0]
   81aec:	4c68      	ldr	r4, [pc, #416]	; (81c90 <Modbus+0x2c0>)
   81aee:	7366      	strb	r6, [r4, #13]
   81af0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81af4:	4630      	mov	r0, r6
   81af6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 81cb0 <Modbus+0x2e0>
   81afa:	47c0      	blx	r8
   81afc:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSbyte((modbus.functionCode = _pModbusTxFramePtr->functionCode = WRITE_SINGLE_COIL), modbus.crc);
   81afe:	2005      	movs	r0, #5
   81b00:	7068      	strb	r0, [r5, #1]
   81b02:	72a0      	strb	r0, [r4, #10]
   81b04:	8921      	ldrh	r1, [r4, #8]
   81b06:	47c0      	blx	r8
   81b08:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSword((_modbusOutputAddr = _pModbusTxFramePtr->writeSingleCoil_header.outputAddr= swap16(_outputAddr)),modbus.crc);
   81b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   81b0c:	0218      	lsls	r0, r3, #8
   81b0e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   81b12:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   81b16:	4318      	orrs	r0, r3
   81b18:	8068      	strh	r0, [r5, #2]
   81b1a:	81e0      	strh	r0, [r4, #14]
   81b1c:	8921      	ldrh	r1, [r4, #8]
   81b1e:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 81cd4 <Modbus+0x304>
   81b22:	47c0      	blx	r8
   81b24:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSword((_modbusOutputValue = _pModbusTxFramePtr->writeSingleCoil_header.outputValue=swap16(_outputValue)),modbus.crc);
   81b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81b28:	0218      	lsls	r0, r3, #8
   81b2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   81b2e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   81b32:	4318      	orrs	r0, r3
   81b34:	80a8      	strh	r0, [r5, #4]
   81b36:	8220      	strh	r0, [r4, #16]
   81b38:	8921      	ldrh	r1, [r4, #8]
   81b3a:	47c0      	blx	r8
   81b3c:	b283      	uxth	r3, r0
   81b3e:	8123      	strh	r3, [r4, #8]
		_pModbusTxFramePtr->writeSingleCoil_header.writeSingleCoil_crc=swap16(modbus.crc);
   81b40:	0200      	lsls	r0, r0, #8
   81b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81b46:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   81b4a:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   81b4e:	80e8      	strh	r0, [r5, #6]
		mBitsSet(modbus.status, ST_FRAME_ACK_REQ);
   81b50:	8823      	ldrh	r3, [r4, #0]
   81b52:	f043 0302 	orr.w	r3, r3, #2
   81b56:	8023      	strh	r3, [r4, #0]
		rs485_Send((modbus.frameLen = MODBUS_WRITE_SINGLE_COIL_FRAME_LEN),(_slaveAddr!=MODBUS_BROADCAST_ADDRESS));
   81b58:	2108      	movs	r1, #8
   81b5a:	8261      	strh	r1, [r4, #18]
   81b5c:	f1b6 027f 	subs.w	r2, r6, #127	; 0x7f
   81b60:	bf18      	it	ne
   81b62:	2201      	movne	r2, #1
   81b64:	2066      	movs	r0, #102	; 0x66
   81b66:	47b8      	blx	r7
		break;
   81b68:	e7ae      	b.n	81ac8 <Modbus+0xf8>
	switch(sc)
   81b6a:	2969      	cmp	r1, #105	; 0x69
   81b6c:	d0ac      	beq.n	81ac8 <Modbus+0xf8>
		Error(ERROR_MODBUS_SWITCH_BAD_SC,sc);
   81b6e:	2021      	movs	r0, #33	; 0x21
   81b70:	4b50      	ldr	r3, [pc, #320]	; (81cb4 <Modbus+0x2e4>)
   81b72:	4798      	blx	r3
   81b74:	e7a8      	b.n	81ac8 <Modbus+0xf8>
		ServicesBufferNew();
   81b76:	2065      	movs	r0, #101	; 0x65
   81b78:	4b4f      	ldr	r3, [pc, #316]	; (81cb8 <Modbus+0x2e8>)
   81b7a:	4798      	blx	r3
		i = 0;
   81b7c:	2300      	movs	r3, #0
   81b7e:	4a4f      	ldr	r2, [pc, #316]	; (81cbc <Modbus+0x2ec>)
   81b80:	6013      	str	r3, [r2, #0]
		modbus.reg=0;
   81b82:	4c43      	ldr	r4, [pc, #268]	; (81c90 <Modbus+0x2c0>)
   81b84:	6023      	str	r3, [r4, #0]
		modbus.IDSlave = 1;
   81b86:	2301      	movs	r3, #1
   81b88:	7523      	strb	r3, [r4, #20]
		if((modbus.moduleAddr=(uint8_t)GetModuleAddr())==0) 
   81b8a:	2067      	movs	r0, #103	; 0x67
   81b8c:	4b4c      	ldr	r3, [pc, #304]	; (81cc0 <Modbus+0x2f0>)
   81b8e:	4798      	blx	r3
   81b90:	b2c0      	uxtb	r0, r0
   81b92:	7320      	strb	r0, [r4, #12]
   81b94:	b990      	cbnz	r0, 81bbc <Modbus+0x1ec>
			mBitsSet(modbus.status,ST_MODULE_IS_MASTER);
   81b96:	8823      	ldrh	r3, [r4, #0]
   81b98:	f043 0301 	orr.w	r3, r3, #1
   81b9c:	8023      	strh	r3, [r4, #0]
			LcdPutstr("MASTER", 3, 6);
   81b9e:	2306      	movs	r3, #6
   81ba0:	2203      	movs	r2, #3
   81ba2:	4948      	ldr	r1, [pc, #288]	; (81cc4 <Modbus+0x2f4>)
   81ba4:	2068      	movs	r0, #104	; 0x68
   81ba6:	4c48      	ldr	r4, [pc, #288]	; (81cc8 <Modbus+0x2f8>)
   81ba8:	47a0      	blx	r4
		if(IsMaster())
   81baa:	4b39      	ldr	r3, [pc, #228]	; (81c90 <Modbus+0x2c0>)
   81bac:	881b      	ldrh	r3, [r3, #0]
   81bae:	f013 0f01 	tst.w	r3, #1
   81bb2:	d089      	beq.n	81ac8 <Modbus+0xf8>
		Modbus(MODBUS_SLAVE_SEND);
   81bb4:	206e      	movs	r0, #110	; 0x6e
   81bb6:	f7ff ff0b 	bl	819d0 <Modbus>
   81bba:	e785      	b.n	81ac8 <Modbus+0xf8>
			sprintf(buf,"Slave ADD:%x", (uint8_t)GetModuleAddr());
   81bbc:	2067      	movs	r0, #103	; 0x67
   81bbe:	4b40      	ldr	r3, [pc, #256]	; (81cc0 <Modbus+0x2f0>)
   81bc0:	4798      	blx	r3
   81bc2:	4c36      	ldr	r4, [pc, #216]	; (81c9c <Modbus+0x2cc>)
   81bc4:	b2c2      	uxtb	r2, r0
   81bc6:	4941      	ldr	r1, [pc, #260]	; (81ccc <Modbus+0x2fc>)
   81bc8:	4620      	mov	r0, r4
   81bca:	4b36      	ldr	r3, [pc, #216]	; (81ca4 <Modbus+0x2d4>)
   81bcc:	4798      	blx	r3
			LcdPutstr(buf, 3, 3);
   81bce:	2303      	movs	r3, #3
   81bd0:	461a      	mov	r2, r3
   81bd2:	4621      	mov	r1, r4
   81bd4:	2068      	movs	r0, #104	; 0x68
   81bd6:	4c3c      	ldr	r4, [pc, #240]	; (81cc8 <Modbus+0x2f8>)
   81bd8:	47a0      	blx	r4
   81bda:	e7e6      	b.n	81baa <Modbus+0x1da>
			if(IsRequestON() || IsMasterAsking())
   81bdc:	4b2c      	ldr	r3, [pc, #176]	; (81c90 <Modbus+0x2c0>)
   81bde:	881b      	ldrh	r3, [r3, #0]
   81be0:	f013 0f0c 	tst.w	r3, #12
   81be4:	d144      	bne.n	81c70 <Modbus+0x2a0>
				mBitsSet(modbus.status, ST_SLAVE_ASK);
   81be6:	4c2a      	ldr	r4, [pc, #168]	; (81c90 <Modbus+0x2c0>)
   81be8:	f043 0308 	orr.w	r3, r3, #8
   81bec:	8023      	strh	r3, [r4, #0]
				sc=rs485_GetBufPtr();
   81bee:	2067      	movs	r0, #103	; 0x67
   81bf0:	4b28      	ldr	r3, [pc, #160]	; (81c94 <Modbus+0x2c4>)
   81bf2:	4798      	blx	r3
   81bf4:	4605      	mov	r5, r0
   81bf6:	900c      	str	r0, [sp, #48]	; 0x30
				modbus.crc=CRC16MODBUSbyte((modbus.destAddr = _pModbusTxFramePtr->moduleAddr=slaves[i]),0xFFFF);
   81bf8:	4e35      	ldr	r6, [pc, #212]	; (81cd0 <Modbus+0x300>)
   81bfa:	4f30      	ldr	r7, [pc, #192]	; (81cbc <Modbus+0x2ec>)
   81bfc:	683b      	ldr	r3, [r7, #0]
   81bfe:	f816 0023 	ldrb.w	r0, [r6, r3, lsl #2]
   81c02:	7028      	strb	r0, [r5, #0]
   81c04:	7360      	strb	r0, [r4, #13]
   81c06:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81c0a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 81cb0 <Modbus+0x2e0>
   81c0e:	47c0      	blx	r8
   81c10:	8120      	strh	r0, [r4, #8]
				modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->functionCode=SLAVE_SEND),modbus.crc);
   81c12:	2065      	movs	r0, #101	; 0x65
   81c14:	7068      	strb	r0, [r5, #1]
   81c16:	8921      	ldrh	r1, [r4, #8]
   81c18:	47c0      	blx	r8
   81c1a:	8120      	strh	r0, [r4, #8]
				modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->slaveSend_headers.slaveFunc=0x00),modbus.crc);
   81c1c:	2000      	movs	r0, #0
   81c1e:	70a8      	strb	r0, [r5, #2]
   81c20:	8921      	ldrh	r1, [r4, #8]
   81c22:	47c0      	blx	r8
   81c24:	b282      	uxth	r2, r0
   81c26:	8122      	strh	r2, [r4, #8]
				_pModbusTxFramePtr->slaveSend_headers.slaveSend_crc = swap16(modbus.crc);
   81c28:	0200      	lsls	r0, r0, #8
   81c2a:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   81c2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   81c32:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   81c36:	f8a5 3003 	strh.w	r3, [r5, #3]
				mBitsSet(modbus.status, ST_FRAME_ACK_REQ);
   81c3a:	8823      	ldrh	r3, [r4, #0]
   81c3c:	f043 0302 	orr.w	r3, r3, #2
   81c40:	8023      	strh	r3, [r4, #0]
				if(slaves[i] == NULL) 
   81c42:	683b      	ldr	r3, [r7, #0]
   81c44:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   81c48:	b1da      	cbz	r2, 81c82 <Modbus+0x2b2>
					i++;
   81c4a:	3301      	adds	r3, #1
   81c4c:	4a1b      	ldr	r2, [pc, #108]	; (81cbc <Modbus+0x2ec>)
   81c4e:	6013      	str	r3, [r2, #0]
				rs485_Send((modbus.frameLen = MODBUS_SLAVE_SEND_FRAME_LEN),IsAckReq());
   81c50:	2105      	movs	r1, #5
   81c52:	4b0f      	ldr	r3, [pc, #60]	; (81c90 <Modbus+0x2c0>)
   81c54:	8259      	strh	r1, [r3, #18]
   81c56:	2201      	movs	r2, #1
   81c58:	2066      	movs	r0, #102	; 0x66
   81c5a:	4b0e      	ldr	r3, [pc, #56]	; (81c94 <Modbus+0x2c4>)
   81c5c:	4798      	blx	r3
				PushTask(Modbus, MODBUS_SLAVE_SEND, 0, 100);
   81c5e:	2364      	movs	r3, #100	; 0x64
   81c60:	9300      	str	r3, [sp, #0]
   81c62:	2300      	movs	r3, #0
   81c64:	226e      	movs	r2, #110	; 0x6e
   81c66:	4910      	ldr	r1, [pc, #64]	; (81ca8 <Modbus+0x2d8>)
   81c68:	2066      	movs	r0, #102	; 0x66
   81c6a:	4c10      	ldr	r4, [pc, #64]	; (81cac <Modbus+0x2dc>)
   81c6c:	47a0      	blx	r4
   81c6e:	e72b      	b.n	81ac8 <Modbus+0xf8>
				PushTask(Modbus, MODBUS_SLAVE_SEND, 0, 100);
   81c70:	2364      	movs	r3, #100	; 0x64
   81c72:	9300      	str	r3, [sp, #0]
   81c74:	2300      	movs	r3, #0
   81c76:	226e      	movs	r2, #110	; 0x6e
   81c78:	490b      	ldr	r1, [pc, #44]	; (81ca8 <Modbus+0x2d8>)
   81c7a:	2066      	movs	r0, #102	; 0x66
   81c7c:	4c0b      	ldr	r4, [pc, #44]	; (81cac <Modbus+0x2dc>)
   81c7e:	47a0      	blx	r4
   81c80:	e722      	b.n	81ac8 <Modbus+0xf8>
					i = 0;
   81c82:	603a      	str	r2, [r7, #0]
   81c84:	e7e4      	b.n	81c50 <Modbus+0x280>
   81c86:	bf00      	nop
   81c88:	0008a0c8 	.word	0x0008a0c8
   81c8c:	00083495 	.word	0x00083495
   81c90:	200019fc 	.word	0x200019fc
   81c94:	00080b25 	.word	0x00080b25
   81c98:	0008a0e0 	.word	0x0008a0e0
   81c9c:	20001a14 	.word	0x20001a14
   81ca0:	0008a10c 	.word	0x0008a10c
   81ca4:	00085125 	.word	0x00085125
   81ca8:	000819d1 	.word	0x000819d1
   81cac:	00083829 	.word	0x00083829
   81cb0:	00080edd 	.word	0x00080edd
   81cb4:	00080f15 	.word	0x00080f15
   81cb8:	00081121 	.word	0x00081121
   81cbc:	200019f8 	.word	0x200019f8
   81cc0:	00083ec5 	.word	0x00083ec5
   81cc4:	00089ef4 	.word	0x00089ef4
   81cc8:	00081579 	.word	0x00081579
   81ccc:	00089efc 	.word	0x00089efc
   81cd0:	0008a11c 	.word	0x0008a11c
   81cd4:	00080ef1 	.word	0x00080ef1
		sc=rs485_GetBufPtr();
   81cd8:	2067      	movs	r0, #103	; 0x67
   81cda:	4ba7      	ldr	r3, [pc, #668]	; (81f78 <Modbus+0x5a8>)
   81cdc:	4798      	blx	r3
   81cde:	4680      	mov	r8, r0
   81ce0:	900c      	str	r0, [sp, #48]	; 0x30
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->moduleAddr=_slaveAddr),0xFFFF);
   81ce2:	4606      	mov	r6, r0
   81ce4:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
   81ce8:	f880 a000 	strb.w	sl, [r0]
   81cec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81cf0:	4650      	mov	r0, sl
   81cf2:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 81fc0 <Modbus+0x5f0>
   81cf6:	47d8      	blx	fp
   81cf8:	4fa0      	ldr	r7, [pc, #640]	; (81f7c <Modbus+0x5ac>)
   81cfa:	8138      	strh	r0, [r7, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->functionCode=_startingAddr),modbus.crc);
   81cfc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   81cfe:	b2e0      	uxtb	r0, r4
   81d00:	f888 0001 	strb.w	r0, [r8, #1]
   81d04:	8939      	ldrh	r1, [r7, #8]
   81d06:	47d8      	blx	fp
   81d08:	8138      	strh	r0, [r7, #8]
		modbus.crc=CRC16MODBUSword((_pModbusTxFramePtr->writeMultipleRegister_header.startingAddr=swap16(_startingAddr)),modbus.crc);
   81d0a:	f3c4 2007 	ubfx	r0, r4, #8, #8
   81d0e:	f888 0002 	strb.w	r0, [r8, #2]
   81d12:	8939      	ldrh	r1, [r7, #8]
   81d14:	4b9a      	ldr	r3, [pc, #616]	; (81f80 <Modbus+0x5b0>)
   81d16:	4798      	blx	r3
   81d18:	8138      	strh	r0, [r7, #8]
		modbus.crc=CRC16MODBUSword((_pModbusTxFramePtr->writeMultipleRegister_header.registerQty=swap16(_registerQty)),modbus.crc);
   81d1a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   81d1e:	fa1f f489 	uxth.w	r4, r9
   81d22:	4625      	mov	r5, r4
   81d24:	ea4f 2009 	mov.w	r0, r9, lsl #8
   81d28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81d2c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   81d30:	ea40 2014 	orr.w	r0, r0, r4, lsr #8
   81d34:	b280      	uxth	r0, r0
   81d36:	f8a8 0003 	strh.w	r0, [r8, #3]
   81d3a:	8939      	ldrh	r1, [r7, #8]
   81d3c:	4b90      	ldr	r3, [pc, #576]	; (81f80 <Modbus+0x5b0>)
   81d3e:	4798      	blx	r3
   81d40:	8138      	strh	r0, [r7, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->writeMultipleRegister_header.byteCount=_registerQty*2),modbus.crc);
   81d42:	ea4f 0049 	mov.w	r0, r9, lsl #1
   81d46:	b2c0      	uxtb	r0, r0
   81d48:	f888 0005 	strb.w	r0, [r8, #5]
   81d4c:	8939      	ldrh	r1, [r7, #8]
   81d4e:	47d8      	blx	fp
   81d50:	8138      	strh	r0, [r7, #8]
		for (_k=0;_k<_registerQty;_k++)
   81d52:	2300      	movs	r3, #0
   81d54:	930e      	str	r3, [sp, #56]	; 0x38
   81d56:	b1bc      	cbz	r4, 81d88 <Modbus+0x3b8>
   81d58:	461f      	mov	r7, r3
			modbus.crc=CRC16MODBUSword((_pModbusTxFramePtr->writeMultipleRegister_header.dataField[_k]=swap16(_dataPtr[_k])),modbus.crc);
   81d5a:	f8df 9220 	ldr.w	r9, [pc, #544]	; 81f7c <Modbus+0x5ac>
   81d5e:	f8df b220 	ldr.w	fp, [pc, #544]	; 81f80 <Modbus+0x5b0>
   81d62:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81d64:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
   81d68:	0218      	lsls	r0, r3, #8
   81d6a:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   81d6e:	b280      	uxth	r0, r0
   81d70:	eb06 0347 	add.w	r3, r6, r7, lsl #1
   81d74:	80d8      	strh	r0, [r3, #6]
   81d76:	f8b9 1008 	ldrh.w	r1, [r9, #8]
   81d7a:	47d8      	blx	fp
   81d7c:	f8a9 0008 	strh.w	r0, [r9, #8]
		for (_k=0;_k<_registerQty;_k++)
   81d80:	3701      	adds	r7, #1
   81d82:	970e      	str	r7, [sp, #56]	; 0x38
   81d84:	42bd      	cmp	r5, r7
   81d86:	d1ec      	bne.n	81d62 <Modbus+0x392>
		_pModbusTxFramePtr->writeMultipleRegister_header.dataField[_k]=swap16(modbus.crc);
   81d88:	4b7c      	ldr	r3, [pc, #496]	; (81f7c <Modbus+0x5ac>)
   81d8a:	8919      	ldrh	r1, [r3, #8]
   81d8c:	020a      	lsls	r2, r1, #8
   81d8e:	eb08 0344 	add.w	r3, r8, r4, lsl #1
   81d92:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   81d96:	80da      	strh	r2, [r3, #6]
		(_slaveAddr!=MODBUS_BROADCAST_ADDRESS)?	mBitsSet(modbus.status, ST_FRAME_ACK_REQ) : mBitsClr(modbus.status, ST_FRAME_ACK_REQ);
   81d98:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
   81d9c:	4a77      	ldr	r2, [pc, #476]	; (81f7c <Modbus+0x5ac>)
   81d9e:	8813      	ldrh	r3, [r2, #0]
   81da0:	bf14      	ite	ne
   81da2:	f043 0302 	orrne.w	r3, r3, #2
   81da6:	f023 0302 	biceq.w	r3, r3, #2
   81daa:	8013      	strh	r3, [r2, #0]
		if(IsAckReq())
   81dac:	4b73      	ldr	r3, [pc, #460]	; (81f7c <Modbus+0x5ac>)
   81dae:	881b      	ldrh	r3, [r3, #0]
   81db0:	f013 0f02 	tst.w	r3, #2
   81db4:	d10b      	bne.n	81dce <Modbus+0x3fe>
		rs485_Send((modbus.frameLen = _registerQty*2+9), IsAckReq());
   81db6:	0061      	lsls	r1, r4, #1
   81db8:	3109      	adds	r1, #9
   81dba:	b289      	uxth	r1, r1
   81dbc:	4b6f      	ldr	r3, [pc, #444]	; (81f7c <Modbus+0x5ac>)
   81dbe:	8259      	strh	r1, [r3, #18]
   81dc0:	881a      	ldrh	r2, [r3, #0]
   81dc2:	f3c2 0240 	ubfx	r2, r2, #1, #1
   81dc6:	2066      	movs	r0, #102	; 0x66
   81dc8:	4b6b      	ldr	r3, [pc, #428]	; (81f78 <Modbus+0x5a8>)
   81dca:	4798      	blx	r3
		break;
   81dcc:	e67c      	b.n	81ac8 <Modbus+0xf8>
			sprintf(buf, "\r\nSlave com: %x			Slave add:%x\r\n", _pModbusTxFramePtr->moduleAddr, modbus.moduleAddr);
   81dce:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 81f7c <Modbus+0x5ac>
   81dd2:	4d6c      	ldr	r5, [pc, #432]	; (81f84 <Modbus+0x5b4>)
   81dd4:	f899 300c 	ldrb.w	r3, [r9, #12]
   81dd8:	f898 2000 	ldrb.w	r2, [r8]
   81ddc:	496a      	ldr	r1, [pc, #424]	; (81f88 <Modbus+0x5b8>)
   81dde:	4628      	mov	r0, r5
   81de0:	4f6a      	ldr	r7, [pc, #424]	; (81f8c <Modbus+0x5bc>)
   81de2:	47b8      	blx	r7
			Putstr(buf);
   81de4:	4629      	mov	r1, r5
   81de6:	2067      	movs	r0, #103	; 0x67
   81de8:	4e69      	ldr	r6, [pc, #420]	; (81f90 <Modbus+0x5c0>)
   81dea:	47b0      	blx	r6
			sprintf(buf, "\r\nFunc: %x\r\n", _pModbusTxFramePtr->functionCode);
   81dec:	f898 2001 	ldrb.w	r2, [r8, #1]
   81df0:	4968      	ldr	r1, [pc, #416]	; (81f94 <Modbus+0x5c4>)
   81df2:	4628      	mov	r0, r5
   81df4:	47b8      	blx	r7
			Putstr(buf);
   81df6:	4629      	mov	r1, r5
   81df8:	2067      	movs	r0, #103	; 0x67
   81dfa:	47b0      	blx	r6
			sprintf(buf, "\r\nIsAckReq: %d\r\n", IsAckReq());
   81dfc:	f8b9 2000 	ldrh.w	r2, [r9]
   81e00:	f3c2 0240 	ubfx	r2, r2, #1, #1
   81e04:	4964      	ldr	r1, [pc, #400]	; (81f98 <Modbus+0x5c8>)
   81e06:	4628      	mov	r0, r5
   81e08:	47b8      	blx	r7
			Putstr(buf);
   81e0a:	4629      	mov	r1, r5
   81e0c:	2067      	movs	r0, #103	; 0x67
   81e0e:	47b0      	blx	r6
   81e10:	e7d1      	b.n	81db6 <Modbus+0x3e6>
		sc=rs485_GetBufPtr();
   81e12:	2067      	movs	r0, #103	; 0x67
   81e14:	4f58      	ldr	r7, [pc, #352]	; (81f78 <Modbus+0x5a8>)
   81e16:	47b8      	blx	r7
   81e18:	4605      	mov	r5, r0
		modbus.crc = CRC16MODBUSbyte((modbus.destAddr = _pModbusTxFramePtr->moduleAddr = _slaveAddr), 0xFFFF);
   81e1a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
   81e1e:	7006      	strb	r6, [r0, #0]
   81e20:	4c56      	ldr	r4, [pc, #344]	; (81f7c <Modbus+0x5ac>)
   81e22:	7366      	strb	r6, [r4, #13]
   81e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81e28:	4630      	mov	r0, r6
   81e2a:	f8df 8194 	ldr.w	r8, [pc, #404]	; 81fc0 <Modbus+0x5f0>
   81e2e:	47c0      	blx	r8
   81e30:	8120      	strh	r0, [r4, #8]
		modbus.crc = CRC16MODBUSbyte((modbus.functionCode = _pModbusTxFramePtr->functionCode = READ_COILS), modbus.crc);
   81e32:	2001      	movs	r0, #1
   81e34:	7068      	strb	r0, [r5, #1]
   81e36:	72a0      	strb	r0, [r4, #10]
   81e38:	8921      	ldrh	r1, [r4, #8]
   81e3a:	47c0      	blx	r8
   81e3c:	8120      	strh	r0, [r4, #8]
		modbus.crc = CRC16MODBUSword((modbus.startAddr = _pModbusTxFramePtr->readCoils_header.startingAddr = swap16(_startingAddr)), modbus.crc);
   81e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   81e40:	0218      	lsls	r0, r3, #8
   81e42:	f3c3 2307 	ubfx	r3, r3, #8, #8
   81e46:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   81e4a:	4318      	orrs	r0, r3
   81e4c:	8068      	strh	r0, [r5, #2]
   81e4e:	81e0      	strh	r0, [r4, #14]
   81e50:	8921      	ldrh	r1, [r4, #8]
   81e52:	f8df 812c 	ldr.w	r8, [pc, #300]	; 81f80 <Modbus+0x5b0>
   81e56:	47c0      	blx	r8
   81e58:	8120      	strh	r0, [r4, #8]
		modbus.crc = CRC16MODBUSword((modbus.regQty = _pModbusTxFramePtr->readCoils_header.coilsQty = swap16(_coilsQty)), modbus.crc);
   81e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81e5c:	0218      	lsls	r0, r3, #8
   81e5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   81e62:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   81e66:	4318      	orrs	r0, r3
   81e68:	80a8      	strh	r0, [r5, #4]
   81e6a:	8220      	strh	r0, [r4, #16]
   81e6c:	8921      	ldrh	r1, [r4, #8]
   81e6e:	47c0      	blx	r8
   81e70:	b283      	uxth	r3, r0
   81e72:	8123      	strh	r3, [r4, #8]
		_pModbusTxFramePtr->readCoils_header.readCoils_crc = swap16(modbus.crc);
   81e74:	0200      	lsls	r0, r0, #8
   81e76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81e7a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   81e7e:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   81e82:	80e8      	strh	r0, [r5, #6]
		mBitsSet(modbus.status, ST_FRAME_ACK_REQ);
   81e84:	8823      	ldrh	r3, [r4, #0]
   81e86:	f043 0302 	orr.w	r3, r3, #2
   81e8a:	8023      	strh	r3, [r4, #0]
		rs485_Send((modbus.frameLen = MODBUS_READ_COILS_FRAME_LEN),(_slaveAddr!=MODBUS_BROADCAST_ADDRESS));
   81e8c:	2108      	movs	r1, #8
   81e8e:	8261      	strh	r1, [r4, #18]
   81e90:	f1b6 027f 	subs.w	r2, r6, #127	; 0x7f
   81e94:	bf18      	it	ne
   81e96:	2201      	movne	r2, #1
   81e98:	2066      	movs	r0, #102	; 0x66
   81e9a:	47b8      	blx	r7
		break;
   81e9c:	e614      	b.n	81ac8 <Modbus+0xf8>
	Putstr("\r\n\tPROCESS FRAME\r\n");
   81e9e:	493f      	ldr	r1, [pc, #252]	; (81f9c <Modbus+0x5cc>)
   81ea0:	2067      	movs	r0, #103	; 0x67
   81ea2:	4e3b      	ldr	r6, [pc, #236]	; (81f90 <Modbus+0x5c0>)
   81ea4:	47b0      	blx	r6
		sprintf(buf, "\r\nIS MASTER: %d", IsMaster());
   81ea6:	4d35      	ldr	r5, [pc, #212]	; (81f7c <Modbus+0x5ac>)
   81ea8:	882a      	ldrh	r2, [r5, #0]
   81eaa:	4c36      	ldr	r4, [pc, #216]	; (81f84 <Modbus+0x5b4>)
   81eac:	f002 0201 	and.w	r2, r2, #1
   81eb0:	493b      	ldr	r1, [pc, #236]	; (81fa0 <Modbus+0x5d0>)
   81eb2:	4620      	mov	r0, r4
   81eb4:	4b35      	ldr	r3, [pc, #212]	; (81f8c <Modbus+0x5bc>)
   81eb6:	4798      	blx	r3
		Putstr(buf);
   81eb8:	4621      	mov	r1, r4
   81eba:	2067      	movs	r0, #103	; 0x67
   81ebc:	47b0      	blx	r6
		if(IsMaster())
   81ebe:	882b      	ldrh	r3, [r5, #0]
   81ec0:	f013 0f01 	tst.w	r3, #1
   81ec4:	f000 80b1 	beq.w	8202a <Modbus+0x65a>
			Putstr("\r\n\tIs MASTER\r\n");
   81ec8:	4936      	ldr	r1, [pc, #216]	; (81fa4 <Modbus+0x5d4>)
   81eca:	2067      	movs	r0, #103	; 0x67
   81ecc:	47b0      	blx	r6
			sprintf(buf, "\r\n\tACK REQUIRED: %d\r\n", IsAckReq());
   81ece:	882a      	ldrh	r2, [r5, #0]
   81ed0:	f3c2 0240 	ubfx	r2, r2, #1, #1
   81ed4:	4934      	ldr	r1, [pc, #208]	; (81fa8 <Modbus+0x5d8>)
   81ed6:	4620      	mov	r0, r4
   81ed8:	4b2c      	ldr	r3, [pc, #176]	; (81f8c <Modbus+0x5bc>)
   81eda:	4798      	blx	r3
			Putstr(buf);
   81edc:	4621      	mov	r1, r4
   81ede:	2067      	movs	r0, #103	; 0x67
   81ee0:	47b0      	blx	r6
			if(IsAckReq())
   81ee2:	882b      	ldrh	r3, [r5, #0]
   81ee4:	f013 0f02 	tst.w	r3, #2
   81ee8:	f43f adee 	beq.w	81ac8 <Modbus+0xf8>
				sc=rs485_GetBufPtr();
   81eec:	2067      	movs	r0, #103	; 0x67
   81eee:	4b22      	ldr	r3, [pc, #136]	; (81f78 <Modbus+0x5a8>)
   81ef0:	4798      	blx	r3
   81ef2:	4605      	mov	r5, r0
   81ef4:	900c      	str	r0, [sp, #48]	; 0x30
				switch(_pModbusRxFramePtr->functionCode)
   81ef6:	7841      	ldrb	r1, [r0, #1]
   81ef8:	2905      	cmp	r1, #5
   81efa:	d025      	beq.n	81f48 <Modbus+0x578>
   81efc:	d918      	bls.n	81f30 <Modbus+0x560>
   81efe:	2964      	cmp	r1, #100	; 0x64
   81f00:	d02c      	beq.n	81f5c <Modbus+0x58c>
   81f02:	2965      	cmp	r1, #101	; 0x65
   81f04:	f040 808d 	bne.w	82022 <Modbus+0x652>
				sprintf(buf, "\r\nJE DEMANDE LA FONCTION: %X \r\n", _pModbusRxFramePtr->slaveSend_headers.slaveFunc);
   81f08:	7882      	ldrb	r2, [r0, #2]
   81f0a:	4928      	ldr	r1, [pc, #160]	; (81fac <Modbus+0x5dc>)
   81f0c:	481d      	ldr	r0, [pc, #116]	; (81f84 <Modbus+0x5b4>)
   81f0e:	4b1f      	ldr	r3, [pc, #124]	; (81f8c <Modbus+0x5bc>)
   81f10:	4798      	blx	r3
				Putstr(buf);
   81f12:	4621      	mov	r1, r4
   81f14:	2067      	movs	r0, #103	; 0x67
   81f16:	4b1e      	ldr	r3, [pc, #120]	; (81f90 <Modbus+0x5c0>)
   81f18:	4798      	blx	r3
					switch(_pModbusRxFramePtr->slaveSend_headers.slaveFunc)
   81f1a:	78a9      	ldrb	r1, [r5, #2]
   81f1c:	2901      	cmp	r1, #1
   81f1e:	d051      	beq.n	81fc4 <Modbus+0x5f4>
   81f20:	2900      	cmp	r1, #0
   81f22:	d074      	beq.n	8200e <Modbus+0x63e>
   81f24:	2905      	cmp	r1, #5
   81f26:	d062      	beq.n	81fee <Modbus+0x61e>
						Error(ERROR_MODBUS_PROCESS_ACK_FRAME_SLAVE_SEND_BAD_SC, _pModbusRxFramePtr->slaveSend_headers.slaveFunc);
   81f28:	2047      	movs	r0, #71	; 0x47
   81f2a:	4b21      	ldr	r3, [pc, #132]	; (81fb0 <Modbus+0x5e0>)
   81f2c:	4798      	blx	r3
   81f2e:	e058      	b.n	81fe2 <Modbus+0x612>
				switch(_pModbusRxFramePtr->functionCode)
   81f30:	2901      	cmp	r1, #1
   81f32:	d176      	bne.n	82022 <Modbus+0x652>
					mBitsClr(modbus.status, ST_REQEST);
   81f34:	4a11      	ldr	r2, [pc, #68]	; (81f7c <Modbus+0x5ac>)
   81f36:	8813      	ldrh	r3, [r2, #0]
   81f38:	f023 0304 	bic.w	r3, r3, #4
   81f3c:	8013      	strh	r3, [r2, #0]
					Putstr("\r\n\tREAD_COILS_ACK_OK\r\n");
   81f3e:	491d      	ldr	r1, [pc, #116]	; (81fb4 <Modbus+0x5e4>)
   81f40:	2067      	movs	r0, #103	; 0x67
   81f42:	4b13      	ldr	r3, [pc, #76]	; (81f90 <Modbus+0x5c0>)
   81f44:	4798      	blx	r3
					break;
   81f46:	e5bf      	b.n	81ac8 <Modbus+0xf8>
					mBitsClr(modbus.status, ST_REQEST);
   81f48:	4a0c      	ldr	r2, [pc, #48]	; (81f7c <Modbus+0x5ac>)
   81f4a:	8813      	ldrh	r3, [r2, #0]
   81f4c:	f023 0304 	bic.w	r3, r3, #4
   81f50:	8013      	strh	r3, [r2, #0]
					Putstr("\r\n\tWRITE_SINGLE_COIL_ACK_OK\r\n");
   81f52:	4919      	ldr	r1, [pc, #100]	; (81fb8 <Modbus+0x5e8>)
   81f54:	2067      	movs	r0, #103	; 0x67
   81f56:	4b0e      	ldr	r3, [pc, #56]	; (81f90 <Modbus+0x5c0>)
   81f58:	4798      	blx	r3
					break;
   81f5a:	e5b5      	b.n	81ac8 <Modbus+0xf8>
					sprintf(buf, "\r\n\tNew slave ID: %X\r\n", _pModbusRxFramePtr->attach_header.slaveID);
   81f5c:	7882      	ldrb	r2, [r0, #2]
   81f5e:	4917      	ldr	r1, [pc, #92]	; (81fbc <Modbus+0x5ec>)
   81f60:	4808      	ldr	r0, [pc, #32]	; (81f84 <Modbus+0x5b4>)
   81f62:	4b0a      	ldr	r3, [pc, #40]	; (81f8c <Modbus+0x5bc>)
   81f64:	4798      	blx	r3
					Putstr(buf);
   81f66:	4621      	mov	r1, r4
   81f68:	2067      	movs	r0, #103	; 0x67
   81f6a:	4b09      	ldr	r3, [pc, #36]	; (81f90 <Modbus+0x5c0>)
   81f6c:	4798      	blx	r3
					ComRS485(_COMRS485_FLUSH);
   81f6e:	2002      	movs	r0, #2
   81f70:	4b01      	ldr	r3, [pc, #4]	; (81f78 <Modbus+0x5a8>)
   81f72:	4798      	blx	r3
					break;
   81f74:	e5a8      	b.n	81ac8 <Modbus+0xf8>
   81f76:	bf00      	nop
   81f78:	00080b25 	.word	0x00080b25
   81f7c:	200019fc 	.word	0x200019fc
   81f80:	00080ef1 	.word	0x00080ef1
   81f84:	20001a14 	.word	0x20001a14
   81f88:	00089f0c 	.word	0x00089f0c
   81f8c:	00085125 	.word	0x00085125
   81f90:	00083495 	.word	0x00083495
   81f94:	00089f30 	.word	0x00089f30
   81f98:	00089f40 	.word	0x00089f40
   81f9c:	00089f54 	.word	0x00089f54
   81fa0:	00089f68 	.word	0x00089f68
   81fa4:	00089f78 	.word	0x00089f78
   81fa8:	00089f88 	.word	0x00089f88
   81fac:	00089ff0 	.word	0x00089ff0
   81fb0:	00080f15 	.word	0x00080f15
   81fb4:	00089fc0 	.word	0x00089fc0
   81fb8:	00089fa0 	.word	0x00089fa0
   81fbc:	00089fd8 	.word	0x00089fd8
   81fc0:	00080edd 	.word	0x00080edd
						Putstr("\r\n\tSLAVE REQ: READ COILS\r\n");
   81fc4:	49ab      	ldr	r1, [pc, #684]	; (82274 <Modbus+0x8a4>)
   81fc6:	2067      	movs	r0, #103	; 0x67
   81fc8:	4bab      	ldr	r3, [pc, #684]	; (82278 <Modbus+0x8a8>)
   81fca:	4798      	blx	r3
						mBitsSet(modbus.status, ST_REQEST);
   81fcc:	49ab      	ldr	r1, [pc, #684]	; (8227c <Modbus+0x8ac>)
   81fce:	880b      	ldrh	r3, [r1, #0]
   81fd0:	f043 0304 	orr.w	r3, r3, #4
   81fd4:	800b      	strh	r3, [r1, #0]
						ReadCoils(modbus.destAddr, 0x01, 1);
   81fd6:	2301      	movs	r3, #1
   81fd8:	461a      	mov	r2, r3
   81fda:	7b49      	ldrb	r1, [r1, #13]
   81fdc:	2068      	movs	r0, #104	; 0x68
   81fde:	f7ff fcf7 	bl	819d0 <Modbus>
					mBitsClr(modbus.status, ST_SLAVE_ASK);
   81fe2:	4aa6      	ldr	r2, [pc, #664]	; (8227c <Modbus+0x8ac>)
   81fe4:	8813      	ldrh	r3, [r2, #0]
   81fe6:	f023 0308 	bic.w	r3, r3, #8
   81fea:	8013      	strh	r3, [r2, #0]
					break;
   81fec:	e56c      	b.n	81ac8 <Modbus+0xf8>
						Putstr("\r\n\tSLAVE REQ: WRITE SINGLE COILS\r\n");
   81fee:	49a4      	ldr	r1, [pc, #656]	; (82280 <Modbus+0x8b0>)
   81ff0:	2067      	movs	r0, #103	; 0x67
   81ff2:	4ba1      	ldr	r3, [pc, #644]	; (82278 <Modbus+0x8a8>)
   81ff4:	4798      	blx	r3
						mBitsSet(modbus.status, ST_REQEST);
   81ff6:	49a1      	ldr	r1, [pc, #644]	; (8227c <Modbus+0x8ac>)
   81ff8:	880b      	ldrh	r3, [r1, #0]
   81ffa:	f043 0304 	orr.w	r3, r3, #4
   81ffe:	800b      	strh	r3, [r1, #0]
						WriteSingleCoil(modbus.destAddr, 0x01, 0x01);
   82000:	2301      	movs	r3, #1
   82002:	461a      	mov	r2, r3
   82004:	7b49      	ldrb	r1, [r1, #13]
   82006:	2067      	movs	r0, #103	; 0x67
   82008:	f7ff fce2 	bl	819d0 <Modbus>
						break;
   8200c:	e7e9      	b.n	81fe2 <Modbus+0x612>
						Putstr("\r\n\t NO REQUEST");
   8200e:	499d      	ldr	r1, [pc, #628]	; (82284 <Modbus+0x8b4>)
   82010:	2067      	movs	r0, #103	; 0x67
   82012:	4b99      	ldr	r3, [pc, #612]	; (82278 <Modbus+0x8a8>)
   82014:	4798      	blx	r3
						mBitsClr(modbus.status, ST_FRAME_ACK_REQ);	
   82016:	4a99      	ldr	r2, [pc, #612]	; (8227c <Modbus+0x8ac>)
   82018:	8813      	ldrh	r3, [r2, #0]
   8201a:	f023 0302 	bic.w	r3, r3, #2
   8201e:	8013      	strh	r3, [r2, #0]
						break;
   82020:	e7df      	b.n	81fe2 <Modbus+0x612>
					Error(ERROR_MODBUS_PROCESS_ACK_FRAME_SWITCH_BAD_SC, _pModbusRxFramePtr->functionCode);
   82022:	2012      	movs	r0, #18
   82024:	4b98      	ldr	r3, [pc, #608]	; (82288 <Modbus+0x8b8>)
   82026:	4798      	blx	r3
   82028:	e54e      	b.n	81ac8 <Modbus+0xf8>
			sc=rs485_GetBufPtr();
   8202a:	2067      	movs	r0, #103	; 0x67
   8202c:	4b97      	ldr	r3, [pc, #604]	; (8228c <Modbus+0x8bc>)
   8202e:	4798      	blx	r3
   82030:	4605      	mov	r5, r0
   82032:	900c      	str	r0, [sp, #48]	; 0x30
			if((_pModbusRxFramePtr->moduleAddr!=modbus.moduleAddr)&&(_pModbusRxFramePtr->moduleAddr!=MODBUS_BROADCAST_ADDRESS))
   82034:	4607      	mov	r7, r0
   82036:	7802      	ldrb	r2, [r0, #0]
   82038:	4b90      	ldr	r3, [pc, #576]	; (8227c <Modbus+0x8ac>)
   8203a:	7b1b      	ldrb	r3, [r3, #12]
   8203c:	429a      	cmp	r2, r3
   8203e:	d001      	beq.n	82044 <Modbus+0x674>
   82040:	2a7f      	cmp	r2, #127	; 0x7f
   82042:	d12e      	bne.n	820a2 <Modbus+0x6d2>
			sprintf(buf, "\r\nSlave com: %x			Slave add:%x\r\n", _pModbusRxFramePtr->moduleAddr, modbus.moduleAddr);
   82044:	f8df 9258 	ldr.w	r9, [pc, #600]	; 822a0 <Modbus+0x8d0>
   82048:	4991      	ldr	r1, [pc, #580]	; (82290 <Modbus+0x8c0>)
   8204a:	4648      	mov	r0, r9
   8204c:	f8df 8254 	ldr.w	r8, [pc, #596]	; 822a4 <Modbus+0x8d4>
   82050:	47c0      	blx	r8
			Putstr(buf);
   82052:	4621      	mov	r1, r4
   82054:	2067      	movs	r0, #103	; 0x67
   82056:	4e88      	ldr	r6, [pc, #544]	; (82278 <Modbus+0x8a8>)
   82058:	47b0      	blx	r6
			sprintf(buf, "\r\nFunc: %x\r\n", _pModbusRxFramePtr->functionCode);
   8205a:	786a      	ldrb	r2, [r5, #1]
   8205c:	498d      	ldr	r1, [pc, #564]	; (82294 <Modbus+0x8c4>)
   8205e:	4648      	mov	r0, r9
   82060:	47c0      	blx	r8
			Putstr(buf);
   82062:	4621      	mov	r1, r4
   82064:	2067      	movs	r0, #103	; 0x67
   82066:	47b0      	blx	r6
			if(_pModbusRxFramePtr->moduleAddr!=MODBUS_BROADCAST_ADDRESS) mBitsSet(modbus.status,ST_FRAME_ACK_REQ);
   82068:	782b      	ldrb	r3, [r5, #0]
   8206a:	2b7f      	cmp	r3, #127	; 0x7f
   8206c:	d004      	beq.n	82078 <Modbus+0x6a8>
   8206e:	4a83      	ldr	r2, [pc, #524]	; (8227c <Modbus+0x8ac>)
   82070:	8813      	ldrh	r3, [r2, #0]
   82072:	f043 0302 	orr.w	r3, r3, #2
   82076:	8013      	strh	r3, [r2, #0]
			switch(_pModbusRxFramePtr->functionCode)
   82078:	786b      	ldrb	r3, [r5, #1]
   8207a:	2b05      	cmp	r3, #5
   8207c:	f000 80d3 	beq.w	82226 <Modbus+0x856>
   82080:	d918      	bls.n	820b4 <Modbus+0x6e4>
   82082:	2b64      	cmp	r3, #100	; 0x64
   82084:	d072      	beq.n	8216c <Modbus+0x79c>
   82086:	2b65      	cmp	r3, #101	; 0x65
   82088:	f000 80a6 	beq.w	821d8 <Modbus+0x808>
   8208c:	2b10      	cmp	r3, #16
   8208e:	d018      	beq.n	820c2 <Modbus+0x6f2>
				PushTask(Modbus,_MODBUS_RETURN_ERROR_CODE,1,0);
   82090:	2300      	movs	r3, #0
   82092:	9300      	str	r3, [sp, #0]
   82094:	2301      	movs	r3, #1
   82096:	2204      	movs	r2, #4
   82098:	497f      	ldr	r1, [pc, #508]	; (82298 <Modbus+0x8c8>)
   8209a:	2066      	movs	r0, #102	; 0x66
   8209c:	4c7f      	ldr	r4, [pc, #508]	; (8229c <Modbus+0x8cc>)
   8209e:	47a0      	blx	r4
				break;
   820a0:	e512      	b.n	81ac8 <Modbus+0xf8>
				sprintf(buf, "\r\nSlave com: %x			Slave add:%x\r\n", _pModbusRxFramePtr->moduleAddr, modbus.moduleAddr);
   820a2:	497b      	ldr	r1, [pc, #492]	; (82290 <Modbus+0x8c0>)
   820a4:	487e      	ldr	r0, [pc, #504]	; (822a0 <Modbus+0x8d0>)
   820a6:	4d7f      	ldr	r5, [pc, #508]	; (822a4 <Modbus+0x8d4>)
   820a8:	47a8      	blx	r5
				Putstr(buf);
   820aa:	4621      	mov	r1, r4
   820ac:	2067      	movs	r0, #103	; 0x67
   820ae:	4b72      	ldr	r3, [pc, #456]	; (82278 <Modbus+0x8a8>)
   820b0:	4798      	blx	r3
				return 0;
   820b2:	e509      	b.n	81ac8 <Modbus+0xf8>
			switch(_pModbusRxFramePtr->functionCode)
   820b4:	2b01      	cmp	r3, #1
   820b6:	f000 8107 	beq.w	822c8 <Modbus+0x8f8>
   820ba:	2b03      	cmp	r3, #3
   820bc:	f43f ad04 	beq.w	81ac8 <Modbus+0xf8>
   820c0:	e7e6      	b.n	82090 <Modbus+0x6c0>
				switch(swap16(_pModbusRxFramePtr->writeMultipleRegister_header.startingAddr))
   820c2:	78ab      	ldrb	r3, [r5, #2]
   820c4:	2b10      	cmp	r3, #16
   820c6:	d148      	bne.n	8215a <Modbus+0x78a>
					if((_pModbusRxFramePtr->writeMultipleRegister_header.startingAddr == modbus.startAddr) &&
   820c8:	4a6c      	ldr	r2, [pc, #432]	; (8227c <Modbus+0x8ac>)
   820ca:	89d2      	ldrh	r2, [r2, #14]
   820cc:	429a      	cmp	r2, r3
   820ce:	d033      	beq.n	82138 <Modbus+0x768>
					while ((RTC->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   820d0:	4a75      	ldr	r2, [pc, #468]	; (822a8 <Modbus+0x8d8>)
   820d2:	6993      	ldr	r3, [r2, #24]
   820d4:	f013 0f04 	tst.w	r3, #4
   820d8:	d0fb      	beq.n	820d2 <Modbus+0x702>
					RTC->RTC_CR |= (RTC_CR_UPDTIM | RTC_CR_UPDCAL) ;
   820da:	4a73      	ldr	r2, [pc, #460]	; (822a8 <Modbus+0x8d8>)
   820dc:	6813      	ldr	r3, [r2, #0]
   820de:	f043 0303 	orr.w	r3, r3, #3
   820e2:	6013      	str	r3, [r2, #0]
					while ((RTC->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   820e4:	6993      	ldr	r3, [r2, #24]
   820e6:	f013 0f01 	tst.w	r3, #1
   820ea:	d0fb      	beq.n	820e4 <Modbus+0x714>
					RTC->RTC_SCCR = RTC_SCCR_ACKCLR;
   820ec:	4a6e      	ldr	r2, [pc, #440]	; (822a8 <Modbus+0x8d8>)
   820ee:	2301      	movs	r3, #1
   820f0:	61d3      	str	r3, [r2, #28]
					_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0]);
   820f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   820f4:	88d8      	ldrh	r0, [r3, #6]
   820f6:	0201      	lsls	r1, r0, #8
   820f8:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   820fc:	80d9      	strh	r1, [r3, #6]
					_pModbusRxFramePtr->writeMultipleRegister_header.dataField[1]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[1]);
   820fe:	8918      	ldrh	r0, [r3, #8]
   82100:	0201      	lsls	r1, r0, #8
   82102:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   82106:	8119      	strh	r1, [r3, #8]
					_pModbusRxFramePtr->writeMultipleRegister_header.dataField[2]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[2]);
   82108:	8958      	ldrh	r0, [r3, #10]
   8210a:	0201      	lsls	r1, r0, #8
   8210c:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   82110:	8159      	strh	r1, [r3, #10]
					_pModbusRxFramePtr->writeMultipleRegister_header.dataField[3]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[3]);
   82112:	8998      	ldrh	r0, [r3, #12]
   82114:	0201      	lsls	r1, r0, #8
   82116:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   8211a:	8199      	strh	r1, [r3, #12]
					*registerMap[0]=*(uint32_t*)&_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0];
   8211c:	f8d3 1006 	ldr.w	r1, [r3, #6]
   82120:	4b62      	ldr	r3, [pc, #392]	; (822ac <Modbus+0x8dc>)
   82122:	6019      	str	r1, [r3, #0]
					*registerMap[1]=*(uint32_t*)&_pModbusRxFramePtr->writeMultipleRegister_header.dataField[2];
   82124:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   82126:	f8d3 100a 	ldr.w	r1, [r3, #10]
   8212a:	4b61      	ldr	r3, [pc, #388]	; (822b0 <Modbus+0x8e0>)
   8212c:	6019      	str	r1, [r3, #0]
					RTC->RTC_CR &= ((~RTC_CR_UPDTIM)&(~RTC_CR_UPDCAL));
   8212e:	6813      	ldr	r3, [r2, #0]
   82130:	f023 0303 	bic.w	r3, r3, #3
   82134:	6013      	str	r3, [r2, #0]
   82136:	e4c7      	b.n	81ac8 <Modbus+0xf8>
						((_pModbusRxFramePtr->writeMultipleRegister_header.startingAddr + _pModbusRxFramePtr->writeMultipleRegister_header.registerQty) >= modbus.startAddr + modbus.regQty))
   82138:	f8b7 1003 	ldrh.w	r1, [r7, #3]
   8213c:	4419      	add	r1, r3
   8213e:	4a4f      	ldr	r2, [pc, #316]	; (8227c <Modbus+0x8ac>)
   82140:	8a12      	ldrh	r2, [r2, #16]
   82142:	4413      	add	r3, r2
					if((_pModbusRxFramePtr->writeMultipleRegister_header.startingAddr == modbus.startAddr) &&
   82144:	4299      	cmp	r1, r3
   82146:	dbc3      	blt.n	820d0 <Modbus+0x700>
						PushTask(Modbus,_MODBUS_RETURN_ERROR_CODE,2,0);
   82148:	2300      	movs	r3, #0
   8214a:	9300      	str	r3, [sp, #0]
   8214c:	2302      	movs	r3, #2
   8214e:	2204      	movs	r2, #4
   82150:	4951      	ldr	r1, [pc, #324]	; (82298 <Modbus+0x8c8>)
   82152:	2066      	movs	r0, #102	; 0x66
   82154:	4c51      	ldr	r4, [pc, #324]	; (8229c <Modbus+0x8cc>)
   82156:	47a0      	blx	r4
						return 0;
   82158:	e4b6      	b.n	81ac8 <Modbus+0xf8>
					PushTask(Modbus,_MODBUS_RETURN_ERROR_CODE,2,0);
   8215a:	2300      	movs	r3, #0
   8215c:	9300      	str	r3, [sp, #0]
   8215e:	2302      	movs	r3, #2
   82160:	2204      	movs	r2, #4
   82162:	494d      	ldr	r1, [pc, #308]	; (82298 <Modbus+0x8c8>)
   82164:	2066      	movs	r0, #102	; 0x66
   82166:	4c4d      	ldr	r4, [pc, #308]	; (8229c <Modbus+0x8cc>)
   82168:	47a0      	blx	r4
					break;
   8216a:	e4ad      	b.n	81ac8 <Modbus+0xf8>
				ModuleIdentificationNew(modbus.IDSlave, modbus.IDSlave + 10);
   8216c:	4c43      	ldr	r4, [pc, #268]	; (8227c <Modbus+0x8ac>)
   8216e:	7d21      	ldrb	r1, [r4, #20]
   82170:	f101 020a 	add.w	r2, r1, #10
   82174:	2069      	movs	r0, #105	; 0x69
   82176:	f8df 814c 	ldr.w	r8, [pc, #332]	; 822c4 <Modbus+0x8f4>
   8217a:	47c0      	blx	r8
				modbus.IDSlave++;
   8217c:	7d23      	ldrb	r3, [r4, #20]
   8217e:	3301      	adds	r3, #1
   82180:	7523      	strb	r3, [r4, #20]
				modbus.crc=CRC16MODBUSbyte((_pModbusRxFramePtr->moduleAddr=0x00),0xFFFF);
   82182:	2700      	movs	r7, #0
   82184:	702f      	strb	r7, [r5, #0]
   82186:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8218a:	4638      	mov	r0, r7
   8218c:	4e49      	ldr	r6, [pc, #292]	; (822b4 <Modbus+0x8e4>)
   8218e:	47b0      	blx	r6
   82190:	8120      	strh	r0, [r4, #8]
				modbus.crc=CRC16MODBUSbyte((_pModbusRxFramePtr->functionCode=NETWORK_ATTACH),modbus.crc);
   82192:	2064      	movs	r0, #100	; 0x64
   82194:	7068      	strb	r0, [r5, #1]
   82196:	8921      	ldrh	r1, [r4, #8]
   82198:	47b0      	blx	r6
   8219a:	8120      	strh	r0, [r4, #8]
				modbus.crc=CRC16MODBUSbyte(_pModbusRxFramePtr->attach_header.slaveID= GetModuleAddr(),modbus.crc);
   8219c:	2067      	movs	r0, #103	; 0x67
   8219e:	47c0      	blx	r8
   821a0:	b2c0      	uxtb	r0, r0
   821a2:	70a8      	strb	r0, [r5, #2]
   821a4:	8921      	ldrh	r1, [r4, #8]
   821a6:	47b0      	blx	r6
   821a8:	8120      	strh	r0, [r4, #8]
				modbus.crc=CRC16MODBUSbyte(_pModbusRxFramePtr->attach_header.slaveSerialNumber=	GetModuleSerialNumber(),modbus.crc);
   821aa:	2068      	movs	r0, #104	; 0x68
   821ac:	47c0      	blx	r8
   821ae:	b2c0      	uxtb	r0, r0
   821b0:	70e8      	strb	r0, [r5, #3]
   821b2:	8921      	ldrh	r1, [r4, #8]
   821b4:	47b0      	blx	r6
   821b6:	b282      	uxth	r2, r0
   821b8:	8122      	strh	r2, [r4, #8]
				_pModbusRxFramePtr->attach_header.attach_crc = swap16(modbus.crc);
   821ba:	0203      	lsls	r3, r0, #8
   821bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   821c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   821c4:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   821c8:	80ab      	strh	r3, [r5, #4]
				rs485_Send((modbus.frameLen = MODBUS_ATTACH_FRAME_LEN), 0);
   821ca:	2106      	movs	r1, #6
   821cc:	8261      	strh	r1, [r4, #18]
   821ce:	463a      	mov	r2, r7
   821d0:	2066      	movs	r0, #102	; 0x66
   821d2:	4b2e      	ldr	r3, [pc, #184]	; (8228c <Modbus+0x8bc>)
   821d4:	4798      	blx	r3
				break;
   821d6:	e477      	b.n	81ac8 <Modbus+0xf8>
				modbus.crc=CRC16MODBUSbyte((_pModbusRxFramePtr->moduleAddr=0x00),0xFFFF);
   821d8:	2600      	movs	r6, #0
   821da:	702e      	strb	r6, [r5, #0]
   821dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   821e0:	4630      	mov	r0, r6
   821e2:	4f34      	ldr	r7, [pc, #208]	; (822b4 <Modbus+0x8e4>)
   821e4:	47b8      	blx	r7
   821e6:	4c25      	ldr	r4, [pc, #148]	; (8227c <Modbus+0x8ac>)
   821e8:	8120      	strh	r0, [r4, #8]
				modbus.crc=CRC16MODBUSbyte((_pModbusRxFramePtr->functionCode=SLAVE_SEND),modbus.crc);
   821ea:	2065      	movs	r0, #101	; 0x65
   821ec:	7068      	strb	r0, [r5, #1]
   821ee:	8921      	ldrh	r1, [r4, #8]
   821f0:	47b8      	blx	r7
   821f2:	8120      	strh	r0, [r4, #8]
				modbus.crc=CRC16MODBUSbyte((_pModbusRxFramePtr->slaveSend_headers.slaveFunc=ServicesBufferPop()),modbus.crc);
   821f4:	2067      	movs	r0, #103	; 0x67
   821f6:	4b30      	ldr	r3, [pc, #192]	; (822b8 <Modbus+0x8e8>)
   821f8:	4798      	blx	r3
   821fa:	b2c0      	uxtb	r0, r0
   821fc:	70a8      	strb	r0, [r5, #2]
   821fe:	8921      	ldrh	r1, [r4, #8]
   82200:	47b8      	blx	r7
   82202:	b282      	uxth	r2, r0
   82204:	8122      	strh	r2, [r4, #8]
				_pModbusRxFramePtr->slaveSend_headers.slaveSend_crc = swap16(modbus.crc);
   82206:	0203      	lsls	r3, r0, #8
   82208:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   8220c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   82210:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   82214:	f8a5 3003 	strh.w	r3, [r5, #3]
				rs485_Send((modbus.frameLen = MODBUS_SLAVE_SEND_FRAME_LEN), 0);
   82218:	2105      	movs	r1, #5
   8221a:	8261      	strh	r1, [r4, #18]
   8221c:	4632      	mov	r2, r6
   8221e:	2066      	movs	r0, #102	; 0x66
   82220:	4b1a      	ldr	r3, [pc, #104]	; (8228c <Modbus+0x8bc>)
   82222:	4798      	blx	r3
				break;
   82224:	e450      	b.n	81ac8 <Modbus+0xf8>
				gpio_toggle_pin(CMD_MOT_SERRURE);
   82226:	2021      	movs	r0, #33	; 0x21
   82228:	4b24      	ldr	r3, [pc, #144]	; (822bc <Modbus+0x8ec>)
   8222a:	4798      	blx	r3
				swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputAddr), swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputValue));
   8222c:	887a      	ldrh	r2, [r7, #2]
   8222e:	88b8      	ldrh	r0, [r7, #4]
   82230:	0213      	lsls	r3, r2, #8
   82232:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
				sprintf(buf, "\r\nWRITE SINGLE COIL\r\nFunctionCode: %X\r\nOUTPUT ADDR: %X OUTPUT VALUE: %X",_pModbusRxFramePtr->functionCode, 
   82236:	786a      	ldrb	r2, [r5, #1]
				swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputAddr), swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputValue));
   82238:	0201      	lsls	r1, r0, #8
   8223a:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
				sprintf(buf, "\r\nWRITE SINGLE COIL\r\nFunctionCode: %X\r\nOUTPUT ADDR: %X OUTPUT VALUE: %X",_pModbusRxFramePtr->functionCode, 
   8223e:	b289      	uxth	r1, r1
   82240:	9100      	str	r1, [sp, #0]
   82242:	b29b      	uxth	r3, r3
   82244:	491e      	ldr	r1, [pc, #120]	; (822c0 <Modbus+0x8f0>)
   82246:	4816      	ldr	r0, [pc, #88]	; (822a0 <Modbus+0x8d0>)
   82248:	4e16      	ldr	r6, [pc, #88]	; (822a4 <Modbus+0x8d4>)
   8224a:	47b0      	blx	r6
				Putstr(buf);
   8224c:	4621      	mov	r1, r4
   8224e:	2067      	movs	r0, #103	; 0x67
   82250:	4b09      	ldr	r3, [pc, #36]	; (82278 <Modbus+0x8a8>)
   82252:	4798      	blx	r3
				WriteSingleCoilAck(_pModbusRxFramePtr->functionCode, swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputAddr), swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputValue));
   82254:	8879      	ldrh	r1, [r7, #2]
   82256:	88ba      	ldrh	r2, [r7, #4]
   82258:	0213      	lsls	r3, r2, #8
   8225a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   8225e:	020a      	lsls	r2, r1, #8
   82260:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   82264:	b29b      	uxth	r3, r3
   82266:	b292      	uxth	r2, r2
   82268:	7869      	ldrb	r1, [r5, #1]
   8226a:	2005      	movs	r0, #5
   8226c:	f7ff fbb0 	bl	819d0 <Modbus>
				break;
   82270:	e42a      	b.n	81ac8 <Modbus+0xf8>
   82272:	bf00      	nop
   82274:	0008a010 	.word	0x0008a010
   82278:	00083495 	.word	0x00083495
   8227c:	200019fc 	.word	0x200019fc
   82280:	0008a02c 	.word	0x0008a02c
   82284:	0008a050 	.word	0x0008a050
   82288:	00080f15 	.word	0x00080f15
   8228c:	00080b25 	.word	0x00080b25
   82290:	00089f0c 	.word	0x00089f0c
   82294:	00089f30 	.word	0x00089f30
   82298:	000819d1 	.word	0x000819d1
   8229c:	00083829 	.word	0x00083829
   822a0:	20001a14 	.word	0x20001a14
   822a4:	00085125 	.word	0x00085125
   822a8:	400e1260 	.word	0x400e1260
   822ac:	400e1268 	.word	0x400e1268
   822b0:	400e126c 	.word	0x400e126c
   822b4:	00080edd 	.word	0x00080edd
   822b8:	00081121 	.word	0x00081121
   822bc:	000841bf 	.word	0x000841bf
   822c0:	0008a060 	.word	0x0008a060
   822c4:	00083ec5 	.word	0x00083ec5
				gpio_toggle_pin(CMD_MOSFET);
   822c8:	2020      	movs	r0, #32
   822ca:	4b20      	ldr	r3, [pc, #128]	; (8234c <Modbus+0x97c>)
   822cc:	4798      	blx	r3
				Putstr(buf);
   822ce:	4621      	mov	r1, r4
   822d0:	2067      	movs	r0, #103	; 0x67
   822d2:	4b1f      	ldr	r3, [pc, #124]	; (82350 <Modbus+0x980>)
   822d4:	4798      	blx	r3
				ReadCoilsAck(1,1);
   822d6:	2201      	movs	r2, #1
   822d8:	4611      	mov	r1, r2
   822da:	2007      	movs	r0, #7
   822dc:	f7ff fb78 	bl	819d0 <Modbus>
				break;
   822e0:	f7ff bbf2 	b.w	81ac8 <Modbus+0xf8>
		sc=rs485_GetBufPtr();
   822e4:	2067      	movs	r0, #103	; 0x67
   822e6:	4f1b      	ldr	r7, [pc, #108]	; (82354 <Modbus+0x984>)
   822e8:	47b8      	blx	r7
   822ea:	4604      	mov	r4, r0
		modbus.crc=CRC16MODBUSbyte(_pModbusTxFramePtr->moduleAddr,0xFFFF);
   822ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   822f0:	7800      	ldrb	r0, [r0, #0]
   822f2:	4e19      	ldr	r6, [pc, #100]	; (82358 <Modbus+0x988>)
   822f4:	47b0      	blx	r6
   822f6:	4d19      	ldr	r5, [pc, #100]	; (8235c <Modbus+0x98c>)
   822f8:	8128      	strh	r0, [r5, #8]
		modbus.crc=CRC16MODBUSbyte(_pModbusTxFramePtr->functionCode|0x80,modbus.crc);
   822fa:	7863      	ldrb	r3, [r4, #1]
   822fc:	b281      	uxth	r1, r0
   822fe:	f043 0080 	orr.w	r0, r3, #128	; 0x80
   82302:	47b0      	blx	r6
   82304:	8128      	strh	r0, [r5, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->errorFrame.exceptionCode=_exceptionCode),modbus.crc);
   82306:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
   8230a:	70a0      	strb	r0, [r4, #2]
   8230c:	8929      	ldrh	r1, [r5, #8]
   8230e:	47b0      	blx	r6
   82310:	b283      	uxth	r3, r0
   82312:	812b      	strh	r3, [r5, #8]
		_pModbusTxFramePtr->errorFrame.exceptionCode_crc=swap16(modbus.crc);
   82314:	0200      	lsls	r0, r0, #8
   82316:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8231a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   8231e:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   82322:	f8a4 0003 	strh.w	r0, [r4, #3]
		rs485_Send(MODBUS_EXCEPTION_ERROR_FRAME_LEN, MODBUS_NEED_NO_ACK);
   82326:	2200      	movs	r2, #0
   82328:	2105      	movs	r1, #5
   8232a:	2066      	movs	r0, #102	; 0x66
   8232c:	47b8      	blx	r7
		break;
   8232e:	f7ff bbcb 	b.w	81ac8 <Modbus+0xf8>
		Putstr("\r\n\nWRITE SINGLE COIL ACK!!\r\n");
   82332:	490b      	ldr	r1, [pc, #44]	; (82360 <Modbus+0x990>)
   82334:	2067      	movs	r0, #103	; 0x67
   82336:	4b06      	ldr	r3, [pc, #24]	; (82350 <Modbus+0x980>)
   82338:	4798      	blx	r3
		rs485_Send(modbus.frameLen = MODBUS_WRITE_SINGLE_COIL_FRAME_LEN, 0);
   8233a:	2108      	movs	r1, #8
   8233c:	4b07      	ldr	r3, [pc, #28]	; (8235c <Modbus+0x98c>)
   8233e:	8259      	strh	r1, [r3, #18]
   82340:	2200      	movs	r2, #0
   82342:	2066      	movs	r0, #102	; 0x66
   82344:	4b03      	ldr	r3, [pc, #12]	; (82354 <Modbus+0x984>)
   82346:	4798      	blx	r3
		break;
   82348:	f7ff bbbe 	b.w	81ac8 <Modbus+0xf8>
   8234c:	000841bf 	.word	0x000841bf
   82350:	00083495 	.word	0x00083495
   82354:	00080b25 	.word	0x00080b25
   82358:	00080edd 	.word	0x00080edd
   8235c:	200019fc 	.word	0x200019fc
   82360:	0008a0a8 	.word	0x0008a0a8

00082364 <Shell>:

#define EnterEditMode()					mBitsSet(shell.status,ST_SHELL_PROMPT_DISABLED)
#define ExitEditMode()					mBitsClr(shell.status,ST_SHELL_PROMPT_DISABLED)

uint32_t Shell(uint32_t sc, ...)
{
   82364:	b40f      	push	{r0, r1, r2, r3}
   82366:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8236a:	b087      	sub	sp, #28
	uint32_t u1,u2;
	char*pSt;

	switch(sc)
   8236c:	990e      	ldr	r1, [sp, #56]	; 0x38
   8236e:	2904      	cmp	r1, #4
   82370:	f000 809b 	beq.w	824aa <Shell+0x146>
   82374:	d93a      	bls.n	823ec <Shell+0x88>
   82376:	2906      	cmp	r1, #6
   82378:	d04e      	beq.n	82418 <Shell+0xb4>
   8237a:	d35c      	bcc.n	82436 <Shell+0xd2>
   8237c:	2907      	cmp	r1, #7
   8237e:	f000 85ed 	beq.w	82f5c <Shell+0xbf8>
   82382:	2964      	cmp	r1, #100	; 0x64
   82384:	f040 866a 	bne.w	8305c <Shell+0xcf8>
	{
	case SHELL_NEW:
		shell.editTimer=shell.escapeTimer=0;
   82388:	4b9a      	ldr	r3, [pc, #616]	; (825f4 <Shell+0x290>)
   8238a:	2400      	movs	r4, #0
   8238c:	619c      	str	r4, [r3, #24]
   8238e:	615c      	str	r4, [r3, #20]
		shell.state=IDLE;
   82390:	771c      	strb	r4, [r3, #28]
		shell.status=ST_SHELL_SHOW_UNKNOW_CRC;
   82392:	2202      	movs	r2, #2
   82394:	801a      	strh	r2, [r3, #0]
		Lcd(LCD_NEW);
   82396:	2064      	movs	r0, #100	; 0x64
   82398:	4b97      	ldr	r3, [pc, #604]	; (825f8 <Shell+0x294>)
   8239a:	4798      	blx	r3
		gpio_configure_pin(HEART_LED, HEART_LED_FLAGS);
   8239c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   823a0:	2034      	movs	r0, #52	; 0x34
   823a2:	4d96      	ldr	r5, [pc, #600]	; (825fc <Shell+0x298>)
   823a4:	47a8      	blx	r5
		gpio_configure_pin(POWER_LED, POWER_LED_FLAGS);
   823a6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   823aa:	2033      	movs	r0, #51	; 0x33
   823ac:	47a8      	blx	r5

#if POWER_LED_ACTIVE_LEVEL
		gpio_set_pin_low(POWER_LED);
   823ae:	2033      	movs	r0, #51	; 0x33
   823b0:	4b93      	ldr	r3, [pc, #588]	; (82600 <Shell+0x29c>)
   823b2:	4798      	blx	r3
#else
		gpio_set_pin_high(POWER_LED);
#endif
		kRtc(KRTC_NEW);
   823b4:	2064      	movs	r0, #100	; 0x64
   823b6:	4b93      	ldr	r3, [pc, #588]	; (82604 <Shell+0x2a0>)
   823b8:	4798      	blx	r3
		Shellcom(SHELLCOM_NEW);
   823ba:	2064      	movs	r0, #100	; 0x64
   823bc:	4b92      	ldr	r3, [pc, #584]	; (82608 <Shell+0x2a4>)
   823be:	4798      	blx	r3
		//LcdPutstr("Hello World!",0,0);
		//LcdPutstr("Hello World!",1,1);
		//LcdPutstr("Hello World!",2,2);
		//LcdPutstr("Hello World!",3,3);
		PushTask(Shell,_SHELL_HEART_BEAT,-1,0);
   823c0:	4e92      	ldr	r6, [pc, #584]	; (8260c <Shell+0x2a8>)
   823c2:	9400      	str	r4, [sp, #0]
   823c4:	f04f 33ff 	mov.w	r3, #4294967295
   823c8:	2201      	movs	r2, #1
   823ca:	4631      	mov	r1, r6
   823cc:	2066      	movs	r0, #102	; 0x66
   823ce:	4d90      	ldr	r5, [pc, #576]	; (82610 <Shell+0x2ac>)
   823d0:	47a8      	blx	r5
		PushTask(Shell,_SHELL_PROMPT,0,0);
   823d2:	9400      	str	r4, [sp, #0]
   823d4:	4623      	mov	r3, r4
   823d6:	2204      	movs	r2, #4
   823d8:	4631      	mov	r1, r6
   823da:	2066      	movs	r0, #102	; 0x66
   823dc:	47a8      	blx	r5

	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_SHELL_SWITCH_BAD_SC,sc);
	}
	return 0;
   823de:	46a0      	mov	r8, r4
}
   823e0:	4640      	mov	r0, r8
   823e2:	b007      	add	sp, #28
   823e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   823e8:	b004      	add	sp, #16
   823ea:	4770      	bx	lr
	switch(sc)
   823ec:	2902      	cmp	r1, #2
   823ee:	f000 80a6 	beq.w	8253e <Shell+0x1da>
   823f2:	f200 833a 	bhi.w	82a6a <Shell+0x706>
   823f6:	2901      	cmp	r1, #1
   823f8:	f040 8630 	bne.w	8305c <Shell+0xcf8>
		if(heartBeatRhythm[++k]==0) k=0;
   823fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   823fe:	3301      	adds	r3, #1
   82400:	930f      	str	r3, [sp, #60]	; 0x3c
   82402:	4a84      	ldr	r2, [pc, #528]	; (82614 <Shell+0x2b0>)
   82404:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82408:	2a00      	cmp	r2, #0
   8240a:	d13b      	bne.n	82484 <Shell+0x120>
   8240c:	2300      	movs	r3, #0
   8240e:	930f      	str	r3, [sp, #60]	; 0x3c
		else gpio_set_pin_low(HEART_LED);
   82410:	2034      	movs	r0, #52	; 0x34
   82412:	4b7b      	ldr	r3, [pc, #492]	; (82600 <Shell+0x29c>)
   82414:	4798      	blx	r3
   82416:	e03b      	b.n	82490 <Shell+0x12c>
	    while((*(char*)_pSep)&&(*(char*)_pSep!=_ch)) _pSep++;
   82418:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8241a:	781a      	ldrb	r2, [r3, #0]
   8241c:	b14a      	cbz	r2, 82432 <Shell+0xce>
   8241e:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   82422:	428a      	cmp	r2, r1
   82424:	d005      	beq.n	82432 <Shell+0xce>
   82426:	3301      	adds	r3, #1
   82428:	9310      	str	r3, [sp, #64]	; 0x40
   8242a:	781a      	ldrb	r2, [r3, #0]
   8242c:	b10a      	cbz	r2, 82432 <Shell+0xce>
   8242e:	428a      	cmp	r2, r1
   82430:	d1f9      	bne.n	82426 <Shell+0xc2>
	    return (uint32_t)*(char*)_pSep;
   82432:	4690      	mov	r8, r2
   82434:	e7d4      	b.n	823e0 <Shell+0x7c>
		while(len--)
   82436:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   8243a:	f108 33ff 	add.w	r3, r8, #4294967295
   8243e:	9310      	str	r3, [sp, #64]	; 0x40
   82440:	f1b8 0f00 	cmp.w	r8, #0
   82444:	d0cc      	beq.n	823e0 <Shell+0x7c>
			Putch(hexDigits[*(char*)str>>4]);
   82446:	4e74      	ldr	r6, [pc, #464]	; (82618 <Shell+0x2b4>)
   82448:	2566      	movs	r5, #102	; 0x66
   8244a:	4c6f      	ldr	r4, [pc, #444]	; (82608 <Shell+0x2a4>)
   8244c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8244e:	781b      	ldrb	r3, [r3, #0]
   82450:	091b      	lsrs	r3, r3, #4
   82452:	5cf1      	ldrb	r1, [r6, r3]
   82454:	4628      	mov	r0, r5
   82456:	47a0      	blx	r4
			Putch(hexDigits[*(char*)str&0x0F]);
   82458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8245a:	781b      	ldrb	r3, [r3, #0]
   8245c:	f003 030f 	and.w	r3, r3, #15
   82460:	5cf1      	ldrb	r1, [r6, r3]
   82462:	4628      	mov	r0, r5
   82464:	47a0      	blx	r4
			Putch(' ');
   82466:	2120      	movs	r1, #32
   82468:	4628      	mov	r0, r5
   8246a:	47a0      	blx	r4
			str++;
   8246c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8246e:	3301      	adds	r3, #1
   82470:	930f      	str	r3, [sp, #60]	; 0x3c
		while(len--)
   82472:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   82476:	f108 33ff 	add.w	r3, r8, #4294967295
   8247a:	9310      	str	r3, [sp, #64]	; 0x40
   8247c:	f1b8 0f00 	cmp.w	r8, #0
   82480:	d1e4      	bne.n	8244c <Shell+0xe8>
   82482:	e7ad      	b.n	823e0 <Shell+0x7c>
		if((k%2==0)^(!HEART_LED_ACTIVE_LEVEL)) gpio_set_pin_high(HEART_LED);
   82484:	f013 0f01 	tst.w	r3, #1
   82488:	d0c2      	beq.n	82410 <Shell+0xac>
   8248a:	2034      	movs	r0, #52	; 0x34
   8248c:	4b63      	ldr	r3, [pc, #396]	; (8261c <Shell+0x2b8>)
   8248e:	4798      	blx	r3
		PushTask(Shell,_SHELL_HEART_BEAT,k,heartBeatRhythm[k]);
   82490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82492:	4a60      	ldr	r2, [pc, #384]	; (82614 <Shell+0x2b0>)
   82494:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82498:	9200      	str	r2, [sp, #0]
   8249a:	2201      	movs	r2, #1
   8249c:	495b      	ldr	r1, [pc, #364]	; (8260c <Shell+0x2a8>)
   8249e:	2066      	movs	r0, #102	; 0x66
   824a0:	4c5b      	ldr	r4, [pc, #364]	; (82610 <Shell+0x2ac>)
   824a2:	47a0      	blx	r4
	return 0;
   824a4:	f04f 0800 	mov.w	r8, #0
		break;
   824a8:	e79a      	b.n	823e0 <Shell+0x7c>
		rtc_get_time(RTC,&_hour,&_minute,&_second);
   824aa:	ab05      	add	r3, sp, #20
   824ac:	aa0f      	add	r2, sp, #60	; 0x3c
   824ae:	a90e      	add	r1, sp, #56	; 0x38
   824b0:	485b      	ldr	r0, [pc, #364]	; (82620 <Shell+0x2bc>)
   824b2:	4c5c      	ldr	r4, [pc, #368]	; (82624 <Shell+0x2c0>)
   824b4:	47a0      	blx	r4
		if(mIsBitsClr(shell.status,ST_SHELL_PROMPT_DISABLED))
   824b6:	4b4f      	ldr	r3, [pc, #316]	; (825f4 <Shell+0x290>)
   824b8:	881b      	ldrh	r3, [r3, #0]
   824ba:	f013 0f04 	tst.w	r3, #4
   824be:	d030      	beq.n	82522 <Shell+0x1be>
		if(IsLcdOn())
   824c0:	2069      	movs	r0, #105	; 0x69
   824c2:	4b4d      	ldr	r3, [pc, #308]	; (825f8 <Shell+0x294>)
   824c4:	4798      	blx	r3
   824c6:	4680      	mov	r8, r0
   824c8:	2800      	cmp	r0, #0
   824ca:	d089      	beq.n	823e0 <Shell+0x7c>
			sprintf(shellTmpBuf,"%02d:%02d:%02d",(int)_hour,(int)_minute,(int)_second);
   824cc:	ad0e      	add	r5, sp, #56	; 0x38
   824ce:	f855 2b04 	ldr.w	r2, [r5], #4
   824d2:	4c55      	ldr	r4, [pc, #340]	; (82628 <Shell+0x2c4>)
   824d4:	ae06      	add	r6, sp, #24
   824d6:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   824da:	9300      	str	r3, [sp, #0]
   824dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   824de:	4953      	ldr	r1, [pc, #332]	; (8262c <Shell+0x2c8>)
   824e0:	4620      	mov	r0, r4
   824e2:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8263c <Shell+0x2d8>
   824e6:	47c0      	blx	r8
			LcdPutstr(shellTmpBuf,1,6);
   824e8:	2306      	movs	r3, #6
   824ea:	2201      	movs	r2, #1
   824ec:	4621      	mov	r1, r4
   824ee:	2068      	movs	r0, #104	; 0x68
   824f0:	4f41      	ldr	r7, [pc, #260]	; (825f8 <Shell+0x294>)
   824f2:	47b8      	blx	r7
			rtc_get_date(RTC,&_year,&_month,&_date,&_day);
   824f4:	ab04      	add	r3, sp, #16
   824f6:	9300      	str	r3, [sp, #0]
   824f8:	4633      	mov	r3, r6
   824fa:	462a      	mov	r2, r5
   824fc:	a90e      	add	r1, sp, #56	; 0x38
   824fe:	4848      	ldr	r0, [pc, #288]	; (82620 <Shell+0x2bc>)
   82500:	4d4b      	ldr	r5, [pc, #300]	; (82630 <Shell+0x2cc>)
   82502:	47a8      	blx	r5
			sprintf(shellTmpBuf,"%02d/%02d/%04d",(int)_date,(int)_month,(int)_year);
   82504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82506:	9300      	str	r3, [sp, #0]
   82508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8250a:	9a05      	ldr	r2, [sp, #20]
   8250c:	4949      	ldr	r1, [pc, #292]	; (82634 <Shell+0x2d0>)
   8250e:	4620      	mov	r0, r4
   82510:	47c0      	blx	r8
			LcdPutstr(shellTmpBuf,0,5);
   82512:	2305      	movs	r3, #5
   82514:	2200      	movs	r2, #0
   82516:	4621      	mov	r1, r4
   82518:	2068      	movs	r0, #104	; 0x68
   8251a:	47b8      	blx	r7
	return 0;
   8251c:	f04f 0800 	mov.w	r8, #0
   82520:	e75e      	b.n	823e0 <Shell+0x7c>
			sprintf(shellTmpBuf,"\r%02d:%02d:%02d",(int)_hour,(int)_minute,(int)_second);
   82522:	4c41      	ldr	r4, [pc, #260]	; (82628 <Shell+0x2c4>)
   82524:	9b05      	ldr	r3, [sp, #20]
   82526:	9300      	str	r3, [sp, #0]
   82528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8252a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8252c:	4942      	ldr	r1, [pc, #264]	; (82638 <Shell+0x2d4>)
   8252e:	4620      	mov	r0, r4
   82530:	4d42      	ldr	r5, [pc, #264]	; (8263c <Shell+0x2d8>)
   82532:	47a8      	blx	r5
			Putstr(shellTmpBuf);
   82534:	4621      	mov	r1, r4
   82536:	2067      	movs	r0, #103	; 0x67
   82538:	4b33      	ldr	r3, [pc, #204]	; (82608 <Shell+0x2a4>)
   8253a:	4798      	blx	r3
   8253c:	e7c0      	b.n	824c0 <Shell+0x15c>
		switch(shell.state)
   8253e:	4b2d      	ldr	r3, [pc, #180]	; (825f4 <Shell+0x290>)
   82540:	7f1b      	ldrb	r3, [r3, #28]
   82542:	2b06      	cmp	r3, #6
   82544:	f200 8283 	bhi.w	82a4e <Shell+0x6ea>
   82548:	e8df f013 	tbh	[pc, r3, lsl #1]
   8254c:	00820007 	.word	0x00820007
   82550:	00990085 	.word	0x00990085
   82554:	026d026a 	.word	0x026d026a
   82558:	01ba      	.short	0x01ba
			switch(_kbhitchar)
   8255a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8255c:	b2d3      	uxtb	r3, r2
   8255e:	3b08      	subs	r3, #8
   82560:	2b18      	cmp	r3, #24
   82562:	d82d      	bhi.n	825c0 <Shell+0x25c>
   82564:	e8df f013 	tbh	[pc, r3, lsl #1]
   82568:	05810581 	.word	0x05810581
   8256c:	002c0581 	.word	0x002c0581
   82570:	0581002c 	.word	0x0581002c
   82574:	002c002c 	.word	0x002c002c
   82578:	002c002c 	.word	0x002c002c
   8257c:	002c002c 	.word	0x002c002c
   82580:	002c002c 	.word	0x002c002c
   82584:	002c002c 	.word	0x002c002c
   82588:	002c002c 	.word	0x002c002c
   8258c:	0019002c 	.word	0x0019002c
   82590:	002c002c 	.word	0x002c002c
   82594:	002c002c 	.word	0x002c002c
   82598:	0581      	.short	0x0581
				shell.escapeTimer=SHELL_ESC_TIMEOUT;
   8259a:	4c16      	ldr	r4, [pc, #88]	; (825f4 <Shell+0x290>)
   8259c:	2314      	movs	r3, #20
   8259e:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++='\e';
   825a0:	4b27      	ldr	r3, [pc, #156]	; (82640 <Shell+0x2dc>)
   825a2:	60a3      	str	r3, [r4, #8]
   825a4:	201b      	movs	r0, #27
   825a6:	f803 0c01 	strb.w	r0, [r3, #-1]
				shell.nEscChar=1;
   825aa:	2501      	movs	r5, #1
   825ac:	81e5      	strh	r5, [r4, #14]
				shell.crc=CRC16MODBUSbyte('\e',0xFFFF);
   825ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   825b2:	4b24      	ldr	r3, [pc, #144]	; (82644 <Shell+0x2e0>)
   825b4:	4798      	blx	r3
   825b6:	8220      	strh	r0, [r4, #16]
				shell.state=ESCAPE;
   825b8:	7725      	strb	r5, [r4, #28]
	return 0;
   825ba:	f04f 0800 	mov.w	r8, #0
				break;
   825be:	e70f      	b.n	823e0 <Shell+0x7c>
				EnterEditMode();
   825c0:	4c0c      	ldr	r4, [pc, #48]	; (825f4 <Shell+0x290>)
   825c2:	8823      	ldrh	r3, [r4, #0]
   825c4:	f043 0304 	orr.w	r3, r3, #4
   825c8:	8023      	strh	r3, [r4, #0]
				shell.editTimer=SHELL_EDIT_TIMEOUT;
   825ca:	2500      	movs	r5, #0
   825cc:	6165      	str	r5, [r4, #20]
				*shell.pEdit++=_kbhitchar;
   825ce:	4b1e      	ldr	r3, [pc, #120]	; (82648 <Shell+0x2e4>)
   825d0:	6063      	str	r3, [r4, #4]
			switch(_kbhitchar)
   825d2:	f803 2c01 	strb.w	r2, [r3, #-1]
				shell.nChar=1;
   825d6:	2301      	movs	r3, #1
   825d8:	81a3      	strh	r3, [r4, #12]
				Putstr("\r\n>"); Putch(_kbhitchar);
   825da:	491c      	ldr	r1, [pc, #112]	; (8264c <Shell+0x2e8>)
   825dc:	2067      	movs	r0, #103	; 0x67
   825de:	4e0a      	ldr	r6, [pc, #40]	; (82608 <Shell+0x2a4>)
   825e0:	47b0      	blx	r6
   825e2:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   825e6:	2066      	movs	r0, #102	; 0x66
   825e8:	47b0      	blx	r6
				shell.state=EDITION;
   825ea:	2303      	movs	r3, #3
   825ec:	7723      	strb	r3, [r4, #28]
	return 0;
   825ee:	46a8      	mov	r8, r5
				break;
   825f0:	e6f6      	b.n	823e0 <Shell+0x7c>
   825f2:	bf00      	nop
   825f4:	20001d18 	.word	0x20001d18
   825f8:	00081579 	.word	0x00081579
   825fc:	000841e1 	.word	0x000841e1
   82600:	000841a5 	.word	0x000841a5
   82604:	00081239 	.word	0x00081239
   82608:	00083495 	.word	0x00083495
   8260c:	00082365 	.word	0x00082365
   82610:	00083829 	.word	0x00083829
   82614:	0008a1e4 	.word	0x0008a1e4
   82618:	0008a1f8 	.word	0x0008a1f8
   8261c:	0008418b 	.word	0x0008418b
   82620:	400e1260 	.word	0x400e1260
   82624:	000845ab 	.word	0x000845ab
   82628:	20001db8 	.word	0x20001db8
   8262c:	0008a13c 	.word	0x0008a13c
   82630:	00084699 	.word	0x00084699
   82634:	0008a14c 	.word	0x0008a14c
   82638:	0008a12c 	.word	0x0008a12c
   8263c:	00085125 	.word	0x00085125
   82640:	20001d39 	.word	0x20001d39
   82644:	00080edd 	.word	0x00080edd
   82648:	20001c15 	.word	0x20001c15
   8264c:	0008a15c 	.word	0x0008a15c
				shell.state=ESCAPE_SEQ;
   82650:	2202      	movs	r2, #2
   82652:	4b91      	ldr	r3, [pc, #580]	; (82898 <Shell+0x534>)
   82654:	771a      	strb	r2, [r3, #28]
				shell.escapeTimer=SHELL_ESC_TIMEOUT;
   82656:	4c90      	ldr	r4, [pc, #576]	; (82898 <Shell+0x534>)
   82658:	2314      	movs	r3, #20
   8265a:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++=_kbhitchar;
   8265c:	68a3      	ldr	r3, [r4, #8]
   8265e:	1c5a      	adds	r2, r3, #1
   82660:	60a2      	str	r2, [r4, #8]
   82662:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82664:	701a      	strb	r2, [r3, #0]
				shell.nEscChar++;
   82666:	89e3      	ldrh	r3, [r4, #14]
   82668:	3301      	adds	r3, #1
   8266a:	81e3      	strh	r3, [r4, #14]
				shell.crc=CRC16MODBUSbyte(_kbhitchar,shell.crc);
   8266c:	8a21      	ldrh	r1, [r4, #16]
   8266e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   82672:	4b8a      	ldr	r3, [pc, #552]	; (8289c <Shell+0x538>)
   82674:	4798      	blx	r3
   82676:	8220      	strh	r0, [r4, #16]
	return 0;
   82678:	f04f 0800 	mov.w	r8, #0
			break;
   8267c:	e6b0      	b.n	823e0 <Shell+0x7c>
			shell.editTimer=SHELL_EDIT_TIMEOUT;
   8267e:	2200      	movs	r2, #0
   82680:	4b85      	ldr	r3, [pc, #532]	; (82898 <Shell+0x534>)
   82682:	615a      	str	r2, [r3, #20]
			switch(_kbhitchar)
   82684:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82686:	b2d1      	uxtb	r1, r2
   82688:	f1a1 0308 	sub.w	r3, r1, #8
   8268c:	2b13      	cmp	r3, #19
   8268e:	f200 8094 	bhi.w	827ba <Shell+0x456>
   82692:	e8df f003 	tbb	[pc, r3]
   82696:	1e36      	.short	0x1e36
   82698:	74929274 	.word	0x74929274
   8269c:	92929292 	.word	0x92929292
   826a0:	92929292 	.word	0x92929292
   826a4:	92929292 	.word	0x92929292
   826a8:	0a92      	.short	0x0a92
				shell.escapeTimer=SHELL_ESC_TIMEOUT;
   826aa:	4c7b      	ldr	r4, [pc, #492]	; (82898 <Shell+0x534>)
   826ac:	2314      	movs	r3, #20
   826ae:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++='\e';
   826b0:	4b7b      	ldr	r3, [pc, #492]	; (828a0 <Shell+0x53c>)
   826b2:	60a3      	str	r3, [r4, #8]
   826b4:	201b      	movs	r0, #27
   826b6:	f803 0c01 	strb.w	r0, [r3, #-1]
				shell.nEscChar=1;
   826ba:	2301      	movs	r3, #1
   826bc:	81e3      	strh	r3, [r4, #14]
				shell.crc=CRC16MODBUSbyte('\e',0xFFFF);
   826be:	f64f 71ff 	movw	r1, #65535	; 0xffff
   826c2:	4b76      	ldr	r3, [pc, #472]	; (8289c <Shell+0x538>)
   826c4:	4798      	blx	r3
   826c6:	8220      	strh	r0, [r4, #16]
				shell.state=ED_ESCAPE;
   826c8:	2304      	movs	r3, #4
   826ca:	7723      	strb	r3, [r4, #28]
	return 0;
   826cc:	f04f 0800 	mov.w	r8, #0
				break;
   826d0:	e686      	b.n	823e0 <Shell+0x7c>
				const char ctrl_right_arrow[]="\e[1;5C";
   826d2:	4b74      	ldr	r3, [pc, #464]	; (828a4 <Shell+0x540>)
   826d4:	e893 0003 	ldmia.w	r3, {r0, r1}
   826d8:	9002      	str	r0, [sp, #8]
   826da:	f8ad 100c 	strh.w	r1, [sp, #12]
   826de:	0c09      	lsrs	r1, r1, #16
   826e0:	f88d 100e 	strb.w	r1, [sp, #14]
				memcpy(shellEscapeBuf,ctrl_right_arrow,6);
   826e4:	4b70      	ldr	r3, [pc, #448]	; (828a8 <Shell+0x544>)
   826e6:	6018      	str	r0, [r3, #0]
   826e8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   826ec:	809a      	strh	r2, [r3, #4]
				shell.nEscChar=6;
   826ee:	4b6a      	ldr	r3, [pc, #424]	; (82898 <Shell+0x534>)
   826f0:	2206      	movs	r2, #6
   826f2:	81da      	strh	r2, [r3, #14]
				shell.state=ED_ESCAPE_SEQ;
   826f4:	2205      	movs	r2, #5
   826f6:	771a      	strb	r2, [r3, #28]
				shell.escapeTimer=1;	//Ask a ESC SEQUENCE timeout : treat as a "ctrl+right_arrow" key
   826f8:	2201      	movs	r2, #1
   826fa:	619a      	str	r2, [r3, #24]
	return 0;
   826fc:	f04f 0800 	mov.w	r8, #0
				break;
   82700:	e66e      	b.n	823e0 <Shell+0x7c>
                if(shell.nChar)
   82702:	4b65      	ldr	r3, [pc, #404]	; (82898 <Shell+0x534>)
   82704:	899a      	ldrh	r2, [r3, #12]
   82706:	2a00      	cmp	r2, #0
   82708:	f000 84b3 	beq.w	83072 <Shell+0xd0e>
	                pEnd = (uint32_t)shellEditBuf+shell.nChar;
   8270c:	4c67      	ldr	r4, [pc, #412]	; (828ac <Shell+0x548>)
   8270e:	4422      	add	r2, r4
   82710:	920e      	str	r2, [sp, #56]	; 0x38
	                pSrc = (uint32_t)shell.pEdit;
   82712:	685b      	ldr	r3, [r3, #4]
   82714:	9305      	str	r3, [sp, #20]
	                while(pSrc<pEnd)
   82716:	429a      	cmp	r2, r3
   82718:	d908      	bls.n	8272c <Shell+0x3c8>
		                *(char*)(pSrc-1)=*(char*)pSrc; pSrc++;
   8271a:	781a      	ldrb	r2, [r3, #0]
   8271c:	f803 2c01 	strb.w	r2, [r3, #-1]
   82720:	9b05      	ldr	r3, [sp, #20]
   82722:	3301      	adds	r3, #1
   82724:	9305      	str	r3, [sp, #20]
	                while(pSrc<pEnd)
   82726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82728:	429a      	cmp	r2, r3
   8272a:	d8f6      	bhi.n	8271a <Shell+0x3b6>
	                *(char*)pSrc++=' ';
   8272c:	2220      	movs	r2, #32
   8272e:	f803 2c01 	strb.w	r2, [r3, #-1]
	                Putstr("\e[D");
   82732:	4d5f      	ldr	r5, [pc, #380]	; (828b0 <Shell+0x54c>)
   82734:	4629      	mov	r1, r5
   82736:	2067      	movs	r0, #103	; 0x67
   82738:	4e5e      	ldr	r6, [pc, #376]	; (828b4 <Shell+0x550>)
   8273a:	47b0      	blx	r6
	                shell.pEdit--; shell.nChar--;
   8273c:	4a56      	ldr	r2, [pc, #344]	; (82898 <Shell+0x534>)
   8273e:	6851      	ldr	r1, [r2, #4]
   82740:	3901      	subs	r1, #1
   82742:	6051      	str	r1, [r2, #4]
   82744:	8993      	ldrh	r3, [r2, #12]
   82746:	3b01      	subs	r3, #1
   82748:	b29b      	uxth	r3, r3
   8274a:	8193      	strh	r3, [r2, #12]
	                k=Putstrlen(shell.pEdit,shell.nChar-(shell.pEdit-shellEditBuf)+1);
   8274c:	1c62      	adds	r2, r4, #1
   8274e:	441a      	add	r2, r3
   82750:	1a52      	subs	r2, r2, r1
   82752:	2068      	movs	r0, #104	; 0x68
   82754:	47b0      	blx	r6
   82756:	4680      	mov	r8, r0
	                while(k--) Putstr("\e[D");
   82758:	1e43      	subs	r3, r0, #1
   8275a:	9305      	str	r3, [sp, #20]
   8275c:	2800      	cmp	r0, #0
   8275e:	f43f ae3f 	beq.w	823e0 <Shell+0x7c>
   82762:	2667      	movs	r6, #103	; 0x67
   82764:	4c53      	ldr	r4, [pc, #332]	; (828b4 <Shell+0x550>)
   82766:	4629      	mov	r1, r5
   82768:	4630      	mov	r0, r6
   8276a:	47a0      	blx	r4
   8276c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   82770:	f108 33ff 	add.w	r3, r8, #4294967295
   82774:	9305      	str	r3, [sp, #20]
   82776:	f1b8 0f00 	cmp.w	r8, #0
   8277a:	d1f4      	bne.n	82766 <Shell+0x402>
   8277c:	e630      	b.n	823e0 <Shell+0x7c>
				if(shell.nChar==0)
   8277e:	4b46      	ldr	r3, [pc, #280]	; (82898 <Shell+0x534>)
   82780:	899b      	ldrh	r3, [r3, #12]
   82782:	b96b      	cbnz	r3, 827a0 <Shell+0x43c>
					ExitEditMode();
   82784:	4b44      	ldr	r3, [pc, #272]	; (82898 <Shell+0x534>)
   82786:	881a      	ldrh	r2, [r3, #0]
   82788:	f022 0204 	bic.w	r2, r2, #4
   8278c:	801a      	strh	r2, [r3, #0]
					shell.state=IDLE;
   8278e:	f04f 0800 	mov.w	r8, #0
   82792:	f883 801c 	strb.w	r8, [r3, #28]
					Putch('\r');
   82796:	210d      	movs	r1, #13
   82798:	2066      	movs	r0, #102	; 0x66
   8279a:	4b46      	ldr	r3, [pc, #280]	; (828b4 <Shell+0x550>)
   8279c:	4798      	blx	r3
   8279e:	e61f      	b.n	823e0 <Shell+0x7c>
					shell.state=EXECUTION;
   827a0:	2206      	movs	r2, #6
   827a2:	4b3d      	ldr	r3, [pc, #244]	; (82898 <Shell+0x534>)
   827a4:	771a      	strb	r2, [r3, #28]
					PushTask(Shell,_SHELL_KBHIT,'\r',0);
   827a6:	2400      	movs	r4, #0
   827a8:	9400      	str	r4, [sp, #0]
   827aa:	230d      	movs	r3, #13
   827ac:	2202      	movs	r2, #2
   827ae:	4942      	ldr	r1, [pc, #264]	; (828b8 <Shell+0x554>)
   827b0:	2066      	movs	r0, #102	; 0x66
   827b2:	4d42      	ldr	r5, [pc, #264]	; (828bc <Shell+0x558>)
   827b4:	47a8      	blx	r5
	return 0;
   827b6:	46a0      	mov	r8, r4
   827b8:	e612      	b.n	823e0 <Shell+0x7c>
			switch(_kbhitchar)
   827ba:	b2d2      	uxtb	r2, r2
				if(shell.nChar==0)
   827bc:	4b36      	ldr	r3, [pc, #216]	; (82898 <Shell+0x534>)
   827be:	899b      	ldrh	r3, [r3, #12]
   827c0:	b983      	cbnz	r3, 827e4 <Shell+0x480>
					if(_kbhitchar!=0x20) //Excluding space char
   827c2:	2a20      	cmp	r2, #32
   827c4:	f000 8459 	beq.w	8307a <Shell+0xd16>
						Putch((*shell.pEdit++=_kbhitchar)); shell.nChar++;
   827c8:	4c33      	ldr	r4, [pc, #204]	; (82898 <Shell+0x534>)
   827ca:	6863      	ldr	r3, [r4, #4]
   827cc:	1c58      	adds	r0, r3, #1
   827ce:	6060      	str	r0, [r4, #4]
   827d0:	701a      	strb	r2, [r3, #0]
   827d2:	2066      	movs	r0, #102	; 0x66
   827d4:	4b37      	ldr	r3, [pc, #220]	; (828b4 <Shell+0x550>)
   827d6:	4798      	blx	r3
   827d8:	89a3      	ldrh	r3, [r4, #12]
   827da:	3301      	adds	r3, #1
   827dc:	81a3      	strh	r3, [r4, #12]
	return 0;
   827de:	f04f 0800 	mov.w	r8, #0
   827e2:	e5fd      	b.n	823e0 <Shell+0x7c>
				else if(shell.nChar<(SHELL_EDITBUF_LEN))
   827e4:	2bff      	cmp	r3, #255	; 0xff
   827e6:	f200 845b 	bhi.w	830a0 <Shell+0xd3c>
					if(mIsBitsClr(shell.status,ST_SHELL_INSERT_MODE))
   827ea:	482b      	ldr	r0, [pc, #172]	; (82898 <Shell+0x534>)
   827ec:	8800      	ldrh	r0, [r0, #0]
   827ee:	f010 0f01 	tst.w	r0, #1
   827f2:	d112      	bne.n	8281a <Shell+0x4b6>
						if(shell.pEdit==shellEditBuf+shell.nChar)	shell.nChar++;
   827f4:	4828      	ldr	r0, [pc, #160]	; (82898 <Shell+0x534>)
   827f6:	6840      	ldr	r0, [r0, #4]
   827f8:	4c2c      	ldr	r4, [pc, #176]	; (828ac <Shell+0x548>)
   827fa:	441c      	add	r4, r3
   827fc:	42a0      	cmp	r0, r4
   827fe:	d102      	bne.n	82806 <Shell+0x4a2>
   82800:	3301      	adds	r3, #1
   82802:	4c25      	ldr	r4, [pc, #148]	; (82898 <Shell+0x534>)
   82804:	81a3      	strh	r3, [r4, #12]
						Putch((*shell.pEdit++=_kbhitchar));
   82806:	1c44      	adds	r4, r0, #1
   82808:	4b23      	ldr	r3, [pc, #140]	; (82898 <Shell+0x534>)
   8280a:	605c      	str	r4, [r3, #4]
   8280c:	7002      	strb	r2, [r0, #0]
   8280e:	2066      	movs	r0, #102	; 0x66
   82810:	4b28      	ldr	r3, [pc, #160]	; (828b4 <Shell+0x550>)
   82812:	4798      	blx	r3
	return 0;
   82814:	f04f 0800 	mov.w	r8, #0
   82818:	e5e2      	b.n	823e0 <Shell+0x7c>
						if(shell.pEdit!=shellEditBuf+shell.nChar)
   8281a:	4a1f      	ldr	r2, [pc, #124]	; (82898 <Shell+0x534>)
   8281c:	6851      	ldr	r1, [r2, #4]
   8281e:	4a23      	ldr	r2, [pc, #140]	; (828ac <Shell+0x548>)
   82820:	441a      	add	r2, r3
   82822:	4291      	cmp	r1, r2
   82824:	d00f      	beq.n	82846 <Shell+0x4e2>
							pDst=(uint32_t)shellEditBuf+shell.nChar;
   82826:	4a21      	ldr	r2, [pc, #132]	; (828ac <Shell+0x548>)
   82828:	4413      	add	r3, r2
   8282a:	930e      	str	r3, [sp, #56]	; 0x38
							while(pDst-1>=(uint32_t)shell.pEdit)
   8282c:	1e5a      	subs	r2, r3, #1
   8282e:	4291      	cmp	r1, r2
   82830:	d809      	bhi.n	82846 <Shell+0x4e2>
   82832:	4919      	ldr	r1, [pc, #100]	; (82898 <Shell+0x534>)
								*(char*)pDst=*(char*)(pDst-1); pDst--;
   82834:	7812      	ldrb	r2, [r2, #0]
   82836:	701a      	strb	r2, [r3, #0]
   82838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8283a:	1e53      	subs	r3, r2, #1
   8283c:	930e      	str	r3, [sp, #56]	; 0x38
							while(pDst-1>=(uint32_t)shell.pEdit)
   8283e:	3a02      	subs	r2, #2
   82840:	6848      	ldr	r0, [r1, #4]
   82842:	4290      	cmp	r0, r2
   82844:	d9f6      	bls.n	82834 <Shell+0x4d0>
						Putch((*shell.pEdit++=_kbhitchar)); shell.nChar++;
   82846:	4c14      	ldr	r4, [pc, #80]	; (82898 <Shell+0x534>)
   82848:	6863      	ldr	r3, [r4, #4]
   8284a:	1c5a      	adds	r2, r3, #1
   8284c:	6062      	str	r2, [r4, #4]
   8284e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   82850:	7019      	strb	r1, [r3, #0]
   82852:	b2c9      	uxtb	r1, r1
   82854:	2066      	movs	r0, #102	; 0x66
   82856:	4d17      	ldr	r5, [pc, #92]	; (828b4 <Shell+0x550>)
   82858:	47a8      	blx	r5
   8285a:	89a3      	ldrh	r3, [r4, #12]
   8285c:	3301      	adds	r3, #1
   8285e:	b29b      	uxth	r3, r3
   82860:	81a3      	strh	r3, [r4, #12]
						k=Putstrlen(shell.pEdit,(shellEditBuf+shell.nChar-shell.pEdit));
   82862:	6861      	ldr	r1, [r4, #4]
   82864:	4a11      	ldr	r2, [pc, #68]	; (828ac <Shell+0x548>)
   82866:	441a      	add	r2, r3
   82868:	1a52      	subs	r2, r2, r1
   8286a:	2068      	movs	r0, #104	; 0x68
   8286c:	47a8      	blx	r5
   8286e:	4680      	mov	r8, r0
						while(k--) Putstr("\e[D");
   82870:	1e43      	subs	r3, r0, #1
   82872:	930e      	str	r3, [sp, #56]	; 0x38
   82874:	2800      	cmp	r0, #0
   82876:	f43f adb3 	beq.w	823e0 <Shell+0x7c>
   8287a:	4e0d      	ldr	r6, [pc, #52]	; (828b0 <Shell+0x54c>)
   8287c:	2567      	movs	r5, #103	; 0x67
   8287e:	4c0d      	ldr	r4, [pc, #52]	; (828b4 <Shell+0x550>)
   82880:	4631      	mov	r1, r6
   82882:	4628      	mov	r0, r5
   82884:	47a0      	blx	r4
   82886:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   8288a:	f108 33ff 	add.w	r3, r8, #4294967295
   8288e:	930e      	str	r3, [sp, #56]	; 0x38
   82890:	f1b8 0f00 	cmp.w	r8, #0
   82894:	d1f4      	bne.n	82880 <Shell+0x51c>
   82896:	e5a3      	b.n	823e0 <Shell+0x7c>
   82898:	20001d18 	.word	0x20001d18
   8289c:	00080edd 	.word	0x00080edd
   828a0:	20001d39 	.word	0x20001d39
   828a4:	0008a1dc 	.word	0x0008a1dc
   828a8:	20001d38 	.word	0x20001d38
   828ac:	20001c14 	.word	0x20001c14
   828b0:	0008a160 	.word	0x0008a160
   828b4:	00083495 	.word	0x00083495
   828b8:	00082365 	.word	0x00082365
   828bc:	00083829 	.word	0x00083829
			k=shell.nChar-(shell.pEdit-shellEditBuf);
   828c0:	4a91      	ldr	r2, [pc, #580]	; (82b08 <Shell+0x7a4>)
   828c2:	8993      	ldrh	r3, [r2, #12]
   828c4:	6852      	ldr	r2, [r2, #4]
   828c6:	4991      	ldr	r1, [pc, #580]	; (82b0c <Shell+0x7a8>)
   828c8:	1a52      	subs	r2, r2, r1
   828ca:	1a9b      	subs	r3, r3, r2
			while(k--) Putstr("\e[C");
   828cc:	1e5a      	subs	r2, r3, #1
   828ce:	9205      	str	r2, [sp, #20]
   828d0:	b153      	cbz	r3, 828e8 <Shell+0x584>
   828d2:	4e8f      	ldr	r6, [pc, #572]	; (82b10 <Shell+0x7ac>)
   828d4:	2567      	movs	r5, #103	; 0x67
   828d6:	4c8f      	ldr	r4, [pc, #572]	; (82b14 <Shell+0x7b0>)
   828d8:	4631      	mov	r1, r6
   828da:	4628      	mov	r0, r5
   828dc:	47a0      	blx	r4
   828de:	9b05      	ldr	r3, [sp, #20]
   828e0:	1e5a      	subs	r2, r3, #1
   828e2:	9205      	str	r2, [sp, #20]
   828e4:	2b00      	cmp	r3, #0
   828e6:	d1f7      	bne.n	828d8 <Shell+0x574>
			shell.pEdit=shellEditBuf+shell.nChar;
   828e8:	4d87      	ldr	r5, [pc, #540]	; (82b08 <Shell+0x7a4>)
   828ea:	89aa      	ldrh	r2, [r5, #12]
   828ec:	4c87      	ldr	r4, [pc, #540]	; (82b0c <Shell+0x7a8>)
   828ee:	1913      	adds	r3, r2, r4
			*shell.pEdit++='\0';
   828f0:	3301      	adds	r3, #1
   828f2:	606b      	str	r3, [r5, #4]
   828f4:	2600      	movs	r6, #0
   828f6:	5516      	strb	r6, [r2, r4]
			_CleanUp_cmd_Line();
   828f8:	2007      	movs	r0, #7
   828fa:	f7ff fd33 	bl	82364 <Shell>
			shell.pEdit=shellEditBuf+shell.nChar;
   828fe:	89aa      	ldrh	r2, [r5, #12]
   82900:	1913      	adds	r3, r2, r4
			*shell.pEdit++='\0';
   82902:	3301      	adds	r3, #1
   82904:	606b      	str	r3, [r5, #4]
   82906:	5516      	strb	r6, [r2, r4]
			Putstr("\r\n/>");
   82908:	4983      	ldr	r1, [pc, #524]	; (82b18 <Shell+0x7b4>)
   8290a:	2067      	movs	r0, #103	; 0x67
   8290c:	4d81      	ldr	r5, [pc, #516]	; (82b14 <Shell+0x7b0>)
   8290e:	47a8      	blx	r5
			Putstr(shellEditBuf);
   82910:	4621      	mov	r1, r4
   82912:	2067      	movs	r0, #103	; 0x67
   82914:	47a8      	blx	r5
			mstrtokReset();
   82916:	4b81      	ldr	r3, [pc, #516]	; (82b1c <Shell+0x7b8>)
   82918:	4798      	blx	r3
			pToken=mstrtok(shellEditBuf,(char*)" \r\n");
   8291a:	4981      	ldr	r1, [pc, #516]	; (82b20 <Shell+0x7bc>)
   8291c:	4620      	mov	r0, r4
   8291e:	4b81      	ldr	r3, [pc, #516]	; (82b24 <Shell+0x7c0>)
   82920:	4798      	blx	r3
   82922:	4604      	mov	r4, r0
   82924:	900e      	str	r0, [sp, #56]	; 0x38
			if(pToken)
   82926:	b968      	cbnz	r0, 82944 <Shell+0x5e0>
			Putstr("\r\n");
   82928:	497f      	ldr	r1, [pc, #508]	; (82b28 <Shell+0x7c4>)
   8292a:	2067      	movs	r0, #103	; 0x67
   8292c:	4b79      	ldr	r3, [pc, #484]	; (82b14 <Shell+0x7b0>)
   8292e:	4798      	blx	r3
			shell.state=IDLE;
   82930:	4b75      	ldr	r3, [pc, #468]	; (82b08 <Shell+0x7a4>)
   82932:	f04f 0800 	mov.w	r8, #0
   82936:	f883 801c 	strb.w	r8, [r3, #28]
			ExitEditMode();
   8293a:	881a      	ldrh	r2, [r3, #0]
   8293c:	f022 0204 	bic.w	r2, r2, #4
   82940:	801a      	strh	r2, [r3, #0]
			break;
   82942:	e54d      	b.n	823e0 <Shell+0x7c>
				shell.crc=CRC16MODBUSFRAME((unsigned char*)pToken,strlen((char*)pToken));
   82944:	4b79      	ldr	r3, [pc, #484]	; (82b2c <Shell+0x7c8>)
   82946:	4798      	blx	r3
   82948:	4601      	mov	r1, r0
   8294a:	4620      	mov	r0, r4
   8294c:	4b78      	ldr	r3, [pc, #480]	; (82b30 <Shell+0x7cc>)
   8294e:	4798      	blx	r3
   82950:	b281      	uxth	r1, r0
   82952:	4b6d      	ldr	r3, [pc, #436]	; (82b08 <Shell+0x7a4>)
   82954:	8219      	strh	r1, [r3, #16]
				k=0;
   82956:	9605      	str	r6, [sp, #20]
				while((commands[k].cmdCode)&&(commands[k].cmdCode!=shell.crc)) k++;
   82958:	4b76      	ldr	r3, [pc, #472]	; (82b34 <Shell+0x7d0>)
   8295a:	881b      	ldrh	r3, [r3, #0]
   8295c:	b1f3      	cbz	r3, 8299c <Shell+0x638>
   8295e:	4299      	cmp	r1, r3
   82960:	d01e      	beq.n	829a0 <Shell+0x63c>
   82962:	2301      	movs	r3, #1
   82964:	4a73      	ldr	r2, [pc, #460]	; (82b34 <Shell+0x7d0>)
   82966:	e000      	b.n	8296a <Shell+0x606>
   82968:	462b      	mov	r3, r5
   8296a:	f832 4033 	ldrh.w	r4, [r2, r3, lsl #3]
   8296e:	b124      	cbz	r4, 8297a <Shell+0x616>
   82970:	1c5d      	adds	r5, r3, #1
   82972:	42a1      	cmp	r1, r4
   82974:	d1f8      	bne.n	82968 <Shell+0x604>
   82976:	9305      	str	r3, [sp, #20]
   82978:	e000      	b.n	8297c <Shell+0x618>
   8297a:	9305      	str	r3, [sp, #20]
				if(commands[k].pCmdFunc)
   8297c:	4c6d      	ldr	r4, [pc, #436]	; (82b34 <Shell+0x7d0>)
   8297e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   82982:	685d      	ldr	r5, [r3, #4]
   82984:	b175      	cbz	r5, 829a4 <Shell+0x640>
					commands[k].pCmdFunc((uint32_t)&shell,(void*)(pToken+strlen((char*)pToken)+1));
   82986:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   82988:	4620      	mov	r0, r4
   8298a:	4b68      	ldr	r3, [pc, #416]	; (82b2c <Shell+0x7c8>)
   8298c:	4798      	blx	r3
   8298e:	1c61      	adds	r1, r4, #1
   82990:	4401      	add	r1, r0
   82992:	485d      	ldr	r0, [pc, #372]	; (82b08 <Shell+0x7a4>)
   82994:	47a8      	blx	r5
					mstrtokRestore();
   82996:	4b68      	ldr	r3, [pc, #416]	; (82b38 <Shell+0x7d4>)
   82998:	4798      	blx	r3
   8299a:	e7c5      	b.n	82928 <Shell+0x5c4>
				while((commands[k].cmdCode)&&(commands[k].cmdCode!=shell.crc)) k++;
   8299c:	2300      	movs	r3, #0
   8299e:	e7ed      	b.n	8297c <Shell+0x618>
   829a0:	2300      	movs	r3, #0
   829a2:	e7eb      	b.n	8297c <Shell+0x618>
					k=0;
   829a4:	2300      	movs	r3, #0
   829a6:	9305      	str	r3, [sp, #20]
                    while((cmdEntries[k].cmdCode)&&(cmdEntries[k].cmdCode!=shell.crc)) k++;
   829a8:	4b64      	ldr	r3, [pc, #400]	; (82b3c <Shell+0x7d8>)
   829aa:	881b      	ldrh	r3, [r3, #0]
   829ac:	b313      	cbz	r3, 829f4 <Shell+0x690>
   829ae:	4299      	cmp	r1, r3
   829b0:	d022      	beq.n	829f8 <Shell+0x694>
   829b2:	2301      	movs	r3, #1
   829b4:	4c61      	ldr	r4, [pc, #388]	; (82b3c <Shell+0x7d8>)
   829b6:	e000      	b.n	829ba <Shell+0x656>
   829b8:	462b      	mov	r3, r5
   829ba:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
   829be:	b122      	cbz	r2, 829ca <Shell+0x666>
   829c0:	1c5d      	adds	r5, r3, #1
   829c2:	4291      	cmp	r1, r2
   829c4:	d1f8      	bne.n	829b8 <Shell+0x654>
   829c6:	9305      	str	r3, [sp, #20]
   829c8:	e000      	b.n	829cc <Shell+0x668>
   829ca:	9305      	str	r3, [sp, #20]
                    if(cmdEntries[k].pCmdFunc)
   829cc:	495b      	ldr	r1, [pc, #364]	; (82b3c <Shell+0x7d8>)
   829ce:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   829d2:	685d      	ldr	r5, [r3, #4]
   829d4:	b195      	cbz	r5, 829fc <Shell+0x698>
	                    cmdEntries[k].pCmdFunc((uint32_t)&shell,(void*)(pToken+strlen((char*)pToken)+1));
   829d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   829d8:	4620      	mov	r0, r4
   829da:	4b54      	ldr	r3, [pc, #336]	; (82b2c <Shell+0x7c8>)
   829dc:	4798      	blx	r3
   829de:	1c61      	adds	r1, r4, #1
   829e0:	4401      	add	r1, r0
   829e2:	4849      	ldr	r0, [pc, #292]	; (82b08 <Shell+0x7a4>)
   829e4:	47a8      	blx	r5
						mstrtokRestore();
   829e6:	4b54      	ldr	r3, [pc, #336]	; (82b38 <Shell+0x7d4>)
   829e8:	4798      	blx	r3
						Putstr("\r\n");
   829ea:	494f      	ldr	r1, [pc, #316]	; (82b28 <Shell+0x7c4>)
   829ec:	2067      	movs	r0, #103	; 0x67
   829ee:	4b49      	ldr	r3, [pc, #292]	; (82b14 <Shell+0x7b0>)
   829f0:	4798      	blx	r3
   829f2:	e799      	b.n	82928 <Shell+0x5c4>
                    while((cmdEntries[k].cmdCode)&&(cmdEntries[k].cmdCode!=shell.crc)) k++;
   829f4:	2300      	movs	r3, #0
   829f6:	e7e9      	b.n	829cc <Shell+0x668>
   829f8:	2300      	movs	r3, #0
   829fa:	e7e7      	b.n	829cc <Shell+0x668>
                    else if(mIsBitsSet(shell.status,ST_SHELL_SHOW_UNKNOW_CRC))
   829fc:	4b42      	ldr	r3, [pc, #264]	; (82b08 <Shell+0x7a4>)
   829fe:	881b      	ldrh	r3, [r3, #0]
   82a00:	f013 0f02 	tst.w	r3, #2
   82a04:	d090      	beq.n	82928 <Shell+0x5c4>
	                    sprintf(shellTmpBuf,"\tunknown cmd: %04X\r\n",shell.crc);
   82a06:	4c4e      	ldr	r4, [pc, #312]	; (82b40 <Shell+0x7dc>)
   82a08:	b282      	uxth	r2, r0
   82a0a:	494e      	ldr	r1, [pc, #312]	; (82b44 <Shell+0x7e0>)
   82a0c:	4620      	mov	r0, r4
   82a0e:	4b4e      	ldr	r3, [pc, #312]	; (82b48 <Shell+0x7e4>)
   82a10:	4798      	blx	r3
	                    Putstr(shellTmpBuf);
   82a12:	4621      	mov	r1, r4
   82a14:	2067      	movs	r0, #103	; 0x67
   82a16:	4b3f      	ldr	r3, [pc, #252]	; (82b14 <Shell+0x7b0>)
   82a18:	4798      	blx	r3
						mstrtokRestore();
   82a1a:	4b47      	ldr	r3, [pc, #284]	; (82b38 <Shell+0x7d4>)
   82a1c:	4798      	blx	r3
   82a1e:	e783      	b.n	82928 <Shell+0x5c4>
			shell.state=ED_ESCAPE_SEQ;
   82a20:	2205      	movs	r2, #5
   82a22:	4b39      	ldr	r3, [pc, #228]	; (82b08 <Shell+0x7a4>)
   82a24:	771a      	strb	r2, [r3, #28]
			shell.escapeTimer=SHELL_ESC_TIMEOUT;
   82a26:	4c38      	ldr	r4, [pc, #224]	; (82b08 <Shell+0x7a4>)
   82a28:	2314      	movs	r3, #20
   82a2a:	61a3      	str	r3, [r4, #24]
			*shell.pEscbuf++=_kbhitchar;
   82a2c:	68a3      	ldr	r3, [r4, #8]
   82a2e:	1c5a      	adds	r2, r3, #1
   82a30:	60a2      	str	r2, [r4, #8]
   82a32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82a34:	701a      	strb	r2, [r3, #0]
			shell.nEscChar++;
   82a36:	89e3      	ldrh	r3, [r4, #14]
   82a38:	3301      	adds	r3, #1
   82a3a:	81e3      	strh	r3, [r4, #14]
			shell.crc=CRC16MODBUSbyte(_kbhitchar,shell.crc);
   82a3c:	8a21      	ldrh	r1, [r4, #16]
   82a3e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   82a42:	4b42      	ldr	r3, [pc, #264]	; (82b4c <Shell+0x7e8>)
   82a44:	4798      	blx	r3
   82a46:	8220      	strh	r0, [r4, #16]
	return 0;
   82a48:	f04f 0800 	mov.w	r8, #0
			break;
   82a4c:	e4c8      	b.n	823e0 <Shell+0x7c>
			Putstr("\r\n\t***** case _SHELL_KBHIT: BAD case! ******\r\n");
   82a4e:	4940      	ldr	r1, [pc, #256]	; (82b50 <Shell+0x7ec>)
   82a50:	2067      	movs	r0, #103	; 0x67
   82a52:	4b30      	ldr	r3, [pc, #192]	; (82b14 <Shell+0x7b0>)
   82a54:	4798      	blx	r3
			shell.state=IDLE;
   82a56:	4b2c      	ldr	r3, [pc, #176]	; (82b08 <Shell+0x7a4>)
   82a58:	f04f 0800 	mov.w	r8, #0
   82a5c:	f883 801c 	strb.w	r8, [r3, #28]
			ExitEditMode();
   82a60:	881a      	ldrh	r2, [r3, #0]
   82a62:	f022 0204 	bic.w	r2, r2, #4
   82a66:	801a      	strh	r2, [r3, #0]
			break;
   82a68:	e4ba      	b.n	823e0 <Shell+0x7c>
		if(shell.escapeTimer)
   82a6a:	4b27      	ldr	r3, [pc, #156]	; (82b08 <Shell+0x7a4>)
   82a6c:	699b      	ldr	r3, [r3, #24]
   82a6e:	b1b3      	cbz	r3, 82a9e <Shell+0x73a>
			if(--shell.escapeTimer==0)
   82a70:	f103 38ff 	add.w	r8, r3, #4294967295
   82a74:	4b24      	ldr	r3, [pc, #144]	; (82b08 <Shell+0x7a4>)
   82a76:	f8c3 8018 	str.w	r8, [r3, #24]
   82a7a:	f1b8 0f00 	cmp.w	r8, #0
   82a7e:	d10e      	bne.n	82a9e <Shell+0x73a>
				switch(shell.state)
   82a80:	7f19      	ldrb	r1, [r3, #28]
   82a82:	2905      	cmp	r1, #5
   82a84:	f200 8266 	bhi.w	82f54 <Shell+0xbf0>
   82a88:	e8df f011 	tbh	[pc, r1, lsl #1]
   82a8c:	00060009 	.word	0x00060009
   82a90:	02640016 	.word	0x02640016
   82a94:	00a10095 	.word	0x00a10095
					shell.state=IDLE;
   82a98:	2200      	movs	r2, #0
   82a9a:	4b1b      	ldr	r3, [pc, #108]	; (82b08 <Shell+0x7a4>)
   82a9c:	771a      	strb	r2, [r3, #28]
        if(shell.editTimer)
   82a9e:	4b1a      	ldr	r3, [pc, #104]	; (82b08 <Shell+0x7a4>)
   82aa0:	f8d3 8014 	ldr.w	r8, [r3, #20]
   82aa4:	f1b8 0f00 	cmp.w	r8, #0
   82aa8:	f43f ac9a 	beq.w	823e0 <Shell+0x7c>
	        if(--shell.editTimer==0)
   82aac:	f108 32ff 	add.w	r2, r8, #4294967295
   82ab0:	615a      	str	r2, [r3, #20]
	return 0;
   82ab2:	f04f 0800 	mov.w	r8, #0
   82ab6:	e493      	b.n	823e0 <Shell+0x7c>
					shell.crc=CRC16MODBUSFRAME((unsigned char*)shellEscapeBuf,shell.nEscChar);
   82ab8:	4c13      	ldr	r4, [pc, #76]	; (82b08 <Shell+0x7a4>)
   82aba:	89e1      	ldrh	r1, [r4, #14]
   82abc:	4825      	ldr	r0, [pc, #148]	; (82b54 <Shell+0x7f0>)
   82abe:	4b1c      	ldr	r3, [pc, #112]	; (82b30 <Shell+0x7cc>)
   82ac0:	4798      	blx	r3
   82ac2:	b280      	uxth	r0, r0
   82ac4:	8220      	strh	r0, [r4, #16]
					switch(shell.crc)
   82ac6:	f24c 73f5 	movw	r3, #51189	; 0xc7f5
   82aca:	4298      	cmp	r0, r3
   82acc:	d00c      	beq.n	82ae8 <Shell+0x784>
   82ace:	f24c 73fa 	movw	r3, #51194	; 0xc7fa
   82ad2:	4298      	cmp	r0, r3
   82ad4:	d011      	beq.n	82afa <Shell+0x796>
						if(mIsBitsSet(shell.status,ST_SHELL_SHOW_UNKNOW_CRC))
   82ad6:	4b0c      	ldr	r3, [pc, #48]	; (82b08 <Shell+0x7a4>)
   82ad8:	881b      	ldrh	r3, [r3, #0]
   82ada:	f013 0f02 	tst.w	r3, #2
   82ade:	d156      	bne.n	82b8e <Shell+0x82a>
						shell.state=IDLE;
   82ae0:	2200      	movs	r2, #0
   82ae2:	4b09      	ldr	r3, [pc, #36]	; (82b08 <Shell+0x7a4>)
   82ae4:	771a      	strb	r2, [r3, #28]
						break;
   82ae6:	e7da      	b.n	82a9e <Shell+0x73a>
						PushTask(_cmd_restart,&shell,restartTimeOut,0);
   82ae8:	2300      	movs	r3, #0
   82aea:	9300      	str	r3, [sp, #0]
   82aec:	4b1a      	ldr	r3, [pc, #104]	; (82b58 <Shell+0x7f4>)
   82aee:	4a06      	ldr	r2, [pc, #24]	; (82b08 <Shell+0x7a4>)
   82af0:	491a      	ldr	r1, [pc, #104]	; (82b5c <Shell+0x7f8>)
   82af2:	2066      	movs	r0, #102	; 0x66
   82af4:	4c1a      	ldr	r4, [pc, #104]	; (82b60 <Shell+0x7fc>)
   82af6:	47a0      	blx	r4
						break;
   82af8:	e7d1      	b.n	82a9e <Shell+0x73a>
						if(shell.nChar)
   82afa:	4b03      	ldr	r3, [pc, #12]	; (82b08 <Shell+0x7a4>)
   82afc:	899b      	ldrh	r3, [r3, #12]
   82afe:	bb8b      	cbnz	r3, 82b64 <Shell+0x800>
							shell.state=IDLE;
   82b00:	2200      	movs	r2, #0
   82b02:	4b01      	ldr	r3, [pc, #4]	; (82b08 <Shell+0x7a4>)
   82b04:	771a      	strb	r2, [r3, #28]
   82b06:	e7ca      	b.n	82a9e <Shell+0x73a>
   82b08:	20001d18 	.word	0x20001d18
   82b0c:	20001c14 	.word	0x20001c14
   82b10:	0008a164 	.word	0x0008a164
   82b14:	00083495 	.word	0x00083495
   82b18:	0008a168 	.word	0x0008a168
   82b1c:	00083a75 	.word	0x00083a75
   82b20:	00089dfc 	.word	0x00089dfc
   82b24:	00083aa1 	.word	0x00083aa1
   82b28:	0008a1b4 	.word	0x0008a1b4
   82b2c:	00085171 	.word	0x00085171
   82b30:	00080ea9 	.word	0x00080ea9
   82b34:	00089b88 	.word	0x00089b88
   82b38:	00083a5d 	.word	0x00083a5d
   82b3c:	0008a508 	.word	0x0008a508
   82b40:	20001db8 	.word	0x20001db8
   82b44:	0008a170 	.word	0x0008a170
   82b48:	00085125 	.word	0x00085125
   82b4c:	00080edd 	.word	0x00080edd
   82b50:	0008a188 	.word	0x0008a188
   82b54:	20001d38 	.word	0x20001d38
   82b58:	0008a20c 	.word	0x0008a20c
   82b5c:	000832ed 	.word	0x000832ed
   82b60:	00083829 	.word	0x00083829
							EnterEditMode();
   82b64:	4c99      	ldr	r4, [pc, #612]	; (82dcc <Shell+0xa68>)
   82b66:	8822      	ldrh	r2, [r4, #0]
   82b68:	f042 0204 	orr.w	r2, r2, #4
   82b6c:	8022      	strh	r2, [r4, #0]
							shell.editTimer=SHELL_EDIT_TIMEOUT;
   82b6e:	2200      	movs	r2, #0
   82b70:	6162      	str	r2, [r4, #20]
							shell.pEdit=shellEditBuf+shell.nChar;
   82b72:	4e97      	ldr	r6, [pc, #604]	; (82dd0 <Shell+0xa6c>)
   82b74:	4433      	add	r3, r6
   82b76:	6063      	str	r3, [r4, #4]
							Putstr("\r\n");
   82b78:	4996      	ldr	r1, [pc, #600]	; (82dd4 <Shell+0xa70>)
   82b7a:	2067      	movs	r0, #103	; 0x67
   82b7c:	4d96      	ldr	r5, [pc, #600]	; (82dd8 <Shell+0xa74>)
   82b7e:	47a8      	blx	r5
							Putstrlen(shellEditBuf,shell.nChar);
   82b80:	89a2      	ldrh	r2, [r4, #12]
   82b82:	4631      	mov	r1, r6
   82b84:	2068      	movs	r0, #104	; 0x68
   82b86:	47a8      	blx	r5
							shell.state=EDITION;
   82b88:	2303      	movs	r3, #3
   82b8a:	7723      	strb	r3, [r4, #28]
   82b8c:	e787      	b.n	82a9e <Shell+0x73a>
							Putstr("\r\n   ESC_SEQ: ");
   82b8e:	4993      	ldr	r1, [pc, #588]	; (82ddc <Shell+0xa78>)
   82b90:	2067      	movs	r0, #103	; 0x67
   82b92:	4c91      	ldr	r4, [pc, #580]	; (82dd8 <Shell+0xa74>)
   82b94:	47a0      	blx	r4
							_PutAscii2Hex(shellEscapeBuf,shell.nEscChar);
   82b96:	4e8d      	ldr	r6, [pc, #564]	; (82dcc <Shell+0xa68>)
   82b98:	89f2      	ldrh	r2, [r6, #14]
   82b9a:	4991      	ldr	r1, [pc, #580]	; (82de0 <Shell+0xa7c>)
   82b9c:	2005      	movs	r0, #5
   82b9e:	f7ff fbe1 	bl	82364 <Shell>
							sprintf(shellTmpBuf," <%04X>\r\n",shell.crc);
   82ba2:	4d90      	ldr	r5, [pc, #576]	; (82de4 <Shell+0xa80>)
   82ba4:	8a32      	ldrh	r2, [r6, #16]
   82ba6:	4990      	ldr	r1, [pc, #576]	; (82de8 <Shell+0xa84>)
   82ba8:	4628      	mov	r0, r5
   82baa:	4b90      	ldr	r3, [pc, #576]	; (82dec <Shell+0xa88>)
   82bac:	4798      	blx	r3
							Putstr(shellTmpBuf);
   82bae:	4629      	mov	r1, r5
   82bb0:	2067      	movs	r0, #103	; 0x67
   82bb2:	47a0      	blx	r4
   82bb4:	e794      	b.n	82ae0 <Shell+0x77c>
					Putstr("\e[2K\r");
   82bb6:	498e      	ldr	r1, [pc, #568]	; (82df0 <Shell+0xa8c>)
   82bb8:	2067      	movs	r0, #103	; 0x67
   82bba:	4b87      	ldr	r3, [pc, #540]	; (82dd8 <Shell+0xa74>)
   82bbc:	4798      	blx	r3
					shell.state=IDLE;
   82bbe:	4b83      	ldr	r3, [pc, #524]	; (82dcc <Shell+0xa68>)
   82bc0:	2200      	movs	r2, #0
   82bc2:	771a      	strb	r2, [r3, #28]
					ExitEditMode();
   82bc4:	881a      	ldrh	r2, [r3, #0]
   82bc6:	f022 0204 	bic.w	r2, r2, #4
   82bca:	801a      	strh	r2, [r3, #0]
					break;
   82bcc:	e767      	b.n	82a9e <Shell+0x73a>
					shell.crc=CRC16MODBUSFRAME((unsigned char*)shellEscapeBuf,shell.nEscChar);
   82bce:	4c7f      	ldr	r4, [pc, #508]	; (82dcc <Shell+0xa68>)
   82bd0:	89e1      	ldrh	r1, [r4, #14]
   82bd2:	4883      	ldr	r0, [pc, #524]	; (82de0 <Shell+0xa7c>)
   82bd4:	4b87      	ldr	r3, [pc, #540]	; (82df4 <Shell+0xa90>)
   82bd6:	4798      	blx	r3
   82bd8:	b280      	uxth	r0, r0
   82bda:	8220      	strh	r0, [r4, #16]
					switch(shell.crc)
   82bdc:	f24c 133a 	movw	r3, #49466	; 0xc13a
   82be0:	4298      	cmp	r0, r3
   82be2:	f000 810f 	beq.w	82e04 <Shell+0xaa0>
   82be6:	d834      	bhi.n	82c52 <Shell+0x8ee>
   82be8:	f245 33e2 	movw	r3, #21474	; 0x53e2
   82bec:	4298      	cmp	r0, r3
   82bee:	f000 80e2 	beq.w	82db6 <Shell+0xa52>
   82bf2:	d81e      	bhi.n	82c32 <Shell+0x8ce>
   82bf4:	f240 53bb 	movw	r3, #1467	; 0x5bb
   82bf8:	4298      	cmp	r0, r3
   82bfa:	f000 811e 	beq.w	82e3a <Shell+0xad6>
   82bfe:	f240 637b 	movw	r3, #1659	; 0x67b
   82c02:	4298      	cmp	r0, r3
   82c04:	d11e      	bne.n	82c44 <Shell+0x8e0>
						if(shell.pEdit<(shellEditBuf+shell.nChar))
   82c06:	4a71      	ldr	r2, [pc, #452]	; (82dcc <Shell+0xa68>)
   82c08:	8993      	ldrh	r3, [r2, #12]
   82c0a:	4971      	ldr	r1, [pc, #452]	; (82dd0 <Shell+0xa6c>)
   82c0c:	440b      	add	r3, r1
   82c0e:	6852      	ldr	r2, [r2, #4]
   82c10:	429a      	cmp	r2, r3
   82c12:	d207      	bcs.n	82c24 <Shell+0x8c0>
							Putstr("\e[C");
   82c14:	4978      	ldr	r1, [pc, #480]	; (82df8 <Shell+0xa94>)
   82c16:	2067      	movs	r0, #103	; 0x67
   82c18:	4b6f      	ldr	r3, [pc, #444]	; (82dd8 <Shell+0xa74>)
   82c1a:	4798      	blx	r3
							shell.pEdit++;
   82c1c:	4a6b      	ldr	r2, [pc, #428]	; (82dcc <Shell+0xa68>)
   82c1e:	6853      	ldr	r3, [r2, #4]
   82c20:	3301      	adds	r3, #1
   82c22:	6053      	str	r3, [r2, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82c24:	4b69      	ldr	r3, [pc, #420]	; (82dcc <Shell+0xa68>)
   82c26:	2200      	movs	r2, #0
   82c28:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82c2a:	2203      	movs	r2, #3
   82c2c:	771a      	strb	r2, [r3, #28]
						break;
   82c2e:	f7ff bbd7 	b.w	823e0 <Shell+0x7c>
					switch(shell.crc)
   82c32:	f646 730e 	movw	r3, #28430	; 0x6f0e
   82c36:	4298      	cmp	r0, r3
   82c38:	d034      	beq.n	82ca4 <Shell+0x940>
   82c3a:	f64a 534f 	movw	r3, #44367	; 0xad4f
   82c3e:	4298      	cmp	r0, r3
   82c40:	f000 814a 	beq.w	82ed8 <Shell+0xb74>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82c44:	4b61      	ldr	r3, [pc, #388]	; (82dcc <Shell+0xa68>)
   82c46:	2200      	movs	r2, #0
   82c48:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82c4a:	2203      	movs	r2, #3
   82c4c:	771a      	strb	r2, [r3, #28]
						break;
   82c4e:	f7ff bbc7 	b.w	823e0 <Shell+0x7c>
					switch(shell.crc)
   82c52:	f24c 63ba 	movw	r3, #50874	; 0xc6ba
   82c56:	4298      	cmp	r0, r3
   82c58:	d064      	beq.n	82d24 <Shell+0x9c0>
   82c5a:	d81b      	bhi.n	82c94 <Shell+0x930>
   82c5c:	f24c 33e3 	movw	r3, #50147	; 0xc3e3
   82c60:	4298      	cmp	r0, r3
   82c62:	d072      	beq.n	82d4a <Shell+0x9e6>
   82c64:	f24c 433a 	movw	r3, #50234	; 0xc43a
   82c68:	4298      	cmp	r0, r3
   82c6a:	d1eb      	bne.n	82c44 <Shell+0x8e0>
						if(shell.pEdit>shellEditBuf)
   82c6c:	4b57      	ldr	r3, [pc, #348]	; (82dcc <Shell+0xa68>)
   82c6e:	685a      	ldr	r2, [r3, #4]
   82c70:	4b57      	ldr	r3, [pc, #348]	; (82dd0 <Shell+0xa6c>)
   82c72:	429a      	cmp	r2, r3
   82c74:	d907      	bls.n	82c86 <Shell+0x922>
							Putstr("\e[D");
   82c76:	4961      	ldr	r1, [pc, #388]	; (82dfc <Shell+0xa98>)
   82c78:	2067      	movs	r0, #103	; 0x67
   82c7a:	4b57      	ldr	r3, [pc, #348]	; (82dd8 <Shell+0xa74>)
   82c7c:	4798      	blx	r3
							shell.pEdit--;
   82c7e:	4a53      	ldr	r2, [pc, #332]	; (82dcc <Shell+0xa68>)
   82c80:	6853      	ldr	r3, [r2, #4]
   82c82:	3b01      	subs	r3, #1
   82c84:	6053      	str	r3, [r2, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82c86:	4b51      	ldr	r3, [pc, #324]	; (82dcc <Shell+0xa68>)
   82c88:	2200      	movs	r2, #0
   82c8a:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82c8c:	2203      	movs	r2, #3
   82c8e:	771a      	strb	r2, [r3, #28]
						break;
   82c90:	f7ff bba6 	b.w	823e0 <Shell+0x7c>
					switch(shell.crc)
   82c94:	f24c 73f5 	movw	r3, #51189	; 0xc7f5
   82c98:	4298      	cmp	r0, r3
   82c9a:	d04f      	beq.n	82d3c <Shell+0x9d8>
   82c9c:	f64c 43ba 	movw	r3, #52410	; 0xccba
   82ca0:	4298      	cmp	r0, r3
   82ca2:	d1cf      	bne.n	82c44 <Shell+0x8e0>
						if((shell.nChar&&(shell.pEdit==shellEditBuf+shell.nChar)) ||
   82ca4:	4b49      	ldr	r3, [pc, #292]	; (82dcc <Shell+0xa68>)
   82ca6:	899b      	ldrh	r3, [r3, #12]
   82ca8:	b12b      	cbz	r3, 82cb6 <Shell+0x952>
   82caa:	4a49      	ldr	r2, [pc, #292]	; (82dd0 <Shell+0xa6c>)
   82cac:	4413      	add	r3, r2
   82cae:	4a47      	ldr	r2, [pc, #284]	; (82dcc <Shell+0xa68>)
   82cb0:	6852      	ldr	r2, [r2, #4]
   82cb2:	429a      	cmp	r2, r3
   82cb4:	d015      	beq.n	82ce2 <Shell+0x97e>
						(((shell.pEdit-1)>=shellEditBuf)&&(_IsSeparator(*(shell.pEdit-1),separators))&&(!_IsSeparator(*shell.pEdit,separators))))
   82cb6:	4b45      	ldr	r3, [pc, #276]	; (82dcc <Shell+0xa68>)
   82cb8:	685b      	ldr	r3, [r3, #4]
   82cba:	1e59      	subs	r1, r3, #1
						if((shell.nChar&&(shell.pEdit==shellEditBuf+shell.nChar)) ||
   82cbc:	4a44      	ldr	r2, [pc, #272]	; (82dd0 <Shell+0xa6c>)
   82cbe:	4291      	cmp	r1, r2
   82cc0:	d317      	bcc.n	82cf2 <Shell+0x98e>
						(((shell.pEdit-1)>=shellEditBuf)&&(_IsSeparator(*(shell.pEdit-1),separators))&&(!_IsSeparator(*shell.pEdit,separators))))
   82cc2:	4c4f      	ldr	r4, [pc, #316]	; (82e00 <Shell+0xa9c>)
   82cc4:	4622      	mov	r2, r4
   82cc6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   82cca:	2006      	movs	r0, #6
   82ccc:	f7ff fb4a 	bl	82364 <Shell>
   82cd0:	b178      	cbz	r0, 82cf2 <Shell+0x98e>
   82cd2:	4b3e      	ldr	r3, [pc, #248]	; (82dcc <Shell+0xa68>)
   82cd4:	685b      	ldr	r3, [r3, #4]
   82cd6:	4622      	mov	r2, r4
   82cd8:	7819      	ldrb	r1, [r3, #0]
   82cda:	2006      	movs	r0, #6
   82cdc:	f7ff fb42 	bl	82364 <Shell>
   82ce0:	b938      	cbnz	r0, 82cf2 <Shell+0x98e>
							shell.pEdit--; Putstr("\e[D");
   82ce2:	4a3a      	ldr	r2, [pc, #232]	; (82dcc <Shell+0xa68>)
   82ce4:	6853      	ldr	r3, [r2, #4]
   82ce6:	3b01      	subs	r3, #1
   82ce8:	6053      	str	r3, [r2, #4]
   82cea:	4944      	ldr	r1, [pc, #272]	; (82dfc <Shell+0xa98>)
   82cec:	2067      	movs	r0, #103	; 0x67
   82cee:	4b3a      	ldr	r3, [pc, #232]	; (82dd8 <Shell+0xa74>)
   82cf0:	4798      	blx	r3
						if(_IsSeparator(*shell.pEdit,separators))
   82cf2:	4d43      	ldr	r5, [pc, #268]	; (82e00 <Shell+0xa9c>)
   82cf4:	4b35      	ldr	r3, [pc, #212]	; (82dcc <Shell+0xa68>)
   82cf6:	685b      	ldr	r3, [r3, #4]
   82cf8:	462a      	mov	r2, r5
   82cfa:	7819      	ldrb	r1, [r3, #0]
   82cfc:	2006      	movs	r0, #6
   82cfe:	f7ff fb31 	bl	82364 <Shell>
   82d02:	2800      	cmp	r0, #0
   82d04:	f040 80cb 	bne.w	82e9e <Shell+0xb3a>
						while(((shell.pEdit-1)>=shellEditBuf)&&(!_IsSeparator(*(shell.pEdit-1),separators)))
   82d08:	4b30      	ldr	r3, [pc, #192]	; (82dcc <Shell+0xa68>)
   82d0a:	685b      	ldr	r3, [r3, #4]
   82d0c:	1e59      	subs	r1, r3, #1
   82d0e:	4a30      	ldr	r2, [pc, #192]	; (82dd0 <Shell+0xa6c>)
   82d10:	4291      	cmp	r1, r2
   82d12:	f080 80dd 	bcs.w	82ed0 <Shell+0xb6c>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82d16:	4b2d      	ldr	r3, [pc, #180]	; (82dcc <Shell+0xa68>)
   82d18:	2200      	movs	r2, #0
   82d1a:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82d1c:	2203      	movs	r2, #3
   82d1e:	771a      	strb	r2, [r3, #28]
						break;
   82d20:	f7ff bb5e 	b.w	823e0 <Shell+0x7c>
						Putstr("\e[2K\r");
   82d24:	4932      	ldr	r1, [pc, #200]	; (82df0 <Shell+0xa8c>)
   82d26:	2067      	movs	r0, #103	; 0x67
   82d28:	4b2b      	ldr	r3, [pc, #172]	; (82dd8 <Shell+0xa74>)
   82d2a:	4798      	blx	r3
						ExitEditMode();
   82d2c:	4b27      	ldr	r3, [pc, #156]	; (82dcc <Shell+0xa68>)
   82d2e:	881a      	ldrh	r2, [r3, #0]
   82d30:	f022 0204 	bic.w	r2, r2, #4
   82d34:	801a      	strh	r2, [r3, #0]
						shell.state=IDLE;
   82d36:	2200      	movs	r2, #0
   82d38:	771a      	strb	r2, [r3, #28]
						break;
   82d3a:	e6b0      	b.n	82a9e <Shell+0x73a>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82d3c:	4b23      	ldr	r3, [pc, #140]	; (82dcc <Shell+0xa68>)
   82d3e:	2200      	movs	r2, #0
   82d40:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82d42:	2203      	movs	r2, #3
   82d44:	771a      	strb	r2, [r3, #28]
						break;
   82d46:	f7ff bb4b 	b.w	823e0 <Shell+0x7c>
						pSrc=(uint32_t)shell.pEdit+1;
   82d4a:	4a20      	ldr	r2, [pc, #128]	; (82dcc <Shell+0xa68>)
   82d4c:	6853      	ldr	r3, [r2, #4]
   82d4e:	3301      	adds	r3, #1
   82d50:	930e      	str	r3, [sp, #56]	; 0x38
						while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82d52:	491f      	ldr	r1, [pc, #124]	; (82dd0 <Shell+0xa6c>)
   82d54:	8992      	ldrh	r2, [r2, #12]
   82d56:	440a      	add	r2, r1
   82d58:	4293      	cmp	r3, r2
   82d5a:	d20a      	bcs.n	82d72 <Shell+0xa0e>
   82d5c:	481b      	ldr	r0, [pc, #108]	; (82dcc <Shell+0xa68>)
							*(char*)(pSrc-1)=*(char*)pSrc; pSrc++;
   82d5e:	781a      	ldrb	r2, [r3, #0]
   82d60:	f803 2c01 	strb.w	r2, [r3, #-1]
   82d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82d66:	3301      	adds	r3, #1
   82d68:	930e      	str	r3, [sp, #56]	; 0x38
						while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82d6a:	8982      	ldrh	r2, [r0, #12]
   82d6c:	440a      	add	r2, r1
   82d6e:	429a      	cmp	r2, r3
   82d70:	d8f5      	bhi.n	82d5e <Shell+0x9fa>
						*(char*)(pSrc-1)=' ';
   82d72:	2220      	movs	r2, #32
   82d74:	f803 2c01 	strb.w	r2, [r3, #-1]
	                    k=Putstrlen(shell.pEdit,pSrc-(uint32_t)shell.pEdit);
   82d78:	4b14      	ldr	r3, [pc, #80]	; (82dcc <Shell+0xa68>)
   82d7a:	6859      	ldr	r1, [r3, #4]
   82d7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82d7e:	1a52      	subs	r2, r2, r1
   82d80:	2068      	movs	r0, #104	; 0x68
   82d82:	4b15      	ldr	r3, [pc, #84]	; (82dd8 <Shell+0xa74>)
   82d84:	4798      	blx	r3
		                while(k--) Putstr("\e[D");
   82d86:	1e43      	subs	r3, r0, #1
   82d88:	930e      	str	r3, [sp, #56]	; 0x38
   82d8a:	b150      	cbz	r0, 82da2 <Shell+0xa3e>
   82d8c:	4e1b      	ldr	r6, [pc, #108]	; (82dfc <Shell+0xa98>)
   82d8e:	2567      	movs	r5, #103	; 0x67
   82d90:	4c11      	ldr	r4, [pc, #68]	; (82dd8 <Shell+0xa74>)
   82d92:	4631      	mov	r1, r6
   82d94:	4628      	mov	r0, r5
   82d96:	47a0      	blx	r4
   82d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82d9a:	1e5a      	subs	r2, r3, #1
   82d9c:	920e      	str	r2, [sp, #56]	; 0x38
   82d9e:	2b00      	cmp	r3, #0
   82da0:	d1f7      	bne.n	82d92 <Shell+0xa2e>
			            shell.nChar--;
   82da2:	4b0a      	ldr	r3, [pc, #40]	; (82dcc <Shell+0xa68>)
   82da4:	899a      	ldrh	r2, [r3, #12]
   82da6:	3a01      	subs	r2, #1
   82da8:	819a      	strh	r2, [r3, #12]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82daa:	2200      	movs	r2, #0
   82dac:	615a      	str	r2, [r3, #20]
				        shell.state=EDITION;
   82dae:	2203      	movs	r2, #3
   82db0:	771a      	strb	r2, [r3, #28]
					    break;
   82db2:	f7ff bb15 	b.w	823e0 <Shell+0x7c>
						mBitsTgl(shell.status,ST_SHELL_INSERT_MODE);
   82db6:	4b05      	ldr	r3, [pc, #20]	; (82dcc <Shell+0xa68>)
   82db8:	881a      	ldrh	r2, [r3, #0]
   82dba:	f082 0201 	eor.w	r2, r2, #1
   82dbe:	801a      	strh	r2, [r3, #0]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82dc0:	2200      	movs	r2, #0
   82dc2:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82dc4:	2203      	movs	r2, #3
   82dc6:	771a      	strb	r2, [r3, #28]
						break;
   82dc8:	f7ff bb0a 	b.w	823e0 <Shell+0x7c>
   82dcc:	20001d18 	.word	0x20001d18
   82dd0:	20001c14 	.word	0x20001c14
   82dd4:	0008a1b4 	.word	0x0008a1b4
   82dd8:	00083495 	.word	0x00083495
   82ddc:	0008a1b8 	.word	0x0008a1b8
   82de0:	20001d38 	.word	0x20001d38
   82de4:	20001db8 	.word	0x20001db8
   82de8:	0008a1c8 	.word	0x0008a1c8
   82dec:	00085125 	.word	0x00085125
   82df0:	0008a1d4 	.word	0x0008a1d4
   82df4:	00080ea9 	.word	0x00080ea9
   82df8:	0008a164 	.word	0x0008a164
   82dfc:	0008a160 	.word	0x0008a160
   82e00:	0008a210 	.word	0x0008a210
						k=(shell.pEdit-shellEditBuf);
   82e04:	4b9f      	ldr	r3, [pc, #636]	; (83084 <Shell+0xd20>)
   82e06:	685b      	ldr	r3, [r3, #4]
   82e08:	4a9f      	ldr	r2, [pc, #636]	; (83088 <Shell+0xd24>)
   82e0a:	1a9b      	subs	r3, r3, r2
						while(k--) Putstr("\e[D");
   82e0c:	1e5a      	subs	r2, r3, #1
   82e0e:	920e      	str	r2, [sp, #56]	; 0x38
   82e10:	b153      	cbz	r3, 82e28 <Shell+0xac4>
   82e12:	4e9e      	ldr	r6, [pc, #632]	; (8308c <Shell+0xd28>)
   82e14:	2567      	movs	r5, #103	; 0x67
   82e16:	4c9e      	ldr	r4, [pc, #632]	; (83090 <Shell+0xd2c>)
   82e18:	4631      	mov	r1, r6
   82e1a:	4628      	mov	r0, r5
   82e1c:	47a0      	blx	r4
   82e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82e20:	1e5a      	subs	r2, r3, #1
   82e22:	920e      	str	r2, [sp, #56]	; 0x38
   82e24:	2b00      	cmp	r3, #0
   82e26:	d1f7      	bne.n	82e18 <Shell+0xab4>
						shell.pEdit=shellEditBuf;
   82e28:	4b96      	ldr	r3, [pc, #600]	; (83084 <Shell+0xd20>)
   82e2a:	4a97      	ldr	r2, [pc, #604]	; (83088 <Shell+0xd24>)
   82e2c:	605a      	str	r2, [r3, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82e2e:	2200      	movs	r2, #0
   82e30:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82e32:	2203      	movs	r2, #3
   82e34:	771a      	strb	r2, [r3, #28]
						break;
   82e36:	f7ff bad3 	b.w	823e0 <Shell+0x7c>
						k=((shellEditBuf+shell.nChar)-shell.pEdit);
   82e3a:	4a92      	ldr	r2, [pc, #584]	; (83084 <Shell+0xd20>)
   82e3c:	8993      	ldrh	r3, [r2, #12]
   82e3e:	4992      	ldr	r1, [pc, #584]	; (83088 <Shell+0xd24>)
   82e40:	440b      	add	r3, r1
   82e42:	6852      	ldr	r2, [r2, #4]
   82e44:	1a9b      	subs	r3, r3, r2
						while(k--) Putstr("\e[C");
   82e46:	1e5a      	subs	r2, r3, #1
   82e48:	920e      	str	r2, [sp, #56]	; 0x38
   82e4a:	b153      	cbz	r3, 82e62 <Shell+0xafe>
   82e4c:	4e91      	ldr	r6, [pc, #580]	; (83094 <Shell+0xd30>)
   82e4e:	2567      	movs	r5, #103	; 0x67
   82e50:	4c8f      	ldr	r4, [pc, #572]	; (83090 <Shell+0xd2c>)
   82e52:	4631      	mov	r1, r6
   82e54:	4628      	mov	r0, r5
   82e56:	47a0      	blx	r4
   82e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82e5a:	1e5a      	subs	r2, r3, #1
   82e5c:	920e      	str	r2, [sp, #56]	; 0x38
   82e5e:	2b00      	cmp	r3, #0
   82e60:	d1f7      	bne.n	82e52 <Shell+0xaee>
						shell.pEdit=shellEditBuf+shell.nChar;
   82e62:	4b88      	ldr	r3, [pc, #544]	; (83084 <Shell+0xd20>)
   82e64:	899a      	ldrh	r2, [r3, #12]
   82e66:	4988      	ldr	r1, [pc, #544]	; (83088 <Shell+0xd24>)
   82e68:	440a      	add	r2, r1
   82e6a:	605a      	str	r2, [r3, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82e6c:	2200      	movs	r2, #0
   82e6e:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82e70:	2203      	movs	r2, #3
   82e72:	771a      	strb	r2, [r3, #28]
						break;
   82e74:	f7ff bab4 	b.w	823e0 <Shell+0x7c>
								shell.pEdit--;
   82e78:	3b01      	subs	r3, #1
   82e7a:	6063      	str	r3, [r4, #4]
								Putstr("\e[D");
   82e7c:	4631      	mov	r1, r6
   82e7e:	2067      	movs	r0, #103	; 0x67
   82e80:	4b83      	ldr	r3, [pc, #524]	; (83090 <Shell+0xd2c>)
   82e82:	4798      	blx	r3
							while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit>shellEditBuf))
   82e84:	6863      	ldr	r3, [r4, #4]
   82e86:	462a      	mov	r2, r5
   82e88:	7819      	ldrb	r1, [r3, #0]
   82e8a:	2006      	movs	r0, #6
   82e8c:	f7ff fa6a 	bl	82364 <Shell>
   82e90:	2800      	cmp	r0, #0
   82e92:	f43f af39 	beq.w	82d08 <Shell+0x9a4>
   82e96:	6863      	ldr	r3, [r4, #4]
   82e98:	42bb      	cmp	r3, r7
   82e9a:	d8ed      	bhi.n	82e78 <Shell+0xb14>
   82e9c:	e734      	b.n	82d08 <Shell+0x9a4>
   82e9e:	4c79      	ldr	r4, [pc, #484]	; (83084 <Shell+0xd20>)
   82ea0:	4f79      	ldr	r7, [pc, #484]	; (83088 <Shell+0xd24>)
								Putstr("\e[D");
   82ea2:	4e7a      	ldr	r6, [pc, #488]	; (8308c <Shell+0xd28>)
   82ea4:	e7ee      	b.n	82e84 <Shell+0xb20>
							shell.pEdit--;
   82ea6:	6863      	ldr	r3, [r4, #4]
   82ea8:	3b01      	subs	r3, #1
   82eaa:	6063      	str	r3, [r4, #4]
							Putstr("\e[D");
   82eac:	4639      	mov	r1, r7
   82eae:	2067      	movs	r0, #103	; 0x67
   82eb0:	47b0      	blx	r6
						while(((shell.pEdit-1)>=shellEditBuf)&&(!_IsSeparator(*(shell.pEdit-1),separators)))
   82eb2:	6863      	ldr	r3, [r4, #4]
   82eb4:	1e59      	subs	r1, r3, #1
   82eb6:	4a74      	ldr	r2, [pc, #464]	; (83088 <Shell+0xd24>)
   82eb8:	4291      	cmp	r1, r2
   82eba:	f4ff af2c 	bcc.w	82d16 <Shell+0x9b2>
   82ebe:	462a      	mov	r2, r5
   82ec0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   82ec4:	2006      	movs	r0, #6
   82ec6:	f7ff fa4d 	bl	82364 <Shell>
   82eca:	2800      	cmp	r0, #0
   82ecc:	d0eb      	beq.n	82ea6 <Shell+0xb42>
   82ece:	e722      	b.n	82d16 <Shell+0x9b2>
							shell.pEdit--;
   82ed0:	4c6c      	ldr	r4, [pc, #432]	; (83084 <Shell+0xd20>)
							Putstr("\e[D");
   82ed2:	4f6e      	ldr	r7, [pc, #440]	; (8308c <Shell+0xd28>)
   82ed4:	4e6e      	ldr	r6, [pc, #440]	; (83090 <Shell+0xd2c>)
   82ed6:	e7f2      	b.n	82ebe <Shell+0xb5a>
						if(!_IsSeparator(*shell.pEdit,separators))
   82ed8:	4d6f      	ldr	r5, [pc, #444]	; (83098 <Shell+0xd34>)
   82eda:	4b6a      	ldr	r3, [pc, #424]	; (83084 <Shell+0xd20>)
   82edc:	685b      	ldr	r3, [r3, #4]
   82ede:	462a      	mov	r2, r5
   82ee0:	7819      	ldrb	r1, [r3, #0]
   82ee2:	2006      	movs	r0, #6
   82ee4:	f7ff fa3e 	bl	82364 <Shell>
   82ee8:	b1b8      	cbz	r0, 82f1a <Shell+0xbb6>
						while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   82eea:	4c66      	ldr	r4, [pc, #408]	; (83084 <Shell+0xd20>)
   82eec:	4f66      	ldr	r7, [pc, #408]	; (83088 <Shell+0xd24>)
							Putstr("\e[C");
   82eee:	4e69      	ldr	r6, [pc, #420]	; (83094 <Shell+0xd30>)
   82ef0:	e01d      	b.n	82f2e <Shell+0xbca>
								shell.pEdit++;
   82ef2:	3301      	adds	r3, #1
   82ef4:	6063      	str	r3, [r4, #4]
								Putstr("\e[C");
   82ef6:	4631      	mov	r1, r6
   82ef8:	2067      	movs	r0, #103	; 0x67
   82efa:	4b65      	ldr	r3, [pc, #404]	; (83090 <Shell+0xd2c>)
   82efc:	4798      	blx	r3
							while((!_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   82efe:	6863      	ldr	r3, [r4, #4]
   82f00:	462a      	mov	r2, r5
   82f02:	7819      	ldrb	r1, [r3, #0]
   82f04:	2006      	movs	r0, #6
   82f06:	f7ff fa2d 	bl	82364 <Shell>
   82f0a:	2800      	cmp	r0, #0
   82f0c:	d1ed      	bne.n	82eea <Shell+0xb86>
   82f0e:	6863      	ldr	r3, [r4, #4]
   82f10:	89a2      	ldrh	r2, [r4, #12]
   82f12:	443a      	add	r2, r7
   82f14:	4293      	cmp	r3, r2
   82f16:	d3ec      	bcc.n	82ef2 <Shell+0xb8e>
   82f18:	e7e7      	b.n	82eea <Shell+0xb86>
   82f1a:	4c5a      	ldr	r4, [pc, #360]	; (83084 <Shell+0xd20>)
   82f1c:	4f5a      	ldr	r7, [pc, #360]	; (83088 <Shell+0xd24>)
								Putstr("\e[C");
   82f1e:	4e5d      	ldr	r6, [pc, #372]	; (83094 <Shell+0xd30>)
   82f20:	e7ed      	b.n	82efe <Shell+0xb9a>
							shell.pEdit++;
   82f22:	3301      	adds	r3, #1
   82f24:	6063      	str	r3, [r4, #4]
							Putstr("\e[C");
   82f26:	4631      	mov	r1, r6
   82f28:	2067      	movs	r0, #103	; 0x67
   82f2a:	4b59      	ldr	r3, [pc, #356]	; (83090 <Shell+0xd2c>)
   82f2c:	4798      	blx	r3
						while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   82f2e:	6863      	ldr	r3, [r4, #4]
   82f30:	462a      	mov	r2, r5
   82f32:	7819      	ldrb	r1, [r3, #0]
   82f34:	2006      	movs	r0, #6
   82f36:	f7ff fa15 	bl	82364 <Shell>
   82f3a:	b120      	cbz	r0, 82f46 <Shell+0xbe2>
   82f3c:	6863      	ldr	r3, [r4, #4]
   82f3e:	89a2      	ldrh	r2, [r4, #12]
   82f40:	443a      	add	r2, r7
   82f42:	4293      	cmp	r3, r2
   82f44:	d3ed      	bcc.n	82f22 <Shell+0xbbe>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82f46:	4b4f      	ldr	r3, [pc, #316]	; (83084 <Shell+0xd20>)
   82f48:	2200      	movs	r2, #0
   82f4a:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82f4c:	2203      	movs	r2, #3
   82f4e:	771a      	strb	r2, [r3, #28]
						break;
   82f50:	f7ff ba46 	b.w	823e0 <Shell+0x7c>
					Error(ERROR_SHELL_TIMER_ESC_BAD_SATE,shell.state);
   82f54:	2029      	movs	r0, #41	; 0x29
   82f56:	4b51      	ldr	r3, [pc, #324]	; (8309c <Shell+0xd38>)
   82f58:	4798      	blx	r3
   82f5a:	e5a0      	b.n	82a9e <Shell+0x73a>
		pSrc=(uint32_t)shellEditBuf;
   82f5c:	4d4a      	ldr	r5, [pc, #296]	; (83088 <Shell+0xd24>)
   82f5e:	950e      	str	r5, [sp, #56]	; 0x38
		while(_IsSeparator(*(char*)pSrc,separators)) pSrc++;
   82f60:	4e4d      	ldr	r6, [pc, #308]	; (83098 <Shell+0xd34>)
   82f62:	2406      	movs	r4, #6
   82f64:	4632      	mov	r2, r6
   82f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82f68:	7819      	ldrb	r1, [r3, #0]
   82f6a:	4620      	mov	r0, r4
   82f6c:	f7ff f9fa 	bl	82364 <Shell>
   82f70:	4680      	mov	r8, r0
   82f72:	b118      	cbz	r0, 82f7c <Shell+0xc18>
   82f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82f76:	3301      	adds	r3, #1
   82f78:	930e      	str	r3, [sp, #56]	; 0x38
   82f7a:	e7f3      	b.n	82f64 <Shell+0xc00>
		k=pSrc-(uint32_t)shellEditBuf;
   82f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82f7e:	1b5a      	subs	r2, r3, r5
   82f80:	9205      	str	r2, [sp, #20]
		if(k)
   82f82:	b19a      	cbz	r2, 82fac <Shell+0xc48>
			shell.pEdit=shellEditBuf;
   82f84:	4a3f      	ldr	r2, [pc, #252]	; (83084 <Shell+0xd20>)
   82f86:	4940      	ldr	r1, [pc, #256]	; (83088 <Shell+0xd24>)
   82f88:	6051      	str	r1, [r2, #4]
			while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82f8a:	8992      	ldrh	r2, [r2, #12]
   82f8c:	442a      	add	r2, r5
   82f8e:	4293      	cmp	r3, r2
   82f90:	d20c      	bcs.n	82fac <Shell+0xc48>
				*shell.pEdit++=*(char*)pSrc++;
   82f92:	493c      	ldr	r1, [pc, #240]	; (83084 <Shell+0xd20>)
   82f94:	684a      	ldr	r2, [r1, #4]
   82f96:	1c50      	adds	r0, r2, #1
   82f98:	6048      	str	r0, [r1, #4]
   82f9a:	1c58      	adds	r0, r3, #1
   82f9c:	900e      	str	r0, [sp, #56]	; 0x38
   82f9e:	781b      	ldrb	r3, [r3, #0]
   82fa0:	7013      	strb	r3, [r2, #0]
			while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82fa4:	898a      	ldrh	r2, [r1, #12]
   82fa6:	442a      	add	r2, r5
   82fa8:	429a      	cmp	r2, r3
   82faa:	d8f3      	bhi.n	82f94 <Shell+0xc30>
		pSrc=(uint32_t)shellEditBuf+k;
   82fac:	9905      	ldr	r1, [sp, #20]
   82fae:	186b      	adds	r3, r5, r1
   82fb0:	930e      	str	r3, [sp, #56]	; 0x38
		shell.nChar-=k;
   82fb2:	4a34      	ldr	r2, [pc, #208]	; (83084 <Shell+0xd20>)
   82fb4:	8993      	ldrh	r3, [r2, #12]
   82fb6:	1a5b      	subs	r3, r3, r1
   82fb8:	8193      	strh	r3, [r2, #12]
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82fba:	4614      	mov	r4, r2
			while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(!_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   82fbc:	2706      	movs	r7, #6
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82fbe:	e004      	b.n	82fca <Shell+0xc66>
			if(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82fc0:	89a3      	ldrh	r3, [r4, #12]
   82fc2:	442b      	add	r3, r5
   82fc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82fc6:	4293      	cmp	r3, r2
   82fc8:	d814      	bhi.n	82ff4 <Shell+0xc90>
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82fcc:	89a2      	ldrh	r2, [r4, #12]
   82fce:	442a      	add	r2, r5
   82fd0:	429a      	cmp	r2, r3
   82fd2:	f67f aa05 	bls.w	823e0 <Shell+0x7c>
			while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(!_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   82fd6:	4632      	mov	r2, r6
   82fd8:	7819      	ldrb	r1, [r3, #0]
   82fda:	4638      	mov	r0, r7
   82fdc:	f7ff f9c2 	bl	82364 <Shell>
   82fe0:	2800      	cmp	r0, #0
   82fe2:	d1ed      	bne.n	82fc0 <Shell+0xc5c>
   82fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82fe6:	3301      	adds	r3, #1
   82fe8:	930e      	str	r3, [sp, #56]	; 0x38
   82fea:	89a2      	ldrh	r2, [r4, #12]
   82fec:	442a      	add	r2, r5
   82fee:	429a      	cmp	r2, r3
   82ff0:	d8f1      	bhi.n	82fd6 <Shell+0xc72>
   82ff2:	e7ea      	b.n	82fca <Shell+0xc66>
				pSrc++; pSt=shell.pEdit=(char*)pSrc;
   82ff4:	f102 0901 	add.w	r9, r2, #1
   82ff8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   82ffc:	f8c4 9004 	str.w	r9, [r4, #4]
				while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   83000:	454b      	cmp	r3, r9
   83002:	bf88      	it	hi
   83004:	464b      	movhi	r3, r9
   83006:	d90c      	bls.n	83022 <Shell+0xcbe>
   83008:	4632      	mov	r2, r6
   8300a:	7819      	ldrb	r1, [r3, #0]
   8300c:	4638      	mov	r0, r7
   8300e:	f7ff f9a9 	bl	82364 <Shell>
   83012:	b130      	cbz	r0, 83022 <Shell+0xcbe>
   83014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83016:	3301      	adds	r3, #1
   83018:	930e      	str	r3, [sp, #56]	; 0x38
   8301a:	89a2      	ldrh	r2, [r4, #12]
   8301c:	442a      	add	r2, r5
   8301e:	429a      	cmp	r2, r3
   83020:	d8f2      	bhi.n	83008 <Shell+0xca4>
				k=pSrc-(uint32_t)shell.pEdit;
   83022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83024:	6861      	ldr	r1, [r4, #4]
   83026:	1a59      	subs	r1, r3, r1
   83028:	9105      	str	r1, [sp, #20]
				while(k && pSrc<(uint32_t)shellEditBuf+shell.nChar)
   8302a:	b189      	cbz	r1, 83050 <Shell+0xcec>
   8302c:	89a2      	ldrh	r2, [r4, #12]
   8302e:	442a      	add	r2, r5
   83030:	4293      	cmp	r3, r2
   83032:	d20d      	bcs.n	83050 <Shell+0xcec>
					*shell.pEdit++=*(char*)pSrc++;
   83034:	6862      	ldr	r2, [r4, #4]
   83036:	1c51      	adds	r1, r2, #1
   83038:	6061      	str	r1, [r4, #4]
   8303a:	1c59      	adds	r1, r3, #1
   8303c:	910e      	str	r1, [sp, #56]	; 0x38
   8303e:	781b      	ldrb	r3, [r3, #0]
   83040:	7013      	strb	r3, [r2, #0]
				while(k && pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83042:	9905      	ldr	r1, [sp, #20]
   83044:	b121      	cbz	r1, 83050 <Shell+0xcec>
   83046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83048:	89a2      	ldrh	r2, [r4, #12]
   8304a:	442a      	add	r2, r5
   8304c:	429a      	cmp	r2, r3
   8304e:	d8f1      	bhi.n	83034 <Shell+0xcd0>
				shell.nChar-=k;
   83050:	89a3      	ldrh	r3, [r4, #12]
   83052:	1a59      	subs	r1, r3, r1
   83054:	81a1      	strh	r1, [r4, #12]
				pSrc=(uint32_t)pSt;
   83056:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   8305a:	e7b6      	b.n	82fca <Shell+0xc66>
		Error(ERROR_SHELL_SWITCH_BAD_SC,sc);
   8305c:	200d      	movs	r0, #13
   8305e:	4b0f      	ldr	r3, [pc, #60]	; (8309c <Shell+0xd38>)
   83060:	4798      	blx	r3
	return 0;
   83062:	f04f 0800 	mov.w	r8, #0
   83066:	f7ff b9bb 	b.w	823e0 <Shell+0x7c>
   8306a:	f04f 0800 	mov.w	r8, #0
   8306e:	f7ff b9b7 	b.w	823e0 <Shell+0x7c>
   83072:	f04f 0800 	mov.w	r8, #0
   83076:	f7ff b9b3 	b.w	823e0 <Shell+0x7c>
   8307a:	f04f 0800 	mov.w	r8, #0
   8307e:	f7ff b9af 	b.w	823e0 <Shell+0x7c>
   83082:	bf00      	nop
   83084:	20001d18 	.word	0x20001d18
   83088:	20001c14 	.word	0x20001c14
   8308c:	0008a160 	.word	0x0008a160
   83090:	00083495 	.word	0x00083495
   83094:	0008a164 	.word	0x0008a164
   83098:	0008a210 	.word	0x0008a210
   8309c:	00080f15 	.word	0x00080f15
   830a0:	f04f 0800 	mov.w	r8, #0
   830a4:	f7ff b99c 	b.w	823e0 <Shell+0x7c>

000830a8 <_cmd_show>:
#define ST_SHELL_PROMPT_DISABLED        0x000004

char buf[256];

void _cmd_show(uint32_t sc, void*pParam)
{
   830a8:	b538      	push	{r3, r4, r5, lr}
   830aa:	4605      	mov	r5, r0
   830ac:	4608      	mov	r0, r1
	char *pToken;
	pToken = strtok(pParam," \r\n");
   830ae:	490a      	ldr	r1, [pc, #40]	; (830d8 <_cmd_show+0x30>)
   830b0:	4b0a      	ldr	r3, [pc, #40]	; (830dc <_cmd_show+0x34>)
   830b2:	4798      	blx	r3
	if(pToken)
   830b4:	b170      	cbz	r0, 830d4 <_cmd_show+0x2c>
   830b6:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   830b8:	4b09      	ldr	r3, [pc, #36]	; (830e0 <_cmd_show+0x38>)
   830ba:	4798      	blx	r3
   830bc:	4601      	mov	r1, r0
   830be:	4620      	mov	r0, r4
   830c0:	4b08      	ldr	r3, [pc, #32]	; (830e4 <_cmd_show+0x3c>)
   830c2:	4798      	blx	r3
   830c4:	f245 73e5 	movw	r3, #22501	; 0x57e5
   830c8:	4298      	cmp	r0, r3
   830ca:	d103      	bne.n	830d4 <_cmd_show+0x2c>
		{
		case 0x57E5:    //crc
			mBitsSet(*(uint16_t*)sc,ST_SHELL_SHOW_UNKNOW_CRC);
   830cc:	882b      	ldrh	r3, [r5, #0]
   830ce:	f043 0302 	orr.w	r3, r3, #2
   830d2:	802b      	strh	r3, [r5, #0]
   830d4:	bd38      	pop	{r3, r4, r5, pc}
   830d6:	bf00      	nop
   830d8:	00089dfc 	.word	0x00089dfc
   830dc:	000851cd 	.word	0x000851cd
   830e0:	00085171 	.word	0x00085171
   830e4:	00080ea9 	.word	0x00080ea9

000830e8 <_cmd_hide>:
		}
	}
}

void _cmd_hide(uint32_t sc, void*pParam)
{
   830e8:	b538      	push	{r3, r4, r5, lr}
   830ea:	4605      	mov	r5, r0
   830ec:	4608      	mov	r0, r1
	char *pToken;
	pToken = strtok(pParam," \r\n");
   830ee:	490a      	ldr	r1, [pc, #40]	; (83118 <_cmd_hide+0x30>)
   830f0:	4b0a      	ldr	r3, [pc, #40]	; (8311c <_cmd_hide+0x34>)
   830f2:	4798      	blx	r3
	if(pToken)
   830f4:	b170      	cbz	r0, 83114 <_cmd_hide+0x2c>
   830f6:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   830f8:	4b09      	ldr	r3, [pc, #36]	; (83120 <_cmd_hide+0x38>)
   830fa:	4798      	blx	r3
   830fc:	4601      	mov	r1, r0
   830fe:	4620      	mov	r0, r4
   83100:	4b08      	ldr	r3, [pc, #32]	; (83124 <_cmd_hide+0x3c>)
   83102:	4798      	blx	r3
   83104:	f245 73e5 	movw	r3, #22501	; 0x57e5
   83108:	4298      	cmp	r0, r3
   8310a:	d103      	bne.n	83114 <_cmd_hide+0x2c>
		{
		case 0x57E5:    //crc
			mBitsClr(*(uint16_t*)sc,ST_SHELL_SHOW_UNKNOW_CRC);
   8310c:	882b      	ldrh	r3, [r5, #0]
   8310e:	f023 0302 	bic.w	r3, r3, #2
   83112:	802b      	strh	r3, [r5, #0]
   83114:	bd38      	pop	{r3, r4, r5, pc}
   83116:	bf00      	nop
   83118:	00089dfc 	.word	0x00089dfc
   8311c:	000851cd 	.word	0x000851cd
   83120:	00085171 	.word	0x00085171
   83124:	00080ea9 	.word	0x00080ea9

00083128 <_cmd_start>:
		}
	}
}

void _cmd_start(uint32_t sc, void*pParam)
{
   83128:	b538      	push	{r3, r4, r5, lr}
   8312a:	460d      	mov	r5, r1
	Putstr(" cmd start : ");
   8312c:	4903      	ldr	r1, [pc, #12]	; (8313c <_cmd_start+0x14>)
   8312e:	2067      	movs	r0, #103	; 0x67
   83130:	4c03      	ldr	r4, [pc, #12]	; (83140 <_cmd_start+0x18>)
   83132:	47a0      	blx	r4
	Putstr(pParam);
   83134:	4629      	mov	r1, r5
   83136:	2067      	movs	r0, #103	; 0x67
   83138:	47a0      	blx	r4
   8313a:	bd38      	pop	{r3, r4, r5, pc}
   8313c:	0008a348 	.word	0x0008a348
   83140:	00083495 	.word	0x00083495

00083144 <_cmd_cls>:
	pParam=atoi((char*)pParam);
	PushTask(_cmd_restart_proc,sc,pParam,0);
}

void _cmd_cls(uint32_t sc, void*pParam)
{
   83144:	b508      	push	{r3, lr}
	Putstr("\e[2J");
   83146:	4902      	ldr	r1, [pc, #8]	; (83150 <_cmd_cls+0xc>)
   83148:	2067      	movs	r0, #103	; 0x67
   8314a:	4b02      	ldr	r3, [pc, #8]	; (83154 <_cmd_cls+0x10>)
   8314c:	4798      	blx	r3
   8314e:	bd08      	pop	{r3, pc}
   83150:	0008a21c 	.word	0x0008a21c
   83154:	00083495 	.word	0x00083495

00083158 <_cmd_set>:
{
   83158:	b570      	push	{r4, r5, r6, lr}
	pToken = mstrtok(NULL," \r\n");
   8315a:	493a      	ldr	r1, [pc, #232]	; (83244 <_cmd_set+0xec>)
   8315c:	2000      	movs	r0, #0
   8315e:	4b3a      	ldr	r3, [pc, #232]	; (83248 <_cmd_set+0xf0>)
   83160:	4798      	blx	r3
	if(pToken)
   83162:	2800      	cmp	r0, #0
   83164:	d056      	beq.n	83214 <_cmd_set+0xbc>
   83166:	4604      	mov	r4, r0
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   83168:	4b38      	ldr	r3, [pc, #224]	; (8324c <_cmd_set+0xf4>)
   8316a:	4798      	blx	r3
   8316c:	4601      	mov	r1, r0
   8316e:	4620      	mov	r0, r4
   83170:	4b37      	ldr	r3, [pc, #220]	; (83250 <_cmd_set+0xf8>)
   83172:	4798      	blx	r3
   83174:	f247 3327 	movw	r3, #29479	; 0x7327
   83178:	4298      	cmp	r0, r3
   8317a:	d004      	beq.n	83186 <_cmd_set+0x2e>
   8317c:	f24e 13a9 	movw	r3, #57769	; 0xe1a9
   83180:	4298      	cmp	r0, r3
   83182:	d024      	beq.n	831ce <_cmd_set+0x76>
   83184:	bd70      	pop	{r4, r5, r6, pc}
			pToken=mstrtok(NULL," :./\r\n");
   83186:	4933      	ldr	r1, [pc, #204]	; (83254 <_cmd_set+0xfc>)
   83188:	2000      	movs	r0, #0
   8318a:	4b2f      	ldr	r3, [pc, #188]	; (83248 <_cmd_set+0xf0>)
   8318c:	4798      	blx	r3
			if(pToken) hour=atoi((char*)pToken);
   8318e:	b1c0      	cbz	r0, 831c2 <_cmd_set+0x6a>
   83190:	4b31      	ldr	r3, [pc, #196]	; (83258 <_cmd_set+0x100>)
   83192:	4798      	blx	r3
   83194:	b2c4      	uxtb	r4, r0
			pToken=mstrtok(NULL," :./\r\n");
   83196:	492f      	ldr	r1, [pc, #188]	; (83254 <_cmd_set+0xfc>)
   83198:	2000      	movs	r0, #0
   8319a:	4b2b      	ldr	r3, [pc, #172]	; (83248 <_cmd_set+0xf0>)
   8319c:	4798      	blx	r3
			if(pToken) minute=atoi((char*)pToken);
   8319e:	b190      	cbz	r0, 831c6 <_cmd_set+0x6e>
   831a0:	4b2d      	ldr	r3, [pc, #180]	; (83258 <_cmd_set+0x100>)
   831a2:	4798      	blx	r3
   831a4:	b2c5      	uxtb	r5, r0
			pToken=mstrtok(NULL," :./\r\n");
   831a6:	492b      	ldr	r1, [pc, #172]	; (83254 <_cmd_set+0xfc>)
   831a8:	2000      	movs	r0, #0
   831aa:	4b27      	ldr	r3, [pc, #156]	; (83248 <_cmd_set+0xf0>)
   831ac:	4798      	blx	r3
			if(pToken) second=atoi((char*)pToken);
   831ae:	b160      	cbz	r0, 831ca <_cmd_set+0x72>
   831b0:	4b29      	ldr	r3, [pc, #164]	; (83258 <_cmd_set+0x100>)
   831b2:	4798      	blx	r3
   831b4:	b2c3      	uxtb	r3, r0
			kRtc(KRTC_SET_TIME,(uint32_t)hour,(uint32_t)minute,(uint32_t)second);
   831b6:	462a      	mov	r2, r5
   831b8:	4621      	mov	r1, r4
   831ba:	2066      	movs	r0, #102	; 0x66
   831bc:	4c27      	ldr	r4, [pc, #156]	; (8325c <_cmd_set+0x104>)
   831be:	47a0      	blx	r4
			break;
   831c0:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t u1=0,u2=0,u3=0;
   831c2:	2400      	movs	r4, #0
   831c4:	e7e7      	b.n	83196 <_cmd_set+0x3e>
   831c6:	2500      	movs	r5, #0
   831c8:	e7ed      	b.n	831a6 <_cmd_set+0x4e>
   831ca:	2300      	movs	r3, #0
   831cc:	e7f3      	b.n	831b6 <_cmd_set+0x5e>
			pToken=mstrtok(NULL," :./\r\n");
   831ce:	4921      	ldr	r1, [pc, #132]	; (83254 <_cmd_set+0xfc>)
   831d0:	2000      	movs	r0, #0
   831d2:	4b1d      	ldr	r3, [pc, #116]	; (83248 <_cmd_set+0xf0>)
   831d4:	4798      	blx	r3
			if(pToken) date=atoi((char*)pToken);
   831d6:	b1f0      	cbz	r0, 83216 <_cmd_set+0xbe>
   831d8:	4b1f      	ldr	r3, [pc, #124]	; (83258 <_cmd_set+0x100>)
   831da:	4798      	blx	r3
   831dc:	b2c4      	uxtb	r4, r0
			pToken=mstrtok(NULL," :./\r\n");
   831de:	491d      	ldr	r1, [pc, #116]	; (83254 <_cmd_set+0xfc>)
   831e0:	2000      	movs	r0, #0
   831e2:	4b19      	ldr	r3, [pc, #100]	; (83248 <_cmd_set+0xf0>)
   831e4:	4798      	blx	r3
			if(pToken) month=atoi((char*)pToken);
   831e6:	b1c0      	cbz	r0, 8321a <_cmd_set+0xc2>
   831e8:	4b1b      	ldr	r3, [pc, #108]	; (83258 <_cmd_set+0x100>)
   831ea:	4798      	blx	r3
   831ec:	b2c5      	uxtb	r5, r0
			pToken=mstrtok(NULL," :./\r\n");
   831ee:	4919      	ldr	r1, [pc, #100]	; (83254 <_cmd_set+0xfc>)
   831f0:	2000      	movs	r0, #0
   831f2:	4b15      	ldr	r3, [pc, #84]	; (83248 <_cmd_set+0xf0>)
   831f4:	4798      	blx	r3
			if(pToken) centYear=atoi((char*)pToken);
   831f6:	b190      	cbz	r0, 8321e <_cmd_set+0xc6>
   831f8:	4b17      	ldr	r3, [pc, #92]	; (83258 <_cmd_set+0x100>)
   831fa:	4798      	blx	r3
   831fc:	b286      	uxth	r6, r0
			Putstr("\e[2K"); //Erase current line on terminal screen
   831fe:	4918      	ldr	r1, [pc, #96]	; (83260 <_cmd_set+0x108>)
   83200:	2067      	movs	r0, #103	; 0x67
   83202:	4b18      	ldr	r3, [pc, #96]	; (83264 <_cmd_set+0x10c>)
   83204:	4798      	blx	r3
			if(kRtc(KRTC_SET_DATE,(uint32_t)date,(uint32_t)month,(uint32_t)centYear)==0)
   83206:	4633      	mov	r3, r6
   83208:	462a      	mov	r2, r5
   8320a:	4621      	mov	r1, r4
   8320c:	2067      	movs	r0, #103	; 0x67
   8320e:	4c13      	ldr	r4, [pc, #76]	; (8325c <_cmd_set+0x104>)
   83210:	47a0      	blx	r4
   83212:	b130      	cbz	r0, 83222 <_cmd_set+0xca>
   83214:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t u1=0,u2=0,u3=0;
   83216:	2400      	movs	r4, #0
   83218:	e7e1      	b.n	831de <_cmd_set+0x86>
   8321a:	2500      	movs	r5, #0
   8321c:	e7e7      	b.n	831ee <_cmd_set+0x96>
	uint16_t u4=0;
   8321e:	2600      	movs	r6, #0
   83220:	e7ed      	b.n	831fe <_cmd_set+0xa6>
				Putstr("\r\n");
   83222:	4d11      	ldr	r5, [pc, #68]	; (83268 <_cmd_set+0x110>)
   83224:	4629      	mov	r1, r5
   83226:	2067      	movs	r0, #103	; 0x67
   83228:	4c0e      	ldr	r4, [pc, #56]	; (83264 <_cmd_set+0x10c>)
   8322a:	47a0      	blx	r4
				kRtc(KRTC_GETF_DATE,(uint32_t)buf);
   8322c:	4e0f      	ldr	r6, [pc, #60]	; (8326c <_cmd_set+0x114>)
   8322e:	4631      	mov	r1, r6
   83230:	2068      	movs	r0, #104	; 0x68
   83232:	4b0a      	ldr	r3, [pc, #40]	; (8325c <_cmd_set+0x104>)
   83234:	4798      	blx	r3
				Putstr(buf);
   83236:	4631      	mov	r1, r6
   83238:	2067      	movs	r0, #103	; 0x67
   8323a:	47a0      	blx	r4
				Putstr("\r\n");
   8323c:	4629      	mov	r1, r5
   8323e:	2067      	movs	r0, #103	; 0x67
   83240:	47a0      	blx	r4
}
   83242:	e7e7      	b.n	83214 <_cmd_set+0xbc>
   83244:	00089dfc 	.word	0x00089dfc
   83248:	00083aa1 	.word	0x00083aa1
   8324c:	00085171 	.word	0x00085171
   83250:	00080ea9 	.word	0x00080ea9
   83254:	0008a338 	.word	0x0008a338
   83258:	00085031 	.word	0x00085031
   8325c:	00081239 	.word	0x00081239
   83260:	0008a340 	.word	0x0008a340
   83264:	00083495 	.word	0x00083495
   83268:	0008a1b4 	.word	0x0008a1b4
   8326c:	20001a14 	.word	0x20001a14

00083270 <_cmd_restart_proc>:
{
   83270:	b570      	push	{r4, r5, r6, lr}
   83272:	b082      	sub	sp, #8
   83274:	4604      	mov	r4, r0
   83276:	460d      	mov	r5, r1
	mBitsSet(*(uint16_t*)sc,ST_SHELL_PROMPT_DISABLED);
   83278:	8803      	ldrh	r3, [r0, #0]
   8327a:	f043 0304 	orr.w	r3, r3, #4
   8327e:	8003      	strh	r3, [r0, #0]
	sprintf(buf,"\rSystem will restart in %i second...",(int)timeout); Putstr(buf);
   83280:	4e10      	ldr	r6, [pc, #64]	; (832c4 <_cmd_restart_proc+0x54>)
   83282:	460a      	mov	r2, r1
   83284:	4910      	ldr	r1, [pc, #64]	; (832c8 <_cmd_restart_proc+0x58>)
   83286:	4630      	mov	r0, r6
   83288:	4b10      	ldr	r3, [pc, #64]	; (832cc <_cmd_restart_proc+0x5c>)
   8328a:	4798      	blx	r3
   8328c:	4631      	mov	r1, r6
   8328e:	2067      	movs	r0, #103	; 0x67
   83290:	4b0f      	ldr	r3, [pc, #60]	; (832d0 <_cmd_restart_proc+0x60>)
   83292:	4798      	blx	r3
	if(timeout==0)
   83294:	b955      	cbnz	r5, 832ac <_cmd_restart_proc+0x3c>
		Putstr("\r\n\n");
   83296:	490f      	ldr	r1, [pc, #60]	; (832d4 <_cmd_restart_proc+0x64>)
   83298:	2067      	movs	r0, #103	; 0x67
   8329a:	4b0d      	ldr	r3, [pc, #52]	; (832d0 <_cmd_restart_proc+0x60>)
   8329c:	4798      	blx	r3
   8329e:	4b0e      	ldr	r3, [pc, #56]	; (832d8 <_cmd_restart_proc+0x68>)
		for(sc=500000;sc;sc--);
   832a0:	3b01      	subs	r3, #1
   832a2:	d1fd      	bne.n	832a0 <_cmd_restart_proc+0x30>
		rstc_start_software_reset(RSTC);
   832a4:	480d      	ldr	r0, [pc, #52]	; (832dc <_cmd_restart_proc+0x6c>)
   832a6:	4b0e      	ldr	r3, [pc, #56]	; (832e0 <_cmd_restart_proc+0x70>)
   832a8:	4798      	blx	r3
   832aa:	e7fe      	b.n	832aa <_cmd_restart_proc+0x3a>
		PushTask(_cmd_restart_proc,sc,--timeout,1000);	
   832ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   832b0:	9300      	str	r3, [sp, #0]
   832b2:	1e6b      	subs	r3, r5, #1
   832b4:	4622      	mov	r2, r4
   832b6:	490b      	ldr	r1, [pc, #44]	; (832e4 <_cmd_restart_proc+0x74>)
   832b8:	2066      	movs	r0, #102	; 0x66
   832ba:	4c0b      	ldr	r4, [pc, #44]	; (832e8 <_cmd_restart_proc+0x78>)
   832bc:	47a0      	blx	r4
}
   832be:	b002      	add	sp, #8
   832c0:	bd70      	pop	{r4, r5, r6, pc}
   832c2:	bf00      	nop
   832c4:	20001a14 	.word	0x20001a14
   832c8:	0008a310 	.word	0x0008a310
   832cc:	00085125 	.word	0x00085125
   832d0:	00083495 	.word	0x00083495
   832d4:	0008a25c 	.word	0x0008a25c
   832d8:	0007a120 	.word	0x0007a120
   832dc:	400e1200 	.word	0x400e1200
   832e0:	00084865 	.word	0x00084865
   832e4:	00083271 	.word	0x00083271
   832e8:	00083829 	.word	0x00083829

000832ec <_cmd_restart>:
{
   832ec:	b510      	push	{r4, lr}
   832ee:	b082      	sub	sp, #8
   832f0:	4604      	mov	r4, r0
	mBitsSet(*(uint16_t*)sc,ST_SHELL_PROMPT_DISABLED);
   832f2:	8803      	ldrh	r3, [r0, #0]
   832f4:	f043 0304 	orr.w	r3, r3, #4
   832f8:	8003      	strh	r3, [r0, #0]
	pParam=atoi((char*)pParam);
   832fa:	4608      	mov	r0, r1
   832fc:	4b05      	ldr	r3, [pc, #20]	; (83314 <_cmd_restart+0x28>)
   832fe:	4798      	blx	r3
	PushTask(_cmd_restart_proc,sc,pParam,0);
   83300:	2300      	movs	r3, #0
   83302:	9300      	str	r3, [sp, #0]
   83304:	4603      	mov	r3, r0
   83306:	4622      	mov	r2, r4
   83308:	4903      	ldr	r1, [pc, #12]	; (83318 <_cmd_restart+0x2c>)
   8330a:	2066      	movs	r0, #102	; 0x66
   8330c:	4c03      	ldr	r4, [pc, #12]	; (8331c <_cmd_restart+0x30>)
   8330e:	47a0      	blx	r4
}
   83310:	b002      	add	sp, #8
   83312:	bd10      	pop	{r4, pc}
   83314:	00085031 	.word	0x00085031
   83318:	00083271 	.word	0x00083271
   8331c:	00083829 	.word	0x00083829

00083320 <_cmd_infos>:
	"ROM_FLASH --- ROM and Embedded Flash Memory [NVPSIZ is ROM size / NVPSIZ2 is Flash size]",
	"SRAM --- SRAM emulating ROM"
};

void _cmd_infos(uint32_t sc, void*pParam)
{
   83320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83324:	b08b      	sub	sp, #44	; 0x2c
	chipid_data_t chipData;

	chipid_read(CHIPID,&chipData);
   83326:	a901      	add	r1, sp, #4
   83328:	4844      	ldr	r0, [pc, #272]	; (8343c <_cmd_infos+0x11c>)
   8332a:	4b45      	ldr	r3, [pc, #276]	; (83440 <_cmd_infos+0x120>)
   8332c:	4798      	blx	r3
	Putstr("\r\n\t=============== CHIP IDENTIFIER INFOS ===============\r\n\n");
   8332e:	4945      	ldr	r1, [pc, #276]	; (83444 <_cmd_infos+0x124>)
   83330:	2067      	movs	r0, #103	; 0x67
   83332:	4c45      	ldr	r4, [pc, #276]	; (83448 <_cmd_infos+0x128>)
   83334:	47a0      	blx	r4
	sprintf(buf,"\tVERSION: %c\r\n",(char)(chipData.ul_version-1)+'A');	Putstr(buf);
   83336:	9a01      	ldr	r2, [sp, #4]
   83338:	3a01      	subs	r2, #1
   8333a:	b2d2      	uxtb	r2, r2
   8333c:	4f43      	ldr	r7, [pc, #268]	; (8344c <_cmd_infos+0x12c>)
   8333e:	3241      	adds	r2, #65	; 0x41
   83340:	4943      	ldr	r1, [pc, #268]	; (83450 <_cmd_infos+0x130>)
   83342:	4638      	mov	r0, r7
   83344:	4b43      	ldr	r3, [pc, #268]	; (83454 <_cmd_infos+0x134>)
   83346:	4798      	blx	r3
   83348:	4639      	mov	r1, r7
   8334a:	2067      	movs	r0, #103	; 0x67
   8334c:	47a0      	blx	r4
		Putstr("\t  EPROC: "),Putstr(eprocs[chipData.ul_eproc]);	Putstr("\r\n");
   8334e:	4942      	ldr	r1, [pc, #264]	; (83458 <_cmd_infos+0x138>)
   83350:	2067      	movs	r0, #103	; 0x67
   83352:	47a0      	blx	r4
   83354:	9a02      	ldr	r2, [sp, #8]
   83356:	4b41      	ldr	r3, [pc, #260]	; (8345c <_cmd_infos+0x13c>)
   83358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8335c:	2067      	movs	r0, #103	; 0x67
   8335e:	47a0      	blx	r4
   83360:	4e3f      	ldr	r6, [pc, #252]	; (83460 <_cmd_infos+0x140>)
   83362:	4631      	mov	r1, r6
   83364:	2067      	movs	r0, #103	; 0x67
   83366:	47a0      	blx	r4
		Putstr("\t NVPSIZ: "),Putstr(nvpsiz[chipData.ul_nvpsiz]);	Putstr("\r\n");
   83368:	493e      	ldr	r1, [pc, #248]	; (83464 <_cmd_infos+0x144>)
   8336a:	2067      	movs	r0, #103	; 0x67
   8336c:	47a0      	blx	r4
   8336e:	4d3e      	ldr	r5, [pc, #248]	; (83468 <_cmd_infos+0x148>)
   83370:	9b03      	ldr	r3, [sp, #12]
   83372:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   83376:	2067      	movs	r0, #103	; 0x67
   83378:	47a0      	blx	r4
   8337a:	4631      	mov	r1, r6
   8337c:	2067      	movs	r0, #103	; 0x67
   8337e:	47a0      	blx	r4
		Putstr("\tNVPSIZ2: "),Putstr(nvpsiz[chipData.ul_nvpsiz2]);	Putstr("\r\n");
   83380:	493a      	ldr	r1, [pc, #232]	; (8346c <_cmd_infos+0x14c>)
   83382:	2067      	movs	r0, #103	; 0x67
   83384:	47a0      	blx	r4
   83386:	9b04      	ldr	r3, [sp, #16]
   83388:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   8338c:	2067      	movs	r0, #103	; 0x67
   8338e:	47a0      	blx	r4
   83390:	4631      	mov	r1, r6
   83392:	2067      	movs	r0, #103	; 0x67
   83394:	47a0      	blx	r4
		Putstr("\tSRAMSIZ: "),Putstr(sramsiz[chipData.ul_sramsiz]);	Putstr("\r\n");
   83396:	4936      	ldr	r1, [pc, #216]	; (83470 <_cmd_infos+0x150>)
   83398:	2067      	movs	r0, #103	; 0x67
   8339a:	47a0      	blx	r4
   8339c:	9a05      	ldr	r2, [sp, #20]
   8339e:	4b35      	ldr	r3, [pc, #212]	; (83474 <_cmd_infos+0x154>)
   833a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   833a4:	2067      	movs	r0, #103	; 0x67
   833a6:	47a0      	blx	r4
   833a8:	4631      	mov	r1, r6
   833aa:	2067      	movs	r0, #103	; 0x67
   833ac:	47a0      	blx	r4
#define k sc
		k=0;
		while(arch[k].value && (arch[k].value!=chipData.ul_arch)) k++;
   833ae:	9906      	ldr	r1, [sp, #24]
   833b0:	2919      	cmp	r1, #25
   833b2:	d038      	beq.n	83426 <_cmd_infos+0x106>
   833b4:	4b30      	ldr	r3, [pc, #192]	; (83478 <_cmd_infos+0x158>)
   833b6:	2400      	movs	r4, #0
   833b8:	3401      	adds	r4, #1
   833ba:	7b1a      	ldrb	r2, [r3, #12]
   833bc:	b112      	cbz	r2, 833c4 <_cmd_infos+0xa4>
   833be:	330c      	adds	r3, #12
   833c0:	428a      	cmp	r2, r1
   833c2:	d1f9      	bne.n	833b8 <_cmd_infos+0x98>
		Putstr("\t   ARCH: "),Putstr(arch[k].name); Putstr(" --- "); Putstr(arch[k].description); Putstr("\r\n");
   833c4:	492d      	ldr	r1, [pc, #180]	; (8347c <_cmd_infos+0x15c>)
   833c6:	2067      	movs	r0, #103	; 0x67
   833c8:	4d1f      	ldr	r5, [pc, #124]	; (83448 <_cmd_infos+0x128>)
   833ca:	47a8      	blx	r5
   833cc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 83478 <_cmd_infos+0x158>
   833d0:	ea4f 0944 	mov.w	r9, r4, lsl #1
   833d4:	eb09 0304 	add.w	r3, r9, r4
   833d8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   833dc:	6859      	ldr	r1, [r3, #4]
   833de:	2067      	movs	r0, #103	; 0x67
   833e0:	47a8      	blx	r5
   833e2:	4927      	ldr	r1, [pc, #156]	; (83480 <_cmd_infos+0x160>)
   833e4:	2067      	movs	r0, #103	; 0x67
   833e6:	47a8      	blx	r5
   833e8:	444c      	add	r4, r9
   833ea:	eb08 0884 	add.w	r8, r8, r4, lsl #2
   833ee:	f8d8 1008 	ldr.w	r1, [r8, #8]
   833f2:	2067      	movs	r0, #103	; 0x67
   833f4:	47a8      	blx	r5
   833f6:	4631      	mov	r1, r6
   833f8:	2067      	movs	r0, #103	; 0x67
   833fa:	47a8      	blx	r5
#undef k
		Putstr("\t NVPTYP: "),Putstr(nvptyp[chipData.ul_nvptyp]);	Putstr("\r\n");
   833fc:	4921      	ldr	r1, [pc, #132]	; (83484 <_cmd_infos+0x164>)
   833fe:	2067      	movs	r0, #103	; 0x67
   83400:	47a8      	blx	r5
   83402:	9a07      	ldr	r2, [sp, #28]
   83404:	4b20      	ldr	r3, [pc, #128]	; (83488 <_cmd_infos+0x168>)
   83406:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8340a:	2067      	movs	r0, #103	; 0x67
   8340c:	47a8      	blx	r5
   8340e:	4631      	mov	r1, r6
   83410:	2067      	movs	r0, #103	; 0x67
   83412:	47a8      	blx	r5
	if(chipData.ul_extflag)
   83414:	9b08      	ldr	r3, [sp, #32]
   83416:	b943      	cbnz	r3, 8342a <_cmd_infos+0x10a>
	{
		sprintf(buf,"\t   EXID: %08X\r\n",(unsigned int)chipData.ul_extid); Putstr(buf);
	}
	Putstr("\r\n\t=====================================================\r\n\n");
   83418:	491c      	ldr	r1, [pc, #112]	; (8348c <_cmd_infos+0x16c>)
   8341a:	2067      	movs	r0, #103	; 0x67
   8341c:	4b0a      	ldr	r3, [pc, #40]	; (83448 <_cmd_infos+0x128>)
   8341e:	4798      	blx	r3
}
   83420:	b00b      	add	sp, #44	; 0x2c
   83422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		k=0;
   83426:	2400      	movs	r4, #0
   83428:	e7cc      	b.n	833c4 <_cmd_infos+0xa4>
		sprintf(buf,"\t   EXID: %08X\r\n",(unsigned int)chipData.ul_extid); Putstr(buf);
   8342a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8342c:	4918      	ldr	r1, [pc, #96]	; (83490 <_cmd_infos+0x170>)
   8342e:	4807      	ldr	r0, [pc, #28]	; (8344c <_cmd_infos+0x12c>)
   83430:	4b08      	ldr	r3, [pc, #32]	; (83454 <_cmd_infos+0x134>)
   83432:	4798      	blx	r3
   83434:	4639      	mov	r1, r7
   83436:	2067      	movs	r0, #103	; 0x67
   83438:	47a8      	blx	r5
   8343a:	e7ed      	b.n	83418 <_cmd_infos+0xf8>
   8343c:	400e0740 	.word	0x400e0740
   83440:	0008404d 	.word	0x0008404d
   83444:	0008a224 	.word	0x0008a224
   83448:	00083495 	.word	0x00083495
   8344c:	20001a14 	.word	0x20001a14
   83450:	0008a260 	.word	0x0008a260
   83454:	00085125 	.word	0x00085125
   83458:	0008a270 	.word	0x0008a270
   8345c:	20000570 	.word	0x20000570
   83460:	0008a1b4 	.word	0x0008a1b4
   83464:	0008a27c 	.word	0x0008a27c
   83468:	20000590 	.word	0x20000590
   8346c:	0008a288 	.word	0x0008a288
   83470:	0008a294 	.word	0x0008a294
   83474:	200005e4 	.word	0x200005e4
   83478:	0008a358 	.word	0x0008a358
   8347c:	0008a2a0 	.word	0x0008a2a0
   83480:	0008a2ac 	.word	0x0008a2ac
   83484:	0008a2b4 	.word	0x0008a2b4
   83488:	200005d0 	.word	0x200005d0
   8348c:	0008a2d4 	.word	0x0008a2d4
   83490:	0008a2c0 	.word	0x0008a2c0

00083494 <Shellcom>:
	char	*pTxRead;
}shellcom;


uint32_t Shellcom(uint32_t sc, ...)
{
   83494:	b40f      	push	{r0, r1, r2, r3}
   83496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	switch(sc)
   83498:	9906      	ldr	r1, [sp, #24]
   8349a:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   8349e:	2b05      	cmp	r3, #5
   834a0:	f200 80dd 	bhi.w	8365e <Shellcom+0x1ca>
   834a4:	e8df f013 	tbh	[pc, r3, lsl #1]
   834a8:	00db0006 	.word	0x00db0006
   834ac:	005a003b 	.word	0x005a003b
   834b0:	00b40087 	.word	0x00b40087
	{
	case SHELLCOM_NEW:
		shellcom.pTxRead=shellcom.pTxWrite=shellcomTxBuf;
   834b4:	4b6c      	ldr	r3, [pc, #432]	; (83668 <Shellcom+0x1d4>)
   834b6:	4a6d      	ldr	r2, [pc, #436]	; (8366c <Shellcom+0x1d8>)
   834b8:	601a      	str	r2, [r3, #0]
   834ba:	605a      	str	r2, [r3, #4]
		pmc_enable_periph_clk(ID_UART);
   834bc:	2008      	movs	r0, #8
   834be:	4b6c      	ldr	r3, [pc, #432]	; (83670 <Shellcom+0x1dc>)
   834c0:	4798      	blx	r3
		pio_configure_pin(UART_TX_PIN,UART_TX_PIN_FLAGS);
   834c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   834c6:	200c      	movs	r0, #12
   834c8:	4c6a      	ldr	r4, [pc, #424]	; (83674 <Shellcom+0x1e0>)
   834ca:	47a0      	blx	r4
		pio_configure_pin(UART_RX_PIN,UART_RX_PIN_FLAGS);
   834cc:	496a      	ldr	r1, [pc, #424]	; (83678 <Shellcom+0x1e4>)
   834ce:	200b      	movs	r0, #11
   834d0:	47a0      	blx	r4
		if(uart_init(UART,&uart_opt)) Error(ERROR_SHELLCOM_UART_INIT_FAILED);
   834d2:	496a      	ldr	r1, [pc, #424]	; (8367c <Shellcom+0x1e8>)
   834d4:	486a      	ldr	r0, [pc, #424]	; (83680 <Shellcom+0x1ec>)
   834d6:	4b6b      	ldr	r3, [pc, #428]	; (83684 <Shellcom+0x1f0>)
   834d8:	4798      	blx	r3
   834da:	b938      	cbnz	r0, 834ec <Shellcom+0x58>
   834dc:	f44f 7280 	mov.w	r2, #256	; 0x100
   834e0:	4b69      	ldr	r3, [pc, #420]	; (83688 <Shellcom+0x1f4>)
   834e2:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(ID_UART);
		while(uart_is_rx_ready(UART)) uart_read(UART,(uint8_t*)&sc);
   834e4:	4c66      	ldr	r4, [pc, #408]	; (83680 <Shellcom+0x1ec>)
   834e6:	4e69      	ldr	r6, [pc, #420]	; (8368c <Shellcom+0x1f8>)
   834e8:	4f69      	ldr	r7, [pc, #420]	; (83690 <Shellcom+0x1fc>)
   834ea:	e006      	b.n	834fa <Shellcom+0x66>
		if(uart_init(UART,&uart_opt)) Error(ERROR_SHELLCOM_UART_INIT_FAILED);
   834ec:	2018      	movs	r0, #24
   834ee:	4b69      	ldr	r3, [pc, #420]	; (83694 <Shellcom+0x200>)
   834f0:	4798      	blx	r3
   834f2:	e7f3      	b.n	834dc <Shellcom+0x48>
		while(uart_is_rx_ready(UART)) uart_read(UART,(uint8_t*)&sc);
   834f4:	a906      	add	r1, sp, #24
   834f6:	4620      	mov	r0, r4
   834f8:	47b8      	blx	r7
   834fa:	4620      	mov	r0, r4
   834fc:	47b0      	blx	r6
   834fe:	4605      	mov	r5, r0
   83500:	2800      	cmp	r0, #0
   83502:	d1f7      	bne.n	834f4 <Shellcom+0x60>
		uart_get_status(UART);	
   83504:	4c5e      	ldr	r4, [pc, #376]	; (83680 <Shellcom+0x1ec>)
   83506:	4620      	mov	r0, r4
   83508:	4b63      	ldr	r3, [pc, #396]	; (83698 <Shellcom+0x204>)
   8350a:	4798      	blx	r3
		uart_enable_interrupt(UART,US_IER_RXRDY);
   8350c:	2101      	movs	r1, #1
   8350e:	4620      	mov	r0, r4
   83510:	4b62      	ldr	r3, [pc, #392]	; (8369c <Shellcom+0x208>)
   83512:	4798      	blx	r3
	default:
		Error(ERROR_SHELLCOM_SWITCH_BAD_SC, (uint32_t)sc);
	}

	return 0;
}
   83514:	4628      	mov	r0, r5
   83516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8351a:	b004      	add	sp, #16
   8351c:	4770      	bx	lr
		*shellcom.pTxWrite++=_charData;
   8351e:	4b52      	ldr	r3, [pc, #328]	; (83668 <Shellcom+0x1d4>)
   83520:	681a      	ldr	r2, [r3, #0]
   83522:	1c51      	adds	r1, r2, #1
   83524:	6019      	str	r1, [r3, #0]
   83526:	9907      	ldr	r1, [sp, #28]
   83528:	7011      	strb	r1, [r2, #0]
		if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   8352a:	681a      	ldr	r2, [r3, #0]
   8352c:	4b5c      	ldr	r3, [pc, #368]	; (836a0 <Shellcom+0x20c>)
   8352e:	429a      	cmp	r2, r3
   83530:	d303      	bcc.n	8353a <Shellcom+0xa6>
   83532:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
   83536:	4b4c      	ldr	r3, [pc, #304]	; (83668 <Shellcom+0x1d4>)
   83538:	601a      	str	r2, [r3, #0]
		if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   8353a:	4b4b      	ldr	r3, [pc, #300]	; (83668 <Shellcom+0x1d4>)
   8353c:	681a      	ldr	r2, [r3, #0]
   8353e:	685b      	ldr	r3, [r3, #4]
   83540:	429a      	cmp	r2, r3
   83542:	d006      	beq.n	83552 <Shellcom+0xbe>
		uart_enable_interrupt(UART,US_IER_TXEMPTY);
   83544:	f44f 7100 	mov.w	r1, #512	; 0x200
   83548:	484d      	ldr	r0, [pc, #308]	; (83680 <Shellcom+0x1ec>)
   8354a:	4b54      	ldr	r3, [pc, #336]	; (8369c <Shellcom+0x208>)
   8354c:	4798      	blx	r3
		return 1;
   8354e:	2501      	movs	r5, #1
   83550:	e7e0      	b.n	83514 <Shellcom+0x80>
		if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   83552:	2100      	movs	r1, #0
   83554:	2017      	movs	r0, #23
   83556:	4b4f      	ldr	r3, [pc, #316]	; (83694 <Shellcom+0x200>)
   83558:	4798      	blx	r3
   8355a:	e7f3      	b.n	83544 <Shellcom+0xb0>
		_nChar=0;
   8355c:	2300      	movs	r3, #0
   8355e:	9306      	str	r3, [sp, #24]
		while(*(char*)_pStr)
   83560:	9b07      	ldr	r3, [sp, #28]
   83562:	4619      	mov	r1, r3
   83564:	781a      	ldrb	r2, [r3, #0]
   83566:	b1fa      	cbz	r2, 835a8 <Shellcom+0x114>
			*shellcom.pTxWrite++=*(char*)_pStr++; _nChar++;
   83568:	4c3f      	ldr	r4, [pc, #252]	; (83668 <Shellcom+0x1d4>)
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   8356a:	4e4d      	ldr	r6, [pc, #308]	; (836a0 <Shellcom+0x20c>)
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   8356c:	4d44      	ldr	r5, [pc, #272]	; (83680 <Shellcom+0x1ec>)
			*shellcom.pTxWrite++=*(char*)_pStr++; _nChar++;
   8356e:	6822      	ldr	r2, [r4, #0]
   83570:	1c50      	adds	r0, r2, #1
   83572:	6020      	str	r0, [r4, #0]
   83574:	3301      	adds	r3, #1
   83576:	9307      	str	r3, [sp, #28]
   83578:	780b      	ldrb	r3, [r1, #0]
   8357a:	7013      	strb	r3, [r2, #0]
   8357c:	9b06      	ldr	r3, [sp, #24]
   8357e:	3301      	adds	r3, #1
   83580:	9306      	str	r3, [sp, #24]
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   83582:	6823      	ldr	r3, [r4, #0]
   83584:	42b3      	cmp	r3, r6
   83586:	bf24      	itt	cs
   83588:	4b38      	ldrcs	r3, [pc, #224]	; (8366c <Shellcom+0x1d8>)
   8358a:	6023      	strcs	r3, [r4, #0]
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   8358c:	6822      	ldr	r2, [r4, #0]
   8358e:	6863      	ldr	r3, [r4, #4]
   83590:	429a      	cmp	r2, r3
   83592:	d00b      	beq.n	835ac <Shellcom+0x118>
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   83594:	f44f 7100 	mov.w	r1, #512	; 0x200
   83598:	4628      	mov	r0, r5
   8359a:	4b40      	ldr	r3, [pc, #256]	; (8369c <Shellcom+0x208>)
   8359c:	4798      	blx	r3
		while(*(char*)_pStr)
   8359e:	9b07      	ldr	r3, [sp, #28]
   835a0:	4619      	mov	r1, r3
   835a2:	781a      	ldrb	r2, [r3, #0]
   835a4:	2a00      	cmp	r2, #0
   835a6:	d1e2      	bne.n	8356e <Shellcom+0xda>
		return _nChar;
   835a8:	9d06      	ldr	r5, [sp, #24]
   835aa:	e7b3      	b.n	83514 <Shellcom+0x80>
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   835ac:	2100      	movs	r1, #0
   835ae:	2017      	movs	r0, #23
   835b0:	4b38      	ldr	r3, [pc, #224]	; (83694 <Shellcom+0x200>)
   835b2:	4798      	blx	r3
   835b4:	e7ee      	b.n	83594 <Shellcom+0x100>
		_nChar=0;
   835b6:	2300      	movs	r3, #0
   835b8:	9306      	str	r3, [sp, #24]
		while(_strLen)
   835ba:	9b08      	ldr	r3, [sp, #32]
   835bc:	b30b      	cbz	r3, 83602 <Shellcom+0x16e>
			*shellcom.pTxWrite++=*(char*)_pStr++; _strLen--; _nChar++;
   835be:	4c2a      	ldr	r4, [pc, #168]	; (83668 <Shellcom+0x1d4>)
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   835c0:	4e37      	ldr	r6, [pc, #220]	; (836a0 <Shellcom+0x20c>)
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   835c2:	4d2f      	ldr	r5, [pc, #188]	; (83680 <Shellcom+0x1ec>)
			*shellcom.pTxWrite++=*(char*)_pStr++; _strLen--; _nChar++;
   835c4:	6823      	ldr	r3, [r4, #0]
   835c6:	1c5a      	adds	r2, r3, #1
   835c8:	6022      	str	r2, [r4, #0]
   835ca:	9a07      	ldr	r2, [sp, #28]
   835cc:	1c51      	adds	r1, r2, #1
   835ce:	9107      	str	r1, [sp, #28]
   835d0:	7812      	ldrb	r2, [r2, #0]
   835d2:	701a      	strb	r2, [r3, #0]
   835d4:	9b08      	ldr	r3, [sp, #32]
   835d6:	3b01      	subs	r3, #1
   835d8:	9308      	str	r3, [sp, #32]
   835da:	9b06      	ldr	r3, [sp, #24]
   835dc:	3301      	adds	r3, #1
   835de:	9306      	str	r3, [sp, #24]
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   835e0:	6823      	ldr	r3, [r4, #0]
   835e2:	42b3      	cmp	r3, r6
   835e4:	bf24      	itt	cs
   835e6:	4b21      	ldrcs	r3, [pc, #132]	; (8366c <Shellcom+0x1d8>)
   835e8:	6023      	strcs	r3, [r4, #0]
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   835ea:	6822      	ldr	r2, [r4, #0]
   835ec:	6863      	ldr	r3, [r4, #4]
   835ee:	429a      	cmp	r2, r3
   835f0:	d009      	beq.n	83606 <Shellcom+0x172>
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   835f2:	f44f 7100 	mov.w	r1, #512	; 0x200
   835f6:	4628      	mov	r0, r5
   835f8:	4b28      	ldr	r3, [pc, #160]	; (8369c <Shellcom+0x208>)
   835fa:	4798      	blx	r3
		while(_strLen)
   835fc:	9b08      	ldr	r3, [sp, #32]
   835fe:	2b00      	cmp	r3, #0
   83600:	d1e0      	bne.n	835c4 <Shellcom+0x130>
		return _nChar;
   83602:	9d06      	ldr	r5, [sp, #24]
   83604:	e786      	b.n	83514 <Shellcom+0x80>
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   83606:	2100      	movs	r1, #0
   83608:	2017      	movs	r0, #23
   8360a:	4b22      	ldr	r3, [pc, #136]	; (83694 <Shellcom+0x200>)
   8360c:	4798      	blx	r3
   8360e:	e7f0      	b.n	835f2 <Shellcom+0x15e>
		_nChar=0;
   83610:	2300      	movs	r3, #0
   83612:	9306      	str	r3, [sp, #24]
		while(_strLen)
   83614:	9b08      	ldr	r3, [sp, #32]
   83616:	b303      	cbz	r3, 8365a <Shellcom+0x1c6>
			Putch(hexDigits[(*(char*)_pStr)>>4]);
   83618:	4d22      	ldr	r5, [pc, #136]	; (836a4 <Shellcom+0x210>)
   8361a:	2466      	movs	r4, #102	; 0x66
			Putch(' ');
   8361c:	2620      	movs	r6, #32
			Putch(hexDigits[(*(char*)_pStr)>>4]);
   8361e:	9b07      	ldr	r3, [sp, #28]
   83620:	781b      	ldrb	r3, [r3, #0]
   83622:	091b      	lsrs	r3, r3, #4
   83624:	5ce9      	ldrb	r1, [r5, r3]
   83626:	4620      	mov	r0, r4
   83628:	f7ff ff34 	bl	83494 <Shellcom>
			Putch(hexDigits[(*(char*)_pStr)&0x0F]);
   8362c:	9b07      	ldr	r3, [sp, #28]
   8362e:	781b      	ldrb	r3, [r3, #0]
   83630:	f003 030f 	and.w	r3, r3, #15
   83634:	5ce9      	ldrb	r1, [r5, r3]
   83636:	4620      	mov	r0, r4
   83638:	f7ff ff2c 	bl	83494 <Shellcom>
			Putch(' ');
   8363c:	4631      	mov	r1, r6
   8363e:	4620      	mov	r0, r4
   83640:	f7ff ff28 	bl	83494 <Shellcom>
			 _pStr++; _strLen--; _nChar++;
   83644:	9b07      	ldr	r3, [sp, #28]
   83646:	3301      	adds	r3, #1
   83648:	9307      	str	r3, [sp, #28]
   8364a:	9b08      	ldr	r3, [sp, #32]
   8364c:	3b01      	subs	r3, #1
   8364e:	9308      	str	r3, [sp, #32]
   83650:	9a06      	ldr	r2, [sp, #24]
   83652:	3201      	adds	r2, #1
   83654:	9206      	str	r2, [sp, #24]
		while(_strLen)
   83656:	2b00      	cmp	r3, #0
   83658:	d1e1      	bne.n	8361e <Shellcom+0x18a>
		return _nChar;
   8365a:	9d06      	ldr	r5, [sp, #24]
   8365c:	e75a      	b.n	83514 <Shellcom+0x80>
		Error(ERROR_SHELLCOM_SWITCH_BAD_SC, (uint32_t)sc);
   8365e:	200c      	movs	r0, #12
   83660:	4b0c      	ldr	r3, [pc, #48]	; (83694 <Shellcom+0x200>)
   83662:	4798      	blx	r3
	return 0;
   83664:	2500      	movs	r5, #0
   83666:	e755      	b.n	83514 <Shellcom+0x80>
   83668:	20001df8 	.word	0x20001df8
   8366c:	20001e00 	.word	0x20001e00
   83670:	000843e1 	.word	0x000843e1
   83674:	000841e1 	.word	0x000841e1
   83678:	08000001 	.word	0x08000001
   8367c:	0008ac78 	.word	0x0008ac78
   83680:	400e0600 	.word	0x400e0600
   83684:	00084809 	.word	0x00084809
   83688:	e000e100 	.word	0xe000e100
   8368c:	0008484b 	.word	0x0008484b
   83690:	00084853 	.word	0x00084853
   83694:	00080f15 	.word	0x00080f15
   83698:	00084847 	.word	0x00084847
   8369c:	0008483f 	.word	0x0008483f
   836a0:	20002200 	.word	0x20002200
   836a4:	0008a1f8 	.word	0x0008a1f8

000836a8 <UART_Handler>:
enum{
	_SHELL_KBHIT = 2
};

void UART_Handler()
{
   836a8:	b510      	push	{r4, lr}
   836aa:	b082      	sub	sp, #8
	uint32_t dw_status = uart_get_status(UART);
   836ac:	4816      	ldr	r0, [pc, #88]	; (83708 <UART_Handler+0x60>)
   836ae:	4b17      	ldr	r3, [pc, #92]	; (8370c <UART_Handler+0x64>)
   836b0:	4798      	blx	r3
   836b2:	4604      	mov	r4, r0
	//TX section //////////////////////////////////////////////////////////////////////////////////
	if(mIsBitsSet(dw_status,US_CSR_TXEMPTY))
   836b4:	f410 7f00 	tst.w	r0, #512	; 0x200
   836b8:	d011      	beq.n	836de <UART_Handler+0x36>
	{
		if(shellcom.pTxRead!=shellcom.pTxWrite)
   836ba:	4a15      	ldr	r2, [pc, #84]	; (83710 <UART_Handler+0x68>)
   836bc:	6853      	ldr	r3, [r2, #4]
   836be:	6812      	ldr	r2, [r2, #0]
   836c0:	4293      	cmp	r3, r2
   836c2:	d011      	beq.n	836e8 <UART_Handler+0x40>
		{
			UART->UART_THR = *shellcom.pTxRead++;
   836c4:	1c5a      	adds	r2, r3, #1
   836c6:	4912      	ldr	r1, [pc, #72]	; (83710 <UART_Handler+0x68>)
   836c8:	604a      	str	r2, [r1, #4]
   836ca:	7819      	ldrb	r1, [r3, #0]
   836cc:	4b0e      	ldr	r3, [pc, #56]	; (83708 <UART_Handler+0x60>)
   836ce:	61d9      	str	r1, [r3, #28]
			if(shellcom.pTxRead>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxRead=shellcomTxBuf;
   836d0:	4b10      	ldr	r3, [pc, #64]	; (83714 <UART_Handler+0x6c>)
   836d2:	429a      	cmp	r2, r3
   836d4:	d303      	bcc.n	836de <UART_Handler+0x36>
   836d6:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
   836da:	4b0d      	ldr	r3, [pc, #52]	; (83710 <UART_Handler+0x68>)
   836dc:	605a      	str	r2, [r3, #4]
			uart_disable_interrupt(UART,US_IER_TXEMPTY);
		}
	}

	//RX section //////////////////////////////////////////////////////////////////////////////////
	if(mIsBitsSet(dw_status,US_CSR_RXRDY))
   836de:	f014 0f01 	tst.w	r4, #1
   836e2:	d107      	bne.n	836f4 <UART_Handler+0x4c>
	{
		PushTask(Shell,_SHELL_KBHIT,UART->UART_RHR,0);
	}
}
   836e4:	b002      	add	sp, #8
   836e6:	bd10      	pop	{r4, pc}
			uart_disable_interrupt(UART,US_IER_TXEMPTY);
   836e8:	f44f 7100 	mov.w	r1, #512	; 0x200
   836ec:	4806      	ldr	r0, [pc, #24]	; (83708 <UART_Handler+0x60>)
   836ee:	4b0a      	ldr	r3, [pc, #40]	; (83718 <UART_Handler+0x70>)
   836f0:	4798      	blx	r3
   836f2:	e7f4      	b.n	836de <UART_Handler+0x36>
		PushTask(Shell,_SHELL_KBHIT,UART->UART_RHR,0);
   836f4:	4b04      	ldr	r3, [pc, #16]	; (83708 <UART_Handler+0x60>)
   836f6:	699b      	ldr	r3, [r3, #24]
   836f8:	2200      	movs	r2, #0
   836fa:	9200      	str	r2, [sp, #0]
   836fc:	2202      	movs	r2, #2
   836fe:	4907      	ldr	r1, [pc, #28]	; (8371c <UART_Handler+0x74>)
   83700:	2066      	movs	r0, #102	; 0x66
   83702:	4c07      	ldr	r4, [pc, #28]	; (83720 <UART_Handler+0x78>)
   83704:	47a0      	blx	r4
}
   83706:	e7ed      	b.n	836e4 <UART_Handler+0x3c>
   83708:	400e0600 	.word	0x400e0600
   8370c:	00084847 	.word	0x00084847
   83710:	20001df8 	.word	0x20001df8
   83714:	20002200 	.word	0x20002200
   83718:	00084843 	.word	0x00084843
   8371c:	00082365 	.word	0x00082365
   83720:	00083829 	.word	0x00083829

00083724 <Stack>:
 */ 

 #include "kernel.h"
 #define STACK_SIGNATURE		0xabcd
 uint32_t Stack(uint32_t sc, ...)
 {
   83724:	b40f      	push	{r0, r1, r2, r3}
   83726:	b510      	push	{r4, lr}
	switch(sc)
   83728:	9902      	ldr	r1, [sp, #8]
   8372a:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   8372e:	2b04      	cmp	r3, #4
   83730:	d873      	bhi.n	8381a <Stack+0xf6>
   83732:	e8df f003 	tbb	[pc, r3]
   83736:	7203      	.short	0x7203
   83738:	3f13      	.short	0x3f13
   8373a:	65          	.byte	0x65
   8373b:	00          	.byte	0x00
#define _stack		((t_stack*)pa1)
#define _org		((char*)pa2)
#define _size		((uint16_t)pa3)
#define _elemSize	((uint8_t)pa4)
	case STACK_NEW:
		_stack->size = _size;
   8373c:	9b03      	ldr	r3, [sp, #12]
   8373e:	9a05      	ldr	r2, [sp, #20]
   83740:	811a      	strh	r2, [r3, #8]
		_stack->org = _org;
   83742:	9a04      	ldr	r2, [sp, #16]
   83744:	605a      	str	r2, [r3, #4]
		_stack->sp = _org;
   83746:	601a      	str	r2, [r3, #0]
		_stack->elemSize = _elemSize;
   83748:	9a06      	ldr	r2, [sp, #24]
   8374a:	729a      	strb	r2, [r3, #10]
		_stack->status = STACK_SIGNATURE; 
   8374c:	f64a 32cd 	movw	r2, #43981	; 0xabcd
   83750:	819a      	strh	r2, [r3, #12]
	default:
		Error(ERROR_STACK_SWITCH_BAD_SC, sc);
		
	}
	return 0;
   83752:	2000      	movs	r0, #0
   83754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83758:	b004      	add	sp, #16
   8375a:	4770      	bx	lr
		if(_stack->status != STACK_SIGNATURE) Error(ERROR_STACK_NOT_INIT, sc);
   8375c:	9c03      	ldr	r4, [sp, #12]
   8375e:	89a2      	ldrh	r2, [r4, #12]
   83760:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   83764:	429a      	cmp	r2, r3
   83766:	d003      	beq.n	83770 <Stack+0x4c>
   83768:	2166      	movs	r1, #102	; 0x66
   8376a:	2033      	movs	r0, #51	; 0x33
   8376c:	4b2d      	ldr	r3, [pc, #180]	; (83824 <Stack+0x100>)
   8376e:	4798      	blx	r3
		if(_stack->sp == (_stack->org + (_stack->size * _stack->elemSize))) Error(ERROR_STACK_PUSH_FULL, sc);
   83770:	8923      	ldrh	r3, [r4, #8]
   83772:	7aa1      	ldrb	r1, [r4, #10]
   83774:	6862      	ldr	r2, [r4, #4]
   83776:	fb01 2303 	mla	r3, r1, r3, r2
   8377a:	6822      	ldr	r2, [r4, #0]
   8377c:	429a      	cmp	r2, r3
   8377e:	d012      	beq.n	837a6 <Stack+0x82>
		for(_k = 0; _k < _stack->elemSize; _k++)
   83780:	2300      	movs	r3, #0
   83782:	9302      	str	r3, [sp, #8]
   83784:	7aa3      	ldrb	r3, [r4, #10]
   83786:	b19b      	cbz	r3, 837b0 <Stack+0x8c>
   83788:	9a04      	ldr	r2, [sp, #16]
   8378a:	3a01      	subs	r2, #1
			_stack->sp[_k] = ((char*)_elem)[_k];
   8378c:	2300      	movs	r3, #0
   8378e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   83792:	6821      	ldr	r1, [r4, #0]
   83794:	54c8      	strb	r0, [r1, r3]
		for(_k = 0; _k < _stack->elemSize; _k++)
   83796:	3301      	adds	r3, #1
   83798:	7aa1      	ldrb	r1, [r4, #10]
   8379a:	4299      	cmp	r1, r3
   8379c:	d8f7      	bhi.n	8378e <Stack+0x6a>
		_stack->sp+=_stack->elemSize;
   8379e:	6823      	ldr	r3, [r4, #0]
   837a0:	4419      	add	r1, r3
   837a2:	6021      	str	r1, [r4, #0]
		break;
   837a4:	e7d5      	b.n	83752 <Stack+0x2e>
		if(_stack->sp == (_stack->org + (_stack->size * _stack->elemSize))) Error(ERROR_STACK_PUSH_FULL, sc);
   837a6:	2166      	movs	r1, #102	; 0x66
   837a8:	2034      	movs	r0, #52	; 0x34
   837aa:	4b1e      	ldr	r3, [pc, #120]	; (83824 <Stack+0x100>)
   837ac:	4798      	blx	r3
   837ae:	e7e7      	b.n	83780 <Stack+0x5c>
		for(_k = 0; _k < _stack->elemSize; _k++)
   837b0:	2100      	movs	r1, #0
   837b2:	e7f4      	b.n	8379e <Stack+0x7a>
		if(_stack->status != STACK_SIGNATURE) Error(ERROR_STACK_NOT_INIT, sc);
   837b4:	9c03      	ldr	r4, [sp, #12]
   837b6:	89a2      	ldrh	r2, [r4, #12]
   837b8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   837bc:	429a      	cmp	r2, r3
   837be:	d003      	beq.n	837c8 <Stack+0xa4>
   837c0:	2167      	movs	r1, #103	; 0x67
   837c2:	2033      	movs	r0, #51	; 0x33
   837c4:	4b17      	ldr	r3, [pc, #92]	; (83824 <Stack+0x100>)
   837c6:	4798      	blx	r3
		if(_stack->sp == _stack->org) Error(ERROR_STACK_UNDERFLOW, sc);
   837c8:	6822      	ldr	r2, [r4, #0]
   837ca:	6863      	ldr	r3, [r4, #4]
   837cc:	429a      	cmp	r2, r3
   837ce:	d012      	beq.n	837f6 <Stack+0xd2>
		_stack->sp-=_stack->elemSize;
   837d0:	7aa2      	ldrb	r2, [r4, #10]
   837d2:	6823      	ldr	r3, [r4, #0]
   837d4:	1a9b      	subs	r3, r3, r2
   837d6:	6023      	str	r3, [r4, #0]
		for(_k = 0; _k < _stack->elemSize; _k++)
   837d8:	2300      	movs	r3, #0
   837da:	9302      	str	r3, [sp, #8]
   837dc:	2a00      	cmp	r2, #0
   837de:	d0b8      	beq.n	83752 <Stack+0x2e>
   837e0:	9a04      	ldr	r2, [sp, #16]
   837e2:	3a01      	subs	r2, #1
			((char*)_elem)[_k] = _stack->sp[_k];
   837e4:	6821      	ldr	r1, [r4, #0]
   837e6:	5cc9      	ldrb	r1, [r1, r3]
   837e8:	f802 1f01 	strb.w	r1, [r2, #1]!
		for(_k = 0; _k < _stack->elemSize; _k++)
   837ec:	3301      	adds	r3, #1
   837ee:	7aa1      	ldrb	r1, [r4, #10]
   837f0:	4299      	cmp	r1, r3
   837f2:	d8f7      	bhi.n	837e4 <Stack+0xc0>
   837f4:	e7ad      	b.n	83752 <Stack+0x2e>
		if(_stack->sp == _stack->org) Error(ERROR_STACK_UNDERFLOW, sc);
   837f6:	2167      	movs	r1, #103	; 0x67
   837f8:	2035      	movs	r0, #53	; 0x35
   837fa:	4b0a      	ldr	r3, [pc, #40]	; (83824 <Stack+0x100>)
   837fc:	4798      	blx	r3
   837fe:	e7e7      	b.n	837d0 <Stack+0xac>
		if(_stack->status != STACK_SIGNATURE) Error(ERROR_STACK_NOT_INIT, sc);
   83800:	9c03      	ldr	r4, [sp, #12]
   83802:	89a2      	ldrh	r2, [r4, #12]
   83804:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   83808:	429a      	cmp	r2, r3
   8380a:	d003      	beq.n	83814 <Stack+0xf0>
   8380c:	2168      	movs	r1, #104	; 0x68
   8380e:	2033      	movs	r0, #51	; 0x33
   83810:	4b04      	ldr	r3, [pc, #16]	; (83824 <Stack+0x100>)
   83812:	4798      	blx	r3
		_stack->sp = _stack->org;
   83814:	6863      	ldr	r3, [r4, #4]
   83816:	6023      	str	r3, [r4, #0]
		break;
   83818:	e79b      	b.n	83752 <Stack+0x2e>
		Error(ERROR_STACK_SWITCH_BAD_SC, sc);
   8381a:	201f      	movs	r0, #31
   8381c:	4b01      	ldr	r3, [pc, #4]	; (83824 <Stack+0x100>)
   8381e:	4798      	blx	r3
   83820:	e797      	b.n	83752 <Stack+0x2e>
   83822:	bf00      	nop
   83824:	00080f15 	.word	0x00080f15

00083828 <Taskman>:
	_TASKMAN_DELAYED_TASK_PROC	= 1
};


uint32_t Taskman(uint32_t sc, ...)
{
   83828:	b40f      	push	{r0, r1, r2, r3}
   8382a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8382c:	b083      	sub	sp, #12
	switch(sc)
   8382e:	9908      	ldr	r1, [sp, #32]
   83830:	2964      	cmp	r1, #100	; 0x64
   83832:	d028      	beq.n	83886 <Taskman+0x5e>
   83834:	d91e      	bls.n	83874 <Taskman+0x4c>
   83836:	2966      	cmp	r1, #102	; 0x66
   83838:	d06b      	beq.n	83912 <Taskman+0xea>
   8383a:	2967      	cmp	r1, #103	; 0x67
   8383c:	f040 80cd 	bne.w	839da <Taskman+0x1b2>
#undef _delay
#undef k
		break;

	case TASKMAN_POP:
		cpu_irq_enter_critical();
   83840:	4b68      	ldr	r3, [pc, #416]	; (839e4 <Taskman+0x1bc>)
   83842:	4798      	blx	r3
		if(taskman.pPop!=taskman.pPush)
   83844:	4a68      	ldr	r2, [pc, #416]	; (839e8 <Taskman+0x1c0>)
   83846:	6853      	ldr	r3, [r2, #4]
   83848:	6812      	ldr	r2, [r2, #0]
   8384a:	4293      	cmp	r3, r2
   8384c:	f000 80ae 	beq.w	839ac <Taskman+0x184>
		{
			t_pTaskFunc	 func;
			uint32_t pa;
			func = taskman.pPop->pFunc;
   83850:	681d      	ldr	r5, [r3, #0]
			sc = taskman.pPop->sc;
   83852:	685c      	ldr	r4, [r3, #4]
   83854:	9408      	str	r4, [sp, #32]
			pa = taskman.pPop->param;
   83856:	689e      	ldr	r6, [r3, #8]
			taskman.pPop++;
   83858:	3310      	adds	r3, #16
			if(taskman.pPop>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPop=tasks;
   8385a:	4a64      	ldr	r2, [pc, #400]	; (839ec <Taskman+0x1c4>)
   8385c:	4293      	cmp	r3, r2
   8385e:	f0c0 80a2 	bcc.w	839a6 <Taskman+0x17e>
   83862:	4a63      	ldr	r2, [pc, #396]	; (839f0 <Taskman+0x1c8>)
   83864:	4b60      	ldr	r3, [pc, #384]	; (839e8 <Taskman+0x1c0>)
   83866:	605a      	str	r2, [r3, #4]
			cpu_irq_leave_critical();
   83868:	4b62      	ldr	r3, [pc, #392]	; (839f4 <Taskman+0x1cc>)
   8386a:	4798      	blx	r3
			func(sc,pa);
   8386c:	4631      	mov	r1, r6
   8386e:	4620      	mov	r0, r4
   83870:	47a8      	blx	r5
			return 0; //Must return here because of "cpu_irq_leave_critical()"
   83872:	e048      	b.n	83906 <Taskman+0xde>
	switch(sc)
   83874:	2901      	cmp	r1, #1
   83876:	f040 80b0 	bne.w	839da <Taskman+0x1b2>


	////////// PRIVATE SERVICES IMPLEMENTATION ///////////////////////////////////////////
	case _TASKMAN_DELAYED_TASK_PROC:
#define k sc
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   8387a:	2500      	movs	r5, #0
   8387c:	9508      	str	r5, [sp, #32]
   8387e:	4c5e      	ldr	r4, [pc, #376]	; (839f8 <Taskman+0x1d0>)
		{
			if(dTasks[k].delay)
			{
				if(--dTasks[k].delay==0)
				{
					PushTask(
   83880:	462f      	mov	r7, r5
   83882:	2666      	movs	r6, #102	; 0x66
   83884:	e09a      	b.n	839bc <Taskman+0x194>
		taskman.pPop=taskman.pPush=tasks;
   83886:	4b58      	ldr	r3, [pc, #352]	; (839e8 <Taskman+0x1c0>)
   83888:	4a59      	ldr	r2, [pc, #356]	; (839f0 <Taskman+0x1c8>)
   8388a:	601a      	str	r2, [r3, #0]
   8388c:	605a      	str	r2, [r3, #4]
   8388e:	4b5a      	ldr	r3, [pc, #360]	; (839f8 <Taskman+0x1d0>)
   83890:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
			dTasks[k].delay=0;
   83894:	2200      	movs	r2, #0
   83896:	60da      	str	r2, [r3, #12]
   83898:	3310      	adds	r3, #16
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   8389a:	428b      	cmp	r3, r1
   8389c:	d1fb      	bne.n	83896 <Taskman+0x6e>
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   8389e:	4b57      	ldr	r3, [pc, #348]	; (839fc <Taskman+0x1d4>)
   838a0:	2202      	movs	r2, #2
   838a2:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   838a4:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   838a6:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   838a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   838ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
   838ae:	f021 0102 	bic.w	r1, r1, #2
   838b2:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   838b4:	605a      	str	r2, [r3, #4]
   838b6:	2016      	movs	r0, #22
   838b8:	4b51      	ldr	r3, [pc, #324]	; (83a00 <Taskman+0x1d8>)
   838ba:	4798      	blx	r3

	//Configure the PMC to enable the TC module.
	sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);

	//Init TC to waveform mode.
	tc_init(
   838bc:	4c51      	ldr	r4, [pc, #324]	; (83a04 <Taskman+0x1dc>)
   838be:	4a52      	ldr	r2, [pc, #328]	; (83a08 <Taskman+0x1e0>)
   838c0:	2100      	movs	r1, #0
   838c2:	4620      	mov	r0, r4
   838c4:	4b51      	ldr	r3, [pc, #324]	; (83a0c <Taskman+0x1e4>)
   838c6:	4798      	blx	r3

	//Configure waveform frequency and duty cycle.
	rc =	(sysclk_get_peripheral_bus_hz(TC) /
	TC_WAVEFORM_DIVISOR) /
	TC_WAVEFORM_FREQUENCY;
	tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
   838c8:	f240 22ee 	movw	r2, #750	; 0x2ee
   838cc:	2100      	movs	r1, #0
   838ce:	4620      	mov	r0, r4
   838d0:	4b4f      	ldr	r3, [pc, #316]	; (83a10 <Taskman+0x1e8>)
   838d2:	4798      	blx	r3

	ra = (100 - TC_WAVEFORM_DUTY_CYCLE) * rc / 100;
	tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
   838d4:	f240 220d 	movw	r2, #525	; 0x20d
   838d8:	2100      	movs	r1, #0
   838da:	4620      	mov	r0, r4
   838dc:	4b4d      	ldr	r3, [pc, #308]	; (83a14 <Taskman+0x1ec>)
   838de:	4798      	blx	r3

	//Enable TC TC_CHANNEL_WAVEFORM
	tc_start(TC, TC_CHANNEL_WAVEFORM);
   838e0:	2100      	movs	r1, #0
   838e2:	4620      	mov	r0, r4
   838e4:	4b4c      	ldr	r3, [pc, #304]	; (83a18 <Taskman+0x1f0>)
   838e6:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   838e8:	4b4c      	ldr	r3, [pc, #304]	; (83a1c <Taskman+0x1f4>)
   838ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   838ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   838f2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   838f6:	2100      	movs	r1, #0
   838f8:	f883 1316 	strb.w	r1, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   838fc:	601a      	str	r2, [r3, #0]
		tc_enable_interrupt(TC, TC_CHANNEL_WAVEFORM, TC_IER_CPAS);
   838fe:	2204      	movs	r2, #4
   83900:	4620      	mov	r0, r4
   83902:	4b47      	ldr	r3, [pc, #284]	; (83a20 <Taskman+0x1f8>)
   83904:	4798      	blx	r3
}
   83906:	2000      	movs	r0, #0
   83908:	b003      	add	sp, #12
   8390a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   8390e:	b004      	add	sp, #16
   83910:	4770      	bx	lr
		cpu_irq_enter_critical();
   83912:	4b34      	ldr	r3, [pc, #208]	; (839e4 <Taskman+0x1bc>)
   83914:	4798      	blx	r3
		if(_delay)
   83916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   83918:	b345      	cbz	r5, 8396c <Taskman+0x144>
			for(k=0;(k<TASKMAN_DELAYED_TASK_LIST_LEN)&&(dTasks[k].delay);k++);
   8391a:	2300      	movs	r3, #0
   8391c:	9308      	str	r3, [sp, #32]
   8391e:	4b36      	ldr	r3, [pc, #216]	; (839f8 <Taskman+0x1d0>)
   83920:	68db      	ldr	r3, [r3, #12]
   83922:	b1a3      	cbz	r3, 8394e <Taskman+0x126>
   83924:	2301      	movs	r3, #1
   83926:	9308      	str	r3, [sp, #32]
   83928:	4a33      	ldr	r2, [pc, #204]	; (839f8 <Taskman+0x1d0>)
   8392a:	2000      	movs	r0, #0
   8392c:	461c      	mov	r4, r3
   8392e:	69d1      	ldr	r1, [r2, #28]
   83930:	b151      	cbz	r1, 83948 <Taskman+0x120>
   83932:	3301      	adds	r3, #1
   83934:	3210      	adds	r2, #16
   83936:	4620      	mov	r0, r4
   83938:	2b64      	cmp	r3, #100	; 0x64
   8393a:	d1f8      	bne.n	8392e <Taskman+0x106>
			if(k==TASKMAN_DELAYED_TASK_LIST_LEN) Error(ERROR_TASKMAN_DELAYED_TASKLIST_FULL, (uint32_t)0);
   8393c:	2100      	movs	r1, #0
   8393e:	2016      	movs	r0, #22
   83940:	4b38      	ldr	r3, [pc, #224]	; (83a24 <Taskman+0x1fc>)
   83942:	4798      	blx	r3
   83944:	2364      	movs	r3, #100	; 0x64
   83946:	e002      	b.n	8394e <Taskman+0x126>
   83948:	b970      	cbnz	r0, 83968 <Taskman+0x140>
   8394a:	2b64      	cmp	r3, #100	; 0x64
   8394c:	d0f6      	beq.n	8393c <Taskman+0x114>
			dTasks[k].pFunc=_func;
   8394e:	492a      	ldr	r1, [pc, #168]	; (839f8 <Taskman+0x1d0>)
   83950:	011b      	lsls	r3, r3, #4
   83952:	18ca      	adds	r2, r1, r3
   83954:	9809      	ldr	r0, [sp, #36]	; 0x24
   83956:	50c8      	str	r0, [r1, r3]
			dTasks[k].sc=_sc;
   83958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8395a:	6053      	str	r3, [r2, #4]
			dTasks[k].param=_param;
   8395c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8395e:	6093      	str	r3, [r2, #8]
			dTasks[k].delay=_delay;
   83960:	60d5      	str	r5, [r2, #12]
		cpu_irq_leave_critical();
   83962:	4b24      	ldr	r3, [pc, #144]	; (839f4 <Taskman+0x1cc>)
   83964:	4798      	blx	r3
		break;
   83966:	e7ce      	b.n	83906 <Taskman+0xde>
   83968:	9308      	str	r3, [sp, #32]
   8396a:	e7ee      	b.n	8394a <Taskman+0x122>
			taskman.pPush->pFunc=_func;
   8396c:	4b1e      	ldr	r3, [pc, #120]	; (839e8 <Taskman+0x1c0>)
   8396e:	681a      	ldr	r2, [r3, #0]
   83970:	9909      	ldr	r1, [sp, #36]	; 0x24
   83972:	6011      	str	r1, [r2, #0]
			taskman.pPush->sc=_sc;
   83974:	681b      	ldr	r3, [r3, #0]
   83976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83978:	605a      	str	r2, [r3, #4]
			taskman.pPush->param=_param;
   8397a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8397c:	609a      	str	r2, [r3, #8]
			taskman.pPush++;
   8397e:	3310      	adds	r3, #16
			if(taskman.pPush>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPush=tasks;
   83980:	4a1a      	ldr	r2, [pc, #104]	; (839ec <Taskman+0x1c4>)
   83982:	4293      	cmp	r3, r2
   83984:	d20b      	bcs.n	8399e <Taskman+0x176>
			taskman.pPush++;
   83986:	4a18      	ldr	r2, [pc, #96]	; (839e8 <Taskman+0x1c0>)
   83988:	6013      	str	r3, [r2, #0]
			if(taskman.pPush==taskman.pPop) Error(ERROR_TASKMAN_TASKLIST_FULL, (uint32_t)0);
   8398a:	4b17      	ldr	r3, [pc, #92]	; (839e8 <Taskman+0x1c0>)
   8398c:	681a      	ldr	r2, [r3, #0]
   8398e:	685b      	ldr	r3, [r3, #4]
   83990:	429a      	cmp	r2, r3
   83992:	d1e6      	bne.n	83962 <Taskman+0x13a>
   83994:	2100      	movs	r1, #0
   83996:	2015      	movs	r0, #21
   83998:	4b22      	ldr	r3, [pc, #136]	; (83a24 <Taskman+0x1fc>)
   8399a:	4798      	blx	r3
   8399c:	e7e1      	b.n	83962 <Taskman+0x13a>
			if(taskman.pPush>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPush=tasks;
   8399e:	4a14      	ldr	r2, [pc, #80]	; (839f0 <Taskman+0x1c8>)
   839a0:	4b11      	ldr	r3, [pc, #68]	; (839e8 <Taskman+0x1c0>)
   839a2:	601a      	str	r2, [r3, #0]
   839a4:	e7f1      	b.n	8398a <Taskman+0x162>
			taskman.pPop++;
   839a6:	4a10      	ldr	r2, [pc, #64]	; (839e8 <Taskman+0x1c0>)
   839a8:	6053      	str	r3, [r2, #4]
   839aa:	e75d      	b.n	83868 <Taskman+0x40>
		cpu_irq_leave_critical();
   839ac:	4b11      	ldr	r3, [pc, #68]	; (839f4 <Taskman+0x1cc>)
   839ae:	4798      	blx	r3
		break;
   839b0:	e7a9      	b.n	83906 <Taskman+0xde>
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   839b2:	3501      	adds	r5, #1
   839b4:	9508      	str	r5, [sp, #32]
   839b6:	3410      	adds	r4, #16
   839b8:	2d64      	cmp	r5, #100	; 0x64
   839ba:	d0a4      	beq.n	83906 <Taskman+0xde>
			if(dTasks[k].delay)
   839bc:	68e3      	ldr	r3, [r4, #12]
   839be:	2b00      	cmp	r3, #0
   839c0:	d0f7      	beq.n	839b2 <Taskman+0x18a>
				if(--dTasks[k].delay==0)
   839c2:	3b01      	subs	r3, #1
   839c4:	60e3      	str	r3, [r4, #12]
   839c6:	2b00      	cmp	r3, #0
   839c8:	d1f3      	bne.n	839b2 <Taskman+0x18a>
					PushTask(
   839ca:	68a3      	ldr	r3, [r4, #8]
   839cc:	6862      	ldr	r2, [r4, #4]
   839ce:	6821      	ldr	r1, [r4, #0]
   839d0:	9700      	str	r7, [sp, #0]
   839d2:	4630      	mov	r0, r6
   839d4:	f7ff ff28 	bl	83828 <Taskman>
   839d8:	e7eb      	b.n	839b2 <Taskman+0x18a>
		Error(ERROR_TASKMAN_SWITCH_BAD_SC,  (uint32_t)sc);
   839da:	200b      	movs	r0, #11
   839dc:	4b11      	ldr	r3, [pc, #68]	; (83a24 <Taskman+0x1fc>)
   839de:	4798      	blx	r3
   839e0:	e791      	b.n	83906 <Taskman+0xde>
   839e2:	bf00      	nop
   839e4:	00084875 	.word	0x00084875
   839e8:	20002340 	.word	0x20002340
   839ec:	20002340 	.word	0x20002340
   839f0:	20002200 	.word	0x20002200
   839f4:	000848b1 	.word	0x000848b1
   839f8:	20002348 	.word	0x20002348
   839fc:	400e0c00 	.word	0x400e0c00
   83a00:	000843e1 	.word	0x000843e1
   83a04:	40080000 	.word	0x40080000
   83a08:	0009c003 	.word	0x0009c003
   83a0c:	000847c9 	.word	0x000847c9
   83a10:	000847f1 	.word	0x000847f1
   83a14:	000847e9 	.word	0x000847e9
   83a18:	000847e1 	.word	0x000847e1
   83a1c:	e000e100 	.word	0xe000e100
   83a20:	000847f9 	.word	0x000847f9
   83a24:	00080f15 	.word	0x00080f15

00083a28 <TC0_Handler>:
{
   83a28:	b508      	push	{r3, lr}
	tc_get_status(TC, TC_CHANNEL_WAVEFORM);
   83a2a:	2100      	movs	r1, #0
   83a2c:	4806      	ldr	r0, [pc, #24]	; (83a48 <TC0_Handler+0x20>)
   83a2e:	4b07      	ldr	r3, [pc, #28]	; (83a4c <TC0_Handler+0x24>)
   83a30:	4798      	blx	r3
	Taskman(_TASKMAN_DELAYED_TASK_PROC);
   83a32:	2001      	movs	r0, #1
   83a34:	4b06      	ldr	r3, [pc, #24]	; (83a50 <TC0_Handler+0x28>)
   83a36:	4798      	blx	r3
	Shell(_SHELL_TIMER);
   83a38:	2003      	movs	r0, #3
   83a3a:	4b06      	ldr	r3, [pc, #24]	; (83a54 <TC0_Handler+0x2c>)
   83a3c:	4798      	blx	r3
	ComRS485(_COMRS485_TIMER);
   83a3e:	2001      	movs	r0, #1
   83a40:	4b05      	ldr	r3, [pc, #20]	; (83a58 <TC0_Handler+0x30>)
   83a42:	4798      	blx	r3
   83a44:	bd08      	pop	{r3, pc}
   83a46:	bf00      	nop
   83a48:	40080000 	.word	0x40080000
   83a4c:	00084801 	.word	0x00084801
   83a50:	00083829 	.word	0x00083829
   83a54:	00082365 	.word	0x00082365
   83a58:	00080b25 	.word	0x00080b25

00083a5c <mstrtokRestore>:
    return pToken;
}

void  mstrtokRestore(void)
{
    if(_pEndToken) *_pEndToken=_chEndToken;
   83a5c:	4b03      	ldr	r3, [pc, #12]	; (83a6c <mstrtokRestore+0x10>)
   83a5e:	681b      	ldr	r3, [r3, #0]
   83a60:	b113      	cbz	r3, 83a68 <mstrtokRestore+0xc>
   83a62:	4a03      	ldr	r2, [pc, #12]	; (83a70 <mstrtokRestore+0x14>)
   83a64:	7812      	ldrb	r2, [r2, #0]
   83a66:	701a      	strb	r2, [r3, #0]
   83a68:	4770      	bx	lr
   83a6a:	bf00      	nop
   83a6c:	20001174 	.word	0x20001174
   83a70:	20001172 	.word	0x20001172

00083a74 <mstrtokReset>:
}

void  mstrtokReset(void)
{
    _chEndToken  = '\0';
   83a74:	2300      	movs	r3, #0
   83a76:	4a02      	ldr	r2, [pc, #8]	; (83a80 <mstrtokReset+0xc>)
   83a78:	7013      	strb	r3, [r2, #0]
    _pEndToken = NULL;
   83a7a:	4a02      	ldr	r2, [pc, #8]	; (83a84 <mstrtokReset+0x10>)
   83a7c:	6013      	str	r3, [r2, #0]
   83a7e:	4770      	bx	lr
   83a80:	20001172 	.word	0x20001172
   83a84:	20001174 	.word	0x20001174

00083a88 <_IsSeparator>:
}


char _IsSeparator(char ch, const char*pSep)
{
    while(*pSep && (*pSep!=ch)) pSep++;
   83a88:	780b      	ldrb	r3, [r1, #0]
   83a8a:	b13b      	cbz	r3, 83a9c <_IsSeparator+0x14>
   83a8c:	4298      	cmp	r0, r3
   83a8e:	d005      	beq.n	83a9c <_IsSeparator+0x14>
   83a90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   83a94:	b113      	cbz	r3, 83a9c <_IsSeparator+0x14>
   83a96:	4283      	cmp	r3, r0
   83a98:	d1fa      	bne.n	83a90 <_IsSeparator+0x8>
   83a9a:	4603      	mov	r3, r0
    return *pSep;
}
   83a9c:	4618      	mov	r0, r3
   83a9e:	4770      	bx	lr

00083aa0 <mstrtok>:
{
   83aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(pStr) 
   83aa4:	2800      	cmp	r0, #0
   83aa6:	d02b      	beq.n	83b00 <mstrtok+0x60>
        pToken=pStr;
   83aa8:	4a1d      	ldr	r2, [pc, #116]	; (83b20 <mstrtok+0x80>)
   83aaa:	6010      	str	r0, [r2, #0]
    while(*pToken && _IsSeparator(*pToken,pSep)) { pToken++; }
   83aac:	4b1c      	ldr	r3, [pc, #112]	; (83b20 <mstrtok+0x80>)
   83aae:	681d      	ldr	r5, [r3, #0]
   83ab0:	782c      	ldrb	r4, [r5, #0]
   83ab2:	2c00      	cmp	r4, #0
   83ab4:	d030      	beq.n	83b18 <mstrtok+0x78>
   83ab6:	4688      	mov	r8, r1
   83ab8:	4e1a      	ldr	r6, [pc, #104]	; (83b24 <mstrtok+0x84>)
   83aba:	4f19      	ldr	r7, [pc, #100]	; (83b20 <mstrtok+0x80>)
   83abc:	4641      	mov	r1, r8
   83abe:	4620      	mov	r0, r4
   83ac0:	47b0      	blx	r6
   83ac2:	b120      	cbz	r0, 83ace <mstrtok+0x2e>
   83ac4:	3501      	adds	r5, #1
   83ac6:	603d      	str	r5, [r7, #0]
   83ac8:	782c      	ldrb	r4, [r5, #0]
   83aca:	2c00      	cmp	r4, #0
   83acc:	d1f6      	bne.n	83abc <mstrtok+0x1c>
    _pEndToken=pToken;
   83ace:	4b16      	ldr	r3, [pc, #88]	; (83b28 <mstrtok+0x88>)
   83ad0:	601d      	str	r5, [r3, #0]
    while(*_pEndToken && !_IsSeparator(*_pEndToken,pSep)) { _pEndToken++; }
   83ad2:	782c      	ldrb	r4, [r5, #0]
   83ad4:	b1f4      	cbz	r4, 83b14 <mstrtok+0x74>
   83ad6:	462e      	mov	r6, r5
   83ad8:	4f12      	ldr	r7, [pc, #72]	; (83b24 <mstrtok+0x84>)
   83ada:	f8df 904c 	ldr.w	r9, [pc, #76]	; 83b28 <mstrtok+0x88>
   83ade:	4641      	mov	r1, r8
   83ae0:	4620      	mov	r0, r4
   83ae2:	47b8      	blx	r7
   83ae4:	b928      	cbnz	r0, 83af2 <mstrtok+0x52>
   83ae6:	3601      	adds	r6, #1
   83ae8:	f8c9 6000 	str.w	r6, [r9]
   83aec:	7834      	ldrb	r4, [r6, #0]
   83aee:	2c00      	cmp	r4, #0
   83af0:	d1f5      	bne.n	83ade <mstrtok+0x3e>
    _chEndToken=*_pEndToken;
   83af2:	4b0e      	ldr	r3, [pc, #56]	; (83b2c <mstrtok+0x8c>)
   83af4:	701c      	strb	r4, [r3, #0]
    *_pEndToken='\0';
   83af6:	2300      	movs	r3, #0
   83af8:	7033      	strb	r3, [r6, #0]
}
   83afa:	4628      	mov	r0, r5
   83afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if(_pEndToken)
   83b00:	4b09      	ldr	r3, [pc, #36]	; (83b28 <mstrtok+0x88>)
   83b02:	681d      	ldr	r5, [r3, #0]
   83b04:	2d00      	cmp	r5, #0
   83b06:	d0f8      	beq.n	83afa <mstrtok+0x5a>
        *_pEndToken=_chEndToken;
   83b08:	4b08      	ldr	r3, [pc, #32]	; (83b2c <mstrtok+0x8c>)
   83b0a:	781b      	ldrb	r3, [r3, #0]
   83b0c:	702b      	strb	r3, [r5, #0]
        pToken=_pEndToken;
   83b0e:	4b04      	ldr	r3, [pc, #16]	; (83b20 <mstrtok+0x80>)
   83b10:	601d      	str	r5, [r3, #0]
   83b12:	e7cb      	b.n	83aac <mstrtok+0xc>
    while(*_pEndToken && !_IsSeparator(*_pEndToken,pSep)) { _pEndToken++; }
   83b14:	462e      	mov	r6, r5
   83b16:	e7ec      	b.n	83af2 <mstrtok+0x52>
    _pEndToken=pToken;
   83b18:	4b03      	ldr	r3, [pc, #12]	; (83b28 <mstrtok+0x88>)
   83b1a:	601d      	str	r5, [r3, #0]
    while(*pToken && _IsSeparator(*pToken,pSep)) { pToken++; }
   83b1c:	462e      	mov	r6, r5
   83b1e:	e7e8      	b.n	83af2 <mstrtok+0x52>
   83b20:	20001178 	.word	0x20001178
   83b24:	00083a89 	.word	0x00083a89
   83b28:	20001174 	.word	0x20001174
   83b2c:	20001172 	.word	0x20001172

00083b30 <_menuPorteFermer1>:

	return 0;
 }

uint32_t _menuPorteFermer1(uint32_t sc, ...)
{
   83b30:	b40f      	push	{r0, r1, r2, r3}
   83b32:	b508      	push	{r3, lr}
	switch(sc)
	{
		default:
		Putstr("_menuPorteFermer1: BAD SC");
   83b34:	4904      	ldr	r1, [pc, #16]	; (83b48 <_menuPorteFermer1+0x18>)
   83b36:	2067      	movs	r0, #103	; 0x67
   83b38:	4b04      	ldr	r3, [pc, #16]	; (83b4c <_menuPorteFermer1+0x1c>)
   83b3a:	4798      	blx	r3
		break;
	}

	return 0;
}
   83b3c:	2000      	movs	r0, #0
   83b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   83b42:	b004      	add	sp, #16
   83b44:	4770      	bx	lr
   83b46:	bf00      	nop
   83b48:	0008ad9c 	.word	0x0008ad9c
   83b4c:	00083495 	.word	0x00083495

00083b50 <_menuPorteFermer2>:

uint32_t _menuPorteFermer2(uint32_t sc, ...)
{
   83b50:	b40f      	push	{r0, r1, r2, r3}
   83b52:	b508      	push	{r3, lr}
	switch(sc)
	{
		default:
		Putstr("_menuPorteFermer2: BAD SC");
   83b54:	4904      	ldr	r1, [pc, #16]	; (83b68 <_menuPorteFermer2+0x18>)
   83b56:	2067      	movs	r0, #103	; 0x67
   83b58:	4b04      	ldr	r3, [pc, #16]	; (83b6c <_menuPorteFermer2+0x1c>)
   83b5a:	4798      	blx	r3
		break;
	}

	return 0;
}
   83b5c:	2000      	movs	r0, #0
   83b5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   83b62:	b004      	add	sp, #16
   83b64:	4770      	bx	lr
   83b66:	bf00      	nop
   83b68:	0008adb8 	.word	0x0008adb8
   83b6c:	00083495 	.word	0x00083495

00083b70 <_menuOptionSasFunc>:
 {
   83b70:	b40f      	push	{r0, r1, r2, r3}
   83b72:	b510      	push	{r4, lr}
		Putstr("_menuOptionSasFunc: BAD SC");
   83b74:	4909      	ldr	r1, [pc, #36]	; (83b9c <_menuOptionSasFunc+0x2c>)
   83b76:	2067      	movs	r0, #103	; 0x67
   83b78:	4b09      	ldr	r3, [pc, #36]	; (83ba0 <_menuOptionSasFunc+0x30>)
   83b7a:	4798      	blx	r3
		LcdPutstr("                     ", 3, 0);
   83b7c:	2300      	movs	r3, #0
   83b7e:	2203      	movs	r2, #3
   83b80:	4908      	ldr	r1, [pc, #32]	; (83ba4 <_menuOptionSasFunc+0x34>)
   83b82:	2068      	movs	r0, #104	; 0x68
   83b84:	4c08      	ldr	r4, [pc, #32]	; (83ba8 <_menuOptionSasFunc+0x38>)
   83b86:	47a0      	blx	r4
		LcdPutstr("FERMETURE SAS",3,0);
   83b88:	2300      	movs	r3, #0
   83b8a:	2203      	movs	r2, #3
   83b8c:	4907      	ldr	r1, [pc, #28]	; (83bac <_menuOptionSasFunc+0x3c>)
   83b8e:	2068      	movs	r0, #104	; 0x68
   83b90:	47a0      	blx	r4
 }
   83b92:	2000      	movs	r0, #0
   83b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83b98:	b004      	add	sp, #16
   83b9a:	4770      	bx	lr
   83b9c:	0008ad58 	.word	0x0008ad58
   83ba0:	00083495 	.word	0x00083495
   83ba4:	0008ad74 	.word	0x0008ad74
   83ba8:	00081579 	.word	0x00081579
   83bac:	0008ad8c 	.word	0x0008ad8c

00083bb0 <_menuEtatPorte1>:

uint32_t _menuEtatPorte1(uint32_t sc, ...)
{
   83bb0:	b40f      	push	{r0, r1, r2, r3}
   83bb2:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   83bb4:	4909      	ldr	r1, [pc, #36]	; (83bdc <_menuEtatPorte1+0x2c>)
   83bb6:	2067      	movs	r0, #103	; 0x67
   83bb8:	4b09      	ldr	r3, [pc, #36]	; (83be0 <_menuEtatPorte1+0x30>)
   83bba:	4798      	blx	r3
		LcdPutstr("                     ", 3, 0);
   83bbc:	2300      	movs	r3, #0
   83bbe:	2203      	movs	r2, #3
   83bc0:	4908      	ldr	r1, [pc, #32]	; (83be4 <_menuEtatPorte1+0x34>)
   83bc2:	2068      	movs	r0, #104	; 0x68
   83bc4:	4c08      	ldr	r4, [pc, #32]	; (83be8 <_menuEtatPorte1+0x38>)
   83bc6:	47a0      	blx	r4
		LcdPutstr("ETAT PORTE 1",3,0);
   83bc8:	2300      	movs	r3, #0
   83bca:	2203      	movs	r2, #3
   83bcc:	4907      	ldr	r1, [pc, #28]	; (83bec <_menuEtatPorte1+0x3c>)
   83bce:	2068      	movs	r0, #104	; 0x68
   83bd0:	47a0      	blx	r4
		break;
	}

	return 0;
}
   83bd2:	2000      	movs	r0, #0
   83bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83bd8:	b004      	add	sp, #16
   83bda:	4770      	bx	lr
   83bdc:	0008ad58 	.word	0x0008ad58
   83be0:	00083495 	.word	0x00083495
   83be4:	0008ad74 	.word	0x0008ad74
   83be8:	00081579 	.word	0x00081579
   83bec:	0008ad3c 	.word	0x0008ad3c

00083bf0 <_menuEtatPorte2>:

uint32_t _menuEtatPorte2(uint32_t sc, ...)
{
   83bf0:	b40f      	push	{r0, r1, r2, r3}
   83bf2:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   83bf4:	4909      	ldr	r1, [pc, #36]	; (83c1c <_menuEtatPorte2+0x2c>)
   83bf6:	2067      	movs	r0, #103	; 0x67
   83bf8:	4b09      	ldr	r3, [pc, #36]	; (83c20 <_menuEtatPorte2+0x30>)
   83bfa:	4798      	blx	r3
		LcdPutstr("                     ", 3, 0);
   83bfc:	2300      	movs	r3, #0
   83bfe:	2203      	movs	r2, #3
   83c00:	4908      	ldr	r1, [pc, #32]	; (83c24 <_menuEtatPorte2+0x34>)
   83c02:	2068      	movs	r0, #104	; 0x68
   83c04:	4c08      	ldr	r4, [pc, #32]	; (83c28 <_menuEtatPorte2+0x38>)
   83c06:	47a0      	blx	r4
		LcdPutstr("ETAT PORTE 1",3,0);
   83c08:	2300      	movs	r3, #0
   83c0a:	2203      	movs	r2, #3
   83c0c:	4907      	ldr	r1, [pc, #28]	; (83c2c <_menuEtatPorte2+0x3c>)
   83c0e:	2068      	movs	r0, #104	; 0x68
   83c10:	47a0      	blx	r4
		break;
	}

	return 0;
}
   83c12:	2000      	movs	r0, #0
   83c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83c18:	b004      	add	sp, #16
   83c1a:	4770      	bx	lr
   83c1c:	0008ad58 	.word	0x0008ad58
   83c20:	00083495 	.word	0x00083495
   83c24:	0008ad74 	.word	0x0008ad74
   83c28:	00081579 	.word	0x00081579
   83c2c:	0008ad3c 	.word	0x0008ad3c

00083c30 <_menuEtatPortes>:

uint32_t _menuEtatPortes(uint32_t sc, ...)
{
   83c30:	b40f      	push	{r0, r1, r2, r3}
   83c32:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   83c34:	4909      	ldr	r1, [pc, #36]	; (83c5c <_menuEtatPortes+0x2c>)
   83c36:	2067      	movs	r0, #103	; 0x67
   83c38:	4b09      	ldr	r3, [pc, #36]	; (83c60 <_menuEtatPortes+0x30>)
   83c3a:	4798      	blx	r3
		LcdPutstr("                     ", 3, 0);
   83c3c:	2300      	movs	r3, #0
   83c3e:	2203      	movs	r2, #3
   83c40:	4908      	ldr	r1, [pc, #32]	; (83c64 <_menuEtatPortes+0x34>)
   83c42:	2068      	movs	r0, #104	; 0x68
   83c44:	4c08      	ldr	r4, [pc, #32]	; (83c68 <_menuEtatPortes+0x38>)
   83c46:	47a0      	blx	r4
		LcdPutstr("ETAT PORTES",3,0);
   83c48:	2300      	movs	r3, #0
   83c4a:	2203      	movs	r2, #3
   83c4c:	4907      	ldr	r1, [pc, #28]	; (83c6c <_menuEtatPortes+0x3c>)
   83c4e:	2068      	movs	r0, #104	; 0x68
   83c50:	47a0      	blx	r4
		break;
	}

	return 0;
   83c52:	2000      	movs	r0, #0
   83c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83c58:	b004      	add	sp, #16
   83c5a:	4770      	bx	lr
   83c5c:	0008ad58 	.word	0x0008ad58
   83c60:	00083495 	.word	0x00083495
   83c64:	0008ad74 	.word	0x0008ad74
   83c68:	00081579 	.word	0x00081579
   83c6c:	0008ad4c 	.word	0x0008ad4c

00083c70 <Menu>:
{
   83c70:	b40f      	push	{r0, r1, r2, r3}
   83c72:	b570      	push	{r4, r5, r6, lr}
   83c74:	b082      	sub	sp, #8
   83c76:	9906      	ldr	r1, [sp, #24]
	switch(sc)
   83c78:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   83c7c:	2b07      	cmp	r3, #7
   83c7e:	f200 80bf 	bhi.w	83e00 <Menu+0x190>
   83c82:	e8df f013 	tbh	[pc, r3, lsl #1]
   83c86:	0008      	.short	0x0008
   83c88:	0072005e 	.word	0x0072005e
   83c8c:	00bd0095 	.word	0x00bd0095
   83c90:	00bd00a7 	.word	0x00bd00a7
   83c94:	0058      	.short	0x0058
			Putstr("\r\nMENU_NEW\r\n");
   83c96:	495c      	ldr	r1, [pc, #368]	; (83e08 <Menu+0x198>)
   83c98:	2067      	movs	r0, #103	; 0x67
   83c9a:	4b5c      	ldr	r3, [pc, #368]	; (83e0c <Menu+0x19c>)
   83c9c:	4798      	blx	r3
			pio_set_input(PIOA, PIN_BUTTON_SWITCH, PIO_PULLUP); //A0 (Bouton Gauche)
   83c9e:	4c5c      	ldr	r4, [pc, #368]	; (83e10 <Menu+0x1a0>)
   83ca0:	2201      	movs	r2, #1
   83ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   83ca6:	4620      	mov	r0, r4
   83ca8:	4e5a      	ldr	r6, [pc, #360]	; (83e14 <Menu+0x1a4>)
   83caa:	47b0      	blx	r6
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_SWITCH, PIO_IT_FALL_EDGE, ButtonSwitch_ISR_Handler);
   83cac:	4b5a      	ldr	r3, [pc, #360]	; (83e18 <Menu+0x1a8>)
   83cae:	9300      	str	r3, [sp, #0]
   83cb0:	2350      	movs	r3, #80	; 0x50
   83cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83cb6:	210a      	movs	r1, #10
   83cb8:	4620      	mov	r0, r4
   83cba:	4d58      	ldr	r5, [pc, #352]	; (83e1c <Menu+0x1ac>)
   83cbc:	47a8      	blx	r5
			pio_set_input(PIOA, PIN_BUTTON_SELECT, PIO_PULLUP); //A1 (Bouton Milieu)
   83cbe:	2201      	movs	r2, #1
   83cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
   83cc4:	4620      	mov	r0, r4
   83cc6:	47b0      	blx	r6
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_SELECT, PIO_IT_FALL_EDGE, ButtonSelect_ISR_Handler);
   83cc8:	4b55      	ldr	r3, [pc, #340]	; (83e20 <Menu+0x1b0>)
   83cca:	9300      	str	r3, [sp, #0]
   83ccc:	2350      	movs	r3, #80	; 0x50
   83cce:	f44f 7200 	mov.w	r2, #512	; 0x200
   83cd2:	210a      	movs	r1, #10
   83cd4:	4620      	mov	r0, r4
   83cd6:	47a8      	blx	r5
			pio_set_input(PIOA, PIN_BUTTON_CLEAR, PIO_PULLUP); //A1 (Bouton Droite)
   83cd8:	2201      	movs	r2, #1
   83cda:	f44f 7180 	mov.w	r1, #256	; 0x100
   83cde:	4620      	mov	r0, r4
   83ce0:	47b0      	blx	r6
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_CLEAR, PIO_IT_FALL_EDGE, ButtonClear_ISR_Handler);
   83ce2:	4b50      	ldr	r3, [pc, #320]	; (83e24 <Menu+0x1b4>)
   83ce4:	9300      	str	r3, [sp, #0]
   83ce6:	2350      	movs	r3, #80	; 0x50
   83ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
   83cec:	210a      	movs	r1, #10
   83cee:	4620      	mov	r0, r4
   83cf0:	47a8      	blx	r5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83cf2:	4b4d      	ldr	r3, [pc, #308]	; (83e28 <Menu+0x1b8>)
   83cf4:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83cf8:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83cfc:	601d      	str	r5, [r3, #0]
			pio_get_interrupt_status(PIOA);
   83cfe:	4620      	mov	r0, r4
   83d00:	4b4a      	ldr	r3, [pc, #296]	; (83e2c <Menu+0x1bc>)
   83d02:	4798      	blx	r3
			pio_enable_interrupt(PIOA, PIN_BUTTON_SWITCH);
   83d04:	4629      	mov	r1, r5
   83d06:	4620      	mov	r0, r4
   83d08:	4d49      	ldr	r5, [pc, #292]	; (83e30 <Menu+0x1c0>)
   83d0a:	47a8      	blx	r5
			pio_enable_interrupt(PIOA, PIN_BUTTON_SELECT);
   83d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
   83d10:	4620      	mov	r0, r4
   83d12:	47a8      	blx	r5
			pio_enable_interrupt(PIOA, PIN_BUTTON_CLEAR);
   83d14:	f44f 7180 	mov.w	r1, #256	; 0x100
   83d18:	4620      	mov	r0, r4
   83d1a:	47a8      	blx	r5
			stackNew(&menuStack, menus, MENU_DEPTH_VALUE, MENU_ELEM_SIZE);
   83d1c:	2308      	movs	r3, #8
   83d1e:	9300      	str	r3, [sp, #0]
   83d20:	230a      	movs	r3, #10
   83d22:	4a44      	ldr	r2, [pc, #272]	; (83e34 <Menu+0x1c4>)
   83d24:	4944      	ldr	r1, [pc, #272]	; (83e38 <Menu+0x1c8>)
   83d26:	2064      	movs	r0, #100	; 0x64
   83d28:	4c44      	ldr	r4, [pc, #272]	; (83e3c <Menu+0x1cc>)
   83d2a:	47a0      	blx	r4
			menuElem.iIndexMenu = 0;
   83d2c:	4b44      	ldr	r3, [pc, #272]	; (83e40 <Menu+0x1d0>)
   83d2e:	2200      	movs	r2, #0
   83d30:	601a      	str	r2, [r3, #0]
			menuElem.pCurrentMenu = _mainMenu;
   83d32:	4a44      	ldr	r2, [pc, #272]	; (83e44 <Menu+0x1d4>)
   83d34:	605a      	str	r2, [r3, #4]
}
   83d36:	2000      	movs	r0, #0
   83d38:	b002      	add	sp, #8
   83d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   83d3e:	b004      	add	sp, #16
   83d40:	4770      	bx	lr
			ServicesBufferPush(WRITE_SINGLE_COIL);
   83d42:	2105      	movs	r1, #5
   83d44:	2066      	movs	r0, #102	; 0x66
   83d46:	4b40      	ldr	r3, [pc, #256]	; (83e48 <Menu+0x1d8>)
   83d48:	4798      	blx	r3
			menuElem.iIndexMenu++;
   83d4a:	4a3d      	ldr	r2, [pc, #244]	; (83e40 <Menu+0x1d0>)
   83d4c:	6813      	ldr	r3, [r2, #0]
   83d4e:	3301      	adds	r3, #1
   83d50:	6013      	str	r3, [r2, #0]
			if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuLabel == NULL) menuElem.iIndexMenu = 0;
   83d52:	6852      	ldr	r2, [r2, #4]
   83d54:	011b      	lsls	r3, r3, #4
   83d56:	58d3      	ldr	r3, [r2, r3]
   83d58:	b11b      	cbz	r3, 83d62 <Menu+0xf2>
			Menu(MENU_PROMPT);
   83d5a:	2069      	movs	r0, #105	; 0x69
   83d5c:	f7ff ff88 	bl	83c70 <Menu>
			break;
   83d60:	e7e9      	b.n	83d36 <Menu+0xc6>
			if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuLabel == NULL) menuElem.iIndexMenu = 0;
   83d62:	2200      	movs	r2, #0
   83d64:	4b36      	ldr	r3, [pc, #216]	; (83e40 <Menu+0x1d0>)
   83d66:	601a      	str	r2, [r3, #0]
   83d68:	e7f7      	b.n	83d5a <Menu+0xea>
			ServicesBufferPush(READ_COILS);
   83d6a:	2101      	movs	r1, #1
   83d6c:	2066      	movs	r0, #102	; 0x66
   83d6e:	4b36      	ldr	r3, [pc, #216]	; (83e48 <Menu+0x1d8>)
   83d70:	4798      	blx	r3
			if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuFunc)
   83d72:	4a33      	ldr	r2, [pc, #204]	; (83e40 <Menu+0x1d0>)
   83d74:	6811      	ldr	r1, [r2, #0]
   83d76:	6853      	ldr	r3, [r2, #4]
   83d78:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   83d7c:	68da      	ldr	r2, [r3, #12]
   83d7e:	b112      	cbz	r2, 83d86 <Menu+0x116>
				menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuFunc(0);
   83d80:	2000      	movs	r0, #0
   83d82:	4790      	blx	r2
   83d84:	e7d7      	b.n	83d36 <Menu+0xc6>
			else if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pSubMenu)
   83d86:	689b      	ldr	r3, [r3, #8]
   83d88:	2b00      	cmp	r3, #0
   83d8a:	d0d4      	beq.n	83d36 <Menu+0xc6>
				stackPush(&menuStack, &menuElem);
   83d8c:	4c2c      	ldr	r4, [pc, #176]	; (83e40 <Menu+0x1d0>)
   83d8e:	4622      	mov	r2, r4
   83d90:	4929      	ldr	r1, [pc, #164]	; (83e38 <Menu+0x1c8>)
   83d92:	2066      	movs	r0, #102	; 0x66
   83d94:	4b29      	ldr	r3, [pc, #164]	; (83e3c <Menu+0x1cc>)
   83d96:	4798      	blx	r3
				menuElem.pCurrentMenu = menuElem.pCurrentMenu[menuElem.iIndexMenu].pSubMenu;
   83d98:	6822      	ldr	r2, [r4, #0]
   83d9a:	6863      	ldr	r3, [r4, #4]
   83d9c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   83da0:	689b      	ldr	r3, [r3, #8]
   83da2:	6063      	str	r3, [r4, #4]
				menuElem.iIndexMenu = 0;
   83da4:	2300      	movs	r3, #0
   83da6:	6023      	str	r3, [r4, #0]
				Menu(MENU_PROMPT);
   83da8:	2069      	movs	r0, #105	; 0x69
   83daa:	f7ff ff61 	bl	83c70 <Menu>
   83dae:	e7c2      	b.n	83d36 <Menu+0xc6>
			if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pParentMenu)
   83db0:	4a23      	ldr	r2, [pc, #140]	; (83e40 <Menu+0x1d0>)
   83db2:	6811      	ldr	r1, [r2, #0]
   83db4:	6853      	ldr	r3, [r2, #4]
   83db6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   83dba:	685b      	ldr	r3, [r3, #4]
   83dbc:	b133      	cbz	r3, 83dcc <Menu+0x15c>
				stackPop(&menuStack, &menuElem);
   83dbe:	491e      	ldr	r1, [pc, #120]	; (83e38 <Menu+0x1c8>)
   83dc0:	2067      	movs	r0, #103	; 0x67
   83dc2:	4b1e      	ldr	r3, [pc, #120]	; (83e3c <Menu+0x1cc>)
   83dc4:	4798      	blx	r3
				Menu(MENU_PROMPT);
   83dc6:	2069      	movs	r0, #105	; 0x69
   83dc8:	f7ff ff52 	bl	83c70 <Menu>
			Modbus(MODBUS_SLAVE_SEND);
   83dcc:	206e      	movs	r0, #110	; 0x6e
   83dce:	4b1f      	ldr	r3, [pc, #124]	; (83e4c <Menu+0x1dc>)
   83dd0:	4798      	blx	r3
			break;
   83dd2:	e7b0      	b.n	83d36 <Menu+0xc6>
			LcdPutstr("                    ", 2, 0);
   83dd4:	2300      	movs	r3, #0
   83dd6:	2202      	movs	r2, #2
   83dd8:	491d      	ldr	r1, [pc, #116]	; (83e50 <Menu+0x1e0>)
   83dda:	2068      	movs	r0, #104	; 0x68
   83ddc:	4c1d      	ldr	r4, [pc, #116]	; (83e54 <Menu+0x1e4>)
   83dde:	47a0      	blx	r4
			LcdPutstr((menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuLabel),2,LcdFindHalf(strlen(menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuLabel)));
   83de0:	4a17      	ldr	r2, [pc, #92]	; (83e40 <Menu+0x1d0>)
   83de2:	6813      	ldr	r3, [r2, #0]
   83de4:	6852      	ldr	r2, [r2, #4]
   83de6:	011b      	lsls	r3, r3, #4
   83de8:	58d5      	ldr	r5, [r2, r3]
   83dea:	4628      	mov	r0, r5
   83dec:	4b1a      	ldr	r3, [pc, #104]	; (83e58 <Menu+0x1e8>)
   83dee:	4798      	blx	r3
   83df0:	4b1a      	ldr	r3, [pc, #104]	; (83e5c <Menu+0x1ec>)
   83df2:	4798      	blx	r3
   83df4:	4603      	mov	r3, r0
   83df6:	2202      	movs	r2, #2
   83df8:	4629      	mov	r1, r5
   83dfa:	2068      	movs	r0, #104	; 0x68
   83dfc:	47a0      	blx	r4
			break;
   83dfe:	e79a      	b.n	83d36 <Menu+0xc6>
			Error(ERROR_MENU_SWITCH_BAD_SC, sc);
   83e00:	2011      	movs	r0, #17
   83e02:	4b17      	ldr	r3, [pc, #92]	; (83e60 <Menu+0x1f0>)
   83e04:	4798      	blx	r3
   83e06:	e796      	b.n	83d36 <Menu+0xc6>
   83e08:	0008ac84 	.word	0x0008ac84
   83e0c:	00083495 	.word	0x00083495
   83e10:	400e0c00 	.word	0x400e0c00
   83e14:	000840dd 	.word	0x000840dd
   83e18:	00083e65 	.word	0x00083e65
   83e1c:	00080279 	.word	0x00080279
   83e20:	00083e85 	.word	0x00083e85
   83e24:	00083ea5 	.word	0x00083ea5
   83e28:	e000e100 	.word	0xe000e100
   83e2c:	00084167 	.word	0x00084167
   83e30:	00084163 	.word	0x00084163
   83e34:	20002988 	.word	0x20002988
   83e38:	200029d8 	.word	0x200029d8
   83e3c:	00083725 	.word	0x00083725
   83e40:	200029e8 	.word	0x200029e8
   83e44:	0008acec 	.word	0x0008acec
   83e48:	00081121 	.word	0x00081121
   83e4c:	000819d1 	.word	0x000819d1
   83e50:	0008ac94 	.word	0x0008ac94
   83e54:	00081579 	.word	0x00081579
   83e58:	00085171 	.word	0x00085171
   83e5c:	000819a9 	.word	0x000819a9
   83e60:	00080f15 	.word	0x00080f15

00083e64 <ButtonSwitch_ISR_Handler>:
{
   83e64:	b510      	push	{r4, lr}
   83e66:	b082      	sub	sp, #8
	PushTask(Menu, MENU_SWITCH_BUTTON,0,0);
   83e68:	2300      	movs	r3, #0
   83e6a:	9300      	str	r3, [sp, #0]
   83e6c:	2265      	movs	r2, #101	; 0x65
   83e6e:	4903      	ldr	r1, [pc, #12]	; (83e7c <ButtonSwitch_ISR_Handler+0x18>)
   83e70:	2066      	movs	r0, #102	; 0x66
   83e72:	4c03      	ldr	r4, [pc, #12]	; (83e80 <ButtonSwitch_ISR_Handler+0x1c>)
   83e74:	47a0      	blx	r4
}
   83e76:	b002      	add	sp, #8
   83e78:	bd10      	pop	{r4, pc}
   83e7a:	bf00      	nop
   83e7c:	00083c71 	.word	0x00083c71
   83e80:	00083829 	.word	0x00083829

00083e84 <ButtonSelect_ISR_Handler>:
{
   83e84:	b510      	push	{r4, lr}
   83e86:	b082      	sub	sp, #8
	PushTask(Menu, MENU_SELECT_BUTTON,0,0);
   83e88:	2300      	movs	r3, #0
   83e8a:	9300      	str	r3, [sp, #0]
   83e8c:	2266      	movs	r2, #102	; 0x66
   83e8e:	4903      	ldr	r1, [pc, #12]	; (83e9c <ButtonSelect_ISR_Handler+0x18>)
   83e90:	4610      	mov	r0, r2
   83e92:	4c03      	ldr	r4, [pc, #12]	; (83ea0 <ButtonSelect_ISR_Handler+0x1c>)
   83e94:	47a0      	blx	r4
}
   83e96:	b002      	add	sp, #8
   83e98:	bd10      	pop	{r4, pc}
   83e9a:	bf00      	nop
   83e9c:	00083c71 	.word	0x00083c71
   83ea0:	00083829 	.word	0x00083829

00083ea4 <ButtonClear_ISR_Handler>:
{
   83ea4:	b510      	push	{r4, lr}
   83ea6:	b082      	sub	sp, #8
	PushTask(Menu, MENU_CLEAR_BUTTON,0,0);
   83ea8:	2300      	movs	r3, #0
   83eaa:	9300      	str	r3, [sp, #0]
   83eac:	2267      	movs	r2, #103	; 0x67
   83eae:	4903      	ldr	r1, [pc, #12]	; (83ebc <ButtonClear_ISR_Handler+0x18>)
   83eb0:	2066      	movs	r0, #102	; 0x66
   83eb2:	4c03      	ldr	r4, [pc, #12]	; (83ec0 <ButtonClear_ISR_Handler+0x1c>)
   83eb4:	47a0      	blx	r4
}
   83eb6:	b002      	add	sp, #8
   83eb8:	bd10      	pop	{r4, pc}
   83eba:	bf00      	nop
   83ebc:	00083c71 	.word	0x00083c71
   83ec0:	00083829 	.word	0x00083829

00083ec4 <Module>:
	0xFF,
	0xFFFF
};

uint32_t Module(uint32_t sc,...)
{
   83ec4:	b40f      	push	{r0, r1, r2, r3}
   83ec6:	b570      	push	{r4, r5, r6, lr}
	switch(sc)
   83ec8:	9904      	ldr	r1, [sp, #16]
   83eca:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   83ece:	2b05      	cmp	r3, #5
   83ed0:	d85b      	bhi.n	83f8a <Module+0xc6>
   83ed2:	e8df f003 	tbb	[pc, r3]
   83ed6:	5a03      	.short	0x5a03
   83ed8:	1d58554d 	.word	0x1d58554d
	{
	case MODULE_NEW:
		Putstr("\r\n\t MODULE NEW!!!\r\n");
   83edc:	492d      	ldr	r1, [pc, #180]	; (83f94 <Module+0xd0>)
   83ede:	2067      	movs	r0, #103	; 0x67
   83ee0:	4c2d      	ldr	r4, [pc, #180]	; (83f98 <Module+0xd4>)
   83ee2:	47a0      	blx	r4
#define _crc					sc
#ifdef MASTER
		Putstr("\r\n\t IFDEF MASTER!!!\r\n");
   83ee4:	492d      	ldr	r1, [pc, #180]	; (83f9c <Module+0xd8>)
   83ee6:	2067      	movs	r0, #103	; 0x67
   83ee8:	47a0      	blx	r4
		_crc = CRC16MODBUSbyte((moduleIdentification.modbusModuleAddr = 0x00), 0xFFFF);
   83eea:	4d2d      	ldr	r5, [pc, #180]	; (83fa0 <Module+0xdc>)
   83eec:	2400      	movs	r4, #0
   83eee:	702c      	strb	r4, [r5, #0]
   83ef0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   83ef4:	4620      	mov	r0, r4
   83ef6:	4e2b      	ldr	r6, [pc, #172]	; (83fa4 <Module+0xe0>)
   83ef8:	47b0      	blx	r6
		//Putstr(buf);
#else
		Putstr("\r\n\t ELSE!!!\r\n");
		_crc = CRC16MODBUSbyte((moduleIdentification.modbusModuleAddr = 0x20), 0xFFFF);
#endif
		_crc = CRC16MODBUSbyte((moduleIdentification.moduleSerialNumber =  0xFF), _crc);
   83efa:	23ff      	movs	r3, #255	; 0xff
   83efc:	706b      	strb	r3, [r5, #1]
   83efe:	4601      	mov	r1, r0
   83f00:	4618      	mov	r0, r3
   83f02:	47b0      	blx	r6
		moduleIdentification.moduleCRC = _crc;
   83f04:	8068      	strh	r0, [r5, #2]

	default:
		Error(ERROR_MODULE_SWITCH_BAD_SC, sc);
	}

	return 0;
   83f06:	4620      	mov	r0, r4
   83f08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   83f0c:	b004      	add	sp, #16
   83f0e:	4770      	bx	lr
		_crc = CRC16MODBUSbyte((moduleIdentification.modbusModuleAddr = _modbusModuleAddr), 0xFFFF);
   83f10:	f89d 0014 	ldrb.w	r0, [sp, #20]
   83f14:	4c22      	ldr	r4, [pc, #136]	; (83fa0 <Module+0xdc>)
   83f16:	7020      	strb	r0, [r4, #0]
   83f18:	f64f 71ff 	movw	r1, #65535	; 0xffff
   83f1c:	4d21      	ldr	r5, [pc, #132]	; (83fa4 <Module+0xe0>)
   83f1e:	47a8      	blx	r5
		_crc = CRC16MODBUSbyte((moduleIdentification.moduleSerialNumber =  _pModuleSerialNumber), _crc);
   83f20:	f89d 3018 	ldrb.w	r3, [sp, #24]
   83f24:	7063      	strb	r3, [r4, #1]
   83f26:	4601      	mov	r1, r0
   83f28:	4618      	mov	r0, r3
   83f2a:	47a8      	blx	r5
		moduleIdentification.moduleCRC = _crc;
   83f2c:	8060      	strh	r0, [r4, #2]
		sprintf(buf, "\r\n\tMODULE ADRESSE: %X\tSERIAL NUMBER: %X", moduleIdentification.modbusModuleAddr, moduleIdentification.moduleSerialNumber);
   83f2e:	4d1e      	ldr	r5, [pc, #120]	; (83fa8 <Module+0xe4>)
   83f30:	7863      	ldrb	r3, [r4, #1]
   83f32:	7822      	ldrb	r2, [r4, #0]
   83f34:	491d      	ldr	r1, [pc, #116]	; (83fac <Module+0xe8>)
   83f36:	4628      	mov	r0, r5
   83f38:	4e1d      	ldr	r6, [pc, #116]	; (83fb0 <Module+0xec>)
   83f3a:	47b0      	blx	r6
		Putstr(buf);
   83f3c:	4629      	mov	r1, r5
   83f3e:	2067      	movs	r0, #103	; 0x67
   83f40:	4b15      	ldr	r3, [pc, #84]	; (83f98 <Module+0xd4>)
   83f42:	4798      	blx	r3
		sprintf(buf, "MODULE ADRESSE: %X", moduleIdentification.modbusModuleAddr);
   83f44:	7822      	ldrb	r2, [r4, #0]
   83f46:	491b      	ldr	r1, [pc, #108]	; (83fb4 <Module+0xf0>)
   83f48:	4628      	mov	r0, r5
   83f4a:	47b0      	blx	r6
		LcdPutstr("                    ", 3, 0);
   83f4c:	2300      	movs	r3, #0
   83f4e:	2203      	movs	r2, #3
   83f50:	4919      	ldr	r1, [pc, #100]	; (83fb8 <Module+0xf4>)
   83f52:	2068      	movs	r0, #104	; 0x68
   83f54:	4c19      	ldr	r4, [pc, #100]	; (83fbc <Module+0xf8>)
   83f56:	47a0      	blx	r4
		LcdPutstr(buf, 3, LcdFindHalf(strlen(buf)));
   83f58:	4628      	mov	r0, r5
   83f5a:	4b19      	ldr	r3, [pc, #100]	; (83fc0 <Module+0xfc>)
   83f5c:	4798      	blx	r3
   83f5e:	4b19      	ldr	r3, [pc, #100]	; (83fc4 <Module+0x100>)
   83f60:	4798      	blx	r3
   83f62:	4603      	mov	r3, r0
   83f64:	2203      	movs	r2, #3
   83f66:	4629      	mov	r1, r5
   83f68:	2068      	movs	r0, #104	; 0x68
   83f6a:	47a0      	blx	r4
	return 0;
   83f6c:	2000      	movs	r0, #0
		break;
   83f6e:	e7cb      	b.n	83f08 <Module+0x44>
		return (moduleIdentification.moduleCRC != 0xFFFF);
   83f70:	4b0b      	ldr	r3, [pc, #44]	; (83fa0 <Module+0xdc>)
   83f72:	8858      	ldrh	r0, [r3, #2]
   83f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
   83f78:	1ac0      	subs	r0, r0, r3
   83f7a:	bf18      	it	ne
   83f7c:	2001      	movne	r0, #1
   83f7e:	e7c3      	b.n	83f08 <Module+0x44>
		return (uint32_t)moduleIdentification.modbusModuleAddr;
   83f80:	4b07      	ldr	r3, [pc, #28]	; (83fa0 <Module+0xdc>)
   83f82:	7818      	ldrb	r0, [r3, #0]
   83f84:	e7c0      	b.n	83f08 <Module+0x44>
		return (uint32_t)&moduleIdentification.moduleSerialNumber;
   83f86:	4810      	ldr	r0, [pc, #64]	; (83fc8 <Module+0x104>)
   83f88:	e7be      	b.n	83f08 <Module+0x44>
		Error(ERROR_MODULE_SWITCH_BAD_SC, sc);
   83f8a:	2013      	movs	r0, #19
   83f8c:	4b0f      	ldr	r3, [pc, #60]	; (83fcc <Module+0x108>)
   83f8e:	4798      	blx	r3
	return 0;
   83f90:	2000      	movs	r0, #0
   83f92:	e7b9      	b.n	83f08 <Module+0x44>
   83f94:	0008ae9c 	.word	0x0008ae9c
   83f98:	00083495 	.word	0x00083495
   83f9c:	0008aeb0 	.word	0x0008aeb0
   83fa0:	20000624 	.word	0x20000624
   83fa4:	00080edd 	.word	0x00080edd
   83fa8:	20001a14 	.word	0x20001a14
   83fac:	0008aec8 	.word	0x0008aec8
   83fb0:	00085125 	.word	0x00085125
   83fb4:	0008aef0 	.word	0x0008aef0
   83fb8:	0008ac94 	.word	0x0008ac94
   83fbc:	00081579 	.word	0x00081579
   83fc0:	00085171 	.word	0x00085171
   83fc4:	000819a9 	.word	0x000819a9
   83fc8:	20000625 	.word	0x20000625
   83fcc:	00080f15 	.word	0x00080f15

00083fd0 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   83fd0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83fd2:	4812      	ldr	r0, [pc, #72]	; (8401c <sysclk_init+0x4c>)
   83fd4:	4b12      	ldr	r3, [pc, #72]	; (84020 <sysclk_init+0x50>)
   83fd6:	4798      	blx	r3
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83fd8:	203e      	movs	r0, #62	; 0x3e
   83fda:	4b12      	ldr	r3, [pc, #72]	; (84024 <sysclk_init+0x54>)
   83fdc:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   83fde:	4c12      	ldr	r4, [pc, #72]	; (84028 <sysclk_init+0x58>)
   83fe0:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   83fe2:	2800      	cmp	r0, #0
   83fe4:	d0fc      	beq.n	83fe0 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   83fe6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   83fea:	4b10      	ldr	r3, [pc, #64]	; (8402c <sysclk_init+0x5c>)
   83fec:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   83fee:	4c10      	ldr	r4, [pc, #64]	; (84030 <sysclk_init+0x60>)
   83ff0:	47a0      	blx	r4
   83ff2:	2800      	cmp	r0, #0
   83ff4:	d0fc      	beq.n	83ff0 <sysclk_init+0x20>
		uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   83ff6:	4b0f      	ldr	r3, [pc, #60]	; (84034 <sysclk_init+0x64>)
   83ff8:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83ffa:	4a0f      	ldr	r2, [pc, #60]	; (84038 <sysclk_init+0x68>)
   83ffc:	4b0f      	ldr	r3, [pc, #60]	; (8403c <sysclk_init+0x6c>)
   83ffe:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   84000:	4c0f      	ldr	r4, [pc, #60]	; (84040 <sysclk_init+0x70>)
   84002:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   84004:	2800      	cmp	r0, #0
   84006:	d0fc      	beq.n	84002 <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   84008:	2010      	movs	r0, #16
   8400a:	4b0e      	ldr	r3, [pc, #56]	; (84044 <sysclk_init+0x74>)
   8400c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8400e:	4b0e      	ldr	r3, [pc, #56]	; (84048 <sysclk_init+0x78>)
   84010:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   84012:	4802      	ldr	r0, [pc, #8]	; (8401c <sysclk_init+0x4c>)
   84014:	4b02      	ldr	r3, [pc, #8]	; (84020 <sysclk_init+0x50>)
   84016:	4798      	blx	r3
   84018:	bd10      	pop	{r4, pc}
   8401a:	bf00      	nop
   8401c:	05b8d800 	.word	0x05b8d800
   84020:	200000b5 	.word	0x200000b5
   84024:	00084359 	.word	0x00084359
   84028:	00084381 	.word	0x00084381
   8402c:	000843a1 	.word	0x000843a1
   84030:	00084391 	.word	0x00084391
   84034:	000843c1 	.word	0x000843c1
   84038:	200f3f01 	.word	0x200f3f01
   8403c:	400e0400 	.word	0x400e0400
   84040:	000843d1 	.word	0x000843d1
   84044:	000842b1 	.word	0x000842b1
   84048:	00084979 	.word	0x00084979

0008404c <chipid_read>:
 *
 * \return 0 on success.
 */
uint32_t chipid_read(Chipid *p_chipid, chipid_data_t *p_chipid_data)
{
	if (NULL == p_chipid_data) {
   8404c:	b311      	cbz	r1, 84094 <chipid_read+0x48>
		return 0xFFFFFFFF;
	}
	
	p_chipid_data->ul_version =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_VERSION_Msk) >>
   8404e:	6802      	ldr	r2, [r0, #0]
   84050:	f002 021f 	and.w	r2, r2, #31
	p_chipid_data->ul_version =
   84054:	600a      	str	r2, [r1, #0]
			CHIPID_CIDR_VERSION_Pos;
	p_chipid_data->ul_eproc =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_EPROC_Msk) >>
   84056:	6802      	ldr	r2, [r0, #0]
   84058:	f3c2 1242 	ubfx	r2, r2, #5, #3
	p_chipid_data->ul_eproc =
   8405c:	604a      	str	r2, [r1, #4]
			CHIPID_CIDR_EPROC_Pos;
	p_chipid_data->ul_nvpsiz =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPSIZ_Msk) >>
   8405e:	6802      	ldr	r2, [r0, #0]
   84060:	f3c2 2203 	ubfx	r2, r2, #8, #4
	p_chipid_data->ul_nvpsiz =
   84064:	608a      	str	r2, [r1, #8]
			CHIPID_CIDR_NVPSIZ_Pos;
	p_chipid_data->ul_nvpsiz2 =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPSIZ2_Pos) >>
   84066:	6802      	ldr	r2, [r0, #0]
	p_chipid_data->ul_nvpsiz2 =
   84068:	2200      	movs	r2, #0
   8406a:	60ca      	str	r2, [r1, #12]
			CHIPID_CIDR_NVPSIZ2_Pos;
	p_chipid_data->ul_sramsiz =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_SRAMSIZ_Msk) >>
   8406c:	6802      	ldr	r2, [r0, #0]
   8406e:	f3c2 4203 	ubfx	r2, r2, #16, #4
	p_chipid_data->ul_sramsiz =
   84072:	610a      	str	r2, [r1, #16]
			CHIPID_CIDR_SRAMSIZ_Pos;
	p_chipid_data->ul_arch =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_ARCH_Msk) >>
   84074:	6802      	ldr	r2, [r0, #0]
   84076:	f3c2 5207 	ubfx	r2, r2, #20, #8
	p_chipid_data->ul_arch =
   8407a:	614a      	str	r2, [r1, #20]
			CHIPID_CIDR_ARCH_Pos;
	p_chipid_data->ul_nvptyp =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPTYP_Msk) >>
   8407c:	6802      	ldr	r2, [r0, #0]
   8407e:	f3c2 7202 	ubfx	r2, r2, #28, #3
	p_chipid_data->ul_nvptyp =
   84082:	618a      	str	r2, [r1, #24]
			CHIPID_CIDR_NVPTYP_Pos;
	p_chipid_data->ul_extflag =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_EXT) >> 31;
   84084:	6802      	ldr	r2, [r0, #0]
   84086:	0fd2      	lsrs	r2, r2, #31
	p_chipid_data->ul_extflag =
   84088:	61ca      	str	r2, [r1, #28]
		
	if (p_chipid_data->ul_extflag) {
   8408a:	b132      	cbz	r2, 8409a <chipid_read+0x4e>
		p_chipid_data->ul_extid =
			p_chipid->CHIPID_EXID & CHIPID_EXID_EXID_Msk;
   8408c:	6842      	ldr	r2, [r0, #4]
		p_chipid_data->ul_extid =
   8408e:	620a      	str	r2, [r1, #32]
	}
	return 0;
   84090:	2000      	movs	r0, #0
   84092:	4770      	bx	lr
		return 0xFFFFFFFF;
   84094:	f04f 30ff 	mov.w	r0, #4294967295
   84098:	4770      	bx	lr
	return 0;
   8409a:	2000      	movs	r0, #0
}
   8409c:	4770      	bx	lr

0008409e <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8409e:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   840a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   840a4:	d016      	beq.n	840d4 <pio_set_peripheral+0x36>
   840a6:	d80b      	bhi.n	840c0 <pio_set_peripheral+0x22>
   840a8:	b149      	cbz	r1, 840be <pio_set_peripheral+0x20>
   840aa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   840ae:	d105      	bne.n	840bc <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   840b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   840b2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   840b4:	400b      	ands	r3, r1
   840b6:	ea23 0302 	bic.w	r3, r3, r2
   840ba:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   840bc:	6042      	str	r2, [r0, #4]
   840be:	4770      	bx	lr
	switch (ul_type) {
   840c0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   840c4:	d0fb      	beq.n	840be <pio_set_peripheral+0x20>
   840c6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   840ca:	d0f8      	beq.n	840be <pio_set_peripheral+0x20>
   840cc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   840d0:	d1f4      	bne.n	840bc <pio_set_peripheral+0x1e>
   840d2:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   840d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   840d6:	4313      	orrs	r3, r2
   840d8:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   840da:	e7ef      	b.n	840bc <pio_set_peripheral+0x1e>

000840dc <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   840dc:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   840de:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   840e2:	bf14      	ite	ne
   840e4:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   840e6:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   840e8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   840ec:	bf14      	ite	ne
   840ee:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   840f0:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   840f2:	f012 0f02 	tst.w	r2, #2
   840f6:	d107      	bne.n	84108 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   840f8:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   840fc:	bf18      	it	ne
   840fe:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   84102:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   84104:	6001      	str	r1, [r0, #0]
   84106:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   84108:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8410c:	e7f9      	b.n	84102 <pio_set_input+0x26>

0008410e <pio_set_output>:
{
   8410e:	b410      	push	{r4}
   84110:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   84112:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   84114:	b944      	cbnz	r4, 84128 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   84116:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   84118:	b143      	cbz	r3, 8412c <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   8411a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8411c:	b942      	cbnz	r2, 84130 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   8411e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   84120:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   84122:	6001      	str	r1, [r0, #0]
}
   84124:	bc10      	pop	{r4}
   84126:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   84128:	6641      	str	r1, [r0, #100]	; 0x64
   8412a:	e7f5      	b.n	84118 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8412c:	6541      	str	r1, [r0, #84]	; 0x54
   8412e:	e7f5      	b.n	8411c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   84130:	6301      	str	r1, [r0, #48]	; 0x30
   84132:	e7f5      	b.n	84120 <pio_set_output+0x12>

00084134 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   84134:	f012 0f10 	tst.w	r2, #16
   84138:	d010      	beq.n	8415c <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   8413a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8413e:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   84142:	bf14      	ite	ne
   84144:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   84148:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   8414c:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   84150:	bf14      	ite	ne
   84152:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   84156:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   8415a:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   8415c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   84160:	4770      	bx	lr

00084162 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   84162:	6401      	str	r1, [r0, #64]	; 0x40
   84164:	4770      	bx	lr

00084166 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   84166:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   84168:	4770      	bx	lr

0008416a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8416a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8416c:	4770      	bx	lr

0008416e <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8416e:	0943      	lsrs	r3, r0, #5
   84170:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84174:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84178:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   8417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8417c:	f000 001f 	and.w	r0, r0, #31
   84180:	fa23 f000 	lsr.w	r0, r3, r0
}
   84184:	f000 0001 	and.w	r0, r0, #1
   84188:	4770      	bx	lr

0008418a <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8418a:	0943      	lsrs	r3, r0, #5
   8418c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84190:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84194:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   84196:	f000 001f 	and.w	r0, r0, #31
   8419a:	2201      	movs	r2, #1
   8419c:	fa02 f000 	lsl.w	r0, r2, r0
   841a0:	6318      	str	r0, [r3, #48]	; 0x30
   841a2:	4770      	bx	lr

000841a4 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   841a4:	0943      	lsrs	r3, r0, #5
   841a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   841aa:	f203 7306 	addw	r3, r3, #1798	; 0x706
   841ae:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   841b0:	f000 001f 	and.w	r0, r0, #31
   841b4:	2201      	movs	r2, #1
   841b6:	fa02 f000 	lsl.w	r0, r2, r0
   841ba:	6358      	str	r0, [r3, #52]	; 0x34
   841bc:	4770      	bx	lr

000841be <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   841be:	0943      	lsrs	r3, r0, #5
   841c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   841c4:	f203 7306 	addw	r3, r3, #1798	; 0x706
   841c8:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   841ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
   841cc:	f000 021f 	and.w	r2, r0, #31
   841d0:	2001      	movs	r0, #1
   841d2:	4090      	lsls	r0, r2
   841d4:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   841d6:	bf14      	ite	ne
   841d8:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   841da:	6318      	streq	r0, [r3, #48]	; 0x30
   841dc:	4770      	bx	lr
	...

000841e0 <pio_configure_pin>:
{
   841e0:	b570      	push	{r4, r5, r6, lr}
   841e2:	b082      	sub	sp, #8
   841e4:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   841e6:	0943      	lsrs	r3, r0, #5
   841e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   841ec:	f203 7306 	addw	r3, r3, #1798	; 0x706
   841f0:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   841f2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   841f6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   841fa:	d031      	beq.n	84260 <pio_configure_pin+0x80>
   841fc:	d816      	bhi.n	8422c <pio_configure_pin+0x4c>
   841fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84202:	d01b      	beq.n	8423c <pio_configure_pin+0x5c>
   84204:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84208:	d116      	bne.n	84238 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8420a:	f000 001f 	and.w	r0, r0, #31
   8420e:	2601      	movs	r6, #1
   84210:	4086      	lsls	r6, r0
   84212:	4632      	mov	r2, r6
   84214:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84218:	4620      	mov	r0, r4
   8421a:	4b22      	ldr	r3, [pc, #136]	; (842a4 <pio_configure_pin+0xc4>)
   8421c:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8421e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   84222:	bf14      	ite	ne
   84224:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84226:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   84228:	2001      	movs	r0, #1
   8422a:	e017      	b.n	8425c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   8422c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84230:	d021      	beq.n	84276 <pio_configure_pin+0x96>
   84232:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84236:	d01e      	beq.n	84276 <pio_configure_pin+0x96>
		return 0;
   84238:	2000      	movs	r0, #0
   8423a:	e00f      	b.n	8425c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8423c:	f000 001f 	and.w	r0, r0, #31
   84240:	2601      	movs	r6, #1
   84242:	4086      	lsls	r6, r0
   84244:	4632      	mov	r2, r6
   84246:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8424a:	4620      	mov	r0, r4
   8424c:	4b15      	ldr	r3, [pc, #84]	; (842a4 <pio_configure_pin+0xc4>)
   8424e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   84250:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   84254:	bf14      	ite	ne
   84256:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84258:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8425a:	2001      	movs	r0, #1
}
   8425c:	b002      	add	sp, #8
   8425e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   84260:	f000 011f 	and.w	r1, r0, #31
   84264:	2601      	movs	r6, #1
   84266:	462a      	mov	r2, r5
   84268:	fa06 f101 	lsl.w	r1, r6, r1
   8426c:	4620      	mov	r0, r4
   8426e:	4b0e      	ldr	r3, [pc, #56]	; (842a8 <pio_configure_pin+0xc8>)
   84270:	4798      	blx	r3
	return 1;
   84272:	4630      	mov	r0, r6
		break;
   84274:	e7f2      	b.n	8425c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84276:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8427a:	f000 011f 	and.w	r1, r0, #31
   8427e:	2601      	movs	r6, #1
   84280:	ea05 0306 	and.w	r3, r5, r6
   84284:	9300      	str	r3, [sp, #0]
   84286:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8428a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8428e:	bf14      	ite	ne
   84290:	2200      	movne	r2, #0
   84292:	2201      	moveq	r2, #1
   84294:	fa06 f101 	lsl.w	r1, r6, r1
   84298:	4620      	mov	r0, r4
   8429a:	4c04      	ldr	r4, [pc, #16]	; (842ac <pio_configure_pin+0xcc>)
   8429c:	47a0      	blx	r4
	return 1;
   8429e:	4630      	mov	r0, r6
		break;
   842a0:	e7dc      	b.n	8425c <pio_configure_pin+0x7c>
   842a2:	bf00      	nop
   842a4:	0008409f 	.word	0x0008409f
   842a8:	000840dd 	.word	0x000840dd
   842ac:	0008410f 	.word	0x0008410f

000842b0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   842b0:	4a17      	ldr	r2, [pc, #92]	; (84310 <pmc_switch_mck_to_pllack+0x60>)
   842b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   842b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   842b8:	4318      	orrs	r0, r3
   842ba:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   842bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   842be:	f013 0f08 	tst.w	r3, #8
   842c2:	d10a      	bne.n	842da <pmc_switch_mck_to_pllack+0x2a>
   842c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   842c8:	4911      	ldr	r1, [pc, #68]	; (84310 <pmc_switch_mck_to_pllack+0x60>)
   842ca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   842cc:	f012 0f08 	tst.w	r2, #8
   842d0:	d103      	bne.n	842da <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   842d2:	3b01      	subs	r3, #1
   842d4:	d1f9      	bne.n	842ca <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   842d6:	2001      	movs	r0, #1
   842d8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   842da:	4a0d      	ldr	r2, [pc, #52]	; (84310 <pmc_switch_mck_to_pllack+0x60>)
   842dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   842de:	f023 0303 	bic.w	r3, r3, #3
   842e2:	f043 0302 	orr.w	r3, r3, #2
   842e6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   842e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   842ea:	f013 0f08 	tst.w	r3, #8
   842ee:	d10a      	bne.n	84306 <pmc_switch_mck_to_pllack+0x56>
   842f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   842f4:	4906      	ldr	r1, [pc, #24]	; (84310 <pmc_switch_mck_to_pllack+0x60>)
   842f6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   842f8:	f012 0f08 	tst.w	r2, #8
   842fc:	d105      	bne.n	8430a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   842fe:	3b01      	subs	r3, #1
   84300:	d1f9      	bne.n	842f6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   84302:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   84304:	4770      	bx	lr
	return 0;
   84306:	2000      	movs	r0, #0
   84308:	4770      	bx	lr
   8430a:	2000      	movs	r0, #0
   8430c:	4770      	bx	lr
   8430e:	bf00      	nop
   84310:	400e0400 	.word	0x400e0400

00084314 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   84314:	2801      	cmp	r0, #1
   84316:	d003      	beq.n	84320 <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   84318:	4a05      	ldr	r2, [pc, #20]	; (84330 <pmc_switch_sclk_to_32kxtal+0x1c>)
   8431a:	4b06      	ldr	r3, [pc, #24]	; (84334 <pmc_switch_sclk_to_32kxtal+0x20>)
   8431c:	601a      	str	r2, [r3, #0]
   8431e:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   84320:	4a04      	ldr	r2, [pc, #16]	; (84334 <pmc_switch_sclk_to_32kxtal+0x20>)
   84322:	6893      	ldr	r3, [r2, #8]
   84324:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   84328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8432c:	6093      	str	r3, [r2, #8]
   8432e:	e7f3      	b.n	84318 <pmc_switch_sclk_to_32kxtal+0x4>
   84330:	a5000008 	.word	0xa5000008
   84334:	400e1210 	.word	0x400e1210

00084338 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   84338:	4b05      	ldr	r3, [pc, #20]	; (84350 <pmc_osc_is_ready_32kxtal+0x18>)
   8433a:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   8433c:	f013 0f80 	tst.w	r3, #128	; 0x80
   84340:	bf1d      	ittte	ne
   84342:	4b04      	ldrne	r3, [pc, #16]	; (84354 <pmc_osc_is_ready_32kxtal+0x1c>)
   84344:	6e98      	ldrne	r0, [r3, #104]	; 0x68
   84346:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
   8434a:	2000      	moveq	r0, #0
}
   8434c:	4770      	bx	lr
   8434e:	bf00      	nop
   84350:	400e1210 	.word	0x400e1210
   84354:	400e0400 	.word	0x400e0400

00084358 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   84358:	4a08      	ldr	r2, [pc, #32]	; (8437c <pmc_osc_enable_main_xtal+0x24>)
   8435a:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   8435c:	f023 0303 	bic.w	r3, r3, #3
   84360:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84364:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   84368:	0200      	lsls	r0, r0, #8
   8436a:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8436c:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   8436e:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   84370:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84372:	f013 0f01 	tst.w	r3, #1
   84376:	d0fb      	beq.n	84370 <pmc_osc_enable_main_xtal+0x18>
}
   84378:	4770      	bx	lr
   8437a:	bf00      	nop
   8437c:	400e0400 	.word	0x400e0400

00084380 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   84380:	4b02      	ldr	r3, [pc, #8]	; (8438c <pmc_osc_is_ready_main_xtal+0xc>)
   84382:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84384:	f000 0001 	and.w	r0, r0, #1
   84388:	4770      	bx	lr
   8438a:	bf00      	nop
   8438c:	400e0400 	.word	0x400e0400

00084390 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84390:	4b02      	ldr	r3, [pc, #8]	; (8439c <pmc_osc_is_ready_mainck+0xc>)
   84392:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84394:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   84398:	4770      	bx	lr
   8439a:	bf00      	nop
   8439c:	400e0400 	.word	0x400e0400

000843a0 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   843a0:	4b06      	ldr	r3, [pc, #24]	; (843bc <pmc_mainck_osc_select+0x1c>)
   843a2:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   843a4:	b930      	cbnz	r0, 843b4 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   843a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   843aa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   843ae:	4a03      	ldr	r2, [pc, #12]	; (843bc <pmc_mainck_osc_select+0x1c>)
   843b0:	6213      	str	r3, [r2, #32]
   843b2:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   843b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   843b8:	e7f7      	b.n	843aa <pmc_mainck_osc_select+0xa>
   843ba:	bf00      	nop
   843bc:	400e0400 	.word	0x400e0400

000843c0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   843c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   843c4:	4b01      	ldr	r3, [pc, #4]	; (843cc <pmc_disable_pllack+0xc>)
   843c6:	629a      	str	r2, [r3, #40]	; 0x28
   843c8:	4770      	bx	lr
   843ca:	bf00      	nop
   843cc:	400e0400 	.word	0x400e0400

000843d0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   843d0:	4b02      	ldr	r3, [pc, #8]	; (843dc <pmc_is_locked_pllack+0xc>)
   843d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   843d4:	f000 0002 	and.w	r0, r0, #2
   843d8:	4770      	bx	lr
   843da:	bf00      	nop
   843dc:	400e0400 	.word	0x400e0400

000843e0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   843e0:	281d      	cmp	r0, #29
   843e2:	d80e      	bhi.n	84402 <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   843e4:	281f      	cmp	r0, #31
   843e6:	d80e      	bhi.n	84406 <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   843e8:	4b09      	ldr	r3, [pc, #36]	; (84410 <pmc_enable_periph_clk+0x30>)
   843ea:	699a      	ldr	r2, [r3, #24]
   843ec:	2301      	movs	r3, #1
   843ee:	4083      	lsls	r3, r0
   843f0:	4393      	bics	r3, r2
   843f2:	d00a      	beq.n	8440a <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   843f4:	2301      	movs	r3, #1
   843f6:	fa03 f000 	lsl.w	r0, r3, r0
   843fa:	4b05      	ldr	r3, [pc, #20]	; (84410 <pmc_enable_periph_clk+0x30>)
   843fc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   843fe:	2000      	movs	r0, #0
   84400:	4770      	bx	lr
		return 1;
   84402:	2001      	movs	r0, #1
   84404:	4770      	bx	lr
	return 0;
   84406:	2000      	movs	r0, #0
   84408:	4770      	bx	lr
   8440a:	2000      	movs	r0, #0
}
   8440c:	4770      	bx	lr
   8440e:	bf00      	nop
   84410:	400e0400 	.word	0x400e0400

00084414 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   84414:	b4f0      	push	{r4, r5, r6, r7}
   84416:	b08c      	sub	sp, #48	; 0x30
   84418:	4607      	mov	r7, r0
   8441a:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   8441c:	ac01      	add	r4, sp, #4
   8441e:	4d11      	ldr	r5, [pc, #68]	; (84464 <pwm_clocks_generate+0x50>)
   84420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84428:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8442c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   84430:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   84432:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   84434:	f852 0b04 	ldr.w	r0, [r2], #4
   84438:	fbb6 f0f0 	udiv	r0, r6, r0
   8443c:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   84440:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   84444:	d907      	bls.n	84456 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
   84446:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   84448:	2b0b      	cmp	r3, #11
   8444a:	d1f3      	bne.n	84434 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   8444c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   84450:	b00c      	add	sp, #48	; 0x30
   84452:	bcf0      	pop	{r4, r5, r6, r7}
   84454:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   84456:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
   84458:	bf94      	ite	ls
   8445a:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
   8445e:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
   84462:	e7f5      	b.n	84450 <pwm_clocks_generate+0x3c>
   84464:	0008af04 	.word	0x0008af04

00084468 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   84468:	b570      	push	{r4, r5, r6, lr}
   8446a:	4606      	mov	r6, r0
   8446c:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8446e:	680c      	ldr	r4, [r1, #0]
   84470:	b144      	cbz	r4, 84484 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   84472:	6889      	ldr	r1, [r1, #8]
   84474:	4620      	mov	r0, r4
   84476:	4b0c      	ldr	r3, [pc, #48]	; (844a8 <pwm_init+0x40>)
   84478:	4798      	blx	r3
   8447a:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8447c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   84480:	4298      	cmp	r0, r3
   84482:	d00c      	beq.n	8449e <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   84484:	6868      	ldr	r0, [r5, #4]
   84486:	b140      	cbz	r0, 8449a <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   84488:	68a9      	ldr	r1, [r5, #8]
   8448a:	4b07      	ldr	r3, [pc, #28]	; (844a8 <pwm_init+0x40>)
   8448c:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   8448e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   84492:	4298      	cmp	r0, r3
   84494:	d005      	beq.n	844a2 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   84496:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   8449a:	6034      	str	r4, [r6, #0]
#endif
	return 0;
   8449c:	2400      	movs	r4, #0
}
   8449e:	4620      	mov	r0, r4
   844a0:	bd70      	pop	{r4, r5, r6, pc}
			return result;
   844a2:	4604      	mov	r4, r0
   844a4:	e7fb      	b.n	8449e <pwm_init+0x36>
   844a6:	bf00      	nop
   844a8:	00084415 	.word	0x00084415

000844ac <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   844ac:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   844ae:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   844b0:	684b      	ldr	r3, [r1, #4]
   844b2:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   844b6:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   844b8:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
   844ba:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   844bc:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
   844be:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   844c0:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   844c4:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   844c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   844ca:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   844cc:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   844d0:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   844d2:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
   844d6:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   844da:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   844de:	68cb      	ldr	r3, [r1, #12]
   844e0:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   844e4:	690b      	ldr	r3, [r1, #16]
   844e6:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   844ea:	7d8b      	ldrb	r3, [r1, #22]
   844ec:	b13b      	cbz	r3, 844fe <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   844ee:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   844f0:	8b4b      	ldrh	r3, [r1, #26]
   844f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   844f6:	eb00 1442 	add.w	r4, r0, r2, lsl #5
   844fa:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   844fe:	6c85      	ldr	r5, [r0, #72]	; 0x48
   84500:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   84504:	4093      	lsls	r3, r2
   84506:	43db      	mvns	r3, r3
   84508:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   8450a:	7fcc      	ldrb	r4, [r1, #31]
   8450c:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   84510:	7f8c      	ldrb	r4, [r1, #30]
   84512:	4094      	lsls	r4, r2
   84514:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   84518:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   8451a:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   8451c:	6c44      	ldr	r4, [r0, #68]	; 0x44
   8451e:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   84520:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
   84524:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   84528:	f891 4020 	ldrb.w	r4, [r1, #32]
   8452c:	4094      	lsls	r4, r2
   8452e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   84532:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   84534:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   84536:	2301      	movs	r3, #1
   84538:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
   8453a:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   8453e:	b31c      	cbz	r4, 84588 <pwm_channel_init+0xdc>
		p_pwm->PWM_SCM |= channel;
   84540:	6a04      	ldr	r4, [r0, #32]
   84542:	431c      	orrs	r4, r3
   84544:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   84546:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8454a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8454c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8454e:	bf0c      	ite	eq
   84550:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   84552:	439c      	bicne	r4, r3
   84554:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   84556:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8455a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8455c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8455e:	bf0c      	ite	eq
   84560:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   84564:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
   84568:	6683      	str	r3, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
   8456a:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
   8456c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
   8456e:	23ff      	movs	r3, #255	; 0xff
   84570:	4093      	lsls	r3, r2
   84572:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   84576:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   8457a:	fa03 f202 	lsl.w	r2, r3, r2
   8457e:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
   84580:	66c2      	str	r2, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   84582:	2000      	movs	r0, #0
   84584:	bc70      	pop	{r4, r5, r6}
   84586:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   84588:	6a04      	ldr	r4, [r0, #32]
   8458a:	ea24 0403 	bic.w	r4, r4, r3
   8458e:	6204      	str	r4, [r0, #32]
   84590:	e7d9      	b.n	84546 <pwm_channel_init+0x9a>

00084592 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   84592:	2301      	movs	r3, #1
   84594:	fa03 f101 	lsl.w	r1, r3, r1
   84598:	6041      	str	r1, [r0, #4]
   8459a:	4770      	bx	lr

0008459c <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   8459c:	2301      	movs	r3, #1
   8459e:	fa03 f101 	lsl.w	r1, r3, r1
   845a2:	6081      	str	r1, [r0, #8]
   845a4:	4770      	bx	lr

000845a6 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
   845a6:	6201      	str	r1, [r0, #32]
   845a8:	4770      	bx	lr

000845aa <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
   845aa:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
   845ac:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   845ae:	6884      	ldr	r4, [r0, #8]
   845b0:	42a5      	cmp	r5, r4
   845b2:	d003      	beq.n	845bc <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
   845b4:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   845b6:	6884      	ldr	r4, [r0, #8]
   845b8:	42ac      	cmp	r4, r5
   845ba:	d1fb      	bne.n	845b4 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
   845bc:	b161      	cbz	r1, 845d8 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   845be:	f3c4 5001 	ubfx	r0, r4, #20, #2
   845c2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   845c6:	f3c4 4003 	ubfx	r0, r4, #16, #4
   845ca:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
   845ce:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
   845d2:	bf18      	it	ne
   845d4:	300c      	addne	r0, #12
   845d6:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
   845d8:	b142      	cbz	r2, 845ec <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
   845da:	f3c4 3102 	ubfx	r1, r4, #12, #3
   845de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   845e2:	f3c4 2003 	ubfx	r0, r4, #8, #4
   845e6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   845ea:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
   845ec:	b143      	cbz	r3, 84600 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   845ee:	f3c4 1202 	ubfx	r2, r4, #4, #3
   845f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   845f6:	f004 040f 	and.w	r4, r4, #15
   845fa:	eb04 0442 	add.w	r4, r4, r2, lsl #1
   845fe:	601c      	str	r4, [r3, #0]
	}
}
   84600:	bc30      	pop	{r4, r5}
   84602:	4770      	bx	lr

00084604 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
   84604:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
   84606:	6844      	ldr	r4, [r0, #4]
   84608:	f014 0f01 	tst.w	r4, #1
   8460c:	d005      	beq.n	8461a <rtc_set_time+0x16>
		if (ul_hour > 12) {
   8460e:	290c      	cmp	r1, #12
   84610:	d93d      	bls.n	8468e <rtc_set_time+0x8a>
			ul_hour -= 12;
   84612:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
   84614:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   84618:	e000      	b.n	8461c <rtc_set_time+0x18>
	uint32_t ul_time = 0;
   8461a:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   8461c:	4c1d      	ldr	r4, [pc, #116]	; (84694 <rtc_set_time+0x90>)
   8461e:	fba4 5603 	umull	r5, r6, r4, r3
   84622:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
   84624:	eb06 0586 	add.w	r5, r6, r6, lsl #2
   84628:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
   8462c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
   84630:	fba4 6502 	umull	r6, r5, r4, r2
   84634:	08ed      	lsrs	r5, r5, #3
   84636:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
   8463a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8463e:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
   84642:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   84646:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
   84648:	fba4 4201 	umull	r4, r2, r4, r1
   8464c:	08d2      	lsrs	r2, r2, #3
   8464e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
   84652:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   84656:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   8465a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   8465e:	6983      	ldr	r3, [r0, #24]
   84660:	f013 0f04 	tst.w	r3, #4
   84664:	d0fb      	beq.n	8465e <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
   84666:	6803      	ldr	r3, [r0, #0]
   84668:	f043 0301 	orr.w	r3, r3, #1
   8466c:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   8466e:	6983      	ldr	r3, [r0, #24]
   84670:	f013 0f01 	tst.w	r3, #1
   84674:	d0fb      	beq.n	8466e <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   84676:	2301      	movs	r3, #1
   84678:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
   8467a:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
   8467c:	6803      	ldr	r3, [r0, #0]
   8467e:	f023 0301 	bic.w	r3, r3, #1
   84682:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
   84684:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   84686:	f000 0001 	and.w	r0, r0, #1
   8468a:	bcf0      	pop	{r4, r5, r6, r7}
   8468c:	4770      	bx	lr
	uint32_t ul_time = 0;
   8468e:	2700      	movs	r7, #0
   84690:	e7c4      	b.n	8461c <rtc_set_time+0x18>
   84692:	bf00      	nop
   84694:	cccccccd 	.word	0xcccccccd

00084698 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
   84698:	b4f0      	push	{r4, r5, r6, r7}
   8469a:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
   8469c:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   8469e:	68c4      	ldr	r4, [r0, #12]
   846a0:	42a5      	cmp	r5, r4
   846a2:	d003      	beq.n	846ac <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
   846a4:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   846a6:	68c4      	ldr	r4, [r0, #12]
   846a8:	42ac      	cmp	r4, r5
   846aa:	d1fb      	bne.n	846a4 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
   846ac:	b199      	cbz	r1, 846d6 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   846ae:	f3c4 3003 	ubfx	r0, r4, #12, #4
   846b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   846b6:	f3c4 2703 	ubfx	r7, r4, #8, #4
   846ba:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   846be:	f3c4 1002 	ubfx	r0, r4, #4, #3
   846c2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   846c6:	f004 000f 	and.w	r0, r4, #15
   846ca:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   846ce:	2564      	movs	r5, #100	; 0x64
   846d0:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
   846d4:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
   846d6:	b142      	cbz	r2, 846ea <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   846d8:	f3c4 5000 	ubfx	r0, r4, #20, #1
   846dc:	0081      	lsls	r1, r0, #2
   846de:	4408      	add	r0, r1
   846e0:	f3c4 4103 	ubfx	r1, r4, #16, #4
   846e4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
   846e8:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
   846ea:	b143      	cbz	r3, 846fe <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   846ec:	f3c4 7201 	ubfx	r2, r4, #28, #2
   846f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   846f4:	f3c4 6103 	ubfx	r1, r4, #24, #4
   846f8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   846fc:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
   846fe:	b116      	cbz	r6, 84706 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
   84700:	f3c4 5442 	ubfx	r4, r4, #21, #3
   84704:	6034      	str	r4, [r6, #0]
	}
}
   84706:	bcf0      	pop	{r4, r5, r6, r7}
   84708:	4770      	bx	lr
	...

0008470c <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
   8470c:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   8470e:	4d2a      	ldr	r5, [pc, #168]	; (847b8 <rtc_set_date+0xac>)
   84710:	fba5 4603 	umull	r4, r6, r5, r3
   84714:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
   84716:	9c03      	ldr	r4, [sp, #12]
   84718:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   8471a:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
   8471e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   84722:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   84726:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
   8472a:	fba5 6402 	umull	r6, r4, r5, r2
   8472e:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   84730:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
   84734:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84738:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   8473c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
   84740:	4b1e      	ldr	r3, [pc, #120]	; (847bc <rtc_set_date+0xb0>)
   84742:	fba3 4301 	umull	r4, r3, r3, r1
   84746:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   84748:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
   8474c:	4b1c      	ldr	r3, [pc, #112]	; (847c0 <rtc_set_date+0xb4>)
   8474e:	fba3 4301 	umull	r4, r3, r3, r1
   84752:	095b      	lsrs	r3, r3, #5
   84754:	fba5 6403 	umull	r6, r4, r5, r3
   84758:	08e4      	lsrs	r4, r4, #3
   8475a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8475e:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   84762:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
   84764:	fba5 4301 	umull	r4, r3, r5, r1
   84768:	08db      	lsrs	r3, r3, #3
   8476a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   8476e:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   84772:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
   84776:	fba5 1503 	umull	r1, r5, r5, r3
   8477a:	08ed      	lsrs	r5, r5, #3
   8477c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84780:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   84784:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   84788:	6983      	ldr	r3, [r0, #24]
   8478a:	f013 0f04 	tst.w	r3, #4
   8478e:	d0fb      	beq.n	84788 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
   84790:	6803      	ldr	r3, [r0, #0]
   84792:	f043 0302 	orr.w	r3, r3, #2
   84796:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   84798:	6983      	ldr	r3, [r0, #24]
   8479a:	f013 0f01 	tst.w	r3, #1
   8479e:	d0fb      	beq.n	84798 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   847a0:	2301      	movs	r3, #1
   847a2:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
   847a4:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
   847a6:	6803      	ldr	r3, [r0, #0]
   847a8:	f023 0302 	bic.w	r3, r3, #2
   847ac:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
   847ae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   847b0:	f000 0002 	and.w	r0, r0, #2
   847b4:	bc70      	pop	{r4, r5, r6}
   847b6:	4770      	bx	lr
   847b8:	cccccccd 	.word	0xcccccccd
   847bc:	10624dd3 	.word	0x10624dd3
   847c0:	51eb851f 	.word	0x51eb851f

000847c4 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
   847c4:	61c1      	str	r1, [r0, #28]
   847c6:	4770      	bx	lr

000847c8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   847c8:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   847ca:	0189      	lsls	r1, r1, #6
   847cc:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   847ce:	2402      	movs	r4, #2
   847d0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   847d2:	f04f 31ff 	mov.w	r1, #4294967295
   847d6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   847d8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   847da:	605a      	str	r2, [r3, #4]
}
   847dc:	bc10      	pop	{r4}
   847de:	4770      	bx	lr

000847e0 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   847e0:	0189      	lsls	r1, r1, #6
   847e2:	2305      	movs	r3, #5
   847e4:	5043      	str	r3, [r0, r1]
   847e6:	4770      	bx	lr

000847e8 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   847e8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   847ec:	614a      	str	r2, [r1, #20]
   847ee:	4770      	bx	lr

000847f0 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   847f0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   847f4:	61ca      	str	r2, [r1, #28]
   847f6:	4770      	bx	lr

000847f8 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   847f8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   847fc:	624a      	str	r2, [r1, #36]	; 0x24
   847fe:	4770      	bx	lr

00084800 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   84800:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   84804:	6a08      	ldr	r0, [r1, #32]
}
   84806:	4770      	bx	lr

00084808 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   84808:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8480a:	23ac      	movs	r3, #172	; 0xac
   8480c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8480e:	680b      	ldr	r3, [r1, #0]
   84810:	684a      	ldr	r2, [r1, #4]
   84812:	fbb3 f3f2 	udiv	r3, r3, r2
   84816:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   84818:	1e5c      	subs	r4, r3, #1
   8481a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8481e:	4294      	cmp	r4, r2
   84820:	d80b      	bhi.n	8483a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   84822:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   84824:	688b      	ldr	r3, [r1, #8]
   84826:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   84828:	f240 2302 	movw	r3, #514	; 0x202
   8482c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   84830:	2350      	movs	r3, #80	; 0x50
   84832:	6003      	str	r3, [r0, #0]

	return 0;
   84834:	2000      	movs	r0, #0
}
   84836:	bc10      	pop	{r4}
   84838:	4770      	bx	lr
		return 1;
   8483a:	2001      	movs	r0, #1
   8483c:	e7fb      	b.n	84836 <uart_init+0x2e>

0008483e <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
   8483e:	6081      	str	r1, [r0, #8]
   84840:	4770      	bx	lr

00084842 <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
   84842:	60c1      	str	r1, [r0, #12]
   84844:	4770      	bx	lr

00084846 <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
   84846:	6940      	ldr	r0, [r0, #20]
}
   84848:	4770      	bx	lr

0008484a <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
   8484a:	6940      	ldr	r0, [r0, #20]
}
   8484c:	f000 0001 	and.w	r0, r0, #1
   84850:	4770      	bx	lr

00084852 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   84852:	6943      	ldr	r3, [r0, #20]
   84854:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   84858:	bf1d      	ittte	ne
   8485a:	6983      	ldrne	r3, [r0, #24]
   8485c:	700b      	strbne	r3, [r1, #0]
	return 0;
   8485e:	2000      	movne	r0, #0
		return 1;
   84860:	2001      	moveq	r0, #1
}
   84862:	4770      	bx	lr

00084864 <rstc_start_software_reset>:
		Rstc *p_rstc)
{
#if (SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST;
#else
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
   84864:	4b01      	ldr	r3, [pc, #4]	; (8486c <rstc_start_software_reset+0x8>)
   84866:	6003      	str	r3, [r0, #0]
   84868:	4770      	bx	lr
   8486a:	bf00      	nop
   8486c:	a5000005 	.word	0xa5000005

00084870 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   84870:	4770      	bx	lr
	...

00084874 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   84874:	4b0b      	ldr	r3, [pc, #44]	; (848a4 <cpu_irq_enter_critical+0x30>)
   84876:	681b      	ldr	r3, [r3, #0]
   84878:	b92b      	cbnz	r3, 84886 <cpu_irq_enter_critical+0x12>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8487a:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   8487e:	b13b      	cbz	r3, 84890 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   84880:	2200      	movs	r2, #0
   84882:	4b09      	ldr	r3, [pc, #36]	; (848a8 <cpu_irq_enter_critical+0x34>)
   84884:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   84886:	4a07      	ldr	r2, [pc, #28]	; (848a4 <cpu_irq_enter_critical+0x30>)
   84888:	6813      	ldr	r3, [r2, #0]
   8488a:	3301      	adds	r3, #1
   8488c:	6013      	str	r3, [r2, #0]
   8488e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   84890:	b672      	cpsid	i
   84892:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   84896:	2200      	movs	r2, #0
   84898:	4b04      	ldr	r3, [pc, #16]	; (848ac <cpu_irq_enter_critical+0x38>)
   8489a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   8489c:	2201      	movs	r2, #1
   8489e:	4b02      	ldr	r3, [pc, #8]	; (848a8 <cpu_irq_enter_critical+0x34>)
   848a0:	701a      	strb	r2, [r3, #0]
   848a2:	e7f0      	b.n	84886 <cpu_irq_enter_critical+0x12>
   848a4:	2000117c 	.word	0x2000117c
   848a8:	20001180 	.word	0x20001180
   848ac:	20000628 	.word	0x20000628

000848b0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   848b0:	4b07      	ldr	r3, [pc, #28]	; (848d0 <cpu_irq_leave_critical+0x20>)
   848b2:	681a      	ldr	r2, [r3, #0]
   848b4:	3a01      	subs	r2, #1
   848b6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   848b8:	681b      	ldr	r3, [r3, #0]
   848ba:	b943      	cbnz	r3, 848ce <cpu_irq_leave_critical+0x1e>
   848bc:	4b05      	ldr	r3, [pc, #20]	; (848d4 <cpu_irq_leave_critical+0x24>)
   848be:	781b      	ldrb	r3, [r3, #0]
   848c0:	b12b      	cbz	r3, 848ce <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   848c2:	2201      	movs	r2, #1
   848c4:	4b04      	ldr	r3, [pc, #16]	; (848d8 <cpu_irq_leave_critical+0x28>)
   848c6:	701a      	strb	r2, [r3, #0]
   848c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   848cc:	b662      	cpsie	i
   848ce:	4770      	bx	lr
   848d0:	2000117c 	.word	0x2000117c
   848d4:	20001180 	.word	0x20001180
   848d8:	20000628 	.word	0x20000628

000848dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   848dc:	e7fe      	b.n	848dc <Dummy_Handler>
	...

000848e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   848e0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   848e2:	4b1c      	ldr	r3, [pc, #112]	; (84954 <Reset_Handler+0x74>)
   848e4:	4a1c      	ldr	r2, [pc, #112]	; (84958 <Reset_Handler+0x78>)
   848e6:	429a      	cmp	r2, r3
   848e8:	d010      	beq.n	8490c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   848ea:	4b1c      	ldr	r3, [pc, #112]	; (8495c <Reset_Handler+0x7c>)
   848ec:	4a19      	ldr	r2, [pc, #100]	; (84954 <Reset_Handler+0x74>)
   848ee:	429a      	cmp	r2, r3
   848f0:	d20c      	bcs.n	8490c <Reset_Handler+0x2c>
   848f2:	3b01      	subs	r3, #1
   848f4:	1a9b      	subs	r3, r3, r2
   848f6:	f023 0303 	bic.w	r3, r3, #3
   848fa:	3304      	adds	r3, #4
   848fc:	4413      	add	r3, r2
   848fe:	4916      	ldr	r1, [pc, #88]	; (84958 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   84900:	f851 0b04 	ldr.w	r0, [r1], #4
   84904:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   84908:	429a      	cmp	r2, r3
   8490a:	d1f9      	bne.n	84900 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8490c:	4b14      	ldr	r3, [pc, #80]	; (84960 <Reset_Handler+0x80>)
   8490e:	4a15      	ldr	r2, [pc, #84]	; (84964 <Reset_Handler+0x84>)
   84910:	429a      	cmp	r2, r3
   84912:	d20a      	bcs.n	8492a <Reset_Handler+0x4a>
   84914:	3b01      	subs	r3, #1
   84916:	1a9b      	subs	r3, r3, r2
   84918:	f023 0303 	bic.w	r3, r3, #3
   8491c:	3304      	adds	r3, #4
   8491e:	4413      	add	r3, r2
		*pDest++ = 0;
   84920:	2100      	movs	r1, #0
   84922:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   84926:	4293      	cmp	r3, r2
   84928:	d1fb      	bne.n	84922 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8492a:	4b0f      	ldr	r3, [pc, #60]	; (84968 <Reset_Handler+0x88>)
   8492c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   84930:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84934:	490d      	ldr	r1, [pc, #52]	; (8496c <Reset_Handler+0x8c>)
   84936:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   84938:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8493c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
   84940:	d203      	bcs.n	8494a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   84942:	688b      	ldr	r3, [r1, #8]
   84944:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   84948:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8494a:	4b09      	ldr	r3, [pc, #36]	; (84970 <Reset_Handler+0x90>)
   8494c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8494e:	4b09      	ldr	r3, [pc, #36]	; (84974 <Reset_Handler+0x94>)
   84950:	4798      	blx	r3
   84952:	e7fe      	b.n	84952 <Reset_Handler+0x72>
   84954:	20000000 	.word	0x20000000
   84958:	0008b1e4 	.word	0x0008b1e4
   8495c:	20000fdc 	.word	0x20000fdc
   84960:	200029f4 	.word	0x200029f4
   84964:	20000fdc 	.word	0x20000fdc
   84968:	00080000 	.word	0x00080000
   8496c:	e000ed00 	.word	0xe000ed00
   84970:	00085039 	.word	0x00085039
   84974:	00084ac9 	.word	0x00084ac9

00084978 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   84978:	4b3d      	ldr	r3, [pc, #244]	; (84a70 <SystemCoreClockUpdate+0xf8>)
   8497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8497c:	f003 0303 	and.w	r3, r3, #3
   84980:	2b03      	cmp	r3, #3
   84982:	d80e      	bhi.n	849a2 <SystemCoreClockUpdate+0x2a>
   84984:	e8df f003 	tbb	[pc, r3]
   84988:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8498c:	4b39      	ldr	r3, [pc, #228]	; (84a74 <SystemCoreClockUpdate+0xfc>)
   8498e:	695b      	ldr	r3, [r3, #20]
   84990:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   84994:	bf14      	ite	ne
   84996:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8499a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8499e:	4b36      	ldr	r3, [pc, #216]	; (84a78 <SystemCoreClockUpdate+0x100>)
   849a0:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   849a2:	4b33      	ldr	r3, [pc, #204]	; (84a70 <SystemCoreClockUpdate+0xf8>)
   849a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   849a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   849aa:	2b70      	cmp	r3, #112	; 0x70
   849ac:	d057      	beq.n	84a5e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   849ae:	4b30      	ldr	r3, [pc, #192]	; (84a70 <SystemCoreClockUpdate+0xf8>)
   849b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   849b2:	4931      	ldr	r1, [pc, #196]	; (84a78 <SystemCoreClockUpdate+0x100>)
   849b4:	f3c2 1202 	ubfx	r2, r2, #4, #3
   849b8:	680b      	ldr	r3, [r1, #0]
   849ba:	40d3      	lsrs	r3, r2
   849bc:	600b      	str	r3, [r1, #0]
   849be:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   849c0:	4b2b      	ldr	r3, [pc, #172]	; (84a70 <SystemCoreClockUpdate+0xf8>)
   849c2:	6a1b      	ldr	r3, [r3, #32]
   849c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   849c8:	d003      	beq.n	849d2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   849ca:	4a2c      	ldr	r2, [pc, #176]	; (84a7c <SystemCoreClockUpdate+0x104>)
   849cc:	4b2a      	ldr	r3, [pc, #168]	; (84a78 <SystemCoreClockUpdate+0x100>)
   849ce:	601a      	str	r2, [r3, #0]
   849d0:	e7e7      	b.n	849a2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   849d2:	4a2b      	ldr	r2, [pc, #172]	; (84a80 <SystemCoreClockUpdate+0x108>)
   849d4:	4b28      	ldr	r3, [pc, #160]	; (84a78 <SystemCoreClockUpdate+0x100>)
   849d6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   849d8:	4b25      	ldr	r3, [pc, #148]	; (84a70 <SystemCoreClockUpdate+0xf8>)
   849da:	6a1b      	ldr	r3, [r3, #32]
   849dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   849e0:	2b10      	cmp	r3, #16
   849e2:	d005      	beq.n	849f0 <SystemCoreClockUpdate+0x78>
   849e4:	2b20      	cmp	r3, #32
   849e6:	d1dc      	bne.n	849a2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   849e8:	4a24      	ldr	r2, [pc, #144]	; (84a7c <SystemCoreClockUpdate+0x104>)
   849ea:	4b23      	ldr	r3, [pc, #140]	; (84a78 <SystemCoreClockUpdate+0x100>)
   849ec:	601a      	str	r2, [r3, #0]
				break;
   849ee:	e7d8      	b.n	849a2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   849f0:	4a24      	ldr	r2, [pc, #144]	; (84a84 <SystemCoreClockUpdate+0x10c>)
   849f2:	4b21      	ldr	r3, [pc, #132]	; (84a78 <SystemCoreClockUpdate+0x100>)
   849f4:	601a      	str	r2, [r3, #0]
				break;
   849f6:	e7d4      	b.n	849a2 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   849f8:	4b1d      	ldr	r3, [pc, #116]	; (84a70 <SystemCoreClockUpdate+0xf8>)
   849fa:	6a1b      	ldr	r3, [r3, #32]
   849fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   84a00:	d00c      	beq.n	84a1c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84a02:	4a1e      	ldr	r2, [pc, #120]	; (84a7c <SystemCoreClockUpdate+0x104>)
   84a04:	4b1c      	ldr	r3, [pc, #112]	; (84a78 <SystemCoreClockUpdate+0x100>)
   84a06:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   84a08:	4b19      	ldr	r3, [pc, #100]	; (84a70 <SystemCoreClockUpdate+0xf8>)
   84a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84a0c:	f003 0303 	and.w	r3, r3, #3
   84a10:	2b02      	cmp	r3, #2
   84a12:	d016      	beq.n	84a42 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   84a14:	4a1c      	ldr	r2, [pc, #112]	; (84a88 <SystemCoreClockUpdate+0x110>)
   84a16:	4b18      	ldr	r3, [pc, #96]	; (84a78 <SystemCoreClockUpdate+0x100>)
   84a18:	601a      	str	r2, [r3, #0]
   84a1a:	e7c2      	b.n	849a2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84a1c:	4a18      	ldr	r2, [pc, #96]	; (84a80 <SystemCoreClockUpdate+0x108>)
   84a1e:	4b16      	ldr	r3, [pc, #88]	; (84a78 <SystemCoreClockUpdate+0x100>)
   84a20:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84a22:	4b13      	ldr	r3, [pc, #76]	; (84a70 <SystemCoreClockUpdate+0xf8>)
   84a24:	6a1b      	ldr	r3, [r3, #32]
   84a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84a2a:	2b10      	cmp	r3, #16
   84a2c:	d005      	beq.n	84a3a <SystemCoreClockUpdate+0xc2>
   84a2e:	2b20      	cmp	r3, #32
   84a30:	d1ea      	bne.n	84a08 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   84a32:	4a12      	ldr	r2, [pc, #72]	; (84a7c <SystemCoreClockUpdate+0x104>)
   84a34:	4b10      	ldr	r3, [pc, #64]	; (84a78 <SystemCoreClockUpdate+0x100>)
   84a36:	601a      	str	r2, [r3, #0]
				break;
   84a38:	e7e6      	b.n	84a08 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   84a3a:	4a12      	ldr	r2, [pc, #72]	; (84a84 <SystemCoreClockUpdate+0x10c>)
   84a3c:	4b0e      	ldr	r3, [pc, #56]	; (84a78 <SystemCoreClockUpdate+0x100>)
   84a3e:	601a      	str	r2, [r3, #0]
				break;
   84a40:	e7e2      	b.n	84a08 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84a42:	4a0b      	ldr	r2, [pc, #44]	; (84a70 <SystemCoreClockUpdate+0xf8>)
   84a44:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   84a46:	6a92      	ldr	r2, [r2, #40]	; 0x28
   84a48:	480b      	ldr	r0, [pc, #44]	; (84a78 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84a4a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   84a4e:	6803      	ldr	r3, [r0, #0]
   84a50:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   84a54:	b2d2      	uxtb	r2, r2
   84a56:	fbb3 f3f2 	udiv	r3, r3, r2
   84a5a:	6003      	str	r3, [r0, #0]
   84a5c:	e7a1      	b.n	849a2 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   84a5e:	4a06      	ldr	r2, [pc, #24]	; (84a78 <SystemCoreClockUpdate+0x100>)
   84a60:	6813      	ldr	r3, [r2, #0]
   84a62:	490a      	ldr	r1, [pc, #40]	; (84a8c <SystemCoreClockUpdate+0x114>)
   84a64:	fba1 1303 	umull	r1, r3, r1, r3
   84a68:	085b      	lsrs	r3, r3, #1
   84a6a:	6013      	str	r3, [r2, #0]
   84a6c:	4770      	bx	lr
   84a6e:	bf00      	nop
   84a70:	400e0400 	.word	0x400e0400
   84a74:	400e1210 	.word	0x400e1210
   84a78:	2000062c 	.word	0x2000062c
   84a7c:	00b71b00 	.word	0x00b71b00
   84a80:	003d0900 	.word	0x003d0900
   84a84:	007a1200 	.word	0x007a1200
   84a88:	0e4e1c00 	.word	0x0e4e1c00
   84a8c:	aaaaaaab 	.word	0xaaaaaaab

00084a90 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   84a90:	4b0a      	ldr	r3, [pc, #40]	; (84abc <_sbrk+0x2c>)
   84a92:	681b      	ldr	r3, [r3, #0]
   84a94:	b153      	cbz	r3, 84aac <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   84a96:	4b09      	ldr	r3, [pc, #36]	; (84abc <_sbrk+0x2c>)
   84a98:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   84a9a:	181a      	adds	r2, r3, r0
   84a9c:	4908      	ldr	r1, [pc, #32]	; (84ac0 <_sbrk+0x30>)
   84a9e:	4291      	cmp	r1, r2
   84aa0:	db08      	blt.n	84ab4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   84aa2:	4610      	mov	r0, r2
   84aa4:	4a05      	ldr	r2, [pc, #20]	; (84abc <_sbrk+0x2c>)
   84aa6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   84aa8:	4618      	mov	r0, r3
   84aaa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   84aac:	4a05      	ldr	r2, [pc, #20]	; (84ac4 <_sbrk+0x34>)
   84aae:	4b03      	ldr	r3, [pc, #12]	; (84abc <_sbrk+0x2c>)
   84ab0:	601a      	str	r2, [r3, #0]
   84ab2:	e7f0      	b.n	84a96 <_sbrk+0x6>
		return (caddr_t) -1;	
   84ab4:	f04f 30ff 	mov.w	r0, #4294967295
}
   84ab8:	4770      	bx	lr
   84aba:	bf00      	nop
   84abc:	20001184 	.word	0x20001184
   84ac0:	20083ffc 	.word	0x20083ffc
   84ac4:	20084000 	.word	0x20084000

00084ac8 <main>:
#define SABLIER_NEW			100



int main (void)
{
   84ac8:	b500      	push	{lr}
   84aca:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
   84acc:	b672      	cpsid	i
   84ace:	f3bf 8f5f 	dmb	sy
	//osc_enable(OSC_MAINCK_XTAL);
	/* Insert system clock initialization code here (sysclk_init()). */
	cpu_irq_disable();
   84ad2:	4e10      	ldr	r6, [pc, #64]	; (84b14 <main+0x4c>)
   84ad4:	2400      	movs	r4, #0
   84ad6:	7034      	strb	r4, [r6, #0]
	//rstc_enable_user_reset(RSTC);
	wdt_disable(WDT);
   84ad8:	480f      	ldr	r0, [pc, #60]	; (84b18 <main+0x50>)
   84ada:	4b10      	ldr	r3, [pc, #64]	; (84b1c <main+0x54>)
   84adc:	4798      	blx	r3
	sysclk_init();
   84ade:	4b10      	ldr	r3, [pc, #64]	; (84b20 <main+0x58>)
   84ae0:	4798      	blx	r3
	board_init();
   84ae2:	4b10      	ldr	r3, [pc, #64]	; (84b24 <main+0x5c>)
   84ae4:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	/* Insert application code here, after the board has been initialized. */
	KernelNew();
   84ae6:	2064      	movs	r0, #100	; 0x64
   84ae8:	4d0f      	ldr	r5, [pc, #60]	; (84b28 <main+0x60>)
   84aea:	47a8      	blx	r5
   84aec:	2064      	movs	r0, #100	; 0x64
   84aee:	4b0f      	ldr	r3, [pc, #60]	; (84b2c <main+0x64>)
   84af0:	4798      	blx	r3
	cpu_irq_enable();
   84af2:	2301      	movs	r3, #1
   84af4:	7033      	strb	r3, [r6, #0]
   84af6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84afa:	b662      	cpsie	i
	PushTask(Appli,APPLI_NEW,0,0);
   84afc:	9400      	str	r4, [sp, #0]
   84afe:	4623      	mov	r3, r4
   84b00:	2264      	movs	r2, #100	; 0x64
   84b02:	490b      	ldr	r1, [pc, #44]	; (84b30 <main+0x68>)
   84b04:	2066      	movs	r0, #102	; 0x66
   84b06:	47a8      	blx	r5
	KernelRun();
   84b08:	2567      	movs	r5, #103	; 0x67
   84b0a:	4c07      	ldr	r4, [pc, #28]	; (84b28 <main+0x60>)
   84b0c:	4628      	mov	r0, r5
   84b0e:	47a0      	blx	r4
   84b10:	e7fc      	b.n	84b0c <main+0x44>
   84b12:	bf00      	nop
   84b14:	20000628 	.word	0x20000628
   84b18:	400e1250 	.word	0x400e1250
   84b1c:	00080429 	.word	0x00080429
   84b20:	00083fd1 	.word	0x00083fd1
   84b24:	00084871 	.word	0x00084871
   84b28:	00083829 	.word	0x00083829
   84b2c:	00082365 	.word	0x00082365
   84b30:	00080129 	.word	0x00080129

00084b34 <__aeabi_frsub>:
   84b34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   84b38:	e002      	b.n	84b40 <__addsf3>
   84b3a:	bf00      	nop

00084b3c <__aeabi_fsub>:
   84b3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00084b40 <__addsf3>:
   84b40:	0042      	lsls	r2, r0, #1
   84b42:	bf1f      	itttt	ne
   84b44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   84b48:	ea92 0f03 	teqne	r2, r3
   84b4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   84b50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84b54:	d06a      	beq.n	84c2c <__addsf3+0xec>
   84b56:	ea4f 6212 	mov.w	r2, r2, lsr #24
   84b5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   84b5e:	bfc1      	itttt	gt
   84b60:	18d2      	addgt	r2, r2, r3
   84b62:	4041      	eorgt	r1, r0
   84b64:	4048      	eorgt	r0, r1
   84b66:	4041      	eorgt	r1, r0
   84b68:	bfb8      	it	lt
   84b6a:	425b      	neglt	r3, r3
   84b6c:	2b19      	cmp	r3, #25
   84b6e:	bf88      	it	hi
   84b70:	4770      	bxhi	lr
   84b72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   84b76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84b7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   84b7e:	bf18      	it	ne
   84b80:	4240      	negne	r0, r0
   84b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   84b86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   84b8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   84b8e:	bf18      	it	ne
   84b90:	4249      	negne	r1, r1
   84b92:	ea92 0f03 	teq	r2, r3
   84b96:	d03f      	beq.n	84c18 <__addsf3+0xd8>
   84b98:	f1a2 0201 	sub.w	r2, r2, #1
   84b9c:	fa41 fc03 	asr.w	ip, r1, r3
   84ba0:	eb10 000c 	adds.w	r0, r0, ip
   84ba4:	f1c3 0320 	rsb	r3, r3, #32
   84ba8:	fa01 f103 	lsl.w	r1, r1, r3
   84bac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84bb0:	d502      	bpl.n	84bb8 <__addsf3+0x78>
   84bb2:	4249      	negs	r1, r1
   84bb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   84bb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   84bbc:	d313      	bcc.n	84be6 <__addsf3+0xa6>
   84bbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   84bc2:	d306      	bcc.n	84bd2 <__addsf3+0x92>
   84bc4:	0840      	lsrs	r0, r0, #1
   84bc6:	ea4f 0131 	mov.w	r1, r1, rrx
   84bca:	f102 0201 	add.w	r2, r2, #1
   84bce:	2afe      	cmp	r2, #254	; 0xfe
   84bd0:	d251      	bcs.n	84c76 <__addsf3+0x136>
   84bd2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   84bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   84bda:	bf08      	it	eq
   84bdc:	f020 0001 	biceq.w	r0, r0, #1
   84be0:	ea40 0003 	orr.w	r0, r0, r3
   84be4:	4770      	bx	lr
   84be6:	0049      	lsls	r1, r1, #1
   84be8:	eb40 0000 	adc.w	r0, r0, r0
   84bec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   84bf0:	f1a2 0201 	sub.w	r2, r2, #1
   84bf4:	d1ed      	bne.n	84bd2 <__addsf3+0x92>
   84bf6:	fab0 fc80 	clz	ip, r0
   84bfa:	f1ac 0c08 	sub.w	ip, ip, #8
   84bfe:	ebb2 020c 	subs.w	r2, r2, ip
   84c02:	fa00 f00c 	lsl.w	r0, r0, ip
   84c06:	bfaa      	itet	ge
   84c08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   84c0c:	4252      	neglt	r2, r2
   84c0e:	4318      	orrge	r0, r3
   84c10:	bfbc      	itt	lt
   84c12:	40d0      	lsrlt	r0, r2
   84c14:	4318      	orrlt	r0, r3
   84c16:	4770      	bx	lr
   84c18:	f092 0f00 	teq	r2, #0
   84c1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   84c20:	bf06      	itte	eq
   84c22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   84c26:	3201      	addeq	r2, #1
   84c28:	3b01      	subne	r3, #1
   84c2a:	e7b5      	b.n	84b98 <__addsf3+0x58>
   84c2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   84c30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   84c34:	bf18      	it	ne
   84c36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84c3a:	d021      	beq.n	84c80 <__addsf3+0x140>
   84c3c:	ea92 0f03 	teq	r2, r3
   84c40:	d004      	beq.n	84c4c <__addsf3+0x10c>
   84c42:	f092 0f00 	teq	r2, #0
   84c46:	bf08      	it	eq
   84c48:	4608      	moveq	r0, r1
   84c4a:	4770      	bx	lr
   84c4c:	ea90 0f01 	teq	r0, r1
   84c50:	bf1c      	itt	ne
   84c52:	2000      	movne	r0, #0
   84c54:	4770      	bxne	lr
   84c56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   84c5a:	d104      	bne.n	84c66 <__addsf3+0x126>
   84c5c:	0040      	lsls	r0, r0, #1
   84c5e:	bf28      	it	cs
   84c60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   84c64:	4770      	bx	lr
   84c66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   84c6a:	bf3c      	itt	cc
   84c6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   84c70:	4770      	bxcc	lr
   84c72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84c76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   84c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84c7e:	4770      	bx	lr
   84c80:	ea7f 6222 	mvns.w	r2, r2, asr #24
   84c84:	bf16      	itet	ne
   84c86:	4608      	movne	r0, r1
   84c88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   84c8c:	4601      	movne	r1, r0
   84c8e:	0242      	lsls	r2, r0, #9
   84c90:	bf06      	itte	eq
   84c92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   84c96:	ea90 0f01 	teqeq	r0, r1
   84c9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   84c9e:	4770      	bx	lr

00084ca0 <__aeabi_ui2f>:
   84ca0:	f04f 0300 	mov.w	r3, #0
   84ca4:	e004      	b.n	84cb0 <__aeabi_i2f+0x8>
   84ca6:	bf00      	nop

00084ca8 <__aeabi_i2f>:
   84ca8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   84cac:	bf48      	it	mi
   84cae:	4240      	negmi	r0, r0
   84cb0:	ea5f 0c00 	movs.w	ip, r0
   84cb4:	bf08      	it	eq
   84cb6:	4770      	bxeq	lr
   84cb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   84cbc:	4601      	mov	r1, r0
   84cbe:	f04f 0000 	mov.w	r0, #0
   84cc2:	e01c      	b.n	84cfe <__aeabi_l2f+0x2a>

00084cc4 <__aeabi_ul2f>:
   84cc4:	ea50 0201 	orrs.w	r2, r0, r1
   84cc8:	bf08      	it	eq
   84cca:	4770      	bxeq	lr
   84ccc:	f04f 0300 	mov.w	r3, #0
   84cd0:	e00a      	b.n	84ce8 <__aeabi_l2f+0x14>
   84cd2:	bf00      	nop

00084cd4 <__aeabi_l2f>:
   84cd4:	ea50 0201 	orrs.w	r2, r0, r1
   84cd8:	bf08      	it	eq
   84cda:	4770      	bxeq	lr
   84cdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   84ce0:	d502      	bpl.n	84ce8 <__aeabi_l2f+0x14>
   84ce2:	4240      	negs	r0, r0
   84ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84ce8:	ea5f 0c01 	movs.w	ip, r1
   84cec:	bf02      	ittt	eq
   84cee:	4684      	moveq	ip, r0
   84cf0:	4601      	moveq	r1, r0
   84cf2:	2000      	moveq	r0, #0
   84cf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   84cf8:	bf08      	it	eq
   84cfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   84cfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   84d02:	fabc f28c 	clz	r2, ip
   84d06:	3a08      	subs	r2, #8
   84d08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   84d0c:	db10      	blt.n	84d30 <__aeabi_l2f+0x5c>
   84d0e:	fa01 fc02 	lsl.w	ip, r1, r2
   84d12:	4463      	add	r3, ip
   84d14:	fa00 fc02 	lsl.w	ip, r0, r2
   84d18:	f1c2 0220 	rsb	r2, r2, #32
   84d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84d20:	fa20 f202 	lsr.w	r2, r0, r2
   84d24:	eb43 0002 	adc.w	r0, r3, r2
   84d28:	bf08      	it	eq
   84d2a:	f020 0001 	biceq.w	r0, r0, #1
   84d2e:	4770      	bx	lr
   84d30:	f102 0220 	add.w	r2, r2, #32
   84d34:	fa01 fc02 	lsl.w	ip, r1, r2
   84d38:	f1c2 0220 	rsb	r2, r2, #32
   84d3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   84d40:	fa21 f202 	lsr.w	r2, r1, r2
   84d44:	eb43 0002 	adc.w	r0, r3, r2
   84d48:	bf08      	it	eq
   84d4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   84d4e:	4770      	bx	lr

00084d50 <__aeabi_fmul>:
   84d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   84d58:	bf1e      	ittt	ne
   84d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   84d5e:	ea92 0f0c 	teqne	r2, ip
   84d62:	ea93 0f0c 	teqne	r3, ip
   84d66:	d06f      	beq.n	84e48 <__aeabi_fmul+0xf8>
   84d68:	441a      	add	r2, r3
   84d6a:	ea80 0c01 	eor.w	ip, r0, r1
   84d6e:	0240      	lsls	r0, r0, #9
   84d70:	bf18      	it	ne
   84d72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   84d76:	d01e      	beq.n	84db6 <__aeabi_fmul+0x66>
   84d78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   84d7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   84d80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   84d84:	fba0 3101 	umull	r3, r1, r0, r1
   84d88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   84d8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   84d90:	bf3e      	ittt	cc
   84d92:	0049      	lslcc	r1, r1, #1
   84d94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   84d98:	005b      	lslcc	r3, r3, #1
   84d9a:	ea40 0001 	orr.w	r0, r0, r1
   84d9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   84da2:	2afd      	cmp	r2, #253	; 0xfd
   84da4:	d81d      	bhi.n	84de2 <__aeabi_fmul+0x92>
   84da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   84daa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   84dae:	bf08      	it	eq
   84db0:	f020 0001 	biceq.w	r0, r0, #1
   84db4:	4770      	bx	lr
   84db6:	f090 0f00 	teq	r0, #0
   84dba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   84dbe:	bf08      	it	eq
   84dc0:	0249      	lsleq	r1, r1, #9
   84dc2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   84dc6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   84dca:	3a7f      	subs	r2, #127	; 0x7f
   84dcc:	bfc2      	ittt	gt
   84dce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   84dd2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   84dd6:	4770      	bxgt	lr
   84dd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84ddc:	f04f 0300 	mov.w	r3, #0
   84de0:	3a01      	subs	r2, #1
   84de2:	dc5d      	bgt.n	84ea0 <__aeabi_fmul+0x150>
   84de4:	f112 0f19 	cmn.w	r2, #25
   84de8:	bfdc      	itt	le
   84dea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   84dee:	4770      	bxle	lr
   84df0:	f1c2 0200 	rsb	r2, r2, #0
   84df4:	0041      	lsls	r1, r0, #1
   84df6:	fa21 f102 	lsr.w	r1, r1, r2
   84dfa:	f1c2 0220 	rsb	r2, r2, #32
   84dfe:	fa00 fc02 	lsl.w	ip, r0, r2
   84e02:	ea5f 0031 	movs.w	r0, r1, rrx
   84e06:	f140 0000 	adc.w	r0, r0, #0
   84e0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   84e0e:	bf08      	it	eq
   84e10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   84e14:	4770      	bx	lr
   84e16:	f092 0f00 	teq	r2, #0
   84e1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   84e1e:	bf02      	ittt	eq
   84e20:	0040      	lsleq	r0, r0, #1
   84e22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   84e26:	3a01      	subeq	r2, #1
   84e28:	d0f9      	beq.n	84e1e <__aeabi_fmul+0xce>
   84e2a:	ea40 000c 	orr.w	r0, r0, ip
   84e2e:	f093 0f00 	teq	r3, #0
   84e32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   84e36:	bf02      	ittt	eq
   84e38:	0049      	lsleq	r1, r1, #1
   84e3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   84e3e:	3b01      	subeq	r3, #1
   84e40:	d0f9      	beq.n	84e36 <__aeabi_fmul+0xe6>
   84e42:	ea41 010c 	orr.w	r1, r1, ip
   84e46:	e78f      	b.n	84d68 <__aeabi_fmul+0x18>
   84e48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   84e4c:	ea92 0f0c 	teq	r2, ip
   84e50:	bf18      	it	ne
   84e52:	ea93 0f0c 	teqne	r3, ip
   84e56:	d00a      	beq.n	84e6e <__aeabi_fmul+0x11e>
   84e58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   84e5c:	bf18      	it	ne
   84e5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   84e62:	d1d8      	bne.n	84e16 <__aeabi_fmul+0xc6>
   84e64:	ea80 0001 	eor.w	r0, r0, r1
   84e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   84e6c:	4770      	bx	lr
   84e6e:	f090 0f00 	teq	r0, #0
   84e72:	bf17      	itett	ne
   84e74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   84e78:	4608      	moveq	r0, r1
   84e7a:	f091 0f00 	teqne	r1, #0
   84e7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   84e82:	d014      	beq.n	84eae <__aeabi_fmul+0x15e>
   84e84:	ea92 0f0c 	teq	r2, ip
   84e88:	d101      	bne.n	84e8e <__aeabi_fmul+0x13e>
   84e8a:	0242      	lsls	r2, r0, #9
   84e8c:	d10f      	bne.n	84eae <__aeabi_fmul+0x15e>
   84e8e:	ea93 0f0c 	teq	r3, ip
   84e92:	d103      	bne.n	84e9c <__aeabi_fmul+0x14c>
   84e94:	024b      	lsls	r3, r1, #9
   84e96:	bf18      	it	ne
   84e98:	4608      	movne	r0, r1
   84e9a:	d108      	bne.n	84eae <__aeabi_fmul+0x15e>
   84e9c:	ea80 0001 	eor.w	r0, r0, r1
   84ea0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   84ea4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   84ea8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84eac:	4770      	bx	lr
   84eae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   84eb2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   84eb6:	4770      	bx	lr

00084eb8 <__aeabi_fdiv>:
   84eb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84ebc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   84ec0:	bf1e      	ittt	ne
   84ec2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   84ec6:	ea92 0f0c 	teqne	r2, ip
   84eca:	ea93 0f0c 	teqne	r3, ip
   84ece:	d069      	beq.n	84fa4 <__aeabi_fdiv+0xec>
   84ed0:	eba2 0203 	sub.w	r2, r2, r3
   84ed4:	ea80 0c01 	eor.w	ip, r0, r1
   84ed8:	0249      	lsls	r1, r1, #9
   84eda:	ea4f 2040 	mov.w	r0, r0, lsl #9
   84ede:	d037      	beq.n	84f50 <__aeabi_fdiv+0x98>
   84ee0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   84ee4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   84ee8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   84eec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   84ef0:	428b      	cmp	r3, r1
   84ef2:	bf38      	it	cc
   84ef4:	005b      	lslcc	r3, r3, #1
   84ef6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   84efa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   84efe:	428b      	cmp	r3, r1
   84f00:	bf24      	itt	cs
   84f02:	1a5b      	subcs	r3, r3, r1
   84f04:	ea40 000c 	orrcs.w	r0, r0, ip
   84f08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   84f0c:	bf24      	itt	cs
   84f0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   84f12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   84f16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   84f1a:	bf24      	itt	cs
   84f1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   84f20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   84f24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   84f28:	bf24      	itt	cs
   84f2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   84f2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   84f32:	011b      	lsls	r3, r3, #4
   84f34:	bf18      	it	ne
   84f36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   84f3a:	d1e0      	bne.n	84efe <__aeabi_fdiv+0x46>
   84f3c:	2afd      	cmp	r2, #253	; 0xfd
   84f3e:	f63f af50 	bhi.w	84de2 <__aeabi_fmul+0x92>
   84f42:	428b      	cmp	r3, r1
   84f44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   84f48:	bf08      	it	eq
   84f4a:	f020 0001 	biceq.w	r0, r0, #1
   84f4e:	4770      	bx	lr
   84f50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   84f54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   84f58:	327f      	adds	r2, #127	; 0x7f
   84f5a:	bfc2      	ittt	gt
   84f5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   84f60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   84f64:	4770      	bxgt	lr
   84f66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84f6a:	f04f 0300 	mov.w	r3, #0
   84f6e:	3a01      	subs	r2, #1
   84f70:	e737      	b.n	84de2 <__aeabi_fmul+0x92>
   84f72:	f092 0f00 	teq	r2, #0
   84f76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   84f7a:	bf02      	ittt	eq
   84f7c:	0040      	lsleq	r0, r0, #1
   84f7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   84f82:	3a01      	subeq	r2, #1
   84f84:	d0f9      	beq.n	84f7a <__aeabi_fdiv+0xc2>
   84f86:	ea40 000c 	orr.w	r0, r0, ip
   84f8a:	f093 0f00 	teq	r3, #0
   84f8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   84f92:	bf02      	ittt	eq
   84f94:	0049      	lsleq	r1, r1, #1
   84f96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   84f9a:	3b01      	subeq	r3, #1
   84f9c:	d0f9      	beq.n	84f92 <__aeabi_fdiv+0xda>
   84f9e:	ea41 010c 	orr.w	r1, r1, ip
   84fa2:	e795      	b.n	84ed0 <__aeabi_fdiv+0x18>
   84fa4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   84fa8:	ea92 0f0c 	teq	r2, ip
   84fac:	d108      	bne.n	84fc0 <__aeabi_fdiv+0x108>
   84fae:	0242      	lsls	r2, r0, #9
   84fb0:	f47f af7d 	bne.w	84eae <__aeabi_fmul+0x15e>
   84fb4:	ea93 0f0c 	teq	r3, ip
   84fb8:	f47f af70 	bne.w	84e9c <__aeabi_fmul+0x14c>
   84fbc:	4608      	mov	r0, r1
   84fbe:	e776      	b.n	84eae <__aeabi_fmul+0x15e>
   84fc0:	ea93 0f0c 	teq	r3, ip
   84fc4:	d104      	bne.n	84fd0 <__aeabi_fdiv+0x118>
   84fc6:	024b      	lsls	r3, r1, #9
   84fc8:	f43f af4c 	beq.w	84e64 <__aeabi_fmul+0x114>
   84fcc:	4608      	mov	r0, r1
   84fce:	e76e      	b.n	84eae <__aeabi_fmul+0x15e>
   84fd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   84fd4:	bf18      	it	ne
   84fd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   84fda:	d1ca      	bne.n	84f72 <__aeabi_fdiv+0xba>
   84fdc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   84fe0:	f47f af5c 	bne.w	84e9c <__aeabi_fmul+0x14c>
   84fe4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   84fe8:	f47f af3c 	bne.w	84e64 <__aeabi_fmul+0x114>
   84fec:	e75f      	b.n	84eae <__aeabi_fmul+0x15e>
   84fee:	bf00      	nop

00084ff0 <__aeabi_f2uiz>:
   84ff0:	0042      	lsls	r2, r0, #1
   84ff2:	d20e      	bcs.n	85012 <__aeabi_f2uiz+0x22>
   84ff4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   84ff8:	d30b      	bcc.n	85012 <__aeabi_f2uiz+0x22>
   84ffa:	f04f 039e 	mov.w	r3, #158	; 0x9e
   84ffe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   85002:	d409      	bmi.n	85018 <__aeabi_f2uiz+0x28>
   85004:	ea4f 2300 	mov.w	r3, r0, lsl #8
   85008:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8500c:	fa23 f002 	lsr.w	r0, r3, r2
   85010:	4770      	bx	lr
   85012:	f04f 0000 	mov.w	r0, #0
   85016:	4770      	bx	lr
   85018:	f112 0f61 	cmn.w	r2, #97	; 0x61
   8501c:	d101      	bne.n	85022 <__aeabi_f2uiz+0x32>
   8501e:	0242      	lsls	r2, r0, #9
   85020:	d102      	bne.n	85028 <__aeabi_f2uiz+0x38>
   85022:	f04f 30ff 	mov.w	r0, #4294967295
   85026:	4770      	bx	lr
   85028:	f04f 0000 	mov.w	r0, #0
   8502c:	4770      	bx	lr
   8502e:	bf00      	nop

00085030 <atoi>:
   85030:	220a      	movs	r2, #10
   85032:	2100      	movs	r1, #0
   85034:	f000 b998 	b.w	85368 <strtol>

00085038 <__libc_init_array>:
   85038:	b570      	push	{r4, r5, r6, lr}
   8503a:	4e0f      	ldr	r6, [pc, #60]	; (85078 <__libc_init_array+0x40>)
   8503c:	4d0f      	ldr	r5, [pc, #60]	; (8507c <__libc_init_array+0x44>)
   8503e:	1b76      	subs	r6, r6, r5
   85040:	10b6      	asrs	r6, r6, #2
   85042:	bf18      	it	ne
   85044:	2400      	movne	r4, #0
   85046:	d005      	beq.n	85054 <__libc_init_array+0x1c>
   85048:	3401      	adds	r4, #1
   8504a:	f855 3b04 	ldr.w	r3, [r5], #4
   8504e:	4798      	blx	r3
   85050:	42a6      	cmp	r6, r4
   85052:	d1f9      	bne.n	85048 <__libc_init_array+0x10>
   85054:	4e0a      	ldr	r6, [pc, #40]	; (85080 <__libc_init_array+0x48>)
   85056:	4d0b      	ldr	r5, [pc, #44]	; (85084 <__libc_init_array+0x4c>)
   85058:	f006 f8ae 	bl	8b1b8 <_init>
   8505c:	1b76      	subs	r6, r6, r5
   8505e:	10b6      	asrs	r6, r6, #2
   85060:	bf18      	it	ne
   85062:	2400      	movne	r4, #0
   85064:	d006      	beq.n	85074 <__libc_init_array+0x3c>
   85066:	3401      	adds	r4, #1
   85068:	f855 3b04 	ldr.w	r3, [r5], #4
   8506c:	4798      	blx	r3
   8506e:	42a6      	cmp	r6, r4
   85070:	d1f9      	bne.n	85066 <__libc_init_array+0x2e>
   85072:	bd70      	pop	{r4, r5, r6, pc}
   85074:	bd70      	pop	{r4, r5, r6, pc}
   85076:	bf00      	nop
   85078:	0008b1c4 	.word	0x0008b1c4
   8507c:	0008b1c4 	.word	0x0008b1c4
   85080:	0008b1cc 	.word	0x0008b1cc
   85084:	0008b1c4 	.word	0x0008b1c4

00085088 <memset>:
   85088:	b470      	push	{r4, r5, r6}
   8508a:	0786      	lsls	r6, r0, #30
   8508c:	d046      	beq.n	8511c <memset+0x94>
   8508e:	1e54      	subs	r4, r2, #1
   85090:	2a00      	cmp	r2, #0
   85092:	d041      	beq.n	85118 <memset+0x90>
   85094:	b2ca      	uxtb	r2, r1
   85096:	4603      	mov	r3, r0
   85098:	e002      	b.n	850a0 <memset+0x18>
   8509a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8509e:	d33b      	bcc.n	85118 <memset+0x90>
   850a0:	f803 2b01 	strb.w	r2, [r3], #1
   850a4:	079d      	lsls	r5, r3, #30
   850a6:	d1f8      	bne.n	8509a <memset+0x12>
   850a8:	2c03      	cmp	r4, #3
   850aa:	d92e      	bls.n	8510a <memset+0x82>
   850ac:	b2cd      	uxtb	r5, r1
   850ae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   850b2:	2c0f      	cmp	r4, #15
   850b4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   850b8:	d919      	bls.n	850ee <memset+0x66>
   850ba:	4626      	mov	r6, r4
   850bc:	f103 0210 	add.w	r2, r3, #16
   850c0:	3e10      	subs	r6, #16
   850c2:	2e0f      	cmp	r6, #15
   850c4:	f842 5c10 	str.w	r5, [r2, #-16]
   850c8:	f842 5c0c 	str.w	r5, [r2, #-12]
   850cc:	f842 5c08 	str.w	r5, [r2, #-8]
   850d0:	f842 5c04 	str.w	r5, [r2, #-4]
   850d4:	f102 0210 	add.w	r2, r2, #16
   850d8:	d8f2      	bhi.n	850c0 <memset+0x38>
   850da:	f1a4 0210 	sub.w	r2, r4, #16
   850de:	f022 020f 	bic.w	r2, r2, #15
   850e2:	f004 040f 	and.w	r4, r4, #15
   850e6:	3210      	adds	r2, #16
   850e8:	2c03      	cmp	r4, #3
   850ea:	4413      	add	r3, r2
   850ec:	d90d      	bls.n	8510a <memset+0x82>
   850ee:	461e      	mov	r6, r3
   850f0:	4622      	mov	r2, r4
   850f2:	3a04      	subs	r2, #4
   850f4:	2a03      	cmp	r2, #3
   850f6:	f846 5b04 	str.w	r5, [r6], #4
   850fa:	d8fa      	bhi.n	850f2 <memset+0x6a>
   850fc:	1f22      	subs	r2, r4, #4
   850fe:	f022 0203 	bic.w	r2, r2, #3
   85102:	3204      	adds	r2, #4
   85104:	4413      	add	r3, r2
   85106:	f004 0403 	and.w	r4, r4, #3
   8510a:	b12c      	cbz	r4, 85118 <memset+0x90>
   8510c:	b2c9      	uxtb	r1, r1
   8510e:	441c      	add	r4, r3
   85110:	f803 1b01 	strb.w	r1, [r3], #1
   85114:	429c      	cmp	r4, r3
   85116:	d1fb      	bne.n	85110 <memset+0x88>
   85118:	bc70      	pop	{r4, r5, r6}
   8511a:	4770      	bx	lr
   8511c:	4614      	mov	r4, r2
   8511e:	4603      	mov	r3, r0
   85120:	e7c2      	b.n	850a8 <memset+0x20>
   85122:	bf00      	nop

00085124 <sprintf>:
   85124:	b40e      	push	{r1, r2, r3}
   85126:	4601      	mov	r1, r0
   85128:	b5f0      	push	{r4, r5, r6, r7, lr}
   8512a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   8512e:	f44f 7702 	mov.w	r7, #520	; 0x208
   85132:	f64f 76ff 	movw	r6, #65535	; 0xffff
   85136:	b09c      	sub	sp, #112	; 0x70
   85138:	ac21      	add	r4, sp, #132	; 0x84
   8513a:	f854 2b04 	ldr.w	r2, [r4], #4
   8513e:	4b0b      	ldr	r3, [pc, #44]	; (8516c <sprintf+0x48>)
   85140:	9102      	str	r1, [sp, #8]
   85142:	9106      	str	r1, [sp, #24]
   85144:	6818      	ldr	r0, [r3, #0]
   85146:	a902      	add	r1, sp, #8
   85148:	4623      	mov	r3, r4
   8514a:	9401      	str	r4, [sp, #4]
   8514c:	f8ad 7014 	strh.w	r7, [sp, #20]
   85150:	9504      	str	r5, [sp, #16]
   85152:	9507      	str	r5, [sp, #28]
   85154:	f8ad 6016 	strh.w	r6, [sp, #22]
   85158:	f000 f91c 	bl	85394 <_svfprintf_r>
   8515c:	2200      	movs	r2, #0
   8515e:	9b02      	ldr	r3, [sp, #8]
   85160:	701a      	strb	r2, [r3, #0]
   85162:	b01c      	add	sp, #112	; 0x70
   85164:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   85168:	b003      	add	sp, #12
   8516a:	4770      	bx	lr
   8516c:	20000630 	.word	0x20000630

00085170 <strlen>:
   85170:	f020 0103 	bic.w	r1, r0, #3
   85174:	f010 0003 	ands.w	r0, r0, #3
   85178:	f1c0 0000 	rsb	r0, r0, #0
   8517c:	f851 3b04 	ldr.w	r3, [r1], #4
   85180:	f100 0c04 	add.w	ip, r0, #4
   85184:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   85188:	f06f 0200 	mvn.w	r2, #0
   8518c:	bf1c      	itt	ne
   8518e:	fa22 f20c 	lsrne.w	r2, r2, ip
   85192:	4313      	orrne	r3, r2
   85194:	f04f 0c01 	mov.w	ip, #1
   85198:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8519c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   851a0:	eba3 020c 	sub.w	r2, r3, ip
   851a4:	ea22 0203 	bic.w	r2, r2, r3
   851a8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   851ac:	bf04      	itt	eq
   851ae:	f851 3b04 	ldreq.w	r3, [r1], #4
   851b2:	3004      	addeq	r0, #4
   851b4:	d0f4      	beq.n	851a0 <strlen+0x30>
   851b6:	f1c2 0100 	rsb	r1, r2, #0
   851ba:	ea02 0201 	and.w	r2, r2, r1
   851be:	fab2 f282 	clz	r2, r2
   851c2:	f1c2 021f 	rsb	r2, r2, #31
   851c6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   851ca:	4770      	bx	lr

000851cc <strtok>:
   851cc:	4a02      	ldr	r2, [pc, #8]	; (851d8 <strtok+0xc>)
   851ce:	2301      	movs	r3, #1
   851d0:	6812      	ldr	r2, [r2, #0]
   851d2:	325c      	adds	r2, #92	; 0x5c
   851d4:	f000 b802 	b.w	851dc <__strtok_r>
   851d8:	20000630 	.word	0x20000630

000851dc <__strtok_r>:
   851dc:	b4f0      	push	{r4, r5, r6, r7}
   851de:	b318      	cbz	r0, 85228 <__strtok_r+0x4c>
   851e0:	4607      	mov	r7, r0
   851e2:	460d      	mov	r5, r1
   851e4:	f817 6b01 	ldrb.w	r6, [r7], #1
   851e8:	e001      	b.n	851ee <__strtok_r+0x12>
   851ea:	42a6      	cmp	r6, r4
   851ec:	d017      	beq.n	8521e <__strtok_r+0x42>
   851ee:	f815 4b01 	ldrb.w	r4, [r5], #1
   851f2:	2c00      	cmp	r4, #0
   851f4:	d1f9      	bne.n	851ea <__strtok_r+0xe>
   851f6:	b1e6      	cbz	r6, 85232 <__strtok_r+0x56>
   851f8:	460c      	mov	r4, r1
   851fa:	f817 5b01 	ldrb.w	r5, [r7], #1
   851fe:	e001      	b.n	85204 <__strtok_r+0x28>
   85200:	2b00      	cmp	r3, #0
   85202:	d0f9      	beq.n	851f8 <__strtok_r+0x1c>
   85204:	f814 3b01 	ldrb.w	r3, [r4], #1
   85208:	429d      	cmp	r5, r3
   8520a:	d1f9      	bne.n	85200 <__strtok_r+0x24>
   8520c:	b155      	cbz	r5, 85224 <__strtok_r+0x48>
   8520e:	2300      	movs	r3, #0
   85210:	f807 3c01 	strb.w	r3, [r7, #-1]
   85214:	4606      	mov	r6, r0
   85216:	6017      	str	r7, [r2, #0]
   85218:	4630      	mov	r0, r6
   8521a:	bcf0      	pop	{r4, r5, r6, r7}
   8521c:	4770      	bx	lr
   8521e:	b153      	cbz	r3, 85236 <__strtok_r+0x5a>
   85220:	4638      	mov	r0, r7
   85222:	e7dd      	b.n	851e0 <__strtok_r+0x4>
   85224:	462f      	mov	r7, r5
   85226:	e7f5      	b.n	85214 <__strtok_r+0x38>
   85228:	6810      	ldr	r0, [r2, #0]
   8522a:	2800      	cmp	r0, #0
   8522c:	d1d8      	bne.n	851e0 <__strtok_r+0x4>
   8522e:	4606      	mov	r6, r0
   85230:	e7f2      	b.n	85218 <__strtok_r+0x3c>
   85232:	6016      	str	r6, [r2, #0]
   85234:	e7f0      	b.n	85218 <__strtok_r+0x3c>
   85236:	6017      	str	r7, [r2, #0]
   85238:	4606      	mov	r6, r0
   8523a:	7003      	strb	r3, [r0, #0]
   8523c:	e7ec      	b.n	85218 <__strtok_r+0x3c>
   8523e:	bf00      	nop

00085240 <_strtol_l.isra.0>:
   85240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85244:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85248:	460f      	mov	r7, r1
   8524a:	4680      	mov	r8, r0
   8524c:	4616      	mov	r6, r2
   8524e:	461d      	mov	r5, r3
   85250:	468a      	mov	sl, r1
   85252:	e000      	b.n	85256 <_strtol_l.isra.0+0x16>
   85254:	46a2      	mov	sl, r4
   85256:	4654      	mov	r4, sl
   85258:	4648      	mov	r0, r9
   8525a:	f814 bb01 	ldrb.w	fp, [r4], #1
   8525e:	f002 faf7 	bl	87850 <__locale_ctype_ptr_l>
   85262:	4458      	add	r0, fp
   85264:	7842      	ldrb	r2, [r0, #1]
   85266:	f012 0208 	ands.w	r2, r2, #8
   8526a:	d1f3      	bne.n	85254 <_strtol_l.isra.0+0x14>
   8526c:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   85270:	d04f      	beq.n	85312 <_strtol_l.isra.0+0xd2>
   85272:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   85276:	bf04      	itt	eq
   85278:	f894 b000 	ldrbeq.w	fp, [r4]
   8527c:	f10a 0402 	addeq.w	r4, sl, #2
   85280:	b11d      	cbz	r5, 8528a <_strtol_l.isra.0+0x4a>
   85282:	2d10      	cmp	r5, #16
   85284:	d056      	beq.n	85334 <_strtol_l.isra.0+0xf4>
   85286:	46ac      	mov	ip, r5
   85288:	e004      	b.n	85294 <_strtol_l.isra.0+0x54>
   8528a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   8528e:	d060      	beq.n	85352 <_strtol_l.isra.0+0x112>
   85290:	250a      	movs	r5, #10
   85292:	46ac      	mov	ip, r5
   85294:	2a00      	cmp	r2, #0
   85296:	bf0c      	ite	eq
   85298:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   8529c:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   852a0:	2100      	movs	r1, #0
   852a2:	fbb9 fefc 	udiv	lr, r9, ip
   852a6:	4608      	mov	r0, r1
   852a8:	fb0c 9a1e 	mls	sl, ip, lr, r9
   852ac:	e005      	b.n	852ba <_strtol_l.isra.0+0x7a>
   852ae:	d029      	beq.n	85304 <_strtol_l.isra.0+0xc4>
   852b0:	2101      	movs	r1, #1
   852b2:	fb0c 3000 	mla	r0, ip, r0, r3
   852b6:	f814 bb01 	ldrb.w	fp, [r4], #1
   852ba:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   852be:	2b09      	cmp	r3, #9
   852c0:	d905      	bls.n	852ce <_strtol_l.isra.0+0x8e>
   852c2:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   852c6:	2b19      	cmp	r3, #25
   852c8:	d80b      	bhi.n	852e2 <_strtol_l.isra.0+0xa2>
   852ca:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   852ce:	429d      	cmp	r5, r3
   852d0:	dd0f      	ble.n	852f2 <_strtol_l.isra.0+0xb2>
   852d2:	f1b1 3fff 	cmp.w	r1, #4294967295
   852d6:	d0ee      	beq.n	852b6 <_strtol_l.isra.0+0x76>
   852d8:	4586      	cmp	lr, r0
   852da:	d2e8      	bcs.n	852ae <_strtol_l.isra.0+0x6e>
   852dc:	f04f 31ff 	mov.w	r1, #4294967295
   852e0:	e7e9      	b.n	852b6 <_strtol_l.isra.0+0x76>
   852e2:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   852e6:	2b19      	cmp	r3, #25
   852e8:	d803      	bhi.n	852f2 <_strtol_l.isra.0+0xb2>
   852ea:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   852ee:	429d      	cmp	r5, r3
   852f0:	dcef      	bgt.n	852d2 <_strtol_l.isra.0+0x92>
   852f2:	1c4b      	adds	r3, r1, #1
   852f4:	d013      	beq.n	8531e <_strtol_l.isra.0+0xde>
   852f6:	b102      	cbz	r2, 852fa <_strtol_l.isra.0+0xba>
   852f8:	4240      	negs	r0, r0
   852fa:	b146      	cbz	r6, 8530e <_strtol_l.isra.0+0xce>
   852fc:	b9c1      	cbnz	r1, 85330 <_strtol_l.isra.0+0xf0>
   852fe:	6037      	str	r7, [r6, #0]
   85300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85304:	459a      	cmp	sl, r3
   85306:	dad3      	bge.n	852b0 <_strtol_l.isra.0+0x70>
   85308:	f04f 31ff 	mov.w	r1, #4294967295
   8530c:	e7d3      	b.n	852b6 <_strtol_l.isra.0+0x76>
   8530e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85312:	f894 b000 	ldrb.w	fp, [r4]
   85316:	2201      	movs	r2, #1
   85318:	f10a 0402 	add.w	r4, sl, #2
   8531c:	e7b0      	b.n	85280 <_strtol_l.isra.0+0x40>
   8531e:	2322      	movs	r3, #34	; 0x22
   85320:	f8c8 3000 	str.w	r3, [r8]
   85324:	b1ee      	cbz	r6, 85362 <_strtol_l.isra.0+0x122>
   85326:	1e67      	subs	r7, r4, #1
   85328:	4648      	mov	r0, r9
   8532a:	6037      	str	r7, [r6, #0]
   8532c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85330:	4681      	mov	r9, r0
   85332:	e7f8      	b.n	85326 <_strtol_l.isra.0+0xe6>
   85334:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   85338:	d1a5      	bne.n	85286 <_strtol_l.isra.0+0x46>
   8533a:	7823      	ldrb	r3, [r4, #0]
   8533c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   85340:	2b58      	cmp	r3, #88	; 0x58
   85342:	d1a0      	bne.n	85286 <_strtol_l.isra.0+0x46>
   85344:	f04f 0c10 	mov.w	ip, #16
   85348:	f894 b001 	ldrb.w	fp, [r4, #1]
   8534c:	4665      	mov	r5, ip
   8534e:	3402      	adds	r4, #2
   85350:	e7a0      	b.n	85294 <_strtol_l.isra.0+0x54>
   85352:	7823      	ldrb	r3, [r4, #0]
   85354:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   85358:	2b58      	cmp	r3, #88	; 0x58
   8535a:	d0f3      	beq.n	85344 <_strtol_l.isra.0+0x104>
   8535c:	2508      	movs	r5, #8
   8535e:	46ac      	mov	ip, r5
   85360:	e798      	b.n	85294 <_strtol_l.isra.0+0x54>
   85362:	4648      	mov	r0, r9
   85364:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085368 <strtol>:
   85368:	4b08      	ldr	r3, [pc, #32]	; (8538c <strtol+0x24>)
   8536a:	b570      	push	{r4, r5, r6, lr}
   8536c:	681d      	ldr	r5, [r3, #0]
   8536e:	4e08      	ldr	r6, [pc, #32]	; (85390 <strtol+0x28>)
   85370:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   85372:	b082      	sub	sp, #8
   85374:	2c00      	cmp	r4, #0
   85376:	bf08      	it	eq
   85378:	4634      	moveq	r4, r6
   8537a:	4613      	mov	r3, r2
   8537c:	9400      	str	r4, [sp, #0]
   8537e:	460a      	mov	r2, r1
   85380:	4601      	mov	r1, r0
   85382:	4628      	mov	r0, r5
   85384:	f7ff ff5c 	bl	85240 <_strtol_l.isra.0>
   85388:	b002      	add	sp, #8
   8538a:	bd70      	pop	{r4, r5, r6, pc}
   8538c:	20000630 	.word	0x20000630
   85390:	20000a60 	.word	0x20000a60

00085394 <_svfprintf_r>:
   85394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85398:	b0c3      	sub	sp, #268	; 0x10c
   8539a:	460c      	mov	r4, r1
   8539c:	910b      	str	r1, [sp, #44]	; 0x2c
   8539e:	4692      	mov	sl, r2
   853a0:	930f      	str	r3, [sp, #60]	; 0x3c
   853a2:	900c      	str	r0, [sp, #48]	; 0x30
   853a4:	f002 fa58 	bl	87858 <_localeconv_r>
   853a8:	6803      	ldr	r3, [r0, #0]
   853aa:	4618      	mov	r0, r3
   853ac:	931a      	str	r3, [sp, #104]	; 0x68
   853ae:	f7ff fedf 	bl	85170 <strlen>
   853b2:	89a3      	ldrh	r3, [r4, #12]
   853b4:	9019      	str	r0, [sp, #100]	; 0x64
   853b6:	0619      	lsls	r1, r3, #24
   853b8:	d503      	bpl.n	853c2 <_svfprintf_r+0x2e>
   853ba:	6923      	ldr	r3, [r4, #16]
   853bc:	2b00      	cmp	r3, #0
   853be:	f001 8031 	beq.w	86424 <_svfprintf_r+0x1090>
   853c2:	2300      	movs	r3, #0
   853c4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   853c8:	46c8      	mov	r8, r9
   853ca:	9314      	str	r3, [sp, #80]	; 0x50
   853cc:	9313      	str	r3, [sp, #76]	; 0x4c
   853ce:	9315      	str	r3, [sp, #84]	; 0x54
   853d0:	9318      	str	r3, [sp, #96]	; 0x60
   853d2:	931b      	str	r3, [sp, #108]	; 0x6c
   853d4:	9309      	str	r3, [sp, #36]	; 0x24
   853d6:	9316      	str	r3, [sp, #88]	; 0x58
   853d8:	9317      	str	r3, [sp, #92]	; 0x5c
   853da:	9327      	str	r3, [sp, #156]	; 0x9c
   853dc:	9326      	str	r3, [sp, #152]	; 0x98
   853de:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   853e2:	f89a 3000 	ldrb.w	r3, [sl]
   853e6:	4654      	mov	r4, sl
   853e8:	b1eb      	cbz	r3, 85426 <_svfprintf_r+0x92>
   853ea:	2b25      	cmp	r3, #37	; 0x25
   853ec:	d102      	bne.n	853f4 <_svfprintf_r+0x60>
   853ee:	e01a      	b.n	85426 <_svfprintf_r+0x92>
   853f0:	2b25      	cmp	r3, #37	; 0x25
   853f2:	d003      	beq.n	853fc <_svfprintf_r+0x68>
   853f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   853f8:	2b00      	cmp	r3, #0
   853fa:	d1f9      	bne.n	853f0 <_svfprintf_r+0x5c>
   853fc:	eba4 050a 	sub.w	r5, r4, sl
   85400:	b18d      	cbz	r5, 85426 <_svfprintf_r+0x92>
   85402:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85404:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85406:	3301      	adds	r3, #1
   85408:	442a      	add	r2, r5
   8540a:	2b07      	cmp	r3, #7
   8540c:	f8c8 a000 	str.w	sl, [r8]
   85410:	f8c8 5004 	str.w	r5, [r8, #4]
   85414:	9227      	str	r2, [sp, #156]	; 0x9c
   85416:	9326      	str	r3, [sp, #152]	; 0x98
   85418:	f300 808a 	bgt.w	85530 <_svfprintf_r+0x19c>
   8541c:	f108 0808 	add.w	r8, r8, #8
   85420:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85422:	442b      	add	r3, r5
   85424:	9309      	str	r3, [sp, #36]	; 0x24
   85426:	7823      	ldrb	r3, [r4, #0]
   85428:	2b00      	cmp	r3, #0
   8542a:	f000 8089 	beq.w	85540 <_svfprintf_r+0x1ac>
   8542e:	2300      	movs	r3, #0
   85430:	f04f 30ff 	mov.w	r0, #4294967295
   85434:	461a      	mov	r2, r3
   85436:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8543a:	4619      	mov	r1, r3
   8543c:	930d      	str	r3, [sp, #52]	; 0x34
   8543e:	469b      	mov	fp, r3
   85440:	7863      	ldrb	r3, [r4, #1]
   85442:	f104 0a01 	add.w	sl, r4, #1
   85446:	900a      	str	r0, [sp, #40]	; 0x28
   85448:	f10a 0a01 	add.w	sl, sl, #1
   8544c:	f1a3 0020 	sub.w	r0, r3, #32
   85450:	2858      	cmp	r0, #88	; 0x58
   85452:	f200 83b6 	bhi.w	85bc2 <_svfprintf_r+0x82e>
   85456:	e8df f010 	tbh	[pc, r0, lsl #1]
   8545a:	034b      	.short	0x034b
   8545c:	03b403b4 	.word	0x03b403b4
   85460:	03b40353 	.word	0x03b40353
   85464:	03b403b4 	.word	0x03b403b4
   85468:	03b403b4 	.word	0x03b403b4
   8546c:	005903b4 	.word	0x005903b4
   85470:	03b40358 	.word	0x03b40358
   85474:	02140066 	.word	0x02140066
   85478:	022f03b4 	.word	0x022f03b4
   8547c:	03a403a4 	.word	0x03a403a4
   85480:	03a403a4 	.word	0x03a403a4
   85484:	03a403a4 	.word	0x03a403a4
   85488:	03a403a4 	.word	0x03a403a4
   8548c:	03b403a4 	.word	0x03b403a4
   85490:	03b403b4 	.word	0x03b403b4
   85494:	03b403b4 	.word	0x03b403b4
   85498:	03b403b4 	.word	0x03b403b4
   8549c:	03b403b4 	.word	0x03b403b4
   854a0:	028b03b4 	.word	0x028b03b4
   854a4:	03b402d3 	.word	0x03b402d3
   854a8:	03b402d3 	.word	0x03b402d3
   854ac:	03b403b4 	.word	0x03b403b4
   854b0:	031a03b4 	.word	0x031a03b4
   854b4:	03b403b4 	.word	0x03b403b4
   854b8:	03b4031f 	.word	0x03b4031f
   854bc:	03b403b4 	.word	0x03b403b4
   854c0:	03b403b4 	.word	0x03b403b4
   854c4:	03b40234 	.word	0x03b40234
   854c8:	024b03b4 	.word	0x024b03b4
   854cc:	03b403b4 	.word	0x03b403b4
   854d0:	03b403b4 	.word	0x03b403b4
   854d4:	03b403b4 	.word	0x03b403b4
   854d8:	03b403b4 	.word	0x03b403b4
   854dc:	03b403b4 	.word	0x03b403b4
   854e0:	039d0276 	.word	0x039d0276
   854e4:	02d302d3 	.word	0x02d302d3
   854e8:	036202d3 	.word	0x036202d3
   854ec:	03b4039d 	.word	0x03b4039d
   854f0:	036703b4 	.word	0x036703b4
   854f4:	037403b4 	.word	0x037403b4
   854f8:	038b01dd 	.word	0x038b01dd
   854fc:	03b4035d 	.word	0x03b4035d
   85500:	03b401f2 	.word	0x03b401f2
   85504:	03b40087 	.word	0x03b40087
   85508:	033103b4 	.word	0x033103b4
   8550c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8550e:	6823      	ldr	r3, [r4, #0]
   85510:	4618      	mov	r0, r3
   85512:	930d      	str	r3, [sp, #52]	; 0x34
   85514:	4623      	mov	r3, r4
   85516:	2800      	cmp	r0, #0
   85518:	f103 0304 	add.w	r3, r3, #4
   8551c:	930f      	str	r3, [sp, #60]	; 0x3c
   8551e:	da04      	bge.n	8552a <_svfprintf_r+0x196>
   85520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85522:	425b      	negs	r3, r3
   85524:	930d      	str	r3, [sp, #52]	; 0x34
   85526:	f04b 0b04 	orr.w	fp, fp, #4
   8552a:	f89a 3000 	ldrb.w	r3, [sl]
   8552e:	e78b      	b.n	85448 <_svfprintf_r+0xb4>
   85530:	aa25      	add	r2, sp, #148	; 0x94
   85532:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85534:	980c      	ldr	r0, [sp, #48]	; 0x30
   85536:	f003 f823 	bl	88580 <__ssprint_r>
   8553a:	b940      	cbnz	r0, 8554e <_svfprintf_r+0x1ba>
   8553c:	46c8      	mov	r8, r9
   8553e:	e76f      	b.n	85420 <_svfprintf_r+0x8c>
   85540:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   85542:	b123      	cbz	r3, 8554e <_svfprintf_r+0x1ba>
   85544:	980c      	ldr	r0, [sp, #48]	; 0x30
   85546:	aa25      	add	r2, sp, #148	; 0x94
   85548:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8554a:	f003 f819 	bl	88580 <__ssprint_r>
   8554e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85550:	899b      	ldrh	r3, [r3, #12]
   85552:	f013 0f40 	tst.w	r3, #64	; 0x40
   85556:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85558:	bf18      	it	ne
   8555a:	f04f 33ff 	movne.w	r3, #4294967295
   8555e:	9309      	str	r3, [sp, #36]	; 0x24
   85560:	9809      	ldr	r0, [sp, #36]	; 0x24
   85562:	b043      	add	sp, #268	; 0x10c
   85564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85568:	f01b 0f20 	tst.w	fp, #32
   8556c:	9311      	str	r3, [sp, #68]	; 0x44
   8556e:	f040 81af 	bne.w	858d0 <_svfprintf_r+0x53c>
   85572:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85574:	f01b 0f10 	tst.w	fp, #16
   85578:	4613      	mov	r3, r2
   8557a:	f040 8596 	bne.w	860aa <_svfprintf_r+0xd16>
   8557e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85582:	f000 8592 	beq.w	860aa <_svfprintf_r+0xd16>
   85586:	2500      	movs	r5, #0
   85588:	2301      	movs	r3, #1
   8558a:	8814      	ldrh	r4, [r2, #0]
   8558c:	3204      	adds	r2, #4
   8558e:	920f      	str	r2, [sp, #60]	; 0x3c
   85590:	2200      	movs	r2, #0
   85592:	4617      	mov	r7, r2
   85594:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   85598:	990a      	ldr	r1, [sp, #40]	; 0x28
   8559a:	1c4a      	adds	r2, r1, #1
   8559c:	f000 8210 	beq.w	859c0 <_svfprintf_r+0x62c>
   855a0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   855a4:	9207      	str	r2, [sp, #28]
   855a6:	ea54 0205 	orrs.w	r2, r4, r5
   855aa:	f040 820f 	bne.w	859cc <_svfprintf_r+0x638>
   855ae:	2900      	cmp	r1, #0
   855b0:	f040 842d 	bne.w	85e0e <_svfprintf_r+0xa7a>
   855b4:	2b00      	cmp	r3, #0
   855b6:	f040 8535 	bne.w	86024 <_svfprintf_r+0xc90>
   855ba:	f01b 0301 	ands.w	r3, fp, #1
   855be:	930e      	str	r3, [sp, #56]	; 0x38
   855c0:	f000 865e 	beq.w	86280 <_svfprintf_r+0xeec>
   855c4:	2330      	movs	r3, #48	; 0x30
   855c6:	ae42      	add	r6, sp, #264	; 0x108
   855c8:	f806 3d41 	strb.w	r3, [r6, #-65]!
   855cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   855ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   855d0:	4293      	cmp	r3, r2
   855d2:	bfb8      	it	lt
   855d4:	4613      	movlt	r3, r2
   855d6:	9308      	str	r3, [sp, #32]
   855d8:	2300      	movs	r3, #0
   855da:	9312      	str	r3, [sp, #72]	; 0x48
   855dc:	b117      	cbz	r7, 855e4 <_svfprintf_r+0x250>
   855de:	9b08      	ldr	r3, [sp, #32]
   855e0:	3301      	adds	r3, #1
   855e2:	9308      	str	r3, [sp, #32]
   855e4:	9b07      	ldr	r3, [sp, #28]
   855e6:	f013 0302 	ands.w	r3, r3, #2
   855ea:	9310      	str	r3, [sp, #64]	; 0x40
   855ec:	d002      	beq.n	855f4 <_svfprintf_r+0x260>
   855ee:	9b08      	ldr	r3, [sp, #32]
   855f0:	3302      	adds	r3, #2
   855f2:	9308      	str	r3, [sp, #32]
   855f4:	9b07      	ldr	r3, [sp, #28]
   855f6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   855fa:	f040 830e 	bne.w	85c1a <_svfprintf_r+0x886>
   855fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85600:	9a08      	ldr	r2, [sp, #32]
   85602:	eba3 0b02 	sub.w	fp, r3, r2
   85606:	f1bb 0f00 	cmp.w	fp, #0
   8560a:	f340 8306 	ble.w	85c1a <_svfprintf_r+0x886>
   8560e:	f1bb 0f10 	cmp.w	fp, #16
   85612:	f340 87ae 	ble.w	86572 <_svfprintf_r+0x11de>
   85616:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85618:	4643      	mov	r3, r8
   8561a:	4621      	mov	r1, r4
   8561c:	46a8      	mov	r8, r5
   8561e:	2710      	movs	r7, #16
   85620:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85622:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85624:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85626:	e006      	b.n	85636 <_svfprintf_r+0x2a2>
   85628:	f1ab 0b10 	sub.w	fp, fp, #16
   8562c:	f1bb 0f10 	cmp.w	fp, #16
   85630:	f103 0308 	add.w	r3, r3, #8
   85634:	dd18      	ble.n	85668 <_svfprintf_r+0x2d4>
   85636:	3201      	adds	r2, #1
   85638:	48ab      	ldr	r0, [pc, #684]	; (858e8 <_svfprintf_r+0x554>)
   8563a:	3110      	adds	r1, #16
   8563c:	2a07      	cmp	r2, #7
   8563e:	9127      	str	r1, [sp, #156]	; 0x9c
   85640:	9226      	str	r2, [sp, #152]	; 0x98
   85642:	e883 0081 	stmia.w	r3, {r0, r7}
   85646:	ddef      	ble.n	85628 <_svfprintf_r+0x294>
   85648:	aa25      	add	r2, sp, #148	; 0x94
   8564a:	4629      	mov	r1, r5
   8564c:	4620      	mov	r0, r4
   8564e:	f002 ff97 	bl	88580 <__ssprint_r>
   85652:	2800      	cmp	r0, #0
   85654:	f47f af7b 	bne.w	8554e <_svfprintf_r+0x1ba>
   85658:	f1ab 0b10 	sub.w	fp, fp, #16
   8565c:	f1bb 0f10 	cmp.w	fp, #16
   85660:	464b      	mov	r3, r9
   85662:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85664:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85666:	dce6      	bgt.n	85636 <_svfprintf_r+0x2a2>
   85668:	4645      	mov	r5, r8
   8566a:	460c      	mov	r4, r1
   8566c:	4698      	mov	r8, r3
   8566e:	3201      	adds	r2, #1
   85670:	4b9d      	ldr	r3, [pc, #628]	; (858e8 <_svfprintf_r+0x554>)
   85672:	445c      	add	r4, fp
   85674:	2a07      	cmp	r2, #7
   85676:	9427      	str	r4, [sp, #156]	; 0x9c
   85678:	9226      	str	r2, [sp, #152]	; 0x98
   8567a:	e888 0808 	stmia.w	r8, {r3, fp}
   8567e:	f300 82c1 	bgt.w	85c04 <_svfprintf_r+0x870>
   85682:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85686:	f108 0808 	add.w	r8, r8, #8
   8568a:	b187      	cbz	r7, 856ae <_svfprintf_r+0x31a>
   8568c:	2101      	movs	r1, #1
   8568e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85690:	440c      	add	r4, r1
   85692:	440b      	add	r3, r1
   85694:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   85698:	2b07      	cmp	r3, #7
   8569a:	9427      	str	r4, [sp, #156]	; 0x9c
   8569c:	9326      	str	r3, [sp, #152]	; 0x98
   8569e:	f8c8 1004 	str.w	r1, [r8, #4]
   856a2:	f8c8 2000 	str.w	r2, [r8]
   856a6:	f300 83c9 	bgt.w	85e3c <_svfprintf_r+0xaa8>
   856aa:	f108 0808 	add.w	r8, r8, #8
   856ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   856b0:	b17b      	cbz	r3, 856d2 <_svfprintf_r+0x33e>
   856b2:	2102      	movs	r1, #2
   856b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   856b6:	440c      	add	r4, r1
   856b8:	3301      	adds	r3, #1
   856ba:	aa1e      	add	r2, sp, #120	; 0x78
   856bc:	2b07      	cmp	r3, #7
   856be:	9427      	str	r4, [sp, #156]	; 0x9c
   856c0:	9326      	str	r3, [sp, #152]	; 0x98
   856c2:	f8c8 1004 	str.w	r1, [r8, #4]
   856c6:	f8c8 2000 	str.w	r2, [r8]
   856ca:	f300 840d 	bgt.w	85ee8 <_svfprintf_r+0xb54>
   856ce:	f108 0808 	add.w	r8, r8, #8
   856d2:	2d80      	cmp	r5, #128	; 0x80
   856d4:	f000 8301 	beq.w	85cda <_svfprintf_r+0x946>
   856d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   856da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   856dc:	1a9f      	subs	r7, r3, r2
   856de:	2f00      	cmp	r7, #0
   856e0:	dd37      	ble.n	85752 <_svfprintf_r+0x3be>
   856e2:	2f10      	cmp	r7, #16
   856e4:	f340 8675 	ble.w	863d2 <_svfprintf_r+0x103e>
   856e8:	4d80      	ldr	r5, [pc, #512]	; (858ec <_svfprintf_r+0x558>)
   856ea:	4642      	mov	r2, r8
   856ec:	4621      	mov	r1, r4
   856ee:	46b0      	mov	r8, r6
   856f0:	f04f 0b10 	mov.w	fp, #16
   856f4:	462e      	mov	r6, r5
   856f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   856f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   856fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   856fc:	e004      	b.n	85708 <_svfprintf_r+0x374>
   856fe:	3f10      	subs	r7, #16
   85700:	2f10      	cmp	r7, #16
   85702:	f102 0208 	add.w	r2, r2, #8
   85706:	dd15      	ble.n	85734 <_svfprintf_r+0x3a0>
   85708:	3301      	adds	r3, #1
   8570a:	3110      	adds	r1, #16
   8570c:	2b07      	cmp	r3, #7
   8570e:	9127      	str	r1, [sp, #156]	; 0x9c
   85710:	9326      	str	r3, [sp, #152]	; 0x98
   85712:	e882 0840 	stmia.w	r2, {r6, fp}
   85716:	ddf2      	ble.n	856fe <_svfprintf_r+0x36a>
   85718:	aa25      	add	r2, sp, #148	; 0x94
   8571a:	4629      	mov	r1, r5
   8571c:	4620      	mov	r0, r4
   8571e:	f002 ff2f 	bl	88580 <__ssprint_r>
   85722:	2800      	cmp	r0, #0
   85724:	f47f af13 	bne.w	8554e <_svfprintf_r+0x1ba>
   85728:	3f10      	subs	r7, #16
   8572a:	2f10      	cmp	r7, #16
   8572c:	464a      	mov	r2, r9
   8572e:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85730:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85732:	dce9      	bgt.n	85708 <_svfprintf_r+0x374>
   85734:	4635      	mov	r5, r6
   85736:	460c      	mov	r4, r1
   85738:	4646      	mov	r6, r8
   8573a:	4690      	mov	r8, r2
   8573c:	3301      	adds	r3, #1
   8573e:	443c      	add	r4, r7
   85740:	2b07      	cmp	r3, #7
   85742:	9427      	str	r4, [sp, #156]	; 0x9c
   85744:	9326      	str	r3, [sp, #152]	; 0x98
   85746:	e888 00a0 	stmia.w	r8, {r5, r7}
   8574a:	f300 836c 	bgt.w	85e26 <_svfprintf_r+0xa92>
   8574e:	f108 0808 	add.w	r8, r8, #8
   85752:	9b07      	ldr	r3, [sp, #28]
   85754:	05df      	lsls	r7, r3, #23
   85756:	f100 8262 	bmi.w	85c1e <_svfprintf_r+0x88a>
   8575a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8575c:	990e      	ldr	r1, [sp, #56]	; 0x38
   8575e:	3301      	adds	r3, #1
   85760:	440c      	add	r4, r1
   85762:	2b07      	cmp	r3, #7
   85764:	9427      	str	r4, [sp, #156]	; 0x9c
   85766:	f8c8 6000 	str.w	r6, [r8]
   8576a:	f8c8 1004 	str.w	r1, [r8, #4]
   8576e:	9326      	str	r3, [sp, #152]	; 0x98
   85770:	f300 83af 	bgt.w	85ed2 <_svfprintf_r+0xb3e>
   85774:	f108 0808 	add.w	r8, r8, #8
   85778:	9b07      	ldr	r3, [sp, #28]
   8577a:	075b      	lsls	r3, r3, #29
   8577c:	d53b      	bpl.n	857f6 <_svfprintf_r+0x462>
   8577e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85780:	9a08      	ldr	r2, [sp, #32]
   85782:	1a9d      	subs	r5, r3, r2
   85784:	2d00      	cmp	r5, #0
   85786:	dd36      	ble.n	857f6 <_svfprintf_r+0x462>
   85788:	2d10      	cmp	r5, #16
   8578a:	f340 871d 	ble.w	865c8 <_svfprintf_r+0x1234>
   8578e:	2610      	movs	r6, #16
   85790:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85792:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85794:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   85798:	e004      	b.n	857a4 <_svfprintf_r+0x410>
   8579a:	3d10      	subs	r5, #16
   8579c:	2d10      	cmp	r5, #16
   8579e:	f108 0808 	add.w	r8, r8, #8
   857a2:	dd16      	ble.n	857d2 <_svfprintf_r+0x43e>
   857a4:	3301      	adds	r3, #1
   857a6:	4a50      	ldr	r2, [pc, #320]	; (858e8 <_svfprintf_r+0x554>)
   857a8:	3410      	adds	r4, #16
   857aa:	2b07      	cmp	r3, #7
   857ac:	9427      	str	r4, [sp, #156]	; 0x9c
   857ae:	9326      	str	r3, [sp, #152]	; 0x98
   857b0:	e888 0044 	stmia.w	r8, {r2, r6}
   857b4:	ddf1      	ble.n	8579a <_svfprintf_r+0x406>
   857b6:	aa25      	add	r2, sp, #148	; 0x94
   857b8:	4659      	mov	r1, fp
   857ba:	4638      	mov	r0, r7
   857bc:	f002 fee0 	bl	88580 <__ssprint_r>
   857c0:	2800      	cmp	r0, #0
   857c2:	f47f aec4 	bne.w	8554e <_svfprintf_r+0x1ba>
   857c6:	3d10      	subs	r5, #16
   857c8:	2d10      	cmp	r5, #16
   857ca:	46c8      	mov	r8, r9
   857cc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   857ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   857d0:	dce8      	bgt.n	857a4 <_svfprintf_r+0x410>
   857d2:	3301      	adds	r3, #1
   857d4:	4a44      	ldr	r2, [pc, #272]	; (858e8 <_svfprintf_r+0x554>)
   857d6:	442c      	add	r4, r5
   857d8:	2b07      	cmp	r3, #7
   857da:	9427      	str	r4, [sp, #156]	; 0x9c
   857dc:	9326      	str	r3, [sp, #152]	; 0x98
   857de:	e888 0024 	stmia.w	r8, {r2, r5}
   857e2:	dd08      	ble.n	857f6 <_svfprintf_r+0x462>
   857e4:	aa25      	add	r2, sp, #148	; 0x94
   857e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   857e8:	980c      	ldr	r0, [sp, #48]	; 0x30
   857ea:	f002 fec9 	bl	88580 <__ssprint_r>
   857ee:	2800      	cmp	r0, #0
   857f0:	f47f aead 	bne.w	8554e <_svfprintf_r+0x1ba>
   857f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   857f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   857f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   857fa:	9908      	ldr	r1, [sp, #32]
   857fc:	428a      	cmp	r2, r1
   857fe:	bfac      	ite	ge
   85800:	189b      	addge	r3, r3, r2
   85802:	185b      	addlt	r3, r3, r1
   85804:	9309      	str	r3, [sp, #36]	; 0x24
   85806:	2c00      	cmp	r4, #0
   85808:	f040 82f7 	bne.w	85dfa <_svfprintf_r+0xa66>
   8580c:	2300      	movs	r3, #0
   8580e:	46c8      	mov	r8, r9
   85810:	9326      	str	r3, [sp, #152]	; 0x98
   85812:	e5e6      	b.n	853e2 <_svfprintf_r+0x4e>
   85814:	9311      	str	r3, [sp, #68]	; 0x44
   85816:	f01b 0320 	ands.w	r3, fp, #32
   8581a:	f040 8144 	bne.w	85aa6 <_svfprintf_r+0x712>
   8581e:	f01b 0210 	ands.w	r2, fp, #16
   85822:	f040 8462 	bne.w	860ea <_svfprintf_r+0xd56>
   85826:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   8582a:	f000 845e 	beq.w	860ea <_svfprintf_r+0xd56>
   8582e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   85830:	4613      	mov	r3, r2
   85832:	460a      	mov	r2, r1
   85834:	3204      	adds	r2, #4
   85836:	880c      	ldrh	r4, [r1, #0]
   85838:	2500      	movs	r5, #0
   8583a:	920f      	str	r2, [sp, #60]	; 0x3c
   8583c:	e6a8      	b.n	85590 <_svfprintf_r+0x1fc>
   8583e:	2500      	movs	r5, #0
   85840:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85842:	9311      	str	r3, [sp, #68]	; 0x44
   85844:	6816      	ldr	r6, [r2, #0]
   85846:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   8584a:	1d14      	adds	r4, r2, #4
   8584c:	2e00      	cmp	r6, #0
   8584e:	f000 86c9 	beq.w	865e4 <_svfprintf_r+0x1250>
   85852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85854:	1c53      	adds	r3, r2, #1
   85856:	f000 8617 	beq.w	86488 <_svfprintf_r+0x10f4>
   8585a:	4629      	mov	r1, r5
   8585c:	4630      	mov	r0, r6
   8585e:	f002 fac1 	bl	87de4 <memchr>
   85862:	2800      	cmp	r0, #0
   85864:	f000 8709 	beq.w	8667a <_svfprintf_r+0x12e6>
   85868:	1b83      	subs	r3, r0, r6
   8586a:	950a      	str	r5, [sp, #40]	; 0x28
   8586c:	930e      	str	r3, [sp, #56]	; 0x38
   8586e:	940f      	str	r4, [sp, #60]	; 0x3c
   85870:	f8cd b01c 	str.w	fp, [sp, #28]
   85874:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85878:	9308      	str	r3, [sp, #32]
   8587a:	9512      	str	r5, [sp, #72]	; 0x48
   8587c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85880:	e6ac      	b.n	855dc <_svfprintf_r+0x248>
   85882:	f89a 3000 	ldrb.w	r3, [sl]
   85886:	f10a 0401 	add.w	r4, sl, #1
   8588a:	2b2a      	cmp	r3, #42	; 0x2a
   8588c:	f000 87bd 	beq.w	8680a <_svfprintf_r+0x1476>
   85890:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85894:	2809      	cmp	r0, #9
   85896:	46a2      	mov	sl, r4
   85898:	f200 8714 	bhi.w	866c4 <_svfprintf_r+0x1330>
   8589c:	2300      	movs	r3, #0
   8589e:	461c      	mov	r4, r3
   858a0:	f81a 3b01 	ldrb.w	r3, [sl], #1
   858a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   858a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   858ac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   858b0:	2809      	cmp	r0, #9
   858b2:	d9f5      	bls.n	858a0 <_svfprintf_r+0x50c>
   858b4:	940a      	str	r4, [sp, #40]	; 0x28
   858b6:	e5c9      	b.n	8544c <_svfprintf_r+0xb8>
   858b8:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   858bc:	f89a 3000 	ldrb.w	r3, [sl]
   858c0:	e5c2      	b.n	85448 <_svfprintf_r+0xb4>
   858c2:	f04b 0b10 	orr.w	fp, fp, #16
   858c6:	f01b 0f20 	tst.w	fp, #32
   858ca:	9311      	str	r3, [sp, #68]	; 0x44
   858cc:	f43f ae51 	beq.w	85572 <_svfprintf_r+0x1de>
   858d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   858d2:	3407      	adds	r4, #7
   858d4:	f024 0307 	bic.w	r3, r4, #7
   858d8:	f103 0208 	add.w	r2, r3, #8
   858dc:	e9d3 4500 	ldrd	r4, r5, [r3]
   858e0:	920f      	str	r2, [sp, #60]	; 0x3c
   858e2:	2301      	movs	r3, #1
   858e4:	e654      	b.n	85590 <_svfprintf_r+0x1fc>
   858e6:	bf00      	nop
   858e8:	0008af78 	.word	0x0008af78
   858ec:	0008af88 	.word	0x0008af88
   858f0:	9311      	str	r3, [sp, #68]	; 0x44
   858f2:	2a00      	cmp	r2, #0
   858f4:	f040 87a8 	bne.w	86848 <_svfprintf_r+0x14b4>
   858f8:	4bbd      	ldr	r3, [pc, #756]	; (85bf0 <_svfprintf_r+0x85c>)
   858fa:	f01b 0f20 	tst.w	fp, #32
   858fe:	9318      	str	r3, [sp, #96]	; 0x60
   85900:	f040 80e6 	bne.w	85ad0 <_svfprintf_r+0x73c>
   85904:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85906:	f01b 0f10 	tst.w	fp, #16
   8590a:	4613      	mov	r3, r2
   8590c:	f040 83d4 	bne.w	860b8 <_svfprintf_r+0xd24>
   85910:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85914:	f000 83d0 	beq.w	860b8 <_svfprintf_r+0xd24>
   85918:	2500      	movs	r5, #0
   8591a:	3304      	adds	r3, #4
   8591c:	8814      	ldrh	r4, [r2, #0]
   8591e:	930f      	str	r3, [sp, #60]	; 0x3c
   85920:	f01b 0f01 	tst.w	fp, #1
   85924:	f000 80e2 	beq.w	85aec <_svfprintf_r+0x758>
   85928:	ea54 0305 	orrs.w	r3, r4, r5
   8592c:	f000 80de 	beq.w	85aec <_svfprintf_r+0x758>
   85930:	2330      	movs	r3, #48	; 0x30
   85932:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   85936:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   8593a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   8593e:	f04b 0b02 	orr.w	fp, fp, #2
   85942:	2302      	movs	r3, #2
   85944:	e624      	b.n	85590 <_svfprintf_r+0x1fc>
   85946:	2201      	movs	r2, #1
   85948:	9311      	str	r3, [sp, #68]	; 0x44
   8594a:	2300      	movs	r3, #0
   8594c:	4611      	mov	r1, r2
   8594e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   85950:	9208      	str	r2, [sp, #32]
   85952:	6802      	ldr	r2, [r0, #0]
   85954:	461f      	mov	r7, r3
   85956:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8595a:	930a      	str	r3, [sp, #40]	; 0x28
   8595c:	9312      	str	r3, [sp, #72]	; 0x48
   8595e:	1d03      	adds	r3, r0, #4
   85960:	f8cd b01c 	str.w	fp, [sp, #28]
   85964:	910e      	str	r1, [sp, #56]	; 0x38
   85966:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   8596a:	930f      	str	r3, [sp, #60]	; 0x3c
   8596c:	ae28      	add	r6, sp, #160	; 0xa0
   8596e:	e639      	b.n	855e4 <_svfprintf_r+0x250>
   85970:	9311      	str	r3, [sp, #68]	; 0x44
   85972:	2a00      	cmp	r2, #0
   85974:	f040 877f 	bne.w	86876 <_svfprintf_r+0x14e2>
   85978:	f04b 0b10 	orr.w	fp, fp, #16
   8597c:	f01b 0f20 	tst.w	fp, #32
   85980:	f040 8471 	bne.w	86266 <_svfprintf_r+0xed2>
   85984:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85986:	f01b 0f10 	tst.w	fp, #16
   8598a:	4613      	mov	r3, r2
   8598c:	f040 8399 	bne.w	860c2 <_svfprintf_r+0xd2e>
   85990:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85994:	f000 8395 	beq.w	860c2 <_svfprintf_r+0xd2e>
   85998:	f9b2 4000 	ldrsh.w	r4, [r2]
   8599c:	3304      	adds	r3, #4
   8599e:	17e5      	asrs	r5, r4, #31
   859a0:	930f      	str	r3, [sp, #60]	; 0x3c
   859a2:	4622      	mov	r2, r4
   859a4:	462b      	mov	r3, r5
   859a6:	2a00      	cmp	r2, #0
   859a8:	f173 0300 	sbcs.w	r3, r3, #0
   859ac:	f2c0 8394 	blt.w	860d8 <_svfprintf_r+0xd44>
   859b0:	990a      	ldr	r1, [sp, #40]	; 0x28
   859b2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   859b6:	1c4a      	adds	r2, r1, #1
   859b8:	f04f 0301 	mov.w	r3, #1
   859bc:	f47f adf0 	bne.w	855a0 <_svfprintf_r+0x20c>
   859c0:	ea54 0205 	orrs.w	r2, r4, r5
   859c4:	f000 8225 	beq.w	85e12 <_svfprintf_r+0xa7e>
   859c8:	f8cd b01c 	str.w	fp, [sp, #28]
   859cc:	2b01      	cmp	r3, #1
   859ce:	f000 830a 	beq.w	85fe6 <_svfprintf_r+0xc52>
   859d2:	2b02      	cmp	r3, #2
   859d4:	f040 8298 	bne.w	85f08 <_svfprintf_r+0xb74>
   859d8:	464e      	mov	r6, r9
   859da:	9818      	ldr	r0, [sp, #96]	; 0x60
   859dc:	0923      	lsrs	r3, r4, #4
   859de:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   859e2:	0929      	lsrs	r1, r5, #4
   859e4:	f004 020f 	and.w	r2, r4, #15
   859e8:	460d      	mov	r5, r1
   859ea:	461c      	mov	r4, r3
   859ec:	5c83      	ldrb	r3, [r0, r2]
   859ee:	f806 3d01 	strb.w	r3, [r6, #-1]!
   859f2:	ea54 0305 	orrs.w	r3, r4, r5
   859f6:	d1f1      	bne.n	859dc <_svfprintf_r+0x648>
   859f8:	eba9 0306 	sub.w	r3, r9, r6
   859fc:	930e      	str	r3, [sp, #56]	; 0x38
   859fe:	e5e5      	b.n	855cc <_svfprintf_r+0x238>
   85a00:	9311      	str	r3, [sp, #68]	; 0x44
   85a02:	2a00      	cmp	r2, #0
   85a04:	f040 8733 	bne.w	8686e <_svfprintf_r+0x14da>
   85a08:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85a0a:	f01b 0f08 	tst.w	fp, #8
   85a0e:	f104 0407 	add.w	r4, r4, #7
   85a12:	f000 84cb 	beq.w	863ac <_svfprintf_r+0x1018>
   85a16:	f024 0307 	bic.w	r3, r4, #7
   85a1a:	f103 0208 	add.w	r2, r3, #8
   85a1e:	920f      	str	r2, [sp, #60]	; 0x3c
   85a20:	681a      	ldr	r2, [r3, #0]
   85a22:	685b      	ldr	r3, [r3, #4]
   85a24:	9214      	str	r2, [sp, #80]	; 0x50
   85a26:	9315      	str	r3, [sp, #84]	; 0x54
   85a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85a2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
   85a2c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   85a30:	4628      	mov	r0, r5
   85a32:	4621      	mov	r1, r4
   85a34:	f04f 32ff 	mov.w	r2, #4294967295
   85a38:	4b6e      	ldr	r3, [pc, #440]	; (85bf4 <_svfprintf_r+0x860>)
   85a3a:	f003 fe53 	bl	896e4 <__aeabi_dcmpun>
   85a3e:	2800      	cmp	r0, #0
   85a40:	f040 8430 	bne.w	862a4 <_svfprintf_r+0xf10>
   85a44:	4628      	mov	r0, r5
   85a46:	4621      	mov	r1, r4
   85a48:	f04f 32ff 	mov.w	r2, #4294967295
   85a4c:	4b69      	ldr	r3, [pc, #420]	; (85bf4 <_svfprintf_r+0x860>)
   85a4e:	f003 fe2b 	bl	896a8 <__aeabi_dcmple>
   85a52:	2800      	cmp	r0, #0
   85a54:	f040 8426 	bne.w	862a4 <_svfprintf_r+0xf10>
   85a58:	a814      	add	r0, sp, #80	; 0x50
   85a5a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   85a5c:	f003 fe1a 	bl	89694 <__aeabi_dcmplt>
   85a60:	2800      	cmp	r0, #0
   85a62:	f040 85d1 	bne.w	86608 <_svfprintf_r+0x1274>
   85a66:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85a6a:	2303      	movs	r3, #3
   85a6c:	461a      	mov	r2, r3
   85a6e:	9308      	str	r3, [sp, #32]
   85a70:	2300      	movs	r3, #0
   85a72:	4619      	mov	r1, r3
   85a74:	930a      	str	r3, [sp, #40]	; 0x28
   85a76:	4e60      	ldr	r6, [pc, #384]	; (85bf8 <_svfprintf_r+0x864>)
   85a78:	4b60      	ldr	r3, [pc, #384]	; (85bfc <_svfprintf_r+0x868>)
   85a7a:	920e      	str	r2, [sp, #56]	; 0x38
   85a7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85a7e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   85a82:	9007      	str	r0, [sp, #28]
   85a84:	9112      	str	r1, [sp, #72]	; 0x48
   85a86:	2a47      	cmp	r2, #71	; 0x47
   85a88:	bfd8      	it	le
   85a8a:	461e      	movle	r6, r3
   85a8c:	e5a6      	b.n	855dc <_svfprintf_r+0x248>
   85a8e:	f04b 0b08 	orr.w	fp, fp, #8
   85a92:	f89a 3000 	ldrb.w	r3, [sl]
   85a96:	e4d7      	b.n	85448 <_svfprintf_r+0xb4>
   85a98:	f04b 0b10 	orr.w	fp, fp, #16
   85a9c:	9311      	str	r3, [sp, #68]	; 0x44
   85a9e:	f01b 0320 	ands.w	r3, fp, #32
   85aa2:	f43f aebc 	beq.w	8581e <_svfprintf_r+0x48a>
   85aa6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85aa8:	3407      	adds	r4, #7
   85aaa:	f024 0307 	bic.w	r3, r4, #7
   85aae:	f103 0208 	add.w	r2, r3, #8
   85ab2:	e9d3 4500 	ldrd	r4, r5, [r3]
   85ab6:	920f      	str	r2, [sp, #60]	; 0x3c
   85ab8:	2300      	movs	r3, #0
   85aba:	e569      	b.n	85590 <_svfprintf_r+0x1fc>
   85abc:	9311      	str	r3, [sp, #68]	; 0x44
   85abe:	2a00      	cmp	r2, #0
   85ac0:	f040 86be 	bne.w	86840 <_svfprintf_r+0x14ac>
   85ac4:	4b4e      	ldr	r3, [pc, #312]	; (85c00 <_svfprintf_r+0x86c>)
   85ac6:	f01b 0f20 	tst.w	fp, #32
   85aca:	9318      	str	r3, [sp, #96]	; 0x60
   85acc:	f43f af1a 	beq.w	85904 <_svfprintf_r+0x570>
   85ad0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85ad2:	f01b 0f01 	tst.w	fp, #1
   85ad6:	f104 0407 	add.w	r4, r4, #7
   85ada:	f024 0307 	bic.w	r3, r4, #7
   85ade:	f103 0208 	add.w	r2, r3, #8
   85ae2:	920f      	str	r2, [sp, #60]	; 0x3c
   85ae4:	e9d3 4500 	ldrd	r4, r5, [r3]
   85ae8:	f47f af1e 	bne.w	85928 <_svfprintf_r+0x594>
   85aec:	2302      	movs	r3, #2
   85aee:	e54f      	b.n	85590 <_svfprintf_r+0x1fc>
   85af0:	f89a 3000 	ldrb.w	r3, [sl]
   85af4:	2900      	cmp	r1, #0
   85af6:	f47f aca7 	bne.w	85448 <_svfprintf_r+0xb4>
   85afa:	2201      	movs	r2, #1
   85afc:	2120      	movs	r1, #32
   85afe:	e4a3      	b.n	85448 <_svfprintf_r+0xb4>
   85b00:	f04b 0b01 	orr.w	fp, fp, #1
   85b04:	f89a 3000 	ldrb.w	r3, [sl]
   85b08:	e49e      	b.n	85448 <_svfprintf_r+0xb4>
   85b0a:	f89a 3000 	ldrb.w	r3, [sl]
   85b0e:	2201      	movs	r2, #1
   85b10:	212b      	movs	r1, #43	; 0x2b
   85b12:	e499      	b.n	85448 <_svfprintf_r+0xb4>
   85b14:	f04b 0b20 	orr.w	fp, fp, #32
   85b18:	f89a 3000 	ldrb.w	r3, [sl]
   85b1c:	e494      	b.n	85448 <_svfprintf_r+0xb4>
   85b1e:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   85b22:	f89a 3000 	ldrb.w	r3, [sl]
   85b26:	e48f      	b.n	85448 <_svfprintf_r+0xb4>
   85b28:	f89a 3000 	ldrb.w	r3, [sl]
   85b2c:	2b6c      	cmp	r3, #108	; 0x6c
   85b2e:	bf03      	ittte	eq
   85b30:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   85b34:	f04b 0b20 	orreq.w	fp, fp, #32
   85b38:	f10a 0a01 	addeq.w	sl, sl, #1
   85b3c:	f04b 0b10 	orrne.w	fp, fp, #16
   85b40:	e482      	b.n	85448 <_svfprintf_r+0xb4>
   85b42:	2a00      	cmp	r2, #0
   85b44:	f040 8678 	bne.w	86838 <_svfprintf_r+0x14a4>
   85b48:	f01b 0f20 	tst.w	fp, #32
   85b4c:	f040 844f 	bne.w	863ee <_svfprintf_r+0x105a>
   85b50:	f01b 0f10 	tst.w	fp, #16
   85b54:	f040 8435 	bne.w	863c2 <_svfprintf_r+0x102e>
   85b58:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85b5c:	f000 8431 	beq.w	863c2 <_svfprintf_r+0x102e>
   85b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85b62:	6813      	ldr	r3, [r2, #0]
   85b64:	3204      	adds	r2, #4
   85b66:	920f      	str	r2, [sp, #60]	; 0x3c
   85b68:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   85b6c:	801a      	strh	r2, [r3, #0]
   85b6e:	e438      	b.n	853e2 <_svfprintf_r+0x4e>
   85b70:	2378      	movs	r3, #120	; 0x78
   85b72:	2230      	movs	r2, #48	; 0x30
   85b74:	980f      	ldr	r0, [sp, #60]	; 0x3c
   85b76:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   85b7a:	9311      	str	r3, [sp, #68]	; 0x44
   85b7c:	1d03      	adds	r3, r0, #4
   85b7e:	930f      	str	r3, [sp, #60]	; 0x3c
   85b80:	4b1f      	ldr	r3, [pc, #124]	; (85c00 <_svfprintf_r+0x86c>)
   85b82:	6804      	ldr	r4, [r0, #0]
   85b84:	9318      	str	r3, [sp, #96]	; 0x60
   85b86:	f04b 0b02 	orr.w	fp, fp, #2
   85b8a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   85b8e:	2500      	movs	r5, #0
   85b90:	2302      	movs	r3, #2
   85b92:	e4fd      	b.n	85590 <_svfprintf_r+0x1fc>
   85b94:	9311      	str	r3, [sp, #68]	; 0x44
   85b96:	2a00      	cmp	r2, #0
   85b98:	f43f aef0 	beq.w	8597c <_svfprintf_r+0x5e8>
   85b9c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85ba0:	e6ec      	b.n	8597c <_svfprintf_r+0x5e8>
   85ba2:	2000      	movs	r0, #0
   85ba4:	4604      	mov	r4, r0
   85ba6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85baa:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85bae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   85bb2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   85bb6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85bba:	2809      	cmp	r0, #9
   85bbc:	d9f5      	bls.n	85baa <_svfprintf_r+0x816>
   85bbe:	940d      	str	r4, [sp, #52]	; 0x34
   85bc0:	e444      	b.n	8544c <_svfprintf_r+0xb8>
   85bc2:	9311      	str	r3, [sp, #68]	; 0x44
   85bc4:	2a00      	cmp	r2, #0
   85bc6:	f040 8646 	bne.w	86856 <_svfprintf_r+0x14c2>
   85bca:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85bcc:	2a00      	cmp	r2, #0
   85bce:	f43f acb7 	beq.w	85540 <_svfprintf_r+0x1ac>
   85bd2:	2300      	movs	r3, #0
   85bd4:	2101      	movs	r1, #1
   85bd6:	461f      	mov	r7, r3
   85bd8:	9108      	str	r1, [sp, #32]
   85bda:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   85bde:	f8cd b01c 	str.w	fp, [sp, #28]
   85be2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85be6:	930a      	str	r3, [sp, #40]	; 0x28
   85be8:	9312      	str	r3, [sp, #72]	; 0x48
   85bea:	910e      	str	r1, [sp, #56]	; 0x38
   85bec:	ae28      	add	r6, sp, #160	; 0xa0
   85bee:	e4f9      	b.n	855e4 <_svfprintf_r+0x250>
   85bf0:	0008af44 	.word	0x0008af44
   85bf4:	7fefffff 	.word	0x7fefffff
   85bf8:	0008af38 	.word	0x0008af38
   85bfc:	0008af34 	.word	0x0008af34
   85c00:	0008af58 	.word	0x0008af58
   85c04:	aa25      	add	r2, sp, #148	; 0x94
   85c06:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85c08:	980c      	ldr	r0, [sp, #48]	; 0x30
   85c0a:	f002 fcb9 	bl	88580 <__ssprint_r>
   85c0e:	2800      	cmp	r0, #0
   85c10:	f47f ac9d 	bne.w	8554e <_svfprintf_r+0x1ba>
   85c14:	46c8      	mov	r8, r9
   85c16:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85c1a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85c1c:	e535      	b.n	8568a <_svfprintf_r+0x2f6>
   85c1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85c20:	2b65      	cmp	r3, #101	; 0x65
   85c22:	f340 8099 	ble.w	85d58 <_svfprintf_r+0x9c4>
   85c26:	a814      	add	r0, sp, #80	; 0x50
   85c28:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   85c2a:	f003 fd29 	bl	89680 <__aeabi_dcmpeq>
   85c2e:	2800      	cmp	r0, #0
   85c30:	f000 8192 	beq.w	85f58 <_svfprintf_r+0xbc4>
   85c34:	2101      	movs	r1, #1
   85c36:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85c38:	4ab4      	ldr	r2, [pc, #720]	; (85f0c <_svfprintf_r+0xb78>)
   85c3a:	440b      	add	r3, r1
   85c3c:	440c      	add	r4, r1
   85c3e:	2b07      	cmp	r3, #7
   85c40:	9427      	str	r4, [sp, #156]	; 0x9c
   85c42:	9326      	str	r3, [sp, #152]	; 0x98
   85c44:	f8c8 1004 	str.w	r1, [r8, #4]
   85c48:	f8c8 2000 	str.w	r2, [r8]
   85c4c:	f300 83c5 	bgt.w	863da <_svfprintf_r+0x1046>
   85c50:	f108 0808 	add.w	r8, r8, #8
   85c54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85c56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85c58:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85c5a:	4293      	cmp	r3, r2
   85c5c:	db03      	blt.n	85c66 <_svfprintf_r+0x8d2>
   85c5e:	9b07      	ldr	r3, [sp, #28]
   85c60:	07dd      	lsls	r5, r3, #31
   85c62:	f57f ad89 	bpl.w	85778 <_svfprintf_r+0x3e4>
   85c66:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85c68:	9919      	ldr	r1, [sp, #100]	; 0x64
   85c6a:	3301      	adds	r3, #1
   85c6c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   85c6e:	440c      	add	r4, r1
   85c70:	2b07      	cmp	r3, #7
   85c72:	f8c8 2000 	str.w	r2, [r8]
   85c76:	f8c8 1004 	str.w	r1, [r8, #4]
   85c7a:	9427      	str	r4, [sp, #156]	; 0x9c
   85c7c:	9326      	str	r3, [sp, #152]	; 0x98
   85c7e:	f300 83c3 	bgt.w	86408 <_svfprintf_r+0x1074>
   85c82:	f108 0808 	add.w	r8, r8, #8
   85c86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85c88:	1e5e      	subs	r6, r3, #1
   85c8a:	2e00      	cmp	r6, #0
   85c8c:	f77f ad74 	ble.w	85778 <_svfprintf_r+0x3e4>
   85c90:	2e10      	cmp	r6, #16
   85c92:	f340 8574 	ble.w	8677e <_svfprintf_r+0x13ea>
   85c96:	4622      	mov	r2, r4
   85c98:	2710      	movs	r7, #16
   85c9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85c9c:	4d9c      	ldr	r5, [pc, #624]	; (85f10 <_svfprintf_r+0xb7c>)
   85c9e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   85ca2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85ca4:	e005      	b.n	85cb2 <_svfprintf_r+0x91e>
   85ca6:	f108 0808 	add.w	r8, r8, #8
   85caa:	3e10      	subs	r6, #16
   85cac:	2e10      	cmp	r6, #16
   85cae:	f340 8224 	ble.w	860fa <_svfprintf_r+0xd66>
   85cb2:	3301      	adds	r3, #1
   85cb4:	3210      	adds	r2, #16
   85cb6:	2b07      	cmp	r3, #7
   85cb8:	9227      	str	r2, [sp, #156]	; 0x9c
   85cba:	9326      	str	r3, [sp, #152]	; 0x98
   85cbc:	e888 00a0 	stmia.w	r8, {r5, r7}
   85cc0:	ddf1      	ble.n	85ca6 <_svfprintf_r+0x912>
   85cc2:	aa25      	add	r2, sp, #148	; 0x94
   85cc4:	4621      	mov	r1, r4
   85cc6:	4658      	mov	r0, fp
   85cc8:	f002 fc5a 	bl	88580 <__ssprint_r>
   85ccc:	2800      	cmp	r0, #0
   85cce:	f47f ac3e 	bne.w	8554e <_svfprintf_r+0x1ba>
   85cd2:	46c8      	mov	r8, r9
   85cd4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85cd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85cd8:	e7e7      	b.n	85caa <_svfprintf_r+0x916>
   85cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85cdc:	9a08      	ldr	r2, [sp, #32]
   85cde:	1a9f      	subs	r7, r3, r2
   85ce0:	2f00      	cmp	r7, #0
   85ce2:	f77f acf9 	ble.w	856d8 <_svfprintf_r+0x344>
   85ce6:	2f10      	cmp	r7, #16
   85ce8:	f340 84a7 	ble.w	8663a <_svfprintf_r+0x12a6>
   85cec:	4d88      	ldr	r5, [pc, #544]	; (85f10 <_svfprintf_r+0xb7c>)
   85cee:	4642      	mov	r2, r8
   85cf0:	4621      	mov	r1, r4
   85cf2:	46b0      	mov	r8, r6
   85cf4:	f04f 0b10 	mov.w	fp, #16
   85cf8:	462e      	mov	r6, r5
   85cfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85cfc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85cfe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85d00:	e004      	b.n	85d0c <_svfprintf_r+0x978>
   85d02:	3f10      	subs	r7, #16
   85d04:	2f10      	cmp	r7, #16
   85d06:	f102 0208 	add.w	r2, r2, #8
   85d0a:	dd15      	ble.n	85d38 <_svfprintf_r+0x9a4>
   85d0c:	3301      	adds	r3, #1
   85d0e:	3110      	adds	r1, #16
   85d10:	2b07      	cmp	r3, #7
   85d12:	9127      	str	r1, [sp, #156]	; 0x9c
   85d14:	9326      	str	r3, [sp, #152]	; 0x98
   85d16:	e882 0840 	stmia.w	r2, {r6, fp}
   85d1a:	ddf2      	ble.n	85d02 <_svfprintf_r+0x96e>
   85d1c:	aa25      	add	r2, sp, #148	; 0x94
   85d1e:	4629      	mov	r1, r5
   85d20:	4620      	mov	r0, r4
   85d22:	f002 fc2d 	bl	88580 <__ssprint_r>
   85d26:	2800      	cmp	r0, #0
   85d28:	f47f ac11 	bne.w	8554e <_svfprintf_r+0x1ba>
   85d2c:	3f10      	subs	r7, #16
   85d2e:	2f10      	cmp	r7, #16
   85d30:	464a      	mov	r2, r9
   85d32:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85d34:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85d36:	dce9      	bgt.n	85d0c <_svfprintf_r+0x978>
   85d38:	4635      	mov	r5, r6
   85d3a:	460c      	mov	r4, r1
   85d3c:	4646      	mov	r6, r8
   85d3e:	4690      	mov	r8, r2
   85d40:	3301      	adds	r3, #1
   85d42:	443c      	add	r4, r7
   85d44:	2b07      	cmp	r3, #7
   85d46:	9427      	str	r4, [sp, #156]	; 0x9c
   85d48:	9326      	str	r3, [sp, #152]	; 0x98
   85d4a:	e888 00a0 	stmia.w	r8, {r5, r7}
   85d4e:	f300 829d 	bgt.w	8628c <_svfprintf_r+0xef8>
   85d52:	f108 0808 	add.w	r8, r8, #8
   85d56:	e4bf      	b.n	856d8 <_svfprintf_r+0x344>
   85d58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85d5a:	2b01      	cmp	r3, #1
   85d5c:	f340 824e 	ble.w	861fc <_svfprintf_r+0xe68>
   85d60:	2301      	movs	r3, #1
   85d62:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85d64:	441c      	add	r4, r3
   85d66:	441f      	add	r7, r3
   85d68:	2f07      	cmp	r7, #7
   85d6a:	9427      	str	r4, [sp, #156]	; 0x9c
   85d6c:	f8c8 6000 	str.w	r6, [r8]
   85d70:	9726      	str	r7, [sp, #152]	; 0x98
   85d72:	f8c8 3004 	str.w	r3, [r8, #4]
   85d76:	f300 825e 	bgt.w	86236 <_svfprintf_r+0xea2>
   85d7a:	f108 0808 	add.w	r8, r8, #8
   85d7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85d80:	3701      	adds	r7, #1
   85d82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   85d84:	4414      	add	r4, r2
   85d86:	2f07      	cmp	r7, #7
   85d88:	9427      	str	r4, [sp, #156]	; 0x9c
   85d8a:	9726      	str	r7, [sp, #152]	; 0x98
   85d8c:	f8c8 3000 	str.w	r3, [r8]
   85d90:	f8c8 2004 	str.w	r2, [r8, #4]
   85d94:	f300 825b 	bgt.w	8624e <_svfprintf_r+0xeba>
   85d98:	f108 0808 	add.w	r8, r8, #8
   85d9c:	a814      	add	r0, sp, #80	; 0x50
   85d9e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   85da0:	f003 fc6e 	bl	89680 <__aeabi_dcmpeq>
   85da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85da6:	2800      	cmp	r0, #0
   85da8:	f040 8141 	bne.w	8602e <_svfprintf_r+0xc9a>
   85dac:	3b01      	subs	r3, #1
   85dae:	3701      	adds	r7, #1
   85db0:	3601      	adds	r6, #1
   85db2:	441c      	add	r4, r3
   85db4:	2f07      	cmp	r7, #7
   85db6:	f8c8 6000 	str.w	r6, [r8]
   85dba:	9726      	str	r7, [sp, #152]	; 0x98
   85dbc:	9427      	str	r4, [sp, #156]	; 0x9c
   85dbe:	f8c8 3004 	str.w	r3, [r8, #4]
   85dc2:	f300 8166 	bgt.w	86092 <_svfprintf_r+0xcfe>
   85dc6:	f108 0808 	add.w	r8, r8, #8
   85dca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   85dcc:	3701      	adds	r7, #1
   85dce:	4414      	add	r4, r2
   85dd0:	ab21      	add	r3, sp, #132	; 0x84
   85dd2:	2f07      	cmp	r7, #7
   85dd4:	9427      	str	r4, [sp, #156]	; 0x9c
   85dd6:	9726      	str	r7, [sp, #152]	; 0x98
   85dd8:	f8c8 2004 	str.w	r2, [r8, #4]
   85ddc:	f8c8 3000 	str.w	r3, [r8]
   85de0:	f77f acc8 	ble.w	85774 <_svfprintf_r+0x3e0>
   85de4:	aa25      	add	r2, sp, #148	; 0x94
   85de6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85de8:	980c      	ldr	r0, [sp, #48]	; 0x30
   85dea:	f002 fbc9 	bl	88580 <__ssprint_r>
   85dee:	2800      	cmp	r0, #0
   85df0:	f47f abad 	bne.w	8554e <_svfprintf_r+0x1ba>
   85df4:	46c8      	mov	r8, r9
   85df6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85df8:	e4be      	b.n	85778 <_svfprintf_r+0x3e4>
   85dfa:	aa25      	add	r2, sp, #148	; 0x94
   85dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85dfe:	980c      	ldr	r0, [sp, #48]	; 0x30
   85e00:	f002 fbbe 	bl	88580 <__ssprint_r>
   85e04:	2800      	cmp	r0, #0
   85e06:	f43f ad01 	beq.w	8580c <_svfprintf_r+0x478>
   85e0a:	f7ff bba0 	b.w	8554e <_svfprintf_r+0x1ba>
   85e0e:	f8dd b01c 	ldr.w	fp, [sp, #28]
   85e12:	2b01      	cmp	r3, #1
   85e14:	f000 817e 	beq.w	86114 <_svfprintf_r+0xd80>
   85e18:	2b02      	cmp	r3, #2
   85e1a:	d171      	bne.n	85f00 <_svfprintf_r+0xb6c>
   85e1c:	f8cd b01c 	str.w	fp, [sp, #28]
   85e20:	2400      	movs	r4, #0
   85e22:	2500      	movs	r5, #0
   85e24:	e5d8      	b.n	859d8 <_svfprintf_r+0x644>
   85e26:	aa25      	add	r2, sp, #148	; 0x94
   85e28:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85e2a:	980c      	ldr	r0, [sp, #48]	; 0x30
   85e2c:	f002 fba8 	bl	88580 <__ssprint_r>
   85e30:	2800      	cmp	r0, #0
   85e32:	f47f ab8c 	bne.w	8554e <_svfprintf_r+0x1ba>
   85e36:	46c8      	mov	r8, r9
   85e38:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85e3a:	e48a      	b.n	85752 <_svfprintf_r+0x3be>
   85e3c:	aa25      	add	r2, sp, #148	; 0x94
   85e3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85e40:	980c      	ldr	r0, [sp, #48]	; 0x30
   85e42:	f002 fb9d 	bl	88580 <__ssprint_r>
   85e46:	2800      	cmp	r0, #0
   85e48:	f47f ab81 	bne.w	8554e <_svfprintf_r+0x1ba>
   85e4c:	46c8      	mov	r8, r9
   85e4e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85e50:	e42d      	b.n	856ae <_svfprintf_r+0x31a>
   85e52:	2001      	movs	r0, #1
   85e54:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e56:	4a2d      	ldr	r2, [pc, #180]	; (85f0c <_svfprintf_r+0xb78>)
   85e58:	4403      	add	r3, r0
   85e5a:	4404      	add	r4, r0
   85e5c:	2b07      	cmp	r3, #7
   85e5e:	9427      	str	r4, [sp, #156]	; 0x9c
   85e60:	9326      	str	r3, [sp, #152]	; 0x98
   85e62:	f8c8 0004 	str.w	r0, [r8, #4]
   85e66:	f8c8 2000 	str.w	r2, [r8]
   85e6a:	f340 82d8 	ble.w	8641e <_svfprintf_r+0x108a>
   85e6e:	aa25      	add	r2, sp, #148	; 0x94
   85e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85e72:	980c      	ldr	r0, [sp, #48]	; 0x30
   85e74:	f002 fb84 	bl	88580 <__ssprint_r>
   85e78:	2800      	cmp	r0, #0
   85e7a:	f47f ab68 	bne.w	8554e <_svfprintf_r+0x1ba>
   85e7e:	46c8      	mov	r8, r9
   85e80:	991f      	ldr	r1, [sp, #124]	; 0x7c
   85e82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85e84:	b929      	cbnz	r1, 85e92 <_svfprintf_r+0xafe>
   85e86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85e88:	b91b      	cbnz	r3, 85e92 <_svfprintf_r+0xafe>
   85e8a:	9b07      	ldr	r3, [sp, #28]
   85e8c:	07d8      	lsls	r0, r3, #31
   85e8e:	f57f ac73 	bpl.w	85778 <_svfprintf_r+0x3e4>
   85e92:	9819      	ldr	r0, [sp, #100]	; 0x64
   85e94:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e96:	4602      	mov	r2, r0
   85e98:	3301      	adds	r3, #1
   85e9a:	4422      	add	r2, r4
   85e9c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   85e9e:	2b07      	cmp	r3, #7
   85ea0:	9227      	str	r2, [sp, #156]	; 0x9c
   85ea2:	f8c8 4000 	str.w	r4, [r8]
   85ea6:	f8c8 0004 	str.w	r0, [r8, #4]
   85eaa:	9326      	str	r3, [sp, #152]	; 0x98
   85eac:	f300 8431 	bgt.w	86712 <_svfprintf_r+0x137e>
   85eb0:	f108 0808 	add.w	r8, r8, #8
   85eb4:	2900      	cmp	r1, #0
   85eb6:	f2c0 8409 	blt.w	866cc <_svfprintf_r+0x1338>
   85eba:	9913      	ldr	r1, [sp, #76]	; 0x4c
   85ebc:	3301      	adds	r3, #1
   85ebe:	188c      	adds	r4, r1, r2
   85ec0:	2b07      	cmp	r3, #7
   85ec2:	9427      	str	r4, [sp, #156]	; 0x9c
   85ec4:	9326      	str	r3, [sp, #152]	; 0x98
   85ec6:	f8c8 6000 	str.w	r6, [r8]
   85eca:	f8c8 1004 	str.w	r1, [r8, #4]
   85ece:	f77f ac51 	ble.w	85774 <_svfprintf_r+0x3e0>
   85ed2:	aa25      	add	r2, sp, #148	; 0x94
   85ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85ed6:	980c      	ldr	r0, [sp, #48]	; 0x30
   85ed8:	f002 fb52 	bl	88580 <__ssprint_r>
   85edc:	2800      	cmp	r0, #0
   85ede:	f47f ab36 	bne.w	8554e <_svfprintf_r+0x1ba>
   85ee2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85ee4:	46c8      	mov	r8, r9
   85ee6:	e447      	b.n	85778 <_svfprintf_r+0x3e4>
   85ee8:	aa25      	add	r2, sp, #148	; 0x94
   85eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85eec:	980c      	ldr	r0, [sp, #48]	; 0x30
   85eee:	f002 fb47 	bl	88580 <__ssprint_r>
   85ef2:	2800      	cmp	r0, #0
   85ef4:	f47f ab2b 	bne.w	8554e <_svfprintf_r+0x1ba>
   85ef8:	46c8      	mov	r8, r9
   85efa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85efc:	f7ff bbe9 	b.w	856d2 <_svfprintf_r+0x33e>
   85f00:	2400      	movs	r4, #0
   85f02:	2500      	movs	r5, #0
   85f04:	f8cd b01c 	str.w	fp, [sp, #28]
   85f08:	4649      	mov	r1, r9
   85f0a:	e004      	b.n	85f16 <_svfprintf_r+0xb82>
   85f0c:	0008af74 	.word	0x0008af74
   85f10:	0008af88 	.word	0x0008af88
   85f14:	4631      	mov	r1, r6
   85f16:	08e2      	lsrs	r2, r4, #3
   85f18:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   85f1c:	08e8      	lsrs	r0, r5, #3
   85f1e:	f004 0307 	and.w	r3, r4, #7
   85f22:	4605      	mov	r5, r0
   85f24:	4614      	mov	r4, r2
   85f26:	3330      	adds	r3, #48	; 0x30
   85f28:	ea54 0205 	orrs.w	r2, r4, r5
   85f2c:	f801 3c01 	strb.w	r3, [r1, #-1]
   85f30:	f101 36ff 	add.w	r6, r1, #4294967295
   85f34:	d1ee      	bne.n	85f14 <_svfprintf_r+0xb80>
   85f36:	9a07      	ldr	r2, [sp, #28]
   85f38:	07d2      	lsls	r2, r2, #31
   85f3a:	f57f ad5d 	bpl.w	859f8 <_svfprintf_r+0x664>
   85f3e:	2b30      	cmp	r3, #48	; 0x30
   85f40:	f43f ad5a 	beq.w	859f8 <_svfprintf_r+0x664>
   85f44:	2330      	movs	r3, #48	; 0x30
   85f46:	3902      	subs	r1, #2
   85f48:	f806 3c01 	strb.w	r3, [r6, #-1]
   85f4c:	eba9 0301 	sub.w	r3, r9, r1
   85f50:	930e      	str	r3, [sp, #56]	; 0x38
   85f52:	460e      	mov	r6, r1
   85f54:	f7ff bb3a 	b.w	855cc <_svfprintf_r+0x238>
   85f58:	991f      	ldr	r1, [sp, #124]	; 0x7c
   85f5a:	2900      	cmp	r1, #0
   85f5c:	f77f af79 	ble.w	85e52 <_svfprintf_r+0xabe>
   85f60:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85f62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85f64:	4293      	cmp	r3, r2
   85f66:	bfa8      	it	ge
   85f68:	4613      	movge	r3, r2
   85f6a:	2b00      	cmp	r3, #0
   85f6c:	461f      	mov	r7, r3
   85f6e:	dd0b      	ble.n	85f88 <_svfprintf_r+0xbf4>
   85f70:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85f72:	443c      	add	r4, r7
   85f74:	3301      	adds	r3, #1
   85f76:	2b07      	cmp	r3, #7
   85f78:	9427      	str	r4, [sp, #156]	; 0x9c
   85f7a:	e888 00c0 	stmia.w	r8, {r6, r7}
   85f7e:	9326      	str	r3, [sp, #152]	; 0x98
   85f80:	f300 82fb 	bgt.w	8657a <_svfprintf_r+0x11e6>
   85f84:	f108 0808 	add.w	r8, r8, #8
   85f88:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85f8a:	2f00      	cmp	r7, #0
   85f8c:	bfa8      	it	ge
   85f8e:	1bdb      	subge	r3, r3, r7
   85f90:	2b00      	cmp	r3, #0
   85f92:	461f      	mov	r7, r3
   85f94:	f340 80d7 	ble.w	86146 <_svfprintf_r+0xdb2>
   85f98:	2b10      	cmp	r3, #16
   85f9a:	f340 8433 	ble.w	86804 <_svfprintf_r+0x1470>
   85f9e:	4dba      	ldr	r5, [pc, #744]	; (86288 <_svfprintf_r+0xef4>)
   85fa0:	4642      	mov	r2, r8
   85fa2:	4621      	mov	r1, r4
   85fa4:	46b0      	mov	r8, r6
   85fa6:	f04f 0b10 	mov.w	fp, #16
   85faa:	462e      	mov	r6, r5
   85fac:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85fae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85fb0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85fb2:	e004      	b.n	85fbe <_svfprintf_r+0xc2a>
   85fb4:	3208      	adds	r2, #8
   85fb6:	3f10      	subs	r7, #16
   85fb8:	2f10      	cmp	r7, #16
   85fba:	f340 80b5 	ble.w	86128 <_svfprintf_r+0xd94>
   85fbe:	3301      	adds	r3, #1
   85fc0:	3110      	adds	r1, #16
   85fc2:	2b07      	cmp	r3, #7
   85fc4:	9127      	str	r1, [sp, #156]	; 0x9c
   85fc6:	9326      	str	r3, [sp, #152]	; 0x98
   85fc8:	e882 0840 	stmia.w	r2, {r6, fp}
   85fcc:	ddf2      	ble.n	85fb4 <_svfprintf_r+0xc20>
   85fce:	aa25      	add	r2, sp, #148	; 0x94
   85fd0:	4629      	mov	r1, r5
   85fd2:	4620      	mov	r0, r4
   85fd4:	f002 fad4 	bl	88580 <__ssprint_r>
   85fd8:	2800      	cmp	r0, #0
   85fda:	f47f aab8 	bne.w	8554e <_svfprintf_r+0x1ba>
   85fde:	464a      	mov	r2, r9
   85fe0:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85fe2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85fe4:	e7e7      	b.n	85fb6 <_svfprintf_r+0xc22>
   85fe6:	2d00      	cmp	r5, #0
   85fe8:	bf08      	it	eq
   85fea:	2c0a      	cmpeq	r4, #10
   85fec:	f0c0 8090 	bcc.w	86110 <_svfprintf_r+0xd7c>
   85ff0:	464e      	mov	r6, r9
   85ff2:	4620      	mov	r0, r4
   85ff4:	4629      	mov	r1, r5
   85ff6:	220a      	movs	r2, #10
   85ff8:	2300      	movs	r3, #0
   85ffa:	f003 fbb1 	bl	89760 <__aeabi_uldivmod>
   85ffe:	3230      	adds	r2, #48	; 0x30
   86000:	f806 2d01 	strb.w	r2, [r6, #-1]!
   86004:	4620      	mov	r0, r4
   86006:	4629      	mov	r1, r5
   86008:	2300      	movs	r3, #0
   8600a:	220a      	movs	r2, #10
   8600c:	f003 fba8 	bl	89760 <__aeabi_uldivmod>
   86010:	4604      	mov	r4, r0
   86012:	460d      	mov	r5, r1
   86014:	ea54 0305 	orrs.w	r3, r4, r5
   86018:	d1eb      	bne.n	85ff2 <_svfprintf_r+0xc5e>
   8601a:	eba9 0306 	sub.w	r3, r9, r6
   8601e:	930e      	str	r3, [sp, #56]	; 0x38
   86020:	f7ff bad4 	b.w	855cc <_svfprintf_r+0x238>
   86024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86026:	464e      	mov	r6, r9
   86028:	930e      	str	r3, [sp, #56]	; 0x38
   8602a:	f7ff bacf 	b.w	855cc <_svfprintf_r+0x238>
   8602e:	1e5e      	subs	r6, r3, #1
   86030:	2e00      	cmp	r6, #0
   86032:	f77f aeca 	ble.w	85dca <_svfprintf_r+0xa36>
   86036:	2e10      	cmp	r6, #16
   86038:	f340 83e2 	ble.w	86800 <_svfprintf_r+0x146c>
   8603c:	4622      	mov	r2, r4
   8603e:	f04f 0b10 	mov.w	fp, #16
   86042:	4d91      	ldr	r5, [pc, #580]	; (86288 <_svfprintf_r+0xef4>)
   86044:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86046:	e004      	b.n	86052 <_svfprintf_r+0xcbe>
   86048:	3e10      	subs	r6, #16
   8604a:	2e10      	cmp	r6, #16
   8604c:	f108 0808 	add.w	r8, r8, #8
   86050:	dd15      	ble.n	8607e <_svfprintf_r+0xcea>
   86052:	3701      	adds	r7, #1
   86054:	3210      	adds	r2, #16
   86056:	2f07      	cmp	r7, #7
   86058:	9227      	str	r2, [sp, #156]	; 0x9c
   8605a:	9726      	str	r7, [sp, #152]	; 0x98
   8605c:	e888 0820 	stmia.w	r8, {r5, fp}
   86060:	ddf2      	ble.n	86048 <_svfprintf_r+0xcb4>
   86062:	aa25      	add	r2, sp, #148	; 0x94
   86064:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86066:	4620      	mov	r0, r4
   86068:	f002 fa8a 	bl	88580 <__ssprint_r>
   8606c:	2800      	cmp	r0, #0
   8606e:	f47f aa6e 	bne.w	8554e <_svfprintf_r+0x1ba>
   86072:	3e10      	subs	r6, #16
   86074:	2e10      	cmp	r6, #16
   86076:	46c8      	mov	r8, r9
   86078:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8607a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8607c:	dce9      	bgt.n	86052 <_svfprintf_r+0xcbe>
   8607e:	4614      	mov	r4, r2
   86080:	3701      	adds	r7, #1
   86082:	4434      	add	r4, r6
   86084:	2f07      	cmp	r7, #7
   86086:	9427      	str	r4, [sp, #156]	; 0x9c
   86088:	9726      	str	r7, [sp, #152]	; 0x98
   8608a:	e888 0060 	stmia.w	r8, {r5, r6}
   8608e:	f77f ae9a 	ble.w	85dc6 <_svfprintf_r+0xa32>
   86092:	aa25      	add	r2, sp, #148	; 0x94
   86094:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86096:	980c      	ldr	r0, [sp, #48]	; 0x30
   86098:	f002 fa72 	bl	88580 <__ssprint_r>
   8609c:	2800      	cmp	r0, #0
   8609e:	f47f aa56 	bne.w	8554e <_svfprintf_r+0x1ba>
   860a2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   860a4:	9f26      	ldr	r7, [sp, #152]	; 0x98
   860a6:	46c8      	mov	r8, r9
   860a8:	e68f      	b.n	85dca <_svfprintf_r+0xa36>
   860aa:	3204      	adds	r2, #4
   860ac:	681c      	ldr	r4, [r3, #0]
   860ae:	2500      	movs	r5, #0
   860b0:	2301      	movs	r3, #1
   860b2:	920f      	str	r2, [sp, #60]	; 0x3c
   860b4:	f7ff ba6c 	b.w	85590 <_svfprintf_r+0x1fc>
   860b8:	681c      	ldr	r4, [r3, #0]
   860ba:	3304      	adds	r3, #4
   860bc:	930f      	str	r3, [sp, #60]	; 0x3c
   860be:	2500      	movs	r5, #0
   860c0:	e42e      	b.n	85920 <_svfprintf_r+0x58c>
   860c2:	681c      	ldr	r4, [r3, #0]
   860c4:	3304      	adds	r3, #4
   860c6:	17e5      	asrs	r5, r4, #31
   860c8:	4622      	mov	r2, r4
   860ca:	930f      	str	r3, [sp, #60]	; 0x3c
   860cc:	462b      	mov	r3, r5
   860ce:	2a00      	cmp	r2, #0
   860d0:	f173 0300 	sbcs.w	r3, r3, #0
   860d4:	f6bf ac6c 	bge.w	859b0 <_svfprintf_r+0x61c>
   860d8:	272d      	movs	r7, #45	; 0x2d
   860da:	4264      	negs	r4, r4
   860dc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   860e0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   860e4:	2301      	movs	r3, #1
   860e6:	f7ff ba57 	b.w	85598 <_svfprintf_r+0x204>
   860ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
   860ec:	2500      	movs	r5, #0
   860ee:	460a      	mov	r2, r1
   860f0:	3204      	adds	r2, #4
   860f2:	680c      	ldr	r4, [r1, #0]
   860f4:	920f      	str	r2, [sp, #60]	; 0x3c
   860f6:	f7ff ba4b 	b.w	85590 <_svfprintf_r+0x1fc>
   860fa:	4614      	mov	r4, r2
   860fc:	3301      	adds	r3, #1
   860fe:	4434      	add	r4, r6
   86100:	2b07      	cmp	r3, #7
   86102:	9427      	str	r4, [sp, #156]	; 0x9c
   86104:	9326      	str	r3, [sp, #152]	; 0x98
   86106:	e888 0060 	stmia.w	r8, {r5, r6}
   8610a:	f77f ab33 	ble.w	85774 <_svfprintf_r+0x3e0>
   8610e:	e6e0      	b.n	85ed2 <_svfprintf_r+0xb3e>
   86110:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86114:	2301      	movs	r3, #1
   86116:	ae42      	add	r6, sp, #264	; 0x108
   86118:	3430      	adds	r4, #48	; 0x30
   8611a:	f8cd b01c 	str.w	fp, [sp, #28]
   8611e:	f806 4d41 	strb.w	r4, [r6, #-65]!
   86122:	930e      	str	r3, [sp, #56]	; 0x38
   86124:	f7ff ba52 	b.w	855cc <_svfprintf_r+0x238>
   86128:	4635      	mov	r5, r6
   8612a:	460c      	mov	r4, r1
   8612c:	4646      	mov	r6, r8
   8612e:	4690      	mov	r8, r2
   86130:	3301      	adds	r3, #1
   86132:	443c      	add	r4, r7
   86134:	2b07      	cmp	r3, #7
   86136:	9427      	str	r4, [sp, #156]	; 0x9c
   86138:	9326      	str	r3, [sp, #152]	; 0x98
   8613a:	e888 00a0 	stmia.w	r8, {r5, r7}
   8613e:	f300 8246 	bgt.w	865ce <_svfprintf_r+0x123a>
   86142:	f108 0808 	add.w	r8, r8, #8
   86146:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86148:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8614a:	429a      	cmp	r2, r3
   8614c:	db45      	blt.n	861da <_svfprintf_r+0xe46>
   8614e:	9b07      	ldr	r3, [sp, #28]
   86150:	07d9      	lsls	r1, r3, #31
   86152:	d442      	bmi.n	861da <_svfprintf_r+0xe46>
   86154:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86156:	9812      	ldr	r0, [sp, #72]	; 0x48
   86158:	1a9a      	subs	r2, r3, r2
   8615a:	1a1d      	subs	r5, r3, r0
   8615c:	4295      	cmp	r5, r2
   8615e:	bfa8      	it	ge
   86160:	4615      	movge	r5, r2
   86162:	2d00      	cmp	r5, #0
   86164:	dd0e      	ble.n	86184 <_svfprintf_r+0xdf0>
   86166:	9926      	ldr	r1, [sp, #152]	; 0x98
   86168:	4406      	add	r6, r0
   8616a:	3101      	adds	r1, #1
   8616c:	442c      	add	r4, r5
   8616e:	2907      	cmp	r1, #7
   86170:	f8c8 6000 	str.w	r6, [r8]
   86174:	9427      	str	r4, [sp, #156]	; 0x9c
   86176:	f8c8 5004 	str.w	r5, [r8, #4]
   8617a:	9126      	str	r1, [sp, #152]	; 0x98
   8617c:	f300 8216 	bgt.w	865ac <_svfprintf_r+0x1218>
   86180:	f108 0808 	add.w	r8, r8, #8
   86184:	2d00      	cmp	r5, #0
   86186:	bfb4      	ite	lt
   86188:	4616      	movlt	r6, r2
   8618a:	1b56      	subge	r6, r2, r5
   8618c:	2e00      	cmp	r6, #0
   8618e:	f77f aaf3 	ble.w	85778 <_svfprintf_r+0x3e4>
   86192:	2e10      	cmp	r6, #16
   86194:	f340 82f3 	ble.w	8677e <_svfprintf_r+0x13ea>
   86198:	4622      	mov	r2, r4
   8619a:	2710      	movs	r7, #16
   8619c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8619e:	4d3a      	ldr	r5, [pc, #232]	; (86288 <_svfprintf_r+0xef4>)
   861a0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   861a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   861a6:	e004      	b.n	861b2 <_svfprintf_r+0xe1e>
   861a8:	f108 0808 	add.w	r8, r8, #8
   861ac:	3e10      	subs	r6, #16
   861ae:	2e10      	cmp	r6, #16
   861b0:	dda3      	ble.n	860fa <_svfprintf_r+0xd66>
   861b2:	3301      	adds	r3, #1
   861b4:	3210      	adds	r2, #16
   861b6:	2b07      	cmp	r3, #7
   861b8:	9227      	str	r2, [sp, #156]	; 0x9c
   861ba:	9326      	str	r3, [sp, #152]	; 0x98
   861bc:	e888 00a0 	stmia.w	r8, {r5, r7}
   861c0:	ddf2      	ble.n	861a8 <_svfprintf_r+0xe14>
   861c2:	aa25      	add	r2, sp, #148	; 0x94
   861c4:	4621      	mov	r1, r4
   861c6:	4658      	mov	r0, fp
   861c8:	f002 f9da 	bl	88580 <__ssprint_r>
   861cc:	2800      	cmp	r0, #0
   861ce:	f47f a9be 	bne.w	8554e <_svfprintf_r+0x1ba>
   861d2:	46c8      	mov	r8, r9
   861d4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   861d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   861d8:	e7e8      	b.n	861ac <_svfprintf_r+0xe18>
   861da:	9b26      	ldr	r3, [sp, #152]	; 0x98
   861dc:	9819      	ldr	r0, [sp, #100]	; 0x64
   861de:	3301      	adds	r3, #1
   861e0:	991a      	ldr	r1, [sp, #104]	; 0x68
   861e2:	4404      	add	r4, r0
   861e4:	2b07      	cmp	r3, #7
   861e6:	9427      	str	r4, [sp, #156]	; 0x9c
   861e8:	f8c8 1000 	str.w	r1, [r8]
   861ec:	f8c8 0004 	str.w	r0, [r8, #4]
   861f0:	9326      	str	r3, [sp, #152]	; 0x98
   861f2:	f300 81cf 	bgt.w	86594 <_svfprintf_r+0x1200>
   861f6:	f108 0808 	add.w	r8, r8, #8
   861fa:	e7ab      	b.n	86154 <_svfprintf_r+0xdc0>
   861fc:	9b07      	ldr	r3, [sp, #28]
   861fe:	07da      	lsls	r2, r3, #31
   86200:	f53f adae 	bmi.w	85d60 <_svfprintf_r+0x9cc>
   86204:	2301      	movs	r3, #1
   86206:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86208:	441c      	add	r4, r3
   8620a:	441f      	add	r7, r3
   8620c:	2f07      	cmp	r7, #7
   8620e:	9427      	str	r4, [sp, #156]	; 0x9c
   86210:	f8c8 6000 	str.w	r6, [r8]
   86214:	9726      	str	r7, [sp, #152]	; 0x98
   86216:	f8c8 3004 	str.w	r3, [r8, #4]
   8621a:	f77f add4 	ble.w	85dc6 <_svfprintf_r+0xa32>
   8621e:	aa25      	add	r2, sp, #148	; 0x94
   86220:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86222:	980c      	ldr	r0, [sp, #48]	; 0x30
   86224:	f002 f9ac 	bl	88580 <__ssprint_r>
   86228:	2800      	cmp	r0, #0
   8622a:	f47f a990 	bne.w	8554e <_svfprintf_r+0x1ba>
   8622e:	46c8      	mov	r8, r9
   86230:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86232:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86234:	e5c9      	b.n	85dca <_svfprintf_r+0xa36>
   86236:	aa25      	add	r2, sp, #148	; 0x94
   86238:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8623a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8623c:	f002 f9a0 	bl	88580 <__ssprint_r>
   86240:	2800      	cmp	r0, #0
   86242:	f47f a984 	bne.w	8554e <_svfprintf_r+0x1ba>
   86246:	46c8      	mov	r8, r9
   86248:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8624a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8624c:	e597      	b.n	85d7e <_svfprintf_r+0x9ea>
   8624e:	aa25      	add	r2, sp, #148	; 0x94
   86250:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86252:	980c      	ldr	r0, [sp, #48]	; 0x30
   86254:	f002 f994 	bl	88580 <__ssprint_r>
   86258:	2800      	cmp	r0, #0
   8625a:	f47f a978 	bne.w	8554e <_svfprintf_r+0x1ba>
   8625e:	46c8      	mov	r8, r9
   86260:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86262:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86264:	e59a      	b.n	85d9c <_svfprintf_r+0xa08>
   86266:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86268:	3407      	adds	r4, #7
   8626a:	f024 0407 	bic.w	r4, r4, #7
   8626e:	f104 0108 	add.w	r1, r4, #8
   86272:	e9d4 2300 	ldrd	r2, r3, [r4]
   86276:	910f      	str	r1, [sp, #60]	; 0x3c
   86278:	4614      	mov	r4, r2
   8627a:	461d      	mov	r5, r3
   8627c:	f7ff bb93 	b.w	859a6 <_svfprintf_r+0x612>
   86280:	464e      	mov	r6, r9
   86282:	f7ff b9a3 	b.w	855cc <_svfprintf_r+0x238>
   86286:	bf00      	nop
   86288:	0008af88 	.word	0x0008af88
   8628c:	aa25      	add	r2, sp, #148	; 0x94
   8628e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86290:	980c      	ldr	r0, [sp, #48]	; 0x30
   86292:	f002 f975 	bl	88580 <__ssprint_r>
   86296:	2800      	cmp	r0, #0
   86298:	f47f a959 	bne.w	8554e <_svfprintf_r+0x1ba>
   8629c:	46c8      	mov	r8, r9
   8629e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   862a0:	f7ff ba1a 	b.w	856d8 <_svfprintf_r+0x344>
   862a4:	9c14      	ldr	r4, [sp, #80]	; 0x50
   862a6:	4622      	mov	r2, r4
   862a8:	4620      	mov	r0, r4
   862aa:	9c15      	ldr	r4, [sp, #84]	; 0x54
   862ac:	4623      	mov	r3, r4
   862ae:	4621      	mov	r1, r4
   862b0:	f003 fa18 	bl	896e4 <__aeabi_dcmpun>
   862b4:	2800      	cmp	r0, #0
   862b6:	f040 8273 	bne.w	867a0 <_svfprintf_r+0x140c>
   862ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   862bc:	3301      	adds	r3, #1
   862be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   862c0:	f023 0320 	bic.w	r3, r3, #32
   862c4:	930e      	str	r3, [sp, #56]	; 0x38
   862c6:	f000 819c 	beq.w	86602 <_svfprintf_r+0x126e>
   862ca:	2b47      	cmp	r3, #71	; 0x47
   862cc:	f000 80d6 	beq.w	8647c <_svfprintf_r+0x10e8>
   862d0:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   862d4:	9307      	str	r3, [sp, #28]
   862d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   862d8:	1e1f      	subs	r7, r3, #0
   862da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   862dc:	9308      	str	r3, [sp, #32]
   862de:	bfb7      	itett	lt
   862e0:	463b      	movlt	r3, r7
   862e2:	2300      	movge	r3, #0
   862e4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   862e8:	232d      	movlt	r3, #45	; 0x2d
   862ea:	9310      	str	r3, [sp, #64]	; 0x40
   862ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   862ee:	2b66      	cmp	r3, #102	; 0x66
   862f0:	f000 8190 	beq.w	86614 <_svfprintf_r+0x1280>
   862f4:	2b46      	cmp	r3, #70	; 0x46
   862f6:	f000 80a4 	beq.w	86442 <_svfprintf_r+0x10ae>
   862fa:	2002      	movs	r0, #2
   862fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   862fe:	a923      	add	r1, sp, #140	; 0x8c
   86300:	2b45      	cmp	r3, #69	; 0x45
   86302:	bf0a      	itet	eq
   86304:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   86306:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   86308:	1c5d      	addeq	r5, r3, #1
   8630a:	e88d 0021 	stmia.w	sp, {r0, r5}
   8630e:	9104      	str	r1, [sp, #16]
   86310:	a820      	add	r0, sp, #128	; 0x80
   86312:	a91f      	add	r1, sp, #124	; 0x7c
   86314:	463b      	mov	r3, r7
   86316:	9003      	str	r0, [sp, #12]
   86318:	9a08      	ldr	r2, [sp, #32]
   8631a:	9102      	str	r1, [sp, #8]
   8631c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8631e:	f000 fb5b 	bl	869d8 <_dtoa_r>
   86322:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86324:	4606      	mov	r6, r0
   86326:	2b67      	cmp	r3, #103	; 0x67
   86328:	f040 81ba 	bne.w	866a0 <_svfprintf_r+0x130c>
   8632c:	f01b 0f01 	tst.w	fp, #1
   86330:	f000 8223 	beq.w	8677a <_svfprintf_r+0x13e6>
   86334:	1974      	adds	r4, r6, r5
   86336:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86338:	9808      	ldr	r0, [sp, #32]
   8633a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8633c:	4639      	mov	r1, r7
   8633e:	f003 f99f 	bl	89680 <__aeabi_dcmpeq>
   86342:	2800      	cmp	r0, #0
   86344:	f040 8124 	bne.w	86590 <_svfprintf_r+0x11fc>
   86348:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8634a:	42a3      	cmp	r3, r4
   8634c:	d206      	bcs.n	8635c <_svfprintf_r+0xfc8>
   8634e:	2130      	movs	r1, #48	; 0x30
   86350:	1c5a      	adds	r2, r3, #1
   86352:	9223      	str	r2, [sp, #140]	; 0x8c
   86354:	7019      	strb	r1, [r3, #0]
   86356:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86358:	429c      	cmp	r4, r3
   8635a:	d8f9      	bhi.n	86350 <_svfprintf_r+0xfbc>
   8635c:	1b9b      	subs	r3, r3, r6
   8635e:	9313      	str	r3, [sp, #76]	; 0x4c
   86360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86362:	2b47      	cmp	r3, #71	; 0x47
   86364:	f000 80a2 	beq.w	864ac <_svfprintf_r+0x1118>
   86368:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8636a:	2b65      	cmp	r3, #101	; 0x65
   8636c:	f340 81a7 	ble.w	866be <_svfprintf_r+0x132a>
   86370:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86372:	2b66      	cmp	r3, #102	; 0x66
   86374:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86376:	9312      	str	r3, [sp, #72]	; 0x48
   86378:	f000 8171 	beq.w	8665e <_svfprintf_r+0x12ca>
   8637c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8637e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86380:	4619      	mov	r1, r3
   86382:	4291      	cmp	r1, r2
   86384:	f300 815d 	bgt.w	86642 <_svfprintf_r+0x12ae>
   86388:	f01b 0f01 	tst.w	fp, #1
   8638c:	f040 81f0 	bne.w	86770 <_svfprintf_r+0x13dc>
   86390:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86394:	9308      	str	r3, [sp, #32]
   86396:	2367      	movs	r3, #103	; 0x67
   86398:	920e      	str	r2, [sp, #56]	; 0x38
   8639a:	9311      	str	r3, [sp, #68]	; 0x44
   8639c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8639e:	2b00      	cmp	r3, #0
   863a0:	d17d      	bne.n	8649e <_svfprintf_r+0x110a>
   863a2:	930a      	str	r3, [sp, #40]	; 0x28
   863a4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   863a8:	f7ff b918 	b.w	855dc <_svfprintf_r+0x248>
   863ac:	f024 0407 	bic.w	r4, r4, #7
   863b0:	6823      	ldr	r3, [r4, #0]
   863b2:	9314      	str	r3, [sp, #80]	; 0x50
   863b4:	6863      	ldr	r3, [r4, #4]
   863b6:	9315      	str	r3, [sp, #84]	; 0x54
   863b8:	f104 0308 	add.w	r3, r4, #8
   863bc:	930f      	str	r3, [sp, #60]	; 0x3c
   863be:	f7ff bb33 	b.w	85a28 <_svfprintf_r+0x694>
   863c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   863c4:	6813      	ldr	r3, [r2, #0]
   863c6:	3204      	adds	r2, #4
   863c8:	920f      	str	r2, [sp, #60]	; 0x3c
   863ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
   863cc:	601a      	str	r2, [r3, #0]
   863ce:	f7ff b808 	b.w	853e2 <_svfprintf_r+0x4e>
   863d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   863d4:	4daf      	ldr	r5, [pc, #700]	; (86694 <_svfprintf_r+0x1300>)
   863d6:	f7ff b9b1 	b.w	8573c <_svfprintf_r+0x3a8>
   863da:	aa25      	add	r2, sp, #148	; 0x94
   863dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   863de:	980c      	ldr	r0, [sp, #48]	; 0x30
   863e0:	f002 f8ce 	bl	88580 <__ssprint_r>
   863e4:	2800      	cmp	r0, #0
   863e6:	f47f a8b2 	bne.w	8554e <_svfprintf_r+0x1ba>
   863ea:	46c8      	mov	r8, r9
   863ec:	e432      	b.n	85c54 <_svfprintf_r+0x8c0>
   863ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   863f0:	4613      	mov	r3, r2
   863f2:	3304      	adds	r3, #4
   863f4:	930f      	str	r3, [sp, #60]	; 0x3c
   863f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   863f8:	6811      	ldr	r1, [r2, #0]
   863fa:	17dd      	asrs	r5, r3, #31
   863fc:	461a      	mov	r2, r3
   863fe:	462b      	mov	r3, r5
   86400:	e9c1 2300 	strd	r2, r3, [r1]
   86404:	f7fe bfed 	b.w	853e2 <_svfprintf_r+0x4e>
   86408:	aa25      	add	r2, sp, #148	; 0x94
   8640a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8640c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8640e:	f002 f8b7 	bl	88580 <__ssprint_r>
   86412:	2800      	cmp	r0, #0
   86414:	f47f a89b 	bne.w	8554e <_svfprintf_r+0x1ba>
   86418:	46c8      	mov	r8, r9
   8641a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8641c:	e433      	b.n	85c86 <_svfprintf_r+0x8f2>
   8641e:	f108 0808 	add.w	r8, r8, #8
   86422:	e52f      	b.n	85e84 <_svfprintf_r+0xaf0>
   86424:	2140      	movs	r1, #64	; 0x40
   86426:	980c      	ldr	r0, [sp, #48]	; 0x30
   86428:	f001 fa24 	bl	87874 <_malloc_r>
   8642c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8642e:	6010      	str	r0, [r2, #0]
   86430:	6110      	str	r0, [r2, #16]
   86432:	2800      	cmp	r0, #0
   86434:	f000 8213 	beq.w	8685e <_svfprintf_r+0x14ca>
   86438:	2340      	movs	r3, #64	; 0x40
   8643a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8643c:	6153      	str	r3, [r2, #20]
   8643e:	f7fe bfc0 	b.w	853c2 <_svfprintf_r+0x2e>
   86442:	2003      	movs	r0, #3
   86444:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86446:	a923      	add	r1, sp, #140	; 0x8c
   86448:	e88d 0011 	stmia.w	sp, {r0, r4}
   8644c:	9104      	str	r1, [sp, #16]
   8644e:	a820      	add	r0, sp, #128	; 0x80
   86450:	a91f      	add	r1, sp, #124	; 0x7c
   86452:	9003      	str	r0, [sp, #12]
   86454:	9a08      	ldr	r2, [sp, #32]
   86456:	463b      	mov	r3, r7
   86458:	9102      	str	r1, [sp, #8]
   8645a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8645c:	f000 fabc 	bl	869d8 <_dtoa_r>
   86460:	4625      	mov	r5, r4
   86462:	4606      	mov	r6, r0
   86464:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86466:	1974      	adds	r4, r6, r5
   86468:	2b46      	cmp	r3, #70	; 0x46
   8646a:	f47f af64 	bne.w	86336 <_svfprintf_r+0xfa2>
   8646e:	7833      	ldrb	r3, [r6, #0]
   86470:	2b30      	cmp	r3, #48	; 0x30
   86472:	f000 8187 	beq.w	86784 <_svfprintf_r+0x13f0>
   86476:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   86478:	442c      	add	r4, r5
   8647a:	e75c      	b.n	86336 <_svfprintf_r+0xfa2>
   8647c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8647e:	2b00      	cmp	r3, #0
   86480:	bf08      	it	eq
   86482:	2301      	moveq	r3, #1
   86484:	930a      	str	r3, [sp, #40]	; 0x28
   86486:	e723      	b.n	862d0 <_svfprintf_r+0xf3c>
   86488:	4630      	mov	r0, r6
   8648a:	950a      	str	r5, [sp, #40]	; 0x28
   8648c:	f7fe fe70 	bl	85170 <strlen>
   86490:	940f      	str	r4, [sp, #60]	; 0x3c
   86492:	900e      	str	r0, [sp, #56]	; 0x38
   86494:	f8cd b01c 	str.w	fp, [sp, #28]
   86498:	4603      	mov	r3, r0
   8649a:	f7ff b9eb 	b.w	85874 <_svfprintf_r+0x4e0>
   8649e:	272d      	movs	r7, #45	; 0x2d
   864a0:	2300      	movs	r3, #0
   864a2:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   864a6:	930a      	str	r3, [sp, #40]	; 0x28
   864a8:	f7ff b899 	b.w	855de <_svfprintf_r+0x24a>
   864ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   864ae:	461a      	mov	r2, r3
   864b0:	9312      	str	r3, [sp, #72]	; 0x48
   864b2:	3303      	adds	r3, #3
   864b4:	db04      	blt.n	864c0 <_svfprintf_r+0x112c>
   864b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   864b8:	4619      	mov	r1, r3
   864ba:	4291      	cmp	r1, r2
   864bc:	f6bf af5e 	bge.w	8637c <_svfprintf_r+0xfe8>
   864c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   864c2:	3b02      	subs	r3, #2
   864c4:	9311      	str	r3, [sp, #68]	; 0x44
   864c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   864c8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   864cc:	3b01      	subs	r3, #1
   864ce:	2b00      	cmp	r3, #0
   864d0:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   864d4:	bfb4      	ite	lt
   864d6:	222d      	movlt	r2, #45	; 0x2d
   864d8:	222b      	movge	r2, #43	; 0x2b
   864da:	931f      	str	r3, [sp, #124]	; 0x7c
   864dc:	bfb8      	it	lt
   864de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   864e0:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   864e4:	bfb8      	it	lt
   864e6:	f1c3 0301 	rsblt	r3, r3, #1
   864ea:	2b09      	cmp	r3, #9
   864ec:	f340 811f 	ble.w	8672e <_svfprintf_r+0x139a>
   864f0:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   864f4:	4601      	mov	r1, r0
   864f6:	4c68      	ldr	r4, [pc, #416]	; (86698 <_svfprintf_r+0x1304>)
   864f8:	e000      	b.n	864fc <_svfprintf_r+0x1168>
   864fa:	4611      	mov	r1, r2
   864fc:	fb84 5203 	smull	r5, r2, r4, r3
   86500:	17dd      	asrs	r5, r3, #31
   86502:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   86506:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   8650a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   8650e:	3230      	adds	r2, #48	; 0x30
   86510:	2d09      	cmp	r5, #9
   86512:	f801 2c01 	strb.w	r2, [r1, #-1]
   86516:	462b      	mov	r3, r5
   86518:	f101 32ff 	add.w	r2, r1, #4294967295
   8651c:	dced      	bgt.n	864fa <_svfprintf_r+0x1166>
   8651e:	3330      	adds	r3, #48	; 0x30
   86520:	3902      	subs	r1, #2
   86522:	b2dc      	uxtb	r4, r3
   86524:	4288      	cmp	r0, r1
   86526:	f802 4c01 	strb.w	r4, [r2, #-1]
   8652a:	f240 8191 	bls.w	86850 <_svfprintf_r+0x14bc>
   8652e:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   86532:	4613      	mov	r3, r2
   86534:	e001      	b.n	8653a <_svfprintf_r+0x11a6>
   86536:	f813 4b01 	ldrb.w	r4, [r3], #1
   8653a:	4283      	cmp	r3, r0
   8653c:	f801 4b01 	strb.w	r4, [r1], #1
   86540:	d1f9      	bne.n	86536 <_svfprintf_r+0x11a2>
   86542:	3301      	adds	r3, #1
   86544:	1a9b      	subs	r3, r3, r2
   86546:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   8654a:	4413      	add	r3, r2
   8654c:	aa21      	add	r2, sp, #132	; 0x84
   8654e:	1a9b      	subs	r3, r3, r2
   86550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86552:	931b      	str	r3, [sp, #108]	; 0x6c
   86554:	2a01      	cmp	r2, #1
   86556:	4413      	add	r3, r2
   86558:	930e      	str	r3, [sp, #56]	; 0x38
   8655a:	f340 8147 	ble.w	867ec <_svfprintf_r+0x1458>
   8655e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86560:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86562:	4413      	add	r3, r2
   86564:	930e      	str	r3, [sp, #56]	; 0x38
   86566:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8656a:	9308      	str	r3, [sp, #32]
   8656c:	2300      	movs	r3, #0
   8656e:	9312      	str	r3, [sp, #72]	; 0x48
   86570:	e714      	b.n	8639c <_svfprintf_r+0x1008>
   86572:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86574:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86576:	f7ff b87a 	b.w	8566e <_svfprintf_r+0x2da>
   8657a:	aa25      	add	r2, sp, #148	; 0x94
   8657c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8657e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86580:	f001 fffe 	bl	88580 <__ssprint_r>
   86584:	2800      	cmp	r0, #0
   86586:	f47e afe2 	bne.w	8554e <_svfprintf_r+0x1ba>
   8658a:	46c8      	mov	r8, r9
   8658c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8658e:	e4fb      	b.n	85f88 <_svfprintf_r+0xbf4>
   86590:	4623      	mov	r3, r4
   86592:	e6e3      	b.n	8635c <_svfprintf_r+0xfc8>
   86594:	aa25      	add	r2, sp, #148	; 0x94
   86596:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86598:	980c      	ldr	r0, [sp, #48]	; 0x30
   8659a:	f001 fff1 	bl	88580 <__ssprint_r>
   8659e:	2800      	cmp	r0, #0
   865a0:	f47e afd5 	bne.w	8554e <_svfprintf_r+0x1ba>
   865a4:	46c8      	mov	r8, r9
   865a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   865a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   865aa:	e5d3      	b.n	86154 <_svfprintf_r+0xdc0>
   865ac:	aa25      	add	r2, sp, #148	; 0x94
   865ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   865b0:	980c      	ldr	r0, [sp, #48]	; 0x30
   865b2:	f001 ffe5 	bl	88580 <__ssprint_r>
   865b6:	2800      	cmp	r0, #0
   865b8:	f47e afc9 	bne.w	8554e <_svfprintf_r+0x1ba>
   865bc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   865be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   865c0:	46c8      	mov	r8, r9
   865c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   865c4:	1a9a      	subs	r2, r3, r2
   865c6:	e5dd      	b.n	86184 <_svfprintf_r+0xdf0>
   865c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   865ca:	f7ff b902 	b.w	857d2 <_svfprintf_r+0x43e>
   865ce:	aa25      	add	r2, sp, #148	; 0x94
   865d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   865d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   865d4:	f001 ffd4 	bl	88580 <__ssprint_r>
   865d8:	2800      	cmp	r0, #0
   865da:	f47e afb8 	bne.w	8554e <_svfprintf_r+0x1ba>
   865de:	46c8      	mov	r8, r9
   865e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   865e2:	e5b0      	b.n	86146 <_svfprintf_r+0xdb2>
   865e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   865e6:	4637      	mov	r7, r6
   865e8:	2b06      	cmp	r3, #6
   865ea:	bf28      	it	cs
   865ec:	2306      	movcs	r3, #6
   865ee:	960a      	str	r6, [sp, #40]	; 0x28
   865f0:	9612      	str	r6, [sp, #72]	; 0x48
   865f2:	9308      	str	r3, [sp, #32]
   865f4:	940f      	str	r4, [sp, #60]	; 0x3c
   865f6:	f8cd b01c 	str.w	fp, [sp, #28]
   865fa:	930e      	str	r3, [sp, #56]	; 0x38
   865fc:	4e27      	ldr	r6, [pc, #156]	; (8669c <_svfprintf_r+0x1308>)
   865fe:	f7fe bfed 	b.w	855dc <_svfprintf_r+0x248>
   86602:	2306      	movs	r3, #6
   86604:	930a      	str	r3, [sp, #40]	; 0x28
   86606:	e663      	b.n	862d0 <_svfprintf_r+0xf3c>
   86608:	232d      	movs	r3, #45	; 0x2d
   8660a:	461f      	mov	r7, r3
   8660c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   86610:	f7ff ba2b 	b.w	85a6a <_svfprintf_r+0x6d6>
   86614:	2003      	movs	r0, #3
   86616:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86618:	a923      	add	r1, sp, #140	; 0x8c
   8661a:	e88d 0011 	stmia.w	sp, {r0, r4}
   8661e:	9104      	str	r1, [sp, #16]
   86620:	a820      	add	r0, sp, #128	; 0x80
   86622:	a91f      	add	r1, sp, #124	; 0x7c
   86624:	9003      	str	r0, [sp, #12]
   86626:	9a08      	ldr	r2, [sp, #32]
   86628:	463b      	mov	r3, r7
   8662a:	9102      	str	r1, [sp, #8]
   8662c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8662e:	f000 f9d3 	bl	869d8 <_dtoa_r>
   86632:	4625      	mov	r5, r4
   86634:	4606      	mov	r6, r0
   86636:	1904      	adds	r4, r0, r4
   86638:	e719      	b.n	8646e <_svfprintf_r+0x10da>
   8663a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8663c:	4d15      	ldr	r5, [pc, #84]	; (86694 <_svfprintf_r+0x1300>)
   8663e:	f7ff bb7f 	b.w	85d40 <_svfprintf_r+0x9ac>
   86642:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86646:	4413      	add	r3, r2
   86648:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8664a:	930e      	str	r3, [sp, #56]	; 0x38
   8664c:	2a00      	cmp	r2, #0
   8664e:	f340 80c6 	ble.w	867de <_svfprintf_r+0x144a>
   86652:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86656:	9308      	str	r3, [sp, #32]
   86658:	2367      	movs	r3, #103	; 0x67
   8665a:	9311      	str	r3, [sp, #68]	; 0x44
   8665c:	e69e      	b.n	8639c <_svfprintf_r+0x1008>
   8665e:	2b00      	cmp	r3, #0
   86660:	f340 80e0 	ble.w	86824 <_svfprintf_r+0x1490>
   86664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86666:	2a00      	cmp	r2, #0
   86668:	f040 80af 	bne.w	867ca <_svfprintf_r+0x1436>
   8666c:	f01b 0f01 	tst.w	fp, #1
   86670:	f040 80ab 	bne.w	867ca <_svfprintf_r+0x1436>
   86674:	9308      	str	r3, [sp, #32]
   86676:	930e      	str	r3, [sp, #56]	; 0x38
   86678:	e690      	b.n	8639c <_svfprintf_r+0x1008>
   8667a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8667c:	940f      	str	r4, [sp, #60]	; 0x3c
   8667e:	9308      	str	r3, [sp, #32]
   86680:	930e      	str	r3, [sp, #56]	; 0x38
   86682:	900a      	str	r0, [sp, #40]	; 0x28
   86684:	f8cd b01c 	str.w	fp, [sp, #28]
   86688:	9012      	str	r0, [sp, #72]	; 0x48
   8668a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8668e:	f7fe bfa5 	b.w	855dc <_svfprintf_r+0x248>
   86692:	bf00      	nop
   86694:	0008af88 	.word	0x0008af88
   86698:	66666667 	.word	0x66666667
   8669c:	0008af6c 	.word	0x0008af6c
   866a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   866a2:	2b47      	cmp	r3, #71	; 0x47
   866a4:	f47f ae46 	bne.w	86334 <_svfprintf_r+0xfa0>
   866a8:	f01b 0f01 	tst.w	fp, #1
   866ac:	f47f aeda 	bne.w	86464 <_svfprintf_r+0x10d0>
   866b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   866b2:	1b9b      	subs	r3, r3, r6
   866b4:	9313      	str	r3, [sp, #76]	; 0x4c
   866b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   866b8:	2b47      	cmp	r3, #71	; 0x47
   866ba:	f43f aef7 	beq.w	864ac <_svfprintf_r+0x1118>
   866be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   866c0:	9312      	str	r3, [sp, #72]	; 0x48
   866c2:	e700      	b.n	864c6 <_svfprintf_r+0x1132>
   866c4:	2000      	movs	r0, #0
   866c6:	900a      	str	r0, [sp, #40]	; 0x28
   866c8:	f7fe bec0 	b.w	8544c <_svfprintf_r+0xb8>
   866cc:	424f      	negs	r7, r1
   866ce:	3110      	adds	r1, #16
   866d0:	da35      	bge.n	8673e <_svfprintf_r+0x13aa>
   866d2:	2410      	movs	r4, #16
   866d4:	4d6a      	ldr	r5, [pc, #424]	; (86880 <_svfprintf_r+0x14ec>)
   866d6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   866da:	e004      	b.n	866e6 <_svfprintf_r+0x1352>
   866dc:	f108 0808 	add.w	r8, r8, #8
   866e0:	3f10      	subs	r7, #16
   866e2:	2f10      	cmp	r7, #16
   866e4:	dd2c      	ble.n	86740 <_svfprintf_r+0x13ac>
   866e6:	3301      	adds	r3, #1
   866e8:	3210      	adds	r2, #16
   866ea:	2b07      	cmp	r3, #7
   866ec:	9227      	str	r2, [sp, #156]	; 0x9c
   866ee:	9326      	str	r3, [sp, #152]	; 0x98
   866f0:	f8c8 5000 	str.w	r5, [r8]
   866f4:	f8c8 4004 	str.w	r4, [r8, #4]
   866f8:	ddf0      	ble.n	866dc <_svfprintf_r+0x1348>
   866fa:	aa25      	add	r2, sp, #148	; 0x94
   866fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   866fe:	4658      	mov	r0, fp
   86700:	f001 ff3e 	bl	88580 <__ssprint_r>
   86704:	2800      	cmp	r0, #0
   86706:	f47e af22 	bne.w	8554e <_svfprintf_r+0x1ba>
   8670a:	46c8      	mov	r8, r9
   8670c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8670e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86710:	e7e6      	b.n	866e0 <_svfprintf_r+0x134c>
   86712:	aa25      	add	r2, sp, #148	; 0x94
   86714:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86716:	980c      	ldr	r0, [sp, #48]	; 0x30
   86718:	f001 ff32 	bl	88580 <__ssprint_r>
   8671c:	2800      	cmp	r0, #0
   8671e:	f47e af16 	bne.w	8554e <_svfprintf_r+0x1ba>
   86722:	46c8      	mov	r8, r9
   86724:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86726:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86728:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8672a:	f7ff bbc3 	b.w	85eb4 <_svfprintf_r+0xb20>
   8672e:	2230      	movs	r2, #48	; 0x30
   86730:	4413      	add	r3, r2
   86732:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   86736:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   8673a:	ab22      	add	r3, sp, #136	; 0x88
   8673c:	e706      	b.n	8654c <_svfprintf_r+0x11b8>
   8673e:	4d50      	ldr	r5, [pc, #320]	; (86880 <_svfprintf_r+0x14ec>)
   86740:	3301      	adds	r3, #1
   86742:	443a      	add	r2, r7
   86744:	2b07      	cmp	r3, #7
   86746:	e888 00a0 	stmia.w	r8, {r5, r7}
   8674a:	9227      	str	r2, [sp, #156]	; 0x9c
   8674c:	9326      	str	r3, [sp, #152]	; 0x98
   8674e:	f108 0808 	add.w	r8, r8, #8
   86752:	f77f abb2 	ble.w	85eba <_svfprintf_r+0xb26>
   86756:	aa25      	add	r2, sp, #148	; 0x94
   86758:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8675a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8675c:	f001 ff10 	bl	88580 <__ssprint_r>
   86760:	2800      	cmp	r0, #0
   86762:	f47e aef4 	bne.w	8554e <_svfprintf_r+0x1ba>
   86766:	46c8      	mov	r8, r9
   86768:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8676a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8676c:	f7ff bba5 	b.w	85eba <_svfprintf_r+0xb26>
   86770:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86772:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86774:	4413      	add	r3, r2
   86776:	930e      	str	r3, [sp, #56]	; 0x38
   86778:	e76b      	b.n	86652 <_svfprintf_r+0x12be>
   8677a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8677c:	e5ee      	b.n	8635c <_svfprintf_r+0xfc8>
   8677e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86780:	4d3f      	ldr	r5, [pc, #252]	; (86880 <_svfprintf_r+0x14ec>)
   86782:	e4bb      	b.n	860fc <_svfprintf_r+0xd68>
   86784:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86786:	9808      	ldr	r0, [sp, #32]
   86788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8678a:	4639      	mov	r1, r7
   8678c:	f002 ff78 	bl	89680 <__aeabi_dcmpeq>
   86790:	2800      	cmp	r0, #0
   86792:	f47f ae70 	bne.w	86476 <_svfprintf_r+0x10e2>
   86796:	f1c5 0501 	rsb	r5, r5, #1
   8679a:	951f      	str	r5, [sp, #124]	; 0x7c
   8679c:	442c      	add	r4, r5
   8679e:	e5ca      	b.n	86336 <_svfprintf_r+0xfa2>
   867a0:	2303      	movs	r3, #3
   867a2:	461a      	mov	r2, r3
   867a4:	9308      	str	r3, [sp, #32]
   867a6:	2300      	movs	r3, #0
   867a8:	4619      	mov	r1, r3
   867aa:	930a      	str	r3, [sp, #40]	; 0x28
   867ac:	4e35      	ldr	r6, [pc, #212]	; (86884 <_svfprintf_r+0x14f0>)
   867ae:	4b36      	ldr	r3, [pc, #216]	; (86888 <_svfprintf_r+0x14f4>)
   867b0:	920e      	str	r2, [sp, #56]	; 0x38
   867b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   867b4:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   867b8:	9007      	str	r0, [sp, #28]
   867ba:	9112      	str	r1, [sp, #72]	; 0x48
   867bc:	2a47      	cmp	r2, #71	; 0x47
   867be:	bfd8      	it	le
   867c0:	461e      	movle	r6, r3
   867c2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   867c6:	f7fe bf09 	b.w	855dc <_svfprintf_r+0x248>
   867ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   867cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   867ce:	4413      	add	r3, r2
   867d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   867d2:	441a      	add	r2, r3
   867d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   867d8:	920e      	str	r2, [sp, #56]	; 0x38
   867da:	9308      	str	r3, [sp, #32]
   867dc:	e5de      	b.n	8639c <_svfprintf_r+0x1008>
   867de:	9b12      	ldr	r3, [sp, #72]	; 0x48
   867e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   867e2:	f1c3 0301 	rsb	r3, r3, #1
   867e6:	441a      	add	r2, r3
   867e8:	4613      	mov	r3, r2
   867ea:	e7c4      	b.n	86776 <_svfprintf_r+0x13e2>
   867ec:	f01b 0301 	ands.w	r3, fp, #1
   867f0:	9312      	str	r3, [sp, #72]	; 0x48
   867f2:	f47f aeb4 	bne.w	8655e <_svfprintf_r+0x11ca>
   867f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   867fc:	9308      	str	r3, [sp, #32]
   867fe:	e5cd      	b.n	8639c <_svfprintf_r+0x1008>
   86800:	4d1f      	ldr	r5, [pc, #124]	; (86880 <_svfprintf_r+0x14ec>)
   86802:	e43d      	b.n	86080 <_svfprintf_r+0xcec>
   86804:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86806:	4d1e      	ldr	r5, [pc, #120]	; (86880 <_svfprintf_r+0x14ec>)
   86808:	e492      	b.n	86130 <_svfprintf_r+0xd9c>
   8680a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8680c:	f89a 3001 	ldrb.w	r3, [sl, #1]
   86810:	6828      	ldr	r0, [r5, #0]
   86812:	46a2      	mov	sl, r4
   86814:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   86818:	900a      	str	r0, [sp, #40]	; 0x28
   8681a:	4628      	mov	r0, r5
   8681c:	3004      	adds	r0, #4
   8681e:	900f      	str	r0, [sp, #60]	; 0x3c
   86820:	f7fe be12 	b.w	85448 <_svfprintf_r+0xb4>
   86824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86826:	b913      	cbnz	r3, 8682e <_svfprintf_r+0x149a>
   86828:	f01b 0f01 	tst.w	fp, #1
   8682c:	d002      	beq.n	86834 <_svfprintf_r+0x14a0>
   8682e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86830:	3301      	adds	r3, #1
   86832:	e7cd      	b.n	867d0 <_svfprintf_r+0x143c>
   86834:	2301      	movs	r3, #1
   86836:	e71d      	b.n	86674 <_svfprintf_r+0x12e0>
   86838:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8683c:	f7ff b984 	b.w	85b48 <_svfprintf_r+0x7b4>
   86840:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86844:	f7ff b93e 	b.w	85ac4 <_svfprintf_r+0x730>
   86848:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8684c:	f7ff b854 	b.w	858f8 <_svfprintf_r+0x564>
   86850:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   86854:	e67a      	b.n	8654c <_svfprintf_r+0x11b8>
   86856:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8685a:	f7ff b9b6 	b.w	85bca <_svfprintf_r+0x836>
   8685e:	f04f 32ff 	mov.w	r2, #4294967295
   86862:	230c      	movs	r3, #12
   86864:	9209      	str	r2, [sp, #36]	; 0x24
   86866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86868:	6013      	str	r3, [r2, #0]
   8686a:	f7fe be79 	b.w	85560 <_svfprintf_r+0x1cc>
   8686e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86872:	f7ff b8c9 	b.w	85a08 <_svfprintf_r+0x674>
   86876:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8687a:	f7ff b87d 	b.w	85978 <_svfprintf_r+0x5e4>
   8687e:	bf00      	nop
   86880:	0008af88 	.word	0x0008af88
   86884:	0008af40 	.word	0x0008af40
   86888:	0008af3c 	.word	0x0008af3c

0008688c <register_fini>:
   8688c:	4b02      	ldr	r3, [pc, #8]	; (86898 <register_fini+0xc>)
   8688e:	b113      	cbz	r3, 86896 <register_fini+0xa>
   86890:	4802      	ldr	r0, [pc, #8]	; (8689c <register_fini+0x10>)
   86892:	f000 b805 	b.w	868a0 <atexit>
   86896:	4770      	bx	lr
   86898:	00000000 	.word	0x00000000
   8689c:	0008781d 	.word	0x0008781d

000868a0 <atexit>:
   868a0:	2300      	movs	r3, #0
   868a2:	4601      	mov	r1, r0
   868a4:	461a      	mov	r2, r3
   868a6:	4618      	mov	r0, r3
   868a8:	f001 bef4 	b.w	88694 <__register_exitproc>

000868ac <quorem>:
   868ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   868b0:	6903      	ldr	r3, [r0, #16]
   868b2:	690f      	ldr	r7, [r1, #16]
   868b4:	b083      	sub	sp, #12
   868b6:	429f      	cmp	r7, r3
   868b8:	f300 8088 	bgt.w	869cc <quorem+0x120>
   868bc:	3f01      	subs	r7, #1
   868be:	f101 0614 	add.w	r6, r1, #20
   868c2:	f100 0a14 	add.w	sl, r0, #20
   868c6:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   868ca:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   868ce:	3301      	adds	r3, #1
   868d0:	fbb2 f8f3 	udiv	r8, r2, r3
   868d4:	00bb      	lsls	r3, r7, #2
   868d6:	9300      	str	r3, [sp, #0]
   868d8:	eb06 0903 	add.w	r9, r6, r3
   868dc:	4453      	add	r3, sl
   868de:	9301      	str	r3, [sp, #4]
   868e0:	f1b8 0f00 	cmp.w	r8, #0
   868e4:	d03b      	beq.n	8695e <quorem+0xb2>
   868e6:	2300      	movs	r3, #0
   868e8:	46b4      	mov	ip, r6
   868ea:	461c      	mov	r4, r3
   868ec:	46d6      	mov	lr, sl
   868ee:	f85c 2b04 	ldr.w	r2, [ip], #4
   868f2:	f8de 5000 	ldr.w	r5, [lr]
   868f6:	fa1f fb82 	uxth.w	fp, r2
   868fa:	fb08 330b 	mla	r3, r8, fp, r3
   868fe:	0c12      	lsrs	r2, r2, #16
   86900:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   86904:	fb08 bb02 	mla	fp, r8, r2, fp
   86908:	b29a      	uxth	r2, r3
   8690a:	1aa2      	subs	r2, r4, r2
   8690c:	b2ab      	uxth	r3, r5
   8690e:	fa1f f48b 	uxth.w	r4, fp
   86912:	441a      	add	r2, r3
   86914:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   86918:	eb04 4422 	add.w	r4, r4, r2, asr #16
   8691c:	b292      	uxth	r2, r2
   8691e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   86922:	45e1      	cmp	r9, ip
   86924:	f84e 2b04 	str.w	r2, [lr], #4
   86928:	ea4f 4424 	mov.w	r4, r4, asr #16
   8692c:	ea4f 431b 	mov.w	r3, fp, lsr #16
   86930:	d2dd      	bcs.n	868ee <quorem+0x42>
   86932:	9b00      	ldr	r3, [sp, #0]
   86934:	f85a 3003 	ldr.w	r3, [sl, r3]
   86938:	b98b      	cbnz	r3, 8695e <quorem+0xb2>
   8693a:	9c01      	ldr	r4, [sp, #4]
   8693c:	1f23      	subs	r3, r4, #4
   8693e:	459a      	cmp	sl, r3
   86940:	d20c      	bcs.n	8695c <quorem+0xb0>
   86942:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86946:	b94b      	cbnz	r3, 8695c <quorem+0xb0>
   86948:	f1a4 0308 	sub.w	r3, r4, #8
   8694c:	e002      	b.n	86954 <quorem+0xa8>
   8694e:	681a      	ldr	r2, [r3, #0]
   86950:	3b04      	subs	r3, #4
   86952:	b91a      	cbnz	r2, 8695c <quorem+0xb0>
   86954:	459a      	cmp	sl, r3
   86956:	f107 37ff 	add.w	r7, r7, #4294967295
   8695a:	d3f8      	bcc.n	8694e <quorem+0xa2>
   8695c:	6107      	str	r7, [r0, #16]
   8695e:	4604      	mov	r4, r0
   86960:	f001 fcfe 	bl	88360 <__mcmp>
   86964:	2800      	cmp	r0, #0
   86966:	db2d      	blt.n	869c4 <quorem+0x118>
   86968:	4655      	mov	r5, sl
   8696a:	2300      	movs	r3, #0
   8696c:	f108 0801 	add.w	r8, r8, #1
   86970:	f856 1b04 	ldr.w	r1, [r6], #4
   86974:	6828      	ldr	r0, [r5, #0]
   86976:	b28a      	uxth	r2, r1
   86978:	1a9a      	subs	r2, r3, r2
   8697a:	0c0b      	lsrs	r3, r1, #16
   8697c:	b281      	uxth	r1, r0
   8697e:	440a      	add	r2, r1
   86980:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   86984:	eb03 4322 	add.w	r3, r3, r2, asr #16
   86988:	b292      	uxth	r2, r2
   8698a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8698e:	45b1      	cmp	r9, r6
   86990:	f845 2b04 	str.w	r2, [r5], #4
   86994:	ea4f 4323 	mov.w	r3, r3, asr #16
   86998:	d2ea      	bcs.n	86970 <quorem+0xc4>
   8699a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8699e:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   869a2:	b97a      	cbnz	r2, 869c4 <quorem+0x118>
   869a4:	1f1a      	subs	r2, r3, #4
   869a6:	4592      	cmp	sl, r2
   869a8:	d20b      	bcs.n	869c2 <quorem+0x116>
   869aa:	f853 2c04 	ldr.w	r2, [r3, #-4]
   869ae:	b942      	cbnz	r2, 869c2 <quorem+0x116>
   869b0:	3b08      	subs	r3, #8
   869b2:	e002      	b.n	869ba <quorem+0x10e>
   869b4:	681a      	ldr	r2, [r3, #0]
   869b6:	3b04      	subs	r3, #4
   869b8:	b91a      	cbnz	r2, 869c2 <quorem+0x116>
   869ba:	459a      	cmp	sl, r3
   869bc:	f107 37ff 	add.w	r7, r7, #4294967295
   869c0:	d3f8      	bcc.n	869b4 <quorem+0x108>
   869c2:	6127      	str	r7, [r4, #16]
   869c4:	4640      	mov	r0, r8
   869c6:	b003      	add	sp, #12
   869c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   869cc:	2000      	movs	r0, #0
   869ce:	b003      	add	sp, #12
   869d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   869d4:	0000      	movs	r0, r0
	...

000869d8 <_dtoa_r>:
   869d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   869dc:	6c05      	ldr	r5, [r0, #64]	; 0x40
   869de:	b09b      	sub	sp, #108	; 0x6c
   869e0:	4604      	mov	r4, r0
   869e2:	4692      	mov	sl, r2
   869e4:	469b      	mov	fp, r3
   869e6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   869e8:	b14d      	cbz	r5, 869fe <_dtoa_r+0x26>
   869ea:	2301      	movs	r3, #1
   869ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
   869ee:	4629      	mov	r1, r5
   869f0:	4093      	lsls	r3, r2
   869f2:	60ab      	str	r3, [r5, #8]
   869f4:	606a      	str	r2, [r5, #4]
   869f6:	f001 fadb 	bl	87fb0 <_Bfree>
   869fa:	2300      	movs	r3, #0
   869fc:	6423      	str	r3, [r4, #64]	; 0x40
   869fe:	f1bb 0f00 	cmp.w	fp, #0
   86a02:	465d      	mov	r5, fp
   86a04:	db35      	blt.n	86a72 <_dtoa_r+0x9a>
   86a06:	2300      	movs	r3, #0
   86a08:	6033      	str	r3, [r6, #0]
   86a0a:	4b9d      	ldr	r3, [pc, #628]	; (86c80 <_dtoa_r+0x2a8>)
   86a0c:	43ab      	bics	r3, r5
   86a0e:	d015      	beq.n	86a3c <_dtoa_r+0x64>
   86a10:	2200      	movs	r2, #0
   86a12:	2300      	movs	r3, #0
   86a14:	4650      	mov	r0, sl
   86a16:	4659      	mov	r1, fp
   86a18:	f002 fe32 	bl	89680 <__aeabi_dcmpeq>
   86a1c:	4680      	mov	r8, r0
   86a1e:	2800      	cmp	r0, #0
   86a20:	d02d      	beq.n	86a7e <_dtoa_r+0xa6>
   86a22:	2301      	movs	r3, #1
   86a24:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86a26:	6013      	str	r3, [r2, #0]
   86a28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86a2a:	2b00      	cmp	r3, #0
   86a2c:	f000 80bd 	beq.w	86baa <_dtoa_r+0x1d2>
   86a30:	4894      	ldr	r0, [pc, #592]	; (86c84 <_dtoa_r+0x2ac>)
   86a32:	6018      	str	r0, [r3, #0]
   86a34:	3801      	subs	r0, #1
   86a36:	b01b      	add	sp, #108	; 0x6c
   86a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86a3c:	f242 730f 	movw	r3, #9999	; 0x270f
   86a40:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86a42:	6013      	str	r3, [r2, #0]
   86a44:	f1ba 0f00 	cmp.w	sl, #0
   86a48:	d10d      	bne.n	86a66 <_dtoa_r+0x8e>
   86a4a:	f3c5 0513 	ubfx	r5, r5, #0, #20
   86a4e:	b955      	cbnz	r5, 86a66 <_dtoa_r+0x8e>
   86a50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86a52:	488d      	ldr	r0, [pc, #564]	; (86c88 <_dtoa_r+0x2b0>)
   86a54:	2b00      	cmp	r3, #0
   86a56:	d0ee      	beq.n	86a36 <_dtoa_r+0x5e>
   86a58:	f100 0308 	add.w	r3, r0, #8
   86a5c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   86a5e:	6013      	str	r3, [r2, #0]
   86a60:	b01b      	add	sp, #108	; 0x6c
   86a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86a66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86a68:	4888      	ldr	r0, [pc, #544]	; (86c8c <_dtoa_r+0x2b4>)
   86a6a:	2b00      	cmp	r3, #0
   86a6c:	d0e3      	beq.n	86a36 <_dtoa_r+0x5e>
   86a6e:	1cc3      	adds	r3, r0, #3
   86a70:	e7f4      	b.n	86a5c <_dtoa_r+0x84>
   86a72:	2301      	movs	r3, #1
   86a74:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   86a78:	6033      	str	r3, [r6, #0]
   86a7a:	46ab      	mov	fp, r5
   86a7c:	e7c5      	b.n	86a0a <_dtoa_r+0x32>
   86a7e:	aa18      	add	r2, sp, #96	; 0x60
   86a80:	ab19      	add	r3, sp, #100	; 0x64
   86a82:	9201      	str	r2, [sp, #4]
   86a84:	9300      	str	r3, [sp, #0]
   86a86:	4652      	mov	r2, sl
   86a88:	465b      	mov	r3, fp
   86a8a:	4620      	mov	r0, r4
   86a8c:	f001 fd12 	bl	884b4 <__d2b>
   86a90:	0d2b      	lsrs	r3, r5, #20
   86a92:	4681      	mov	r9, r0
   86a94:	d071      	beq.n	86b7a <_dtoa_r+0x1a2>
   86a96:	4650      	mov	r0, sl
   86a98:	f3cb 0213 	ubfx	r2, fp, #0, #20
   86a9c:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   86aa0:	9f18      	ldr	r7, [sp, #96]	; 0x60
   86aa2:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   86aa6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   86aaa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   86aae:	2200      	movs	r2, #0
   86ab0:	4b77      	ldr	r3, [pc, #476]	; (86c90 <_dtoa_r+0x2b8>)
   86ab2:	f002 f9c9 	bl	88e48 <__aeabi_dsub>
   86ab6:	a36c      	add	r3, pc, #432	; (adr r3, 86c68 <_dtoa_r+0x290>)
   86ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
   86abc:	f002 fb78 	bl	891b0 <__aeabi_dmul>
   86ac0:	a36b      	add	r3, pc, #428	; (adr r3, 86c70 <_dtoa_r+0x298>)
   86ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
   86ac6:	f002 f9c1 	bl	88e4c <__adddf3>
   86aca:	e9cd 0102 	strd	r0, r1, [sp, #8]
   86ace:	4630      	mov	r0, r6
   86ad0:	f002 fb08 	bl	890e4 <__aeabi_i2d>
   86ad4:	a368      	add	r3, pc, #416	; (adr r3, 86c78 <_dtoa_r+0x2a0>)
   86ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
   86ada:	f002 fb69 	bl	891b0 <__aeabi_dmul>
   86ade:	4602      	mov	r2, r0
   86ae0:	460b      	mov	r3, r1
   86ae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   86ae6:	f002 f9b1 	bl	88e4c <__adddf3>
   86aea:	e9cd 0104 	strd	r0, r1, [sp, #16]
   86aee:	f002 fe0f 	bl	89710 <__aeabi_d2iz>
   86af2:	2200      	movs	r2, #0
   86af4:	9002      	str	r0, [sp, #8]
   86af6:	2300      	movs	r3, #0
   86af8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   86afc:	f002 fdca 	bl	89694 <__aeabi_dcmplt>
   86b00:	2800      	cmp	r0, #0
   86b02:	f040 816d 	bne.w	86de0 <_dtoa_r+0x408>
   86b06:	9d02      	ldr	r5, [sp, #8]
   86b08:	2d16      	cmp	r5, #22
   86b0a:	f200 8157 	bhi.w	86dbc <_dtoa_r+0x3e4>
   86b0e:	4961      	ldr	r1, [pc, #388]	; (86c94 <_dtoa_r+0x2bc>)
   86b10:	4652      	mov	r2, sl
   86b12:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   86b16:	465b      	mov	r3, fp
   86b18:	e9d1 0100 	ldrd	r0, r1, [r1]
   86b1c:	f002 fdd8 	bl	896d0 <__aeabi_dcmpgt>
   86b20:	2800      	cmp	r0, #0
   86b22:	f000 81be 	beq.w	86ea2 <_dtoa_r+0x4ca>
   86b26:	1e6b      	subs	r3, r5, #1
   86b28:	9302      	str	r3, [sp, #8]
   86b2a:	2300      	movs	r3, #0
   86b2c:	930e      	str	r3, [sp, #56]	; 0x38
   86b2e:	1bbf      	subs	r7, r7, r6
   86b30:	1e7b      	subs	r3, r7, #1
   86b32:	9308      	str	r3, [sp, #32]
   86b34:	f100 814e 	bmi.w	86dd4 <_dtoa_r+0x3fc>
   86b38:	2300      	movs	r3, #0
   86b3a:	930a      	str	r3, [sp, #40]	; 0x28
   86b3c:	9b02      	ldr	r3, [sp, #8]
   86b3e:	2b00      	cmp	r3, #0
   86b40:	f2c0 813f 	blt.w	86dc2 <_dtoa_r+0x3ea>
   86b44:	9a08      	ldr	r2, [sp, #32]
   86b46:	930d      	str	r3, [sp, #52]	; 0x34
   86b48:	4611      	mov	r1, r2
   86b4a:	4419      	add	r1, r3
   86b4c:	2300      	movs	r3, #0
   86b4e:	9108      	str	r1, [sp, #32]
   86b50:	930c      	str	r3, [sp, #48]	; 0x30
   86b52:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86b54:	2b09      	cmp	r3, #9
   86b56:	d82a      	bhi.n	86bae <_dtoa_r+0x1d6>
   86b58:	2b05      	cmp	r3, #5
   86b5a:	f340 8658 	ble.w	8780e <_dtoa_r+0xe36>
   86b5e:	2500      	movs	r5, #0
   86b60:	3b04      	subs	r3, #4
   86b62:	9324      	str	r3, [sp, #144]	; 0x90
   86b64:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86b66:	3b02      	subs	r3, #2
   86b68:	2b03      	cmp	r3, #3
   86b6a:	f200 863f 	bhi.w	877ec <_dtoa_r+0xe14>
   86b6e:	e8df f013 	tbh	[pc, r3, lsl #1]
   86b72:	03ce      	.short	0x03ce
   86b74:	03d902c3 	.word	0x03d902c3
   86b78:	045b      	.short	0x045b
   86b7a:	9f18      	ldr	r7, [sp, #96]	; 0x60
   86b7c:	9e19      	ldr	r6, [sp, #100]	; 0x64
   86b7e:	443e      	add	r6, r7
   86b80:	f206 4332 	addw	r3, r6, #1074	; 0x432
   86b84:	2b20      	cmp	r3, #32
   86b86:	f340 8187 	ble.w	86e98 <_dtoa_r+0x4c0>
   86b8a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   86b8e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   86b92:	409d      	lsls	r5, r3
   86b94:	fa2a f000 	lsr.w	r0, sl, r0
   86b98:	4328      	orrs	r0, r5
   86b9a:	f002 fa93 	bl	890c4 <__aeabi_ui2d>
   86b9e:	2301      	movs	r3, #1
   86ba0:	3e01      	subs	r6, #1
   86ba2:	9314      	str	r3, [sp, #80]	; 0x50
   86ba4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   86ba8:	e781      	b.n	86aae <_dtoa_r+0xd6>
   86baa:	483b      	ldr	r0, [pc, #236]	; (86c98 <_dtoa_r+0x2c0>)
   86bac:	e743      	b.n	86a36 <_dtoa_r+0x5e>
   86bae:	2100      	movs	r1, #0
   86bb0:	4620      	mov	r0, r4
   86bb2:	6461      	str	r1, [r4, #68]	; 0x44
   86bb4:	9125      	str	r1, [sp, #148]	; 0x94
   86bb6:	f001 f9d5 	bl	87f64 <_Balloc>
   86bba:	f04f 33ff 	mov.w	r3, #4294967295
   86bbe:	9307      	str	r3, [sp, #28]
   86bc0:	930f      	str	r3, [sp, #60]	; 0x3c
   86bc2:	2301      	movs	r3, #1
   86bc4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   86bc6:	9004      	str	r0, [sp, #16]
   86bc8:	6420      	str	r0, [r4, #64]	; 0x40
   86bca:	9224      	str	r2, [sp, #144]	; 0x90
   86bcc:	930b      	str	r3, [sp, #44]	; 0x2c
   86bce:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86bd0:	2b00      	cmp	r3, #0
   86bd2:	f2c0 80d3 	blt.w	86d7c <_dtoa_r+0x3a4>
   86bd6:	9a02      	ldr	r2, [sp, #8]
   86bd8:	2a0e      	cmp	r2, #14
   86bda:	f300 80cf 	bgt.w	86d7c <_dtoa_r+0x3a4>
   86bde:	4b2d      	ldr	r3, [pc, #180]	; (86c94 <_dtoa_r+0x2bc>)
   86be0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   86be4:	e9d3 2300 	ldrd	r2, r3, [r3]
   86be8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   86bec:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86bee:	2b00      	cmp	r3, #0
   86bf0:	f2c0 83b4 	blt.w	8735c <_dtoa_r+0x984>
   86bf4:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   86bf8:	4650      	mov	r0, sl
   86bfa:	462a      	mov	r2, r5
   86bfc:	4633      	mov	r3, r6
   86bfe:	4659      	mov	r1, fp
   86c00:	f002 fc00 	bl	89404 <__aeabi_ddiv>
   86c04:	f002 fd84 	bl	89710 <__aeabi_d2iz>
   86c08:	4680      	mov	r8, r0
   86c0a:	f002 fa6b 	bl	890e4 <__aeabi_i2d>
   86c0e:	462a      	mov	r2, r5
   86c10:	4633      	mov	r3, r6
   86c12:	f002 facd 	bl	891b0 <__aeabi_dmul>
   86c16:	4602      	mov	r2, r0
   86c18:	460b      	mov	r3, r1
   86c1a:	4650      	mov	r0, sl
   86c1c:	4659      	mov	r1, fp
   86c1e:	f002 f913 	bl	88e48 <__aeabi_dsub>
   86c22:	9e07      	ldr	r6, [sp, #28]
   86c24:	9f04      	ldr	r7, [sp, #16]
   86c26:	f108 0530 	add.w	r5, r8, #48	; 0x30
   86c2a:	2e01      	cmp	r6, #1
   86c2c:	703d      	strb	r5, [r7, #0]
   86c2e:	4602      	mov	r2, r0
   86c30:	460b      	mov	r3, r1
   86c32:	f107 0501 	add.w	r5, r7, #1
   86c36:	d064      	beq.n	86d02 <_dtoa_r+0x32a>
   86c38:	2200      	movs	r2, #0
   86c3a:	4b18      	ldr	r3, [pc, #96]	; (86c9c <_dtoa_r+0x2c4>)
   86c3c:	f002 fab8 	bl	891b0 <__aeabi_dmul>
   86c40:	2200      	movs	r2, #0
   86c42:	2300      	movs	r3, #0
   86c44:	4606      	mov	r6, r0
   86c46:	460f      	mov	r7, r1
   86c48:	f002 fd1a 	bl	89680 <__aeabi_dcmpeq>
   86c4c:	2800      	cmp	r0, #0
   86c4e:	f040 8082 	bne.w	86d56 <_dtoa_r+0x37e>
   86c52:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   86c56:	f04f 0a00 	mov.w	sl, #0
   86c5a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   86c5e:	f04f 0b00 	mov.w	fp, #0
   86c62:	940b      	str	r4, [sp, #44]	; 0x2c
   86c64:	e029      	b.n	86cba <_dtoa_r+0x2e2>
   86c66:	bf00      	nop
   86c68:	636f4361 	.word	0x636f4361
   86c6c:	3fd287a7 	.word	0x3fd287a7
   86c70:	8b60c8b3 	.word	0x8b60c8b3
   86c74:	3fc68a28 	.word	0x3fc68a28
   86c78:	509f79fb 	.word	0x509f79fb
   86c7c:	3fd34413 	.word	0x3fd34413
   86c80:	7ff00000 	.word	0x7ff00000
   86c84:	0008af75 	.word	0x0008af75
   86c88:	0008af98 	.word	0x0008af98
   86c8c:	0008afa4 	.word	0x0008afa4
   86c90:	3ff80000 	.word	0x3ff80000
   86c94:	0008afe0 	.word	0x0008afe0
   86c98:	0008af74 	.word	0x0008af74
   86c9c:	40240000 	.word	0x40240000
   86ca0:	2200      	movs	r2, #0
   86ca2:	4b81      	ldr	r3, [pc, #516]	; (86ea8 <_dtoa_r+0x4d0>)
   86ca4:	f002 fa84 	bl	891b0 <__aeabi_dmul>
   86ca8:	4652      	mov	r2, sl
   86caa:	465b      	mov	r3, fp
   86cac:	4606      	mov	r6, r0
   86cae:	460f      	mov	r7, r1
   86cb0:	f002 fce6 	bl	89680 <__aeabi_dcmpeq>
   86cb4:	2800      	cmp	r0, #0
   86cb6:	f040 83ba 	bne.w	8742e <_dtoa_r+0xa56>
   86cba:	4642      	mov	r2, r8
   86cbc:	464b      	mov	r3, r9
   86cbe:	4630      	mov	r0, r6
   86cc0:	4639      	mov	r1, r7
   86cc2:	f002 fb9f 	bl	89404 <__aeabi_ddiv>
   86cc6:	f002 fd23 	bl	89710 <__aeabi_d2iz>
   86cca:	4604      	mov	r4, r0
   86ccc:	f002 fa0a 	bl	890e4 <__aeabi_i2d>
   86cd0:	4642      	mov	r2, r8
   86cd2:	464b      	mov	r3, r9
   86cd4:	f002 fa6c 	bl	891b0 <__aeabi_dmul>
   86cd8:	4602      	mov	r2, r0
   86cda:	460b      	mov	r3, r1
   86cdc:	4630      	mov	r0, r6
   86cde:	4639      	mov	r1, r7
   86ce0:	f002 f8b2 	bl	88e48 <__aeabi_dsub>
   86ce4:	f104 0630 	add.w	r6, r4, #48	; 0x30
   86ce8:	f805 6b01 	strb.w	r6, [r5], #1
   86cec:	9e04      	ldr	r6, [sp, #16]
   86cee:	9f07      	ldr	r7, [sp, #28]
   86cf0:	1bae      	subs	r6, r5, r6
   86cf2:	42be      	cmp	r6, r7
   86cf4:	4602      	mov	r2, r0
   86cf6:	460b      	mov	r3, r1
   86cf8:	d1d2      	bne.n	86ca0 <_dtoa_r+0x2c8>
   86cfa:	46a0      	mov	r8, r4
   86cfc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86d00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86d02:	4610      	mov	r0, r2
   86d04:	4619      	mov	r1, r3
   86d06:	f002 f8a1 	bl	88e4c <__adddf3>
   86d0a:	4606      	mov	r6, r0
   86d0c:	460f      	mov	r7, r1
   86d0e:	4602      	mov	r2, r0
   86d10:	460b      	mov	r3, r1
   86d12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86d16:	f002 fcbd 	bl	89694 <__aeabi_dcmplt>
   86d1a:	b948      	cbnz	r0, 86d30 <_dtoa_r+0x358>
   86d1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86d20:	4632      	mov	r2, r6
   86d22:	463b      	mov	r3, r7
   86d24:	f002 fcac 	bl	89680 <__aeabi_dcmpeq>
   86d28:	b1a8      	cbz	r0, 86d56 <_dtoa_r+0x37e>
   86d2a:	f018 0f01 	tst.w	r8, #1
   86d2e:	d012      	beq.n	86d56 <_dtoa_r+0x37e>
   86d30:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   86d34:	1e6b      	subs	r3, r5, #1
   86d36:	9a04      	ldr	r2, [sp, #16]
   86d38:	e004      	b.n	86d44 <_dtoa_r+0x36c>
   86d3a:	429a      	cmp	r2, r3
   86d3c:	f000 8402 	beq.w	87544 <_dtoa_r+0xb6c>
   86d40:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   86d44:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   86d48:	f103 0501 	add.w	r5, r3, #1
   86d4c:	d0f5      	beq.n	86d3a <_dtoa_r+0x362>
   86d4e:	f108 0801 	add.w	r8, r8, #1
   86d52:	f883 8000 	strb.w	r8, [r3]
   86d56:	4649      	mov	r1, r9
   86d58:	4620      	mov	r0, r4
   86d5a:	f001 f929 	bl	87fb0 <_Bfree>
   86d5e:	2200      	movs	r2, #0
   86d60:	9b02      	ldr	r3, [sp, #8]
   86d62:	702a      	strb	r2, [r5, #0]
   86d64:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86d66:	3301      	adds	r3, #1
   86d68:	6013      	str	r3, [r2, #0]
   86d6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86d6c:	2b00      	cmp	r3, #0
   86d6e:	f000 839f 	beq.w	874b0 <_dtoa_r+0xad8>
   86d72:	9804      	ldr	r0, [sp, #16]
   86d74:	601d      	str	r5, [r3, #0]
   86d76:	b01b      	add	sp, #108	; 0x6c
   86d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86d7e:	2a00      	cmp	r2, #0
   86d80:	d03e      	beq.n	86e00 <_dtoa_r+0x428>
   86d82:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86d84:	2a01      	cmp	r2, #1
   86d86:	f340 8311 	ble.w	873ac <_dtoa_r+0x9d4>
   86d8a:	9b07      	ldr	r3, [sp, #28]
   86d8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86d8e:	1e5f      	subs	r7, r3, #1
   86d90:	42ba      	cmp	r2, r7
   86d92:	f2c0 8390 	blt.w	874b6 <_dtoa_r+0xade>
   86d96:	1bd7      	subs	r7, r2, r7
   86d98:	9b07      	ldr	r3, [sp, #28]
   86d9a:	2b00      	cmp	r3, #0
   86d9c:	f2c0 848c 	blt.w	876b8 <_dtoa_r+0xce0>
   86da0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   86da2:	9b07      	ldr	r3, [sp, #28]
   86da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86da6:	2101      	movs	r1, #1
   86da8:	441a      	add	r2, r3
   86daa:	920a      	str	r2, [sp, #40]	; 0x28
   86dac:	9a08      	ldr	r2, [sp, #32]
   86dae:	4620      	mov	r0, r4
   86db0:	441a      	add	r2, r3
   86db2:	9208      	str	r2, [sp, #32]
   86db4:	f001 f998 	bl	880e8 <__i2b>
   86db8:	4606      	mov	r6, r0
   86dba:	e023      	b.n	86e04 <_dtoa_r+0x42c>
   86dbc:	2301      	movs	r3, #1
   86dbe:	930e      	str	r3, [sp, #56]	; 0x38
   86dc0:	e6b5      	b.n	86b2e <_dtoa_r+0x156>
   86dc2:	2300      	movs	r3, #0
   86dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86dc6:	930d      	str	r3, [sp, #52]	; 0x34
   86dc8:	9b02      	ldr	r3, [sp, #8]
   86dca:	1ad2      	subs	r2, r2, r3
   86dcc:	425b      	negs	r3, r3
   86dce:	920a      	str	r2, [sp, #40]	; 0x28
   86dd0:	930c      	str	r3, [sp, #48]	; 0x30
   86dd2:	e6be      	b.n	86b52 <_dtoa_r+0x17a>
   86dd4:	f1c7 0301 	rsb	r3, r7, #1
   86dd8:	930a      	str	r3, [sp, #40]	; 0x28
   86dda:	2300      	movs	r3, #0
   86ddc:	9308      	str	r3, [sp, #32]
   86dde:	e6ad      	b.n	86b3c <_dtoa_r+0x164>
   86de0:	9d02      	ldr	r5, [sp, #8]
   86de2:	4628      	mov	r0, r5
   86de4:	f002 f97e 	bl	890e4 <__aeabi_i2d>
   86de8:	4602      	mov	r2, r0
   86dea:	460b      	mov	r3, r1
   86dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   86df0:	f002 fc46 	bl	89680 <__aeabi_dcmpeq>
   86df4:	2800      	cmp	r0, #0
   86df6:	f47f ae86 	bne.w	86b06 <_dtoa_r+0x12e>
   86dfa:	1e6b      	subs	r3, r5, #1
   86dfc:	9302      	str	r3, [sp, #8]
   86dfe:	e682      	b.n	86b06 <_dtoa_r+0x12e>
   86e00:	ad0a      	add	r5, sp, #40	; 0x28
   86e02:	cde0      	ldmia	r5, {r5, r6, r7}
   86e04:	2d00      	cmp	r5, #0
   86e06:	dd0c      	ble.n	86e22 <_dtoa_r+0x44a>
   86e08:	9908      	ldr	r1, [sp, #32]
   86e0a:	2900      	cmp	r1, #0
   86e0c:	460b      	mov	r3, r1
   86e0e:	dd08      	ble.n	86e22 <_dtoa_r+0x44a>
   86e10:	42a9      	cmp	r1, r5
   86e12:	bfa8      	it	ge
   86e14:	462b      	movge	r3, r5
   86e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86e18:	1aed      	subs	r5, r5, r3
   86e1a:	1ad2      	subs	r2, r2, r3
   86e1c:	1acb      	subs	r3, r1, r3
   86e1e:	920a      	str	r2, [sp, #40]	; 0x28
   86e20:	9308      	str	r3, [sp, #32]
   86e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86e24:	b1d3      	cbz	r3, 86e5c <_dtoa_r+0x484>
   86e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86e28:	2b00      	cmp	r3, #0
   86e2a:	f000 82b8 	beq.w	8739e <_dtoa_r+0x9c6>
   86e2e:	2f00      	cmp	r7, #0
   86e30:	dd10      	ble.n	86e54 <_dtoa_r+0x47c>
   86e32:	4631      	mov	r1, r6
   86e34:	463a      	mov	r2, r7
   86e36:	4620      	mov	r0, r4
   86e38:	f001 f9f2 	bl	88220 <__pow5mult>
   86e3c:	464a      	mov	r2, r9
   86e3e:	4601      	mov	r1, r0
   86e40:	4606      	mov	r6, r0
   86e42:	4620      	mov	r0, r4
   86e44:	f001 f95a 	bl	880fc <__multiply>
   86e48:	4603      	mov	r3, r0
   86e4a:	4649      	mov	r1, r9
   86e4c:	4620      	mov	r0, r4
   86e4e:	4699      	mov	r9, r3
   86e50:	f001 f8ae 	bl	87fb0 <_Bfree>
   86e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86e56:	1bda      	subs	r2, r3, r7
   86e58:	f040 82a2 	bne.w	873a0 <_dtoa_r+0x9c8>
   86e5c:	2101      	movs	r1, #1
   86e5e:	4620      	mov	r0, r4
   86e60:	f001 f942 	bl	880e8 <__i2b>
   86e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86e66:	4680      	mov	r8, r0
   86e68:	2b00      	cmp	r3, #0
   86e6a:	dd1f      	ble.n	86eac <_dtoa_r+0x4d4>
   86e6c:	4601      	mov	r1, r0
   86e6e:	461a      	mov	r2, r3
   86e70:	4620      	mov	r0, r4
   86e72:	f001 f9d5 	bl	88220 <__pow5mult>
   86e76:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86e78:	4680      	mov	r8, r0
   86e7a:	2b01      	cmp	r3, #1
   86e7c:	f340 8255 	ble.w	8732a <_dtoa_r+0x952>
   86e80:	2300      	movs	r3, #0
   86e82:	930c      	str	r3, [sp, #48]	; 0x30
   86e84:	f8d8 3010 	ldr.w	r3, [r8, #16]
   86e88:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   86e8c:	6918      	ldr	r0, [r3, #16]
   86e8e:	f001 f8db 	bl	88048 <__hi0bits>
   86e92:	f1c0 0020 	rsb	r0, r0, #32
   86e96:	e013      	b.n	86ec0 <_dtoa_r+0x4e8>
   86e98:	f1c3 0520 	rsb	r5, r3, #32
   86e9c:	fa0a f005 	lsl.w	r0, sl, r5
   86ea0:	e67b      	b.n	86b9a <_dtoa_r+0x1c2>
   86ea2:	900e      	str	r0, [sp, #56]	; 0x38
   86ea4:	e643      	b.n	86b2e <_dtoa_r+0x156>
   86ea6:	bf00      	nop
   86ea8:	40240000 	.word	0x40240000
   86eac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86eae:	2b01      	cmp	r3, #1
   86eb0:	f340 8285 	ble.w	873be <_dtoa_r+0x9e6>
   86eb4:	2300      	movs	r3, #0
   86eb6:	930c      	str	r3, [sp, #48]	; 0x30
   86eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86eba:	2001      	movs	r0, #1
   86ebc:	2b00      	cmp	r3, #0
   86ebe:	d1e1      	bne.n	86e84 <_dtoa_r+0x4ac>
   86ec0:	9a08      	ldr	r2, [sp, #32]
   86ec2:	4410      	add	r0, r2
   86ec4:	f010 001f 	ands.w	r0, r0, #31
   86ec8:	f000 80a1 	beq.w	8700e <_dtoa_r+0x636>
   86ecc:	f1c0 0320 	rsb	r3, r0, #32
   86ed0:	2b04      	cmp	r3, #4
   86ed2:	f340 8486 	ble.w	877e2 <_dtoa_r+0xe0a>
   86ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86ed8:	f1c0 001c 	rsb	r0, r0, #28
   86edc:	4403      	add	r3, r0
   86ede:	930a      	str	r3, [sp, #40]	; 0x28
   86ee0:	4613      	mov	r3, r2
   86ee2:	4403      	add	r3, r0
   86ee4:	4405      	add	r5, r0
   86ee6:	9308      	str	r3, [sp, #32]
   86ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86eea:	2b00      	cmp	r3, #0
   86eec:	dd05      	ble.n	86efa <_dtoa_r+0x522>
   86eee:	4649      	mov	r1, r9
   86ef0:	461a      	mov	r2, r3
   86ef2:	4620      	mov	r0, r4
   86ef4:	f001 f9e4 	bl	882c0 <__lshift>
   86ef8:	4681      	mov	r9, r0
   86efa:	9b08      	ldr	r3, [sp, #32]
   86efc:	2b00      	cmp	r3, #0
   86efe:	dd05      	ble.n	86f0c <_dtoa_r+0x534>
   86f00:	4641      	mov	r1, r8
   86f02:	461a      	mov	r2, r3
   86f04:	4620      	mov	r0, r4
   86f06:	f001 f9db 	bl	882c0 <__lshift>
   86f0a:	4680      	mov	r8, r0
   86f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86f0e:	2b00      	cmp	r3, #0
   86f10:	f040 8086 	bne.w	87020 <_dtoa_r+0x648>
   86f14:	9b07      	ldr	r3, [sp, #28]
   86f16:	2b00      	cmp	r3, #0
   86f18:	f340 8264 	ble.w	873e4 <_dtoa_r+0xa0c>
   86f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86f1e:	2b00      	cmp	r3, #0
   86f20:	f000 8098 	beq.w	87054 <_dtoa_r+0x67c>
   86f24:	2d00      	cmp	r5, #0
   86f26:	dd05      	ble.n	86f34 <_dtoa_r+0x55c>
   86f28:	4631      	mov	r1, r6
   86f2a:	462a      	mov	r2, r5
   86f2c:	4620      	mov	r0, r4
   86f2e:	f001 f9c7 	bl	882c0 <__lshift>
   86f32:	4606      	mov	r6, r0
   86f34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86f36:	2b00      	cmp	r3, #0
   86f38:	f040 8336 	bne.w	875a8 <_dtoa_r+0xbd0>
   86f3c:	9608      	str	r6, [sp, #32]
   86f3e:	9b07      	ldr	r3, [sp, #28]
   86f40:	9a04      	ldr	r2, [sp, #16]
   86f42:	3b01      	subs	r3, #1
   86f44:	18d3      	adds	r3, r2, r3
   86f46:	930b      	str	r3, [sp, #44]	; 0x2c
   86f48:	4617      	mov	r7, r2
   86f4a:	f00a 0301 	and.w	r3, sl, #1
   86f4e:	46c2      	mov	sl, r8
   86f50:	f8dd b020 	ldr.w	fp, [sp, #32]
   86f54:	930c      	str	r3, [sp, #48]	; 0x30
   86f56:	4651      	mov	r1, sl
   86f58:	4648      	mov	r0, r9
   86f5a:	f7ff fca7 	bl	868ac <quorem>
   86f5e:	4631      	mov	r1, r6
   86f60:	4605      	mov	r5, r0
   86f62:	4648      	mov	r0, r9
   86f64:	f001 f9fc 	bl	88360 <__mcmp>
   86f68:	465a      	mov	r2, fp
   86f6a:	9007      	str	r0, [sp, #28]
   86f6c:	4651      	mov	r1, sl
   86f6e:	4620      	mov	r0, r4
   86f70:	f001 fa12 	bl	88398 <__mdiff>
   86f74:	68c2      	ldr	r2, [r0, #12]
   86f76:	4680      	mov	r8, r0
   86f78:	f105 0330 	add.w	r3, r5, #48	; 0x30
   86f7c:	2a00      	cmp	r2, #0
   86f7e:	f040 8229 	bne.w	873d4 <_dtoa_r+0x9fc>
   86f82:	4601      	mov	r1, r0
   86f84:	4648      	mov	r0, r9
   86f86:	930a      	str	r3, [sp, #40]	; 0x28
   86f88:	f001 f9ea 	bl	88360 <__mcmp>
   86f8c:	4641      	mov	r1, r8
   86f8e:	9008      	str	r0, [sp, #32]
   86f90:	4620      	mov	r0, r4
   86f92:	f001 f80d 	bl	87fb0 <_Bfree>
   86f96:	9a08      	ldr	r2, [sp, #32]
   86f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86f9a:	b932      	cbnz	r2, 86faa <_dtoa_r+0x5d2>
   86f9c:	9924      	ldr	r1, [sp, #144]	; 0x90
   86f9e:	b921      	cbnz	r1, 86faa <_dtoa_r+0x5d2>
   86fa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86fa2:	2a00      	cmp	r2, #0
   86fa4:	f000 83ee 	beq.w	87784 <_dtoa_r+0xdac>
   86fa8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86faa:	9907      	ldr	r1, [sp, #28]
   86fac:	2900      	cmp	r1, #0
   86fae:	f2c0 829f 	blt.w	874f0 <_dtoa_r+0xb18>
   86fb2:	d105      	bne.n	86fc0 <_dtoa_r+0x5e8>
   86fb4:	9924      	ldr	r1, [sp, #144]	; 0x90
   86fb6:	b919      	cbnz	r1, 86fc0 <_dtoa_r+0x5e8>
   86fb8:	990c      	ldr	r1, [sp, #48]	; 0x30
   86fba:	2900      	cmp	r1, #0
   86fbc:	f000 8298 	beq.w	874f0 <_dtoa_r+0xb18>
   86fc0:	2a00      	cmp	r2, #0
   86fc2:	f300 8305 	bgt.w	875d0 <_dtoa_r+0xbf8>
   86fc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86fc8:	f107 0801 	add.w	r8, r7, #1
   86fcc:	4297      	cmp	r7, r2
   86fce:	703b      	strb	r3, [r7, #0]
   86fd0:	4645      	mov	r5, r8
   86fd2:	f000 830b 	beq.w	875ec <_dtoa_r+0xc14>
   86fd6:	4649      	mov	r1, r9
   86fd8:	2300      	movs	r3, #0
   86fda:	220a      	movs	r2, #10
   86fdc:	4620      	mov	r0, r4
   86fde:	f000 fff1 	bl	87fc4 <__multadd>
   86fe2:	455e      	cmp	r6, fp
   86fe4:	4681      	mov	r9, r0
   86fe6:	4631      	mov	r1, r6
   86fe8:	f04f 0300 	mov.w	r3, #0
   86fec:	f04f 020a 	mov.w	r2, #10
   86ff0:	4620      	mov	r0, r4
   86ff2:	f000 81e9 	beq.w	873c8 <_dtoa_r+0x9f0>
   86ff6:	f000 ffe5 	bl	87fc4 <__multadd>
   86ffa:	4659      	mov	r1, fp
   86ffc:	4606      	mov	r6, r0
   86ffe:	2300      	movs	r3, #0
   87000:	220a      	movs	r2, #10
   87002:	4620      	mov	r0, r4
   87004:	f000 ffde 	bl	87fc4 <__multadd>
   87008:	4647      	mov	r7, r8
   8700a:	4683      	mov	fp, r0
   8700c:	e7a3      	b.n	86f56 <_dtoa_r+0x57e>
   8700e:	201c      	movs	r0, #28
   87010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87012:	4405      	add	r5, r0
   87014:	4403      	add	r3, r0
   87016:	930a      	str	r3, [sp, #40]	; 0x28
   87018:	9b08      	ldr	r3, [sp, #32]
   8701a:	4403      	add	r3, r0
   8701c:	9308      	str	r3, [sp, #32]
   8701e:	e763      	b.n	86ee8 <_dtoa_r+0x510>
   87020:	4641      	mov	r1, r8
   87022:	4648      	mov	r0, r9
   87024:	f001 f99c 	bl	88360 <__mcmp>
   87028:	2800      	cmp	r0, #0
   8702a:	f6bf af73 	bge.w	86f14 <_dtoa_r+0x53c>
   8702e:	9f02      	ldr	r7, [sp, #8]
   87030:	4649      	mov	r1, r9
   87032:	2300      	movs	r3, #0
   87034:	220a      	movs	r2, #10
   87036:	4620      	mov	r0, r4
   87038:	3f01      	subs	r7, #1
   8703a:	9702      	str	r7, [sp, #8]
   8703c:	f000 ffc2 	bl	87fc4 <__multadd>
   87040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87042:	4681      	mov	r9, r0
   87044:	2b00      	cmp	r3, #0
   87046:	f040 83b5 	bne.w	877b4 <_dtoa_r+0xddc>
   8704a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8704c:	2b00      	cmp	r3, #0
   8704e:	f340 83be 	ble.w	877ce <_dtoa_r+0xdf6>
   87052:	9307      	str	r3, [sp, #28]
   87054:	f8dd a010 	ldr.w	sl, [sp, #16]
   87058:	9f07      	ldr	r7, [sp, #28]
   8705a:	4655      	mov	r5, sl
   8705c:	e006      	b.n	8706c <_dtoa_r+0x694>
   8705e:	4649      	mov	r1, r9
   87060:	2300      	movs	r3, #0
   87062:	220a      	movs	r2, #10
   87064:	4620      	mov	r0, r4
   87066:	f000 ffad 	bl	87fc4 <__multadd>
   8706a:	4681      	mov	r9, r0
   8706c:	4641      	mov	r1, r8
   8706e:	4648      	mov	r0, r9
   87070:	f7ff fc1c 	bl	868ac <quorem>
   87074:	3030      	adds	r0, #48	; 0x30
   87076:	f805 0b01 	strb.w	r0, [r5], #1
   8707a:	eba5 030a 	sub.w	r3, r5, sl
   8707e:	42bb      	cmp	r3, r7
   87080:	dbed      	blt.n	8705e <_dtoa_r+0x686>
   87082:	9b04      	ldr	r3, [sp, #16]
   87084:	9a07      	ldr	r2, [sp, #28]
   87086:	4682      	mov	sl, r0
   87088:	2a01      	cmp	r2, #1
   8708a:	bfac      	ite	ge
   8708c:	189b      	addge	r3, r3, r2
   8708e:	3301      	addlt	r3, #1
   87090:	f04f 0b00 	mov.w	fp, #0
   87094:	461d      	mov	r5, r3
   87096:	4649      	mov	r1, r9
   87098:	2201      	movs	r2, #1
   8709a:	4620      	mov	r0, r4
   8709c:	f001 f910 	bl	882c0 <__lshift>
   870a0:	4641      	mov	r1, r8
   870a2:	4681      	mov	r9, r0
   870a4:	f001 f95c 	bl	88360 <__mcmp>
   870a8:	2800      	cmp	r0, #0
   870aa:	f340 823f 	ble.w	8752c <_dtoa_r+0xb54>
   870ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   870b2:	1e6b      	subs	r3, r5, #1
   870b4:	9904      	ldr	r1, [sp, #16]
   870b6:	e004      	b.n	870c2 <_dtoa_r+0x6ea>
   870b8:	428b      	cmp	r3, r1
   870ba:	f000 81ae 	beq.w	8741a <_dtoa_r+0xa42>
   870be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   870c2:	2a39      	cmp	r2, #57	; 0x39
   870c4:	f103 0501 	add.w	r5, r3, #1
   870c8:	d0f6      	beq.n	870b8 <_dtoa_r+0x6e0>
   870ca:	3201      	adds	r2, #1
   870cc:	701a      	strb	r2, [r3, #0]
   870ce:	4641      	mov	r1, r8
   870d0:	4620      	mov	r0, r4
   870d2:	f000 ff6d 	bl	87fb0 <_Bfree>
   870d6:	2e00      	cmp	r6, #0
   870d8:	f43f ae3d 	beq.w	86d56 <_dtoa_r+0x37e>
   870dc:	f1bb 0f00 	cmp.w	fp, #0
   870e0:	d005      	beq.n	870ee <_dtoa_r+0x716>
   870e2:	45b3      	cmp	fp, r6
   870e4:	d003      	beq.n	870ee <_dtoa_r+0x716>
   870e6:	4659      	mov	r1, fp
   870e8:	4620      	mov	r0, r4
   870ea:	f000 ff61 	bl	87fb0 <_Bfree>
   870ee:	4631      	mov	r1, r6
   870f0:	4620      	mov	r0, r4
   870f2:	f000 ff5d 	bl	87fb0 <_Bfree>
   870f6:	e62e      	b.n	86d56 <_dtoa_r+0x37e>
   870f8:	2300      	movs	r3, #0
   870fa:	930b      	str	r3, [sp, #44]	; 0x2c
   870fc:	9b02      	ldr	r3, [sp, #8]
   870fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
   87100:	4413      	add	r3, r2
   87102:	930f      	str	r3, [sp, #60]	; 0x3c
   87104:	3301      	adds	r3, #1
   87106:	2b01      	cmp	r3, #1
   87108:	461f      	mov	r7, r3
   8710a:	461e      	mov	r6, r3
   8710c:	bfb8      	it	lt
   8710e:	2701      	movlt	r7, #1
   87110:	9307      	str	r3, [sp, #28]
   87112:	2100      	movs	r1, #0
   87114:	2f17      	cmp	r7, #23
   87116:	6461      	str	r1, [r4, #68]	; 0x44
   87118:	d90a      	bls.n	87130 <_dtoa_r+0x758>
   8711a:	2201      	movs	r2, #1
   8711c:	2304      	movs	r3, #4
   8711e:	005b      	lsls	r3, r3, #1
   87120:	f103 0014 	add.w	r0, r3, #20
   87124:	4287      	cmp	r7, r0
   87126:	4611      	mov	r1, r2
   87128:	f102 0201 	add.w	r2, r2, #1
   8712c:	d2f7      	bcs.n	8711e <_dtoa_r+0x746>
   8712e:	6461      	str	r1, [r4, #68]	; 0x44
   87130:	4620      	mov	r0, r4
   87132:	f000 ff17 	bl	87f64 <_Balloc>
   87136:	2e0e      	cmp	r6, #14
   87138:	9004      	str	r0, [sp, #16]
   8713a:	6420      	str	r0, [r4, #64]	; 0x40
   8713c:	f63f ad47 	bhi.w	86bce <_dtoa_r+0x1f6>
   87140:	2d00      	cmp	r5, #0
   87142:	f43f ad44 	beq.w	86bce <_dtoa_r+0x1f6>
   87146:	9902      	ldr	r1, [sp, #8]
   87148:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   8714c:	2900      	cmp	r1, #0
   8714e:	f340 8203 	ble.w	87558 <_dtoa_r+0xb80>
   87152:	4bb9      	ldr	r3, [pc, #740]	; (87438 <_dtoa_r+0xa60>)
   87154:	f001 020f 	and.w	r2, r1, #15
   87158:	110d      	asrs	r5, r1, #4
   8715a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8715e:	06e9      	lsls	r1, r5, #27
   87160:	e9d3 6700 	ldrd	r6, r7, [r3]
   87164:	f140 81af 	bpl.w	874c6 <_dtoa_r+0xaee>
   87168:	4bb4      	ldr	r3, [pc, #720]	; (8743c <_dtoa_r+0xa64>)
   8716a:	4650      	mov	r0, sl
   8716c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   87170:	4659      	mov	r1, fp
   87172:	f002 f947 	bl	89404 <__aeabi_ddiv>
   87176:	f04f 0a03 	mov.w	sl, #3
   8717a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   8717e:	f005 050f 	and.w	r5, r5, #15
   87182:	b18d      	cbz	r5, 871a8 <_dtoa_r+0x7d0>
   87184:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8743c <_dtoa_r+0xa64>
   87188:	07ea      	lsls	r2, r5, #31
   8718a:	d509      	bpl.n	871a0 <_dtoa_r+0x7c8>
   8718c:	e9d8 2300 	ldrd	r2, r3, [r8]
   87190:	4630      	mov	r0, r6
   87192:	4639      	mov	r1, r7
   87194:	f002 f80c 	bl	891b0 <__aeabi_dmul>
   87198:	4606      	mov	r6, r0
   8719a:	460f      	mov	r7, r1
   8719c:	f10a 0a01 	add.w	sl, sl, #1
   871a0:	106d      	asrs	r5, r5, #1
   871a2:	f108 0808 	add.w	r8, r8, #8
   871a6:	d1ef      	bne.n	87188 <_dtoa_r+0x7b0>
   871a8:	463b      	mov	r3, r7
   871aa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   871ae:	4632      	mov	r2, r6
   871b0:	f002 f928 	bl	89404 <__aeabi_ddiv>
   871b4:	4607      	mov	r7, r0
   871b6:	4688      	mov	r8, r1
   871b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   871ba:	b143      	cbz	r3, 871ce <_dtoa_r+0x7f6>
   871bc:	2200      	movs	r2, #0
   871be:	4ba0      	ldr	r3, [pc, #640]	; (87440 <_dtoa_r+0xa68>)
   871c0:	4638      	mov	r0, r7
   871c2:	4641      	mov	r1, r8
   871c4:	f002 fa66 	bl	89694 <__aeabi_dcmplt>
   871c8:	2800      	cmp	r0, #0
   871ca:	f040 8287 	bne.w	876dc <_dtoa_r+0xd04>
   871ce:	4650      	mov	r0, sl
   871d0:	f001 ff88 	bl	890e4 <__aeabi_i2d>
   871d4:	463a      	mov	r2, r7
   871d6:	4643      	mov	r3, r8
   871d8:	f001 ffea 	bl	891b0 <__aeabi_dmul>
   871dc:	4b99      	ldr	r3, [pc, #612]	; (87444 <_dtoa_r+0xa6c>)
   871de:	2200      	movs	r2, #0
   871e0:	f001 fe34 	bl	88e4c <__adddf3>
   871e4:	9b07      	ldr	r3, [sp, #28]
   871e6:	4605      	mov	r5, r0
   871e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   871ec:	2b00      	cmp	r3, #0
   871ee:	f000 813f 	beq.w	87470 <_dtoa_r+0xa98>
   871f2:	9b02      	ldr	r3, [sp, #8]
   871f4:	9315      	str	r3, [sp, #84]	; 0x54
   871f6:	9b07      	ldr	r3, [sp, #28]
   871f8:	9312      	str	r3, [sp, #72]	; 0x48
   871fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   871fc:	2b00      	cmp	r3, #0
   871fe:	f000 81fb 	beq.w	875f8 <_dtoa_r+0xc20>
   87202:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87204:	4b8c      	ldr	r3, [pc, #560]	; (87438 <_dtoa_r+0xa60>)
   87206:	2000      	movs	r0, #0
   87208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8720c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   87210:	498d      	ldr	r1, [pc, #564]	; (87448 <_dtoa_r+0xa70>)
   87212:	f002 f8f7 	bl	89404 <__aeabi_ddiv>
   87216:	462a      	mov	r2, r5
   87218:	4633      	mov	r3, r6
   8721a:	f001 fe15 	bl	88e48 <__aeabi_dsub>
   8721e:	4682      	mov	sl, r0
   87220:	468b      	mov	fp, r1
   87222:	4638      	mov	r0, r7
   87224:	4641      	mov	r1, r8
   87226:	f002 fa73 	bl	89710 <__aeabi_d2iz>
   8722a:	4605      	mov	r5, r0
   8722c:	f001 ff5a 	bl	890e4 <__aeabi_i2d>
   87230:	4602      	mov	r2, r0
   87232:	460b      	mov	r3, r1
   87234:	4638      	mov	r0, r7
   87236:	4641      	mov	r1, r8
   87238:	f001 fe06 	bl	88e48 <__aeabi_dsub>
   8723c:	3530      	adds	r5, #48	; 0x30
   8723e:	fa5f f885 	uxtb.w	r8, r5
   87242:	9d04      	ldr	r5, [sp, #16]
   87244:	4606      	mov	r6, r0
   87246:	460f      	mov	r7, r1
   87248:	f885 8000 	strb.w	r8, [r5]
   8724c:	4602      	mov	r2, r0
   8724e:	460b      	mov	r3, r1
   87250:	4650      	mov	r0, sl
   87252:	4659      	mov	r1, fp
   87254:	3501      	adds	r5, #1
   87256:	f002 fa3b 	bl	896d0 <__aeabi_dcmpgt>
   8725a:	2800      	cmp	r0, #0
   8725c:	d154      	bne.n	87308 <_dtoa_r+0x930>
   8725e:	4632      	mov	r2, r6
   87260:	463b      	mov	r3, r7
   87262:	2000      	movs	r0, #0
   87264:	4976      	ldr	r1, [pc, #472]	; (87440 <_dtoa_r+0xa68>)
   87266:	f001 fdef 	bl	88e48 <__aeabi_dsub>
   8726a:	4602      	mov	r2, r0
   8726c:	460b      	mov	r3, r1
   8726e:	4650      	mov	r0, sl
   87270:	4659      	mov	r1, fp
   87272:	f002 fa2d 	bl	896d0 <__aeabi_dcmpgt>
   87276:	2800      	cmp	r0, #0
   87278:	f040 8270 	bne.w	8775c <_dtoa_r+0xd84>
   8727c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8727e:	2a01      	cmp	r2, #1
   87280:	f000 8112 	beq.w	874a8 <_dtoa_r+0xad0>
   87284:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87286:	9a04      	ldr	r2, [sp, #16]
   87288:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8728c:	4413      	add	r3, r2
   8728e:	4699      	mov	r9, r3
   87290:	e00f      	b.n	872b2 <_dtoa_r+0x8da>
   87292:	4632      	mov	r2, r6
   87294:	463b      	mov	r3, r7
   87296:	2000      	movs	r0, #0
   87298:	4969      	ldr	r1, [pc, #420]	; (87440 <_dtoa_r+0xa68>)
   8729a:	f001 fdd5 	bl	88e48 <__aeabi_dsub>
   8729e:	4652      	mov	r2, sl
   872a0:	465b      	mov	r3, fp
   872a2:	f002 f9f7 	bl	89694 <__aeabi_dcmplt>
   872a6:	2800      	cmp	r0, #0
   872a8:	f040 8256 	bne.w	87758 <_dtoa_r+0xd80>
   872ac:	454d      	cmp	r5, r9
   872ae:	f000 80f9 	beq.w	874a4 <_dtoa_r+0xacc>
   872b2:	4650      	mov	r0, sl
   872b4:	4659      	mov	r1, fp
   872b6:	2200      	movs	r2, #0
   872b8:	4b64      	ldr	r3, [pc, #400]	; (8744c <_dtoa_r+0xa74>)
   872ba:	f001 ff79 	bl	891b0 <__aeabi_dmul>
   872be:	2200      	movs	r2, #0
   872c0:	4b62      	ldr	r3, [pc, #392]	; (8744c <_dtoa_r+0xa74>)
   872c2:	4682      	mov	sl, r0
   872c4:	468b      	mov	fp, r1
   872c6:	4630      	mov	r0, r6
   872c8:	4639      	mov	r1, r7
   872ca:	f001 ff71 	bl	891b0 <__aeabi_dmul>
   872ce:	460f      	mov	r7, r1
   872d0:	4606      	mov	r6, r0
   872d2:	f002 fa1d 	bl	89710 <__aeabi_d2iz>
   872d6:	4680      	mov	r8, r0
   872d8:	f001 ff04 	bl	890e4 <__aeabi_i2d>
   872dc:	4602      	mov	r2, r0
   872de:	460b      	mov	r3, r1
   872e0:	4630      	mov	r0, r6
   872e2:	4639      	mov	r1, r7
   872e4:	f001 fdb0 	bl	88e48 <__aeabi_dsub>
   872e8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   872ec:	fa5f f888 	uxtb.w	r8, r8
   872f0:	f805 8b01 	strb.w	r8, [r5], #1
   872f4:	4652      	mov	r2, sl
   872f6:	465b      	mov	r3, fp
   872f8:	4606      	mov	r6, r0
   872fa:	460f      	mov	r7, r1
   872fc:	f002 f9ca 	bl	89694 <__aeabi_dcmplt>
   87300:	2800      	cmp	r0, #0
   87302:	d0c6      	beq.n	87292 <_dtoa_r+0x8ba>
   87304:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87308:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8730a:	9302      	str	r3, [sp, #8]
   8730c:	e523      	b.n	86d56 <_dtoa_r+0x37e>
   8730e:	2300      	movs	r3, #0
   87310:	930b      	str	r3, [sp, #44]	; 0x2c
   87312:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87314:	2b00      	cmp	r3, #0
   87316:	f340 80dd 	ble.w	874d4 <_dtoa_r+0xafc>
   8731a:	461f      	mov	r7, r3
   8731c:	461e      	mov	r6, r3
   8731e:	930f      	str	r3, [sp, #60]	; 0x3c
   87320:	9307      	str	r3, [sp, #28]
   87322:	e6f6      	b.n	87112 <_dtoa_r+0x73a>
   87324:	2301      	movs	r3, #1
   87326:	930b      	str	r3, [sp, #44]	; 0x2c
   87328:	e7f3      	b.n	87312 <_dtoa_r+0x93a>
   8732a:	f1ba 0f00 	cmp.w	sl, #0
   8732e:	f47f ada7 	bne.w	86e80 <_dtoa_r+0x4a8>
   87332:	f3cb 0313 	ubfx	r3, fp, #0, #20
   87336:	2b00      	cmp	r3, #0
   87338:	f47f adbc 	bne.w	86eb4 <_dtoa_r+0x4dc>
   8733c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   87340:	0d3f      	lsrs	r7, r7, #20
   87342:	053f      	lsls	r7, r7, #20
   87344:	2f00      	cmp	r7, #0
   87346:	f000 820d 	beq.w	87764 <_dtoa_r+0xd8c>
   8734a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8734c:	3301      	adds	r3, #1
   8734e:	930a      	str	r3, [sp, #40]	; 0x28
   87350:	9b08      	ldr	r3, [sp, #32]
   87352:	3301      	adds	r3, #1
   87354:	9308      	str	r3, [sp, #32]
   87356:	2301      	movs	r3, #1
   87358:	930c      	str	r3, [sp, #48]	; 0x30
   8735a:	e5ad      	b.n	86eb8 <_dtoa_r+0x4e0>
   8735c:	9b07      	ldr	r3, [sp, #28]
   8735e:	2b00      	cmp	r3, #0
   87360:	f73f ac48 	bgt.w	86bf4 <_dtoa_r+0x21c>
   87364:	f040 8222 	bne.w	877ac <_dtoa_r+0xdd4>
   87368:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8736c:	2200      	movs	r2, #0
   8736e:	4b38      	ldr	r3, [pc, #224]	; (87450 <_dtoa_r+0xa78>)
   87370:	f001 ff1e 	bl	891b0 <__aeabi_dmul>
   87374:	4652      	mov	r2, sl
   87376:	465b      	mov	r3, fp
   87378:	f002 f9a0 	bl	896bc <__aeabi_dcmpge>
   8737c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   87380:	4646      	mov	r6, r8
   87382:	2800      	cmp	r0, #0
   87384:	d041      	beq.n	8740a <_dtoa_r+0xa32>
   87386:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87388:	9d04      	ldr	r5, [sp, #16]
   8738a:	43db      	mvns	r3, r3
   8738c:	9302      	str	r3, [sp, #8]
   8738e:	4641      	mov	r1, r8
   87390:	4620      	mov	r0, r4
   87392:	f000 fe0d 	bl	87fb0 <_Bfree>
   87396:	2e00      	cmp	r6, #0
   87398:	f43f acdd 	beq.w	86d56 <_dtoa_r+0x37e>
   8739c:	e6a7      	b.n	870ee <_dtoa_r+0x716>
   8739e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   873a0:	4649      	mov	r1, r9
   873a2:	4620      	mov	r0, r4
   873a4:	f000 ff3c 	bl	88220 <__pow5mult>
   873a8:	4681      	mov	r9, r0
   873aa:	e557      	b.n	86e5c <_dtoa_r+0x484>
   873ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
   873ae:	2a00      	cmp	r2, #0
   873b0:	f000 8188 	beq.w	876c4 <_dtoa_r+0xcec>
   873b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   873b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   873ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   873bc:	e4f2      	b.n	86da4 <_dtoa_r+0x3cc>
   873be:	f1ba 0f00 	cmp.w	sl, #0
   873c2:	f47f ad77 	bne.w	86eb4 <_dtoa_r+0x4dc>
   873c6:	e7b4      	b.n	87332 <_dtoa_r+0x95a>
   873c8:	f000 fdfc 	bl	87fc4 <__multadd>
   873cc:	4647      	mov	r7, r8
   873ce:	4606      	mov	r6, r0
   873d0:	4683      	mov	fp, r0
   873d2:	e5c0      	b.n	86f56 <_dtoa_r+0x57e>
   873d4:	4601      	mov	r1, r0
   873d6:	4620      	mov	r0, r4
   873d8:	9308      	str	r3, [sp, #32]
   873da:	f000 fde9 	bl	87fb0 <_Bfree>
   873de:	2201      	movs	r2, #1
   873e0:	9b08      	ldr	r3, [sp, #32]
   873e2:	e5e2      	b.n	86faa <_dtoa_r+0x5d2>
   873e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   873e6:	2b02      	cmp	r3, #2
   873e8:	f77f ad98 	ble.w	86f1c <_dtoa_r+0x544>
   873ec:	9b07      	ldr	r3, [sp, #28]
   873ee:	2b00      	cmp	r3, #0
   873f0:	d1c9      	bne.n	87386 <_dtoa_r+0x9ae>
   873f2:	4641      	mov	r1, r8
   873f4:	2205      	movs	r2, #5
   873f6:	4620      	mov	r0, r4
   873f8:	f000 fde4 	bl	87fc4 <__multadd>
   873fc:	4601      	mov	r1, r0
   873fe:	4680      	mov	r8, r0
   87400:	4648      	mov	r0, r9
   87402:	f000 ffad 	bl	88360 <__mcmp>
   87406:	2800      	cmp	r0, #0
   87408:	ddbd      	ble.n	87386 <_dtoa_r+0x9ae>
   8740a:	2331      	movs	r3, #49	; 0x31
   8740c:	9a02      	ldr	r2, [sp, #8]
   8740e:	9904      	ldr	r1, [sp, #16]
   87410:	3201      	adds	r2, #1
   87412:	9202      	str	r2, [sp, #8]
   87414:	700b      	strb	r3, [r1, #0]
   87416:	1c4d      	adds	r5, r1, #1
   87418:	e7b9      	b.n	8738e <_dtoa_r+0x9b6>
   8741a:	2331      	movs	r3, #49	; 0x31
   8741c:	9a02      	ldr	r2, [sp, #8]
   8741e:	3201      	adds	r2, #1
   87420:	9202      	str	r2, [sp, #8]
   87422:	9a04      	ldr	r2, [sp, #16]
   87424:	7013      	strb	r3, [r2, #0]
   87426:	e652      	b.n	870ce <_dtoa_r+0x6f6>
   87428:	2301      	movs	r3, #1
   8742a:	930b      	str	r3, [sp, #44]	; 0x2c
   8742c:	e666      	b.n	870fc <_dtoa_r+0x724>
   8742e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   87432:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   87434:	e48f      	b.n	86d56 <_dtoa_r+0x37e>
   87436:	bf00      	nop
   87438:	0008afe0 	.word	0x0008afe0
   8743c:	0008afb8 	.word	0x0008afb8
   87440:	3ff00000 	.word	0x3ff00000
   87444:	401c0000 	.word	0x401c0000
   87448:	3fe00000 	.word	0x3fe00000
   8744c:	40240000 	.word	0x40240000
   87450:	40140000 	.word	0x40140000
   87454:	4650      	mov	r0, sl
   87456:	f001 fe45 	bl	890e4 <__aeabi_i2d>
   8745a:	463a      	mov	r2, r7
   8745c:	4643      	mov	r3, r8
   8745e:	f001 fea7 	bl	891b0 <__aeabi_dmul>
   87462:	2200      	movs	r2, #0
   87464:	4bc1      	ldr	r3, [pc, #772]	; (8776c <_dtoa_r+0xd94>)
   87466:	f001 fcf1 	bl	88e4c <__adddf3>
   8746a:	4605      	mov	r5, r0
   8746c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87470:	4641      	mov	r1, r8
   87472:	2200      	movs	r2, #0
   87474:	4bbe      	ldr	r3, [pc, #760]	; (87770 <_dtoa_r+0xd98>)
   87476:	4638      	mov	r0, r7
   87478:	f001 fce6 	bl	88e48 <__aeabi_dsub>
   8747c:	462a      	mov	r2, r5
   8747e:	4633      	mov	r3, r6
   87480:	4682      	mov	sl, r0
   87482:	468b      	mov	fp, r1
   87484:	f002 f924 	bl	896d0 <__aeabi_dcmpgt>
   87488:	4680      	mov	r8, r0
   8748a:	2800      	cmp	r0, #0
   8748c:	f040 8110 	bne.w	876b0 <_dtoa_r+0xcd8>
   87490:	462a      	mov	r2, r5
   87492:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   87496:	4650      	mov	r0, sl
   87498:	4659      	mov	r1, fp
   8749a:	f002 f8fb 	bl	89694 <__aeabi_dcmplt>
   8749e:	b118      	cbz	r0, 874a8 <_dtoa_r+0xad0>
   874a0:	4646      	mov	r6, r8
   874a2:	e770      	b.n	87386 <_dtoa_r+0x9ae>
   874a4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   874a8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   874ac:	f7ff bb8f 	b.w	86bce <_dtoa_r+0x1f6>
   874b0:	9804      	ldr	r0, [sp, #16]
   874b2:	f7ff bac0 	b.w	86a36 <_dtoa_r+0x5e>
   874b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   874b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   874ba:	1afb      	subs	r3, r7, r3
   874bc:	441a      	add	r2, r3
   874be:	970c      	str	r7, [sp, #48]	; 0x30
   874c0:	920d      	str	r2, [sp, #52]	; 0x34
   874c2:	2700      	movs	r7, #0
   874c4:	e468      	b.n	86d98 <_dtoa_r+0x3c0>
   874c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   874ca:	f04f 0a02 	mov.w	sl, #2
   874ce:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   874d2:	e656      	b.n	87182 <_dtoa_r+0x7aa>
   874d4:	2100      	movs	r1, #0
   874d6:	2301      	movs	r3, #1
   874d8:	4620      	mov	r0, r4
   874da:	6461      	str	r1, [r4, #68]	; 0x44
   874dc:	9325      	str	r3, [sp, #148]	; 0x94
   874de:	f000 fd41 	bl	87f64 <_Balloc>
   874e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   874e4:	9004      	str	r0, [sp, #16]
   874e6:	9307      	str	r3, [sp, #28]
   874e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   874ea:	6420      	str	r0, [r4, #64]	; 0x40
   874ec:	930f      	str	r3, [sp, #60]	; 0x3c
   874ee:	e627      	b.n	87140 <_dtoa_r+0x768>
   874f0:	2a00      	cmp	r2, #0
   874f2:	46d0      	mov	r8, sl
   874f4:	f8cd b020 	str.w	fp, [sp, #32]
   874f8:	469a      	mov	sl, r3
   874fa:	dd11      	ble.n	87520 <_dtoa_r+0xb48>
   874fc:	4649      	mov	r1, r9
   874fe:	2201      	movs	r2, #1
   87500:	4620      	mov	r0, r4
   87502:	f000 fedd 	bl	882c0 <__lshift>
   87506:	4641      	mov	r1, r8
   87508:	4681      	mov	r9, r0
   8750a:	f000 ff29 	bl	88360 <__mcmp>
   8750e:	2800      	cmp	r0, #0
   87510:	f340 8145 	ble.w	8779e <_dtoa_r+0xdc6>
   87514:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   87518:	f000 8105 	beq.w	87726 <_dtoa_r+0xd4e>
   8751c:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   87520:	46b3      	mov	fp, r6
   87522:	f887 a000 	strb.w	sl, [r7]
   87526:	1c7d      	adds	r5, r7, #1
   87528:	9e08      	ldr	r6, [sp, #32]
   8752a:	e5d0      	b.n	870ce <_dtoa_r+0x6f6>
   8752c:	d104      	bne.n	87538 <_dtoa_r+0xb60>
   8752e:	f01a 0f01 	tst.w	sl, #1
   87532:	d001      	beq.n	87538 <_dtoa_r+0xb60>
   87534:	e5bb      	b.n	870ae <_dtoa_r+0x6d6>
   87536:	4615      	mov	r5, r2
   87538:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8753c:	1e6a      	subs	r2, r5, #1
   8753e:	2b30      	cmp	r3, #48	; 0x30
   87540:	d0f9      	beq.n	87536 <_dtoa_r+0xb5e>
   87542:	e5c4      	b.n	870ce <_dtoa_r+0x6f6>
   87544:	2230      	movs	r2, #48	; 0x30
   87546:	9904      	ldr	r1, [sp, #16]
   87548:	700a      	strb	r2, [r1, #0]
   8754a:	9a02      	ldr	r2, [sp, #8]
   8754c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87550:	3201      	adds	r2, #1
   87552:	9202      	str	r2, [sp, #8]
   87554:	f7ff bbfb 	b.w	86d4e <_dtoa_r+0x376>
   87558:	f000 80bb 	beq.w	876d2 <_dtoa_r+0xcfa>
   8755c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87560:	9b02      	ldr	r3, [sp, #8]
   87562:	f04f 0a02 	mov.w	sl, #2
   87566:	425d      	negs	r5, r3
   87568:	4b82      	ldr	r3, [pc, #520]	; (87774 <_dtoa_r+0xd9c>)
   8756a:	f005 020f 	and.w	r2, r5, #15
   8756e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87572:	e9d3 2300 	ldrd	r2, r3, [r3]
   87576:	f001 fe1b 	bl	891b0 <__aeabi_dmul>
   8757a:	112d      	asrs	r5, r5, #4
   8757c:	4607      	mov	r7, r0
   8757e:	4688      	mov	r8, r1
   87580:	f43f ae1a 	beq.w	871b8 <_dtoa_r+0x7e0>
   87584:	4e7c      	ldr	r6, [pc, #496]	; (87778 <_dtoa_r+0xda0>)
   87586:	07eb      	lsls	r3, r5, #31
   87588:	d509      	bpl.n	8759e <_dtoa_r+0xbc6>
   8758a:	e9d6 2300 	ldrd	r2, r3, [r6]
   8758e:	4638      	mov	r0, r7
   87590:	4641      	mov	r1, r8
   87592:	f001 fe0d 	bl	891b0 <__aeabi_dmul>
   87596:	4607      	mov	r7, r0
   87598:	4688      	mov	r8, r1
   8759a:	f10a 0a01 	add.w	sl, sl, #1
   8759e:	106d      	asrs	r5, r5, #1
   875a0:	f106 0608 	add.w	r6, r6, #8
   875a4:	d1ef      	bne.n	87586 <_dtoa_r+0xbae>
   875a6:	e607      	b.n	871b8 <_dtoa_r+0x7e0>
   875a8:	6871      	ldr	r1, [r6, #4]
   875aa:	4620      	mov	r0, r4
   875ac:	f000 fcda 	bl	87f64 <_Balloc>
   875b0:	4605      	mov	r5, r0
   875b2:	6933      	ldr	r3, [r6, #16]
   875b4:	f106 010c 	add.w	r1, r6, #12
   875b8:	3302      	adds	r3, #2
   875ba:	009a      	lsls	r2, r3, #2
   875bc:	300c      	adds	r0, #12
   875be:	f000 fc57 	bl	87e70 <memcpy>
   875c2:	4629      	mov	r1, r5
   875c4:	2201      	movs	r2, #1
   875c6:	4620      	mov	r0, r4
   875c8:	f000 fe7a 	bl	882c0 <__lshift>
   875cc:	9008      	str	r0, [sp, #32]
   875ce:	e4b6      	b.n	86f3e <_dtoa_r+0x566>
   875d0:	2b39      	cmp	r3, #57	; 0x39
   875d2:	f8cd b020 	str.w	fp, [sp, #32]
   875d6:	46d0      	mov	r8, sl
   875d8:	f000 80a5 	beq.w	87726 <_dtoa_r+0xd4e>
   875dc:	f103 0a01 	add.w	sl, r3, #1
   875e0:	46b3      	mov	fp, r6
   875e2:	f887 a000 	strb.w	sl, [r7]
   875e6:	1c7d      	adds	r5, r7, #1
   875e8:	9e08      	ldr	r6, [sp, #32]
   875ea:	e570      	b.n	870ce <_dtoa_r+0x6f6>
   875ec:	465a      	mov	r2, fp
   875ee:	46d0      	mov	r8, sl
   875f0:	46b3      	mov	fp, r6
   875f2:	469a      	mov	sl, r3
   875f4:	4616      	mov	r6, r2
   875f6:	e54e      	b.n	87096 <_dtoa_r+0x6be>
   875f8:	9812      	ldr	r0, [sp, #72]	; 0x48
   875fa:	495e      	ldr	r1, [pc, #376]	; (87774 <_dtoa_r+0xd9c>)
   875fc:	462a      	mov	r2, r5
   875fe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   87602:	4633      	mov	r3, r6
   87604:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   87608:	f001 fdd2 	bl	891b0 <__aeabi_dmul>
   8760c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   87610:	4638      	mov	r0, r7
   87612:	4641      	mov	r1, r8
   87614:	f002 f87c 	bl	89710 <__aeabi_d2iz>
   87618:	4605      	mov	r5, r0
   8761a:	f001 fd63 	bl	890e4 <__aeabi_i2d>
   8761e:	4602      	mov	r2, r0
   87620:	460b      	mov	r3, r1
   87622:	4638      	mov	r0, r7
   87624:	4641      	mov	r1, r8
   87626:	f001 fc0f 	bl	88e48 <__aeabi_dsub>
   8762a:	4606      	mov	r6, r0
   8762c:	9812      	ldr	r0, [sp, #72]	; 0x48
   8762e:	9a04      	ldr	r2, [sp, #16]
   87630:	3530      	adds	r5, #48	; 0x30
   87632:	2801      	cmp	r0, #1
   87634:	7015      	strb	r5, [r2, #0]
   87636:	460f      	mov	r7, r1
   87638:	f102 0501 	add.w	r5, r2, #1
   8763c:	d026      	beq.n	8768c <_dtoa_r+0xcb4>
   8763e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87640:	9a04      	ldr	r2, [sp, #16]
   87642:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   87646:	4413      	add	r3, r2
   87648:	f04f 0a00 	mov.w	sl, #0
   8764c:	4699      	mov	r9, r3
   8764e:	f8df b130 	ldr.w	fp, [pc, #304]	; 87780 <_dtoa_r+0xda8>
   87652:	4652      	mov	r2, sl
   87654:	465b      	mov	r3, fp
   87656:	4630      	mov	r0, r6
   87658:	4639      	mov	r1, r7
   8765a:	f001 fda9 	bl	891b0 <__aeabi_dmul>
   8765e:	460f      	mov	r7, r1
   87660:	4606      	mov	r6, r0
   87662:	f002 f855 	bl	89710 <__aeabi_d2iz>
   87666:	4680      	mov	r8, r0
   87668:	f001 fd3c 	bl	890e4 <__aeabi_i2d>
   8766c:	4602      	mov	r2, r0
   8766e:	460b      	mov	r3, r1
   87670:	4630      	mov	r0, r6
   87672:	4639      	mov	r1, r7
   87674:	f001 fbe8 	bl	88e48 <__aeabi_dsub>
   87678:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8767c:	f805 8b01 	strb.w	r8, [r5], #1
   87680:	454d      	cmp	r5, r9
   87682:	4606      	mov	r6, r0
   87684:	460f      	mov	r7, r1
   87686:	d1e4      	bne.n	87652 <_dtoa_r+0xc7a>
   87688:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8768c:	2200      	movs	r2, #0
   8768e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   87692:	4b3a      	ldr	r3, [pc, #232]	; (8777c <_dtoa_r+0xda4>)
   87694:	f001 fbda 	bl	88e4c <__adddf3>
   87698:	4632      	mov	r2, r6
   8769a:	463b      	mov	r3, r7
   8769c:	f001 fffa 	bl	89694 <__aeabi_dcmplt>
   876a0:	2800      	cmp	r0, #0
   876a2:	d046      	beq.n	87732 <_dtoa_r+0xd5a>
   876a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   876a6:	9302      	str	r3, [sp, #8]
   876a8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   876ac:	f7ff bb42 	b.w	86d34 <_dtoa_r+0x35c>
   876b0:	f04f 0800 	mov.w	r8, #0
   876b4:	4646      	mov	r6, r8
   876b6:	e6a8      	b.n	8740a <_dtoa_r+0xa32>
   876b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   876ba:	9a07      	ldr	r2, [sp, #28]
   876bc:	1a9d      	subs	r5, r3, r2
   876be:	2300      	movs	r3, #0
   876c0:	f7ff bb70 	b.w	86da4 <_dtoa_r+0x3cc>
   876c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   876c6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   876c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   876cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   876ce:	f7ff bb69 	b.w	86da4 <_dtoa_r+0x3cc>
   876d2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   876d6:	f04f 0a02 	mov.w	sl, #2
   876da:	e56d      	b.n	871b8 <_dtoa_r+0x7e0>
   876dc:	9b07      	ldr	r3, [sp, #28]
   876de:	2b00      	cmp	r3, #0
   876e0:	f43f aeb8 	beq.w	87454 <_dtoa_r+0xa7c>
   876e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   876e6:	2b00      	cmp	r3, #0
   876e8:	f77f aede 	ble.w	874a8 <_dtoa_r+0xad0>
   876ec:	2200      	movs	r2, #0
   876ee:	4b24      	ldr	r3, [pc, #144]	; (87780 <_dtoa_r+0xda8>)
   876f0:	4638      	mov	r0, r7
   876f2:	4641      	mov	r1, r8
   876f4:	f001 fd5c 	bl	891b0 <__aeabi_dmul>
   876f8:	4607      	mov	r7, r0
   876fa:	4688      	mov	r8, r1
   876fc:	f10a 0001 	add.w	r0, sl, #1
   87700:	f001 fcf0 	bl	890e4 <__aeabi_i2d>
   87704:	463a      	mov	r2, r7
   87706:	4643      	mov	r3, r8
   87708:	f001 fd52 	bl	891b0 <__aeabi_dmul>
   8770c:	2200      	movs	r2, #0
   8770e:	4b17      	ldr	r3, [pc, #92]	; (8776c <_dtoa_r+0xd94>)
   87710:	f001 fb9c 	bl	88e4c <__adddf3>
   87714:	9a02      	ldr	r2, [sp, #8]
   87716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87718:	3a01      	subs	r2, #1
   8771a:	4605      	mov	r5, r0
   8771c:	9215      	str	r2, [sp, #84]	; 0x54
   8771e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87722:	9312      	str	r3, [sp, #72]	; 0x48
   87724:	e569      	b.n	871fa <_dtoa_r+0x822>
   87726:	2239      	movs	r2, #57	; 0x39
   87728:	46b3      	mov	fp, r6
   8772a:	703a      	strb	r2, [r7, #0]
   8772c:	9e08      	ldr	r6, [sp, #32]
   8772e:	1c7d      	adds	r5, r7, #1
   87730:	e4bf      	b.n	870b2 <_dtoa_r+0x6da>
   87732:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   87736:	2000      	movs	r0, #0
   87738:	4910      	ldr	r1, [pc, #64]	; (8777c <_dtoa_r+0xda4>)
   8773a:	f001 fb85 	bl	88e48 <__aeabi_dsub>
   8773e:	4632      	mov	r2, r6
   87740:	463b      	mov	r3, r7
   87742:	f001 ffc5 	bl	896d0 <__aeabi_dcmpgt>
   87746:	b908      	cbnz	r0, 8774c <_dtoa_r+0xd74>
   87748:	e6ae      	b.n	874a8 <_dtoa_r+0xad0>
   8774a:	4615      	mov	r5, r2
   8774c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87750:	1e6a      	subs	r2, r5, #1
   87752:	2b30      	cmp	r3, #48	; 0x30
   87754:	d0f9      	beq.n	8774a <_dtoa_r+0xd72>
   87756:	e5d7      	b.n	87308 <_dtoa_r+0x930>
   87758:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8775c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8775e:	9302      	str	r3, [sp, #8]
   87760:	f7ff bae8 	b.w	86d34 <_dtoa_r+0x35c>
   87764:	970c      	str	r7, [sp, #48]	; 0x30
   87766:	f7ff bba7 	b.w	86eb8 <_dtoa_r+0x4e0>
   8776a:	bf00      	nop
   8776c:	401c0000 	.word	0x401c0000
   87770:	40140000 	.word	0x40140000
   87774:	0008afe0 	.word	0x0008afe0
   87778:	0008afb8 	.word	0x0008afb8
   8777c:	3fe00000 	.word	0x3fe00000
   87780:	40240000 	.word	0x40240000
   87784:	2b39      	cmp	r3, #57	; 0x39
   87786:	f8cd b020 	str.w	fp, [sp, #32]
   8778a:	46d0      	mov	r8, sl
   8778c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87790:	469a      	mov	sl, r3
   87792:	d0c8      	beq.n	87726 <_dtoa_r+0xd4e>
   87794:	f1bb 0f00 	cmp.w	fp, #0
   87798:	f73f aec0 	bgt.w	8751c <_dtoa_r+0xb44>
   8779c:	e6c0      	b.n	87520 <_dtoa_r+0xb48>
   8779e:	f47f aebf 	bne.w	87520 <_dtoa_r+0xb48>
   877a2:	f01a 0f01 	tst.w	sl, #1
   877a6:	f43f aebb 	beq.w	87520 <_dtoa_r+0xb48>
   877aa:	e6b3      	b.n	87514 <_dtoa_r+0xb3c>
   877ac:	f04f 0800 	mov.w	r8, #0
   877b0:	4646      	mov	r6, r8
   877b2:	e5e8      	b.n	87386 <_dtoa_r+0x9ae>
   877b4:	4631      	mov	r1, r6
   877b6:	2300      	movs	r3, #0
   877b8:	220a      	movs	r2, #10
   877ba:	4620      	mov	r0, r4
   877bc:	f000 fc02 	bl	87fc4 <__multadd>
   877c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   877c2:	4606      	mov	r6, r0
   877c4:	2b00      	cmp	r3, #0
   877c6:	dd07      	ble.n	877d8 <_dtoa_r+0xe00>
   877c8:	9307      	str	r3, [sp, #28]
   877ca:	f7ff bbab 	b.w	86f24 <_dtoa_r+0x54c>
   877ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
   877d0:	2b02      	cmp	r3, #2
   877d2:	dc1f      	bgt.n	87814 <_dtoa_r+0xe3c>
   877d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   877d6:	e43c      	b.n	87052 <_dtoa_r+0x67a>
   877d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   877da:	2b02      	cmp	r3, #2
   877dc:	dc1a      	bgt.n	87814 <_dtoa_r+0xe3c>
   877de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   877e0:	e7f2      	b.n	877c8 <_dtoa_r+0xdf0>
   877e2:	f43f ab81 	beq.w	86ee8 <_dtoa_r+0x510>
   877e6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   877ea:	e411      	b.n	87010 <_dtoa_r+0x638>
   877ec:	2500      	movs	r5, #0
   877ee:	4620      	mov	r0, r4
   877f0:	6465      	str	r5, [r4, #68]	; 0x44
   877f2:	4629      	mov	r1, r5
   877f4:	f000 fbb6 	bl	87f64 <_Balloc>
   877f8:	f04f 33ff 	mov.w	r3, #4294967295
   877fc:	9307      	str	r3, [sp, #28]
   877fe:	930f      	str	r3, [sp, #60]	; 0x3c
   87800:	2301      	movs	r3, #1
   87802:	9004      	str	r0, [sp, #16]
   87804:	9525      	str	r5, [sp, #148]	; 0x94
   87806:	6420      	str	r0, [r4, #64]	; 0x40
   87808:	930b      	str	r3, [sp, #44]	; 0x2c
   8780a:	f7ff b9e0 	b.w	86bce <_dtoa_r+0x1f6>
   8780e:	2501      	movs	r5, #1
   87810:	f7ff b9a8 	b.w	86b64 <_dtoa_r+0x18c>
   87814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87816:	9307      	str	r3, [sp, #28]
   87818:	e5e8      	b.n	873ec <_dtoa_r+0xa14>
   8781a:	bf00      	nop

0008781c <__libc_fini_array>:
   8781c:	b538      	push	{r3, r4, r5, lr}
   8781e:	4c0a      	ldr	r4, [pc, #40]	; (87848 <__libc_fini_array+0x2c>)
   87820:	4d0a      	ldr	r5, [pc, #40]	; (8784c <__libc_fini_array+0x30>)
   87822:	1b64      	subs	r4, r4, r5
   87824:	10a4      	asrs	r4, r4, #2
   87826:	d00a      	beq.n	8783e <__libc_fini_array+0x22>
   87828:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8782c:	3b01      	subs	r3, #1
   8782e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   87832:	3c01      	subs	r4, #1
   87834:	f855 3904 	ldr.w	r3, [r5], #-4
   87838:	4798      	blx	r3
   8783a:	2c00      	cmp	r4, #0
   8783c:	d1f9      	bne.n	87832 <__libc_fini_array+0x16>
   8783e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   87842:	f003 bcc3 	b.w	8b1cc <_fini>
   87846:	bf00      	nop
   87848:	0008b1dc 	.word	0x0008b1dc
   8784c:	0008b1d8 	.word	0x0008b1d8

00087850 <__locale_ctype_ptr_l>:
   87850:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   87854:	4770      	bx	lr
   87856:	bf00      	nop

00087858 <_localeconv_r>:
   87858:	4a04      	ldr	r2, [pc, #16]	; (8786c <_localeconv_r+0x14>)
   8785a:	4b05      	ldr	r3, [pc, #20]	; (87870 <_localeconv_r+0x18>)
   8785c:	6812      	ldr	r2, [r2, #0]
   8785e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   87860:	2800      	cmp	r0, #0
   87862:	bf08      	it	eq
   87864:	4618      	moveq	r0, r3
   87866:	30f0      	adds	r0, #240	; 0xf0
   87868:	4770      	bx	lr
   8786a:	bf00      	nop
   8786c:	20000630 	.word	0x20000630
   87870:	20000a60 	.word	0x20000a60

00087874 <_malloc_r>:
   87874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87878:	f101 060b 	add.w	r6, r1, #11
   8787c:	2e16      	cmp	r6, #22
   8787e:	b083      	sub	sp, #12
   87880:	4605      	mov	r5, r0
   87882:	f240 809e 	bls.w	879c2 <_malloc_r+0x14e>
   87886:	f036 0607 	bics.w	r6, r6, #7
   8788a:	f100 80bd 	bmi.w	87a08 <_malloc_r+0x194>
   8788e:	42b1      	cmp	r1, r6
   87890:	f200 80ba 	bhi.w	87a08 <_malloc_r+0x194>
   87894:	f000 fb62 	bl	87f5c <__malloc_lock>
   87898:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8789c:	f0c0 8285 	bcc.w	87daa <_malloc_r+0x536>
   878a0:	0a73      	lsrs	r3, r6, #9
   878a2:	f000 80b8 	beq.w	87a16 <_malloc_r+0x1a2>
   878a6:	2b04      	cmp	r3, #4
   878a8:	f200 816c 	bhi.w	87b84 <_malloc_r+0x310>
   878ac:	09b3      	lsrs	r3, r6, #6
   878ae:	f103 0039 	add.w	r0, r3, #57	; 0x39
   878b2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   878b6:	00c1      	lsls	r1, r0, #3
   878b8:	4fb8      	ldr	r7, [pc, #736]	; (87b9c <_malloc_r+0x328>)
   878ba:	4439      	add	r1, r7
   878bc:	684c      	ldr	r4, [r1, #4]
   878be:	3908      	subs	r1, #8
   878c0:	42a1      	cmp	r1, r4
   878c2:	d106      	bne.n	878d2 <_malloc_r+0x5e>
   878c4:	e00c      	b.n	878e0 <_malloc_r+0x6c>
   878c6:	2a00      	cmp	r2, #0
   878c8:	f280 80ab 	bge.w	87a22 <_malloc_r+0x1ae>
   878cc:	68e4      	ldr	r4, [r4, #12]
   878ce:	42a1      	cmp	r1, r4
   878d0:	d006      	beq.n	878e0 <_malloc_r+0x6c>
   878d2:	6863      	ldr	r3, [r4, #4]
   878d4:	f023 0303 	bic.w	r3, r3, #3
   878d8:	1b9a      	subs	r2, r3, r6
   878da:	2a0f      	cmp	r2, #15
   878dc:	ddf3      	ble.n	878c6 <_malloc_r+0x52>
   878de:	4670      	mov	r0, lr
   878e0:	693c      	ldr	r4, [r7, #16]
   878e2:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 87bb0 <_malloc_r+0x33c>
   878e6:	4574      	cmp	r4, lr
   878e8:	f000 819e 	beq.w	87c28 <_malloc_r+0x3b4>
   878ec:	6863      	ldr	r3, [r4, #4]
   878ee:	f023 0303 	bic.w	r3, r3, #3
   878f2:	1b9a      	subs	r2, r3, r6
   878f4:	2a0f      	cmp	r2, #15
   878f6:	f300 8183 	bgt.w	87c00 <_malloc_r+0x38c>
   878fa:	2a00      	cmp	r2, #0
   878fc:	f8c7 e014 	str.w	lr, [r7, #20]
   87900:	f8c7 e010 	str.w	lr, [r7, #16]
   87904:	f280 8091 	bge.w	87a2a <_malloc_r+0x1b6>
   87908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8790c:	f080 8154 	bcs.w	87bb8 <_malloc_r+0x344>
   87910:	2201      	movs	r2, #1
   87912:	08db      	lsrs	r3, r3, #3
   87914:	6879      	ldr	r1, [r7, #4]
   87916:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8791a:	4413      	add	r3, r2
   8791c:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   87920:	fa02 f20c 	lsl.w	r2, r2, ip
   87924:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   87928:	430a      	orrs	r2, r1
   8792a:	f1ac 0108 	sub.w	r1, ip, #8
   8792e:	60e1      	str	r1, [r4, #12]
   87930:	f8c4 8008 	str.w	r8, [r4, #8]
   87934:	607a      	str	r2, [r7, #4]
   87936:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8793a:	f8c8 400c 	str.w	r4, [r8, #12]
   8793e:	2401      	movs	r4, #1
   87940:	1083      	asrs	r3, r0, #2
   87942:	409c      	lsls	r4, r3
   87944:	4294      	cmp	r4, r2
   87946:	d87d      	bhi.n	87a44 <_malloc_r+0x1d0>
   87948:	4214      	tst	r4, r2
   8794a:	d106      	bne.n	8795a <_malloc_r+0xe6>
   8794c:	f020 0003 	bic.w	r0, r0, #3
   87950:	0064      	lsls	r4, r4, #1
   87952:	4214      	tst	r4, r2
   87954:	f100 0004 	add.w	r0, r0, #4
   87958:	d0fa      	beq.n	87950 <_malloc_r+0xdc>
   8795a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8795e:	46cc      	mov	ip, r9
   87960:	4680      	mov	r8, r0
   87962:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87966:	459c      	cmp	ip, r3
   87968:	d107      	bne.n	8797a <_malloc_r+0x106>
   8796a:	e15f      	b.n	87c2c <_malloc_r+0x3b8>
   8796c:	2a00      	cmp	r2, #0
   8796e:	f280 816d 	bge.w	87c4c <_malloc_r+0x3d8>
   87972:	68db      	ldr	r3, [r3, #12]
   87974:	459c      	cmp	ip, r3
   87976:	f000 8159 	beq.w	87c2c <_malloc_r+0x3b8>
   8797a:	6859      	ldr	r1, [r3, #4]
   8797c:	f021 0103 	bic.w	r1, r1, #3
   87980:	1b8a      	subs	r2, r1, r6
   87982:	2a0f      	cmp	r2, #15
   87984:	ddf2      	ble.n	8796c <_malloc_r+0xf8>
   87986:	68dc      	ldr	r4, [r3, #12]
   87988:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8798c:	f046 0801 	orr.w	r8, r6, #1
   87990:	4628      	mov	r0, r5
   87992:	441e      	add	r6, r3
   87994:	f042 0501 	orr.w	r5, r2, #1
   87998:	f8c3 8004 	str.w	r8, [r3, #4]
   8799c:	f8cc 400c 	str.w	r4, [ip, #12]
   879a0:	f8c4 c008 	str.w	ip, [r4, #8]
   879a4:	617e      	str	r6, [r7, #20]
   879a6:	613e      	str	r6, [r7, #16]
   879a8:	f8c6 e00c 	str.w	lr, [r6, #12]
   879ac:	f8c6 e008 	str.w	lr, [r6, #8]
   879b0:	6075      	str	r5, [r6, #4]
   879b2:	505a      	str	r2, [r3, r1]
   879b4:	9300      	str	r3, [sp, #0]
   879b6:	f000 fad3 	bl	87f60 <__malloc_unlock>
   879ba:	9b00      	ldr	r3, [sp, #0]
   879bc:	f103 0408 	add.w	r4, r3, #8
   879c0:	e01e      	b.n	87a00 <_malloc_r+0x18c>
   879c2:	2910      	cmp	r1, #16
   879c4:	d820      	bhi.n	87a08 <_malloc_r+0x194>
   879c6:	f000 fac9 	bl	87f5c <__malloc_lock>
   879ca:	2610      	movs	r6, #16
   879cc:	2318      	movs	r3, #24
   879ce:	2002      	movs	r0, #2
   879d0:	4f72      	ldr	r7, [pc, #456]	; (87b9c <_malloc_r+0x328>)
   879d2:	443b      	add	r3, r7
   879d4:	685c      	ldr	r4, [r3, #4]
   879d6:	f1a3 0208 	sub.w	r2, r3, #8
   879da:	4294      	cmp	r4, r2
   879dc:	f000 812f 	beq.w	87c3e <_malloc_r+0x3ca>
   879e0:	6863      	ldr	r3, [r4, #4]
   879e2:	68e1      	ldr	r1, [r4, #12]
   879e4:	f023 0303 	bic.w	r3, r3, #3
   879e8:	4423      	add	r3, r4
   879ea:	685a      	ldr	r2, [r3, #4]
   879ec:	68a6      	ldr	r6, [r4, #8]
   879ee:	f042 0201 	orr.w	r2, r2, #1
   879f2:	60f1      	str	r1, [r6, #12]
   879f4:	4628      	mov	r0, r5
   879f6:	608e      	str	r6, [r1, #8]
   879f8:	605a      	str	r2, [r3, #4]
   879fa:	f000 fab1 	bl	87f60 <__malloc_unlock>
   879fe:	3408      	adds	r4, #8
   87a00:	4620      	mov	r0, r4
   87a02:	b003      	add	sp, #12
   87a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a08:	2400      	movs	r4, #0
   87a0a:	230c      	movs	r3, #12
   87a0c:	4620      	mov	r0, r4
   87a0e:	602b      	str	r3, [r5, #0]
   87a10:	b003      	add	sp, #12
   87a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a16:	2040      	movs	r0, #64	; 0x40
   87a18:	f44f 7100 	mov.w	r1, #512	; 0x200
   87a1c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   87a20:	e74a      	b.n	878b8 <_malloc_r+0x44>
   87a22:	4423      	add	r3, r4
   87a24:	685a      	ldr	r2, [r3, #4]
   87a26:	68e1      	ldr	r1, [r4, #12]
   87a28:	e7e0      	b.n	879ec <_malloc_r+0x178>
   87a2a:	4423      	add	r3, r4
   87a2c:	685a      	ldr	r2, [r3, #4]
   87a2e:	4628      	mov	r0, r5
   87a30:	f042 0201 	orr.w	r2, r2, #1
   87a34:	605a      	str	r2, [r3, #4]
   87a36:	3408      	adds	r4, #8
   87a38:	f000 fa92 	bl	87f60 <__malloc_unlock>
   87a3c:	4620      	mov	r0, r4
   87a3e:	b003      	add	sp, #12
   87a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a44:	68bc      	ldr	r4, [r7, #8]
   87a46:	6863      	ldr	r3, [r4, #4]
   87a48:	f023 0803 	bic.w	r8, r3, #3
   87a4c:	45b0      	cmp	r8, r6
   87a4e:	d304      	bcc.n	87a5a <_malloc_r+0x1e6>
   87a50:	eba8 0306 	sub.w	r3, r8, r6
   87a54:	2b0f      	cmp	r3, #15
   87a56:	f300 8085 	bgt.w	87b64 <_malloc_r+0x2f0>
   87a5a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 87bb4 <_malloc_r+0x340>
   87a5e:	4b50      	ldr	r3, [pc, #320]	; (87ba0 <_malloc_r+0x32c>)
   87a60:	f8d9 2000 	ldr.w	r2, [r9]
   87a64:	681b      	ldr	r3, [r3, #0]
   87a66:	3201      	adds	r2, #1
   87a68:	4433      	add	r3, r6
   87a6a:	eb04 0a08 	add.w	sl, r4, r8
   87a6e:	f000 8154 	beq.w	87d1a <_malloc_r+0x4a6>
   87a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   87a76:	330f      	adds	r3, #15
   87a78:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   87a7c:	f02b 0b0f 	bic.w	fp, fp, #15
   87a80:	4659      	mov	r1, fp
   87a82:	4628      	mov	r0, r5
   87a84:	f000 fd6a 	bl	8855c <_sbrk_r>
   87a88:	1c41      	adds	r1, r0, #1
   87a8a:	4602      	mov	r2, r0
   87a8c:	f000 80fb 	beq.w	87c86 <_malloc_r+0x412>
   87a90:	4582      	cmp	sl, r0
   87a92:	f200 80f6 	bhi.w	87c82 <_malloc_r+0x40e>
   87a96:	4b43      	ldr	r3, [pc, #268]	; (87ba4 <_malloc_r+0x330>)
   87a98:	6819      	ldr	r1, [r3, #0]
   87a9a:	4459      	add	r1, fp
   87a9c:	6019      	str	r1, [r3, #0]
   87a9e:	f000 814c 	beq.w	87d3a <_malloc_r+0x4c6>
   87aa2:	f8d9 0000 	ldr.w	r0, [r9]
   87aa6:	3001      	adds	r0, #1
   87aa8:	bf1b      	ittet	ne
   87aaa:	eba2 0a0a 	subne.w	sl, r2, sl
   87aae:	4451      	addne	r1, sl
   87ab0:	f8c9 2000 	streq.w	r2, [r9]
   87ab4:	6019      	strne	r1, [r3, #0]
   87ab6:	f012 0107 	ands.w	r1, r2, #7
   87aba:	f000 8114 	beq.w	87ce6 <_malloc_r+0x472>
   87abe:	f1c1 0008 	rsb	r0, r1, #8
   87ac2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   87ac6:	4402      	add	r2, r0
   87ac8:	3108      	adds	r1, #8
   87aca:	eb02 090b 	add.w	r9, r2, fp
   87ace:	f3c9 090b 	ubfx	r9, r9, #0, #12
   87ad2:	eba1 0909 	sub.w	r9, r1, r9
   87ad6:	4649      	mov	r1, r9
   87ad8:	4628      	mov	r0, r5
   87ada:	9301      	str	r3, [sp, #4]
   87adc:	9200      	str	r2, [sp, #0]
   87ade:	f000 fd3d 	bl	8855c <_sbrk_r>
   87ae2:	1c43      	adds	r3, r0, #1
   87ae4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87ae8:	f000 8142 	beq.w	87d70 <_malloc_r+0x4fc>
   87aec:	1a80      	subs	r0, r0, r2
   87aee:	4448      	add	r0, r9
   87af0:	f040 0001 	orr.w	r0, r0, #1
   87af4:	6819      	ldr	r1, [r3, #0]
   87af6:	42bc      	cmp	r4, r7
   87af8:	4449      	add	r1, r9
   87afa:	60ba      	str	r2, [r7, #8]
   87afc:	6019      	str	r1, [r3, #0]
   87afe:	6050      	str	r0, [r2, #4]
   87b00:	d017      	beq.n	87b32 <_malloc_r+0x2be>
   87b02:	f1b8 0f0f 	cmp.w	r8, #15
   87b06:	f240 80fa 	bls.w	87cfe <_malloc_r+0x48a>
   87b0a:	f04f 0c05 	mov.w	ip, #5
   87b0e:	6862      	ldr	r2, [r4, #4]
   87b10:	f1a8 000c 	sub.w	r0, r8, #12
   87b14:	f020 0007 	bic.w	r0, r0, #7
   87b18:	f002 0201 	and.w	r2, r2, #1
   87b1c:	eb04 0e00 	add.w	lr, r4, r0
   87b20:	4302      	orrs	r2, r0
   87b22:	280f      	cmp	r0, #15
   87b24:	6062      	str	r2, [r4, #4]
   87b26:	f8ce c004 	str.w	ip, [lr, #4]
   87b2a:	f8ce c008 	str.w	ip, [lr, #8]
   87b2e:	f200 8116 	bhi.w	87d5e <_malloc_r+0x4ea>
   87b32:	4b1d      	ldr	r3, [pc, #116]	; (87ba8 <_malloc_r+0x334>)
   87b34:	68bc      	ldr	r4, [r7, #8]
   87b36:	681a      	ldr	r2, [r3, #0]
   87b38:	4291      	cmp	r1, r2
   87b3a:	bf88      	it	hi
   87b3c:	6019      	strhi	r1, [r3, #0]
   87b3e:	4b1b      	ldr	r3, [pc, #108]	; (87bac <_malloc_r+0x338>)
   87b40:	681a      	ldr	r2, [r3, #0]
   87b42:	4291      	cmp	r1, r2
   87b44:	6862      	ldr	r2, [r4, #4]
   87b46:	bf88      	it	hi
   87b48:	6019      	strhi	r1, [r3, #0]
   87b4a:	f022 0203 	bic.w	r2, r2, #3
   87b4e:	4296      	cmp	r6, r2
   87b50:	eba2 0306 	sub.w	r3, r2, r6
   87b54:	d801      	bhi.n	87b5a <_malloc_r+0x2e6>
   87b56:	2b0f      	cmp	r3, #15
   87b58:	dc04      	bgt.n	87b64 <_malloc_r+0x2f0>
   87b5a:	4628      	mov	r0, r5
   87b5c:	f000 fa00 	bl	87f60 <__malloc_unlock>
   87b60:	2400      	movs	r4, #0
   87b62:	e74d      	b.n	87a00 <_malloc_r+0x18c>
   87b64:	f046 0201 	orr.w	r2, r6, #1
   87b68:	f043 0301 	orr.w	r3, r3, #1
   87b6c:	4426      	add	r6, r4
   87b6e:	6062      	str	r2, [r4, #4]
   87b70:	4628      	mov	r0, r5
   87b72:	60be      	str	r6, [r7, #8]
   87b74:	3408      	adds	r4, #8
   87b76:	6073      	str	r3, [r6, #4]
   87b78:	f000 f9f2 	bl	87f60 <__malloc_unlock>
   87b7c:	4620      	mov	r0, r4
   87b7e:	b003      	add	sp, #12
   87b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87b84:	2b14      	cmp	r3, #20
   87b86:	d970      	bls.n	87c6a <_malloc_r+0x3f6>
   87b88:	2b54      	cmp	r3, #84	; 0x54
   87b8a:	f200 80a2 	bhi.w	87cd2 <_malloc_r+0x45e>
   87b8e:	0b33      	lsrs	r3, r6, #12
   87b90:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   87b94:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   87b98:	00c1      	lsls	r1, r0, #3
   87b9a:	e68d      	b.n	878b8 <_malloc_r+0x44>
   87b9c:	20000bcc 	.word	0x20000bcc
   87ba0:	200011b8 	.word	0x200011b8
   87ba4:	20001188 	.word	0x20001188
   87ba8:	200011b0 	.word	0x200011b0
   87bac:	200011b4 	.word	0x200011b4
   87bb0:	20000bd4 	.word	0x20000bd4
   87bb4:	20000fd4 	.word	0x20000fd4
   87bb8:	0a5a      	lsrs	r2, r3, #9
   87bba:	2a04      	cmp	r2, #4
   87bbc:	d95b      	bls.n	87c76 <_malloc_r+0x402>
   87bbe:	2a14      	cmp	r2, #20
   87bc0:	f200 80ae 	bhi.w	87d20 <_malloc_r+0x4ac>
   87bc4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   87bc8:	00c9      	lsls	r1, r1, #3
   87bca:	325b      	adds	r2, #91	; 0x5b
   87bcc:	eb07 0c01 	add.w	ip, r7, r1
   87bd0:	5879      	ldr	r1, [r7, r1]
   87bd2:	f1ac 0c08 	sub.w	ip, ip, #8
   87bd6:	458c      	cmp	ip, r1
   87bd8:	f000 8088 	beq.w	87cec <_malloc_r+0x478>
   87bdc:	684a      	ldr	r2, [r1, #4]
   87bde:	f022 0203 	bic.w	r2, r2, #3
   87be2:	4293      	cmp	r3, r2
   87be4:	d273      	bcs.n	87cce <_malloc_r+0x45a>
   87be6:	6889      	ldr	r1, [r1, #8]
   87be8:	458c      	cmp	ip, r1
   87bea:	d1f7      	bne.n	87bdc <_malloc_r+0x368>
   87bec:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87bf0:	687a      	ldr	r2, [r7, #4]
   87bf2:	60e3      	str	r3, [r4, #12]
   87bf4:	f8c4 c008 	str.w	ip, [r4, #8]
   87bf8:	609c      	str	r4, [r3, #8]
   87bfa:	f8cc 400c 	str.w	r4, [ip, #12]
   87bfe:	e69e      	b.n	8793e <_malloc_r+0xca>
   87c00:	f046 0c01 	orr.w	ip, r6, #1
   87c04:	f042 0101 	orr.w	r1, r2, #1
   87c08:	4426      	add	r6, r4
   87c0a:	f8c4 c004 	str.w	ip, [r4, #4]
   87c0e:	4628      	mov	r0, r5
   87c10:	617e      	str	r6, [r7, #20]
   87c12:	613e      	str	r6, [r7, #16]
   87c14:	f8c6 e00c 	str.w	lr, [r6, #12]
   87c18:	f8c6 e008 	str.w	lr, [r6, #8]
   87c1c:	6071      	str	r1, [r6, #4]
   87c1e:	50e2      	str	r2, [r4, r3]
   87c20:	f000 f99e 	bl	87f60 <__malloc_unlock>
   87c24:	3408      	adds	r4, #8
   87c26:	e6eb      	b.n	87a00 <_malloc_r+0x18c>
   87c28:	687a      	ldr	r2, [r7, #4]
   87c2a:	e688      	b.n	8793e <_malloc_r+0xca>
   87c2c:	f108 0801 	add.w	r8, r8, #1
   87c30:	f018 0f03 	tst.w	r8, #3
   87c34:	f10c 0c08 	add.w	ip, ip, #8
   87c38:	f47f ae93 	bne.w	87962 <_malloc_r+0xee>
   87c3c:	e02d      	b.n	87c9a <_malloc_r+0x426>
   87c3e:	68dc      	ldr	r4, [r3, #12]
   87c40:	42a3      	cmp	r3, r4
   87c42:	bf08      	it	eq
   87c44:	3002      	addeq	r0, #2
   87c46:	f43f ae4b 	beq.w	878e0 <_malloc_r+0x6c>
   87c4a:	e6c9      	b.n	879e0 <_malloc_r+0x16c>
   87c4c:	461c      	mov	r4, r3
   87c4e:	4419      	add	r1, r3
   87c50:	684a      	ldr	r2, [r1, #4]
   87c52:	68db      	ldr	r3, [r3, #12]
   87c54:	f854 6f08 	ldr.w	r6, [r4, #8]!
   87c58:	f042 0201 	orr.w	r2, r2, #1
   87c5c:	604a      	str	r2, [r1, #4]
   87c5e:	4628      	mov	r0, r5
   87c60:	60f3      	str	r3, [r6, #12]
   87c62:	609e      	str	r6, [r3, #8]
   87c64:	f000 f97c 	bl	87f60 <__malloc_unlock>
   87c68:	e6ca      	b.n	87a00 <_malloc_r+0x18c>
   87c6a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   87c6e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   87c72:	00c1      	lsls	r1, r0, #3
   87c74:	e620      	b.n	878b8 <_malloc_r+0x44>
   87c76:	099a      	lsrs	r2, r3, #6
   87c78:	f102 0139 	add.w	r1, r2, #57	; 0x39
   87c7c:	00c9      	lsls	r1, r1, #3
   87c7e:	3238      	adds	r2, #56	; 0x38
   87c80:	e7a4      	b.n	87bcc <_malloc_r+0x358>
   87c82:	42bc      	cmp	r4, r7
   87c84:	d054      	beq.n	87d30 <_malloc_r+0x4bc>
   87c86:	68bc      	ldr	r4, [r7, #8]
   87c88:	6862      	ldr	r2, [r4, #4]
   87c8a:	f022 0203 	bic.w	r2, r2, #3
   87c8e:	e75e      	b.n	87b4e <_malloc_r+0x2da>
   87c90:	f859 3908 	ldr.w	r3, [r9], #-8
   87c94:	4599      	cmp	r9, r3
   87c96:	f040 8086 	bne.w	87da6 <_malloc_r+0x532>
   87c9a:	f010 0f03 	tst.w	r0, #3
   87c9e:	f100 30ff 	add.w	r0, r0, #4294967295
   87ca2:	d1f5      	bne.n	87c90 <_malloc_r+0x41c>
   87ca4:	687b      	ldr	r3, [r7, #4]
   87ca6:	ea23 0304 	bic.w	r3, r3, r4
   87caa:	607b      	str	r3, [r7, #4]
   87cac:	0064      	lsls	r4, r4, #1
   87cae:	429c      	cmp	r4, r3
   87cb0:	f63f aec8 	bhi.w	87a44 <_malloc_r+0x1d0>
   87cb4:	2c00      	cmp	r4, #0
   87cb6:	f43f aec5 	beq.w	87a44 <_malloc_r+0x1d0>
   87cba:	421c      	tst	r4, r3
   87cbc:	4640      	mov	r0, r8
   87cbe:	f47f ae4c 	bne.w	8795a <_malloc_r+0xe6>
   87cc2:	0064      	lsls	r4, r4, #1
   87cc4:	421c      	tst	r4, r3
   87cc6:	f100 0004 	add.w	r0, r0, #4
   87cca:	d0fa      	beq.n	87cc2 <_malloc_r+0x44e>
   87ccc:	e645      	b.n	8795a <_malloc_r+0xe6>
   87cce:	468c      	mov	ip, r1
   87cd0:	e78c      	b.n	87bec <_malloc_r+0x378>
   87cd2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   87cd6:	d815      	bhi.n	87d04 <_malloc_r+0x490>
   87cd8:	0bf3      	lsrs	r3, r6, #15
   87cda:	f103 0078 	add.w	r0, r3, #120	; 0x78
   87cde:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   87ce2:	00c1      	lsls	r1, r0, #3
   87ce4:	e5e8      	b.n	878b8 <_malloc_r+0x44>
   87ce6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   87cea:	e6ee      	b.n	87aca <_malloc_r+0x256>
   87cec:	2101      	movs	r1, #1
   87cee:	687b      	ldr	r3, [r7, #4]
   87cf0:	1092      	asrs	r2, r2, #2
   87cf2:	fa01 f202 	lsl.w	r2, r1, r2
   87cf6:	431a      	orrs	r2, r3
   87cf8:	607a      	str	r2, [r7, #4]
   87cfa:	4663      	mov	r3, ip
   87cfc:	e779      	b.n	87bf2 <_malloc_r+0x37e>
   87cfe:	2301      	movs	r3, #1
   87d00:	6053      	str	r3, [r2, #4]
   87d02:	e72a      	b.n	87b5a <_malloc_r+0x2e6>
   87d04:	f240 5254 	movw	r2, #1364	; 0x554
   87d08:	4293      	cmp	r3, r2
   87d0a:	d822      	bhi.n	87d52 <_malloc_r+0x4de>
   87d0c:	0cb3      	lsrs	r3, r6, #18
   87d0e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   87d12:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   87d16:	00c1      	lsls	r1, r0, #3
   87d18:	e5ce      	b.n	878b8 <_malloc_r+0x44>
   87d1a:	f103 0b10 	add.w	fp, r3, #16
   87d1e:	e6af      	b.n	87a80 <_malloc_r+0x20c>
   87d20:	2a54      	cmp	r2, #84	; 0x54
   87d22:	d829      	bhi.n	87d78 <_malloc_r+0x504>
   87d24:	0b1a      	lsrs	r2, r3, #12
   87d26:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   87d2a:	00c9      	lsls	r1, r1, #3
   87d2c:	326e      	adds	r2, #110	; 0x6e
   87d2e:	e74d      	b.n	87bcc <_malloc_r+0x358>
   87d30:	4b20      	ldr	r3, [pc, #128]	; (87db4 <_malloc_r+0x540>)
   87d32:	6819      	ldr	r1, [r3, #0]
   87d34:	4459      	add	r1, fp
   87d36:	6019      	str	r1, [r3, #0]
   87d38:	e6b3      	b.n	87aa2 <_malloc_r+0x22e>
   87d3a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   87d3e:	2800      	cmp	r0, #0
   87d40:	f47f aeaf 	bne.w	87aa2 <_malloc_r+0x22e>
   87d44:	eb08 030b 	add.w	r3, r8, fp
   87d48:	68ba      	ldr	r2, [r7, #8]
   87d4a:	f043 0301 	orr.w	r3, r3, #1
   87d4e:	6053      	str	r3, [r2, #4]
   87d50:	e6ef      	b.n	87b32 <_malloc_r+0x2be>
   87d52:	207f      	movs	r0, #127	; 0x7f
   87d54:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   87d58:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   87d5c:	e5ac      	b.n	878b8 <_malloc_r+0x44>
   87d5e:	f104 0108 	add.w	r1, r4, #8
   87d62:	4628      	mov	r0, r5
   87d64:	9300      	str	r3, [sp, #0]
   87d66:	f000 fd6b 	bl	88840 <_free_r>
   87d6a:	9b00      	ldr	r3, [sp, #0]
   87d6c:	6819      	ldr	r1, [r3, #0]
   87d6e:	e6e0      	b.n	87b32 <_malloc_r+0x2be>
   87d70:	2001      	movs	r0, #1
   87d72:	f04f 0900 	mov.w	r9, #0
   87d76:	e6bd      	b.n	87af4 <_malloc_r+0x280>
   87d78:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   87d7c:	d805      	bhi.n	87d8a <_malloc_r+0x516>
   87d7e:	0bda      	lsrs	r2, r3, #15
   87d80:	f102 0178 	add.w	r1, r2, #120	; 0x78
   87d84:	00c9      	lsls	r1, r1, #3
   87d86:	3277      	adds	r2, #119	; 0x77
   87d88:	e720      	b.n	87bcc <_malloc_r+0x358>
   87d8a:	f240 5154 	movw	r1, #1364	; 0x554
   87d8e:	428a      	cmp	r2, r1
   87d90:	d805      	bhi.n	87d9e <_malloc_r+0x52a>
   87d92:	0c9a      	lsrs	r2, r3, #18
   87d94:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   87d98:	00c9      	lsls	r1, r1, #3
   87d9a:	327c      	adds	r2, #124	; 0x7c
   87d9c:	e716      	b.n	87bcc <_malloc_r+0x358>
   87d9e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   87da2:	227e      	movs	r2, #126	; 0x7e
   87da4:	e712      	b.n	87bcc <_malloc_r+0x358>
   87da6:	687b      	ldr	r3, [r7, #4]
   87da8:	e780      	b.n	87cac <_malloc_r+0x438>
   87daa:	08f0      	lsrs	r0, r6, #3
   87dac:	f106 0308 	add.w	r3, r6, #8
   87db0:	e60e      	b.n	879d0 <_malloc_r+0x15c>
   87db2:	bf00      	nop
   87db4:	20001188 	.word	0x20001188

00087db8 <__ascii_mbtowc>:
   87db8:	b082      	sub	sp, #8
   87dba:	b149      	cbz	r1, 87dd0 <__ascii_mbtowc+0x18>
   87dbc:	b15a      	cbz	r2, 87dd6 <__ascii_mbtowc+0x1e>
   87dbe:	b16b      	cbz	r3, 87ddc <__ascii_mbtowc+0x24>
   87dc0:	7813      	ldrb	r3, [r2, #0]
   87dc2:	600b      	str	r3, [r1, #0]
   87dc4:	7812      	ldrb	r2, [r2, #0]
   87dc6:	1c10      	adds	r0, r2, #0
   87dc8:	bf18      	it	ne
   87dca:	2001      	movne	r0, #1
   87dcc:	b002      	add	sp, #8
   87dce:	4770      	bx	lr
   87dd0:	a901      	add	r1, sp, #4
   87dd2:	2a00      	cmp	r2, #0
   87dd4:	d1f3      	bne.n	87dbe <__ascii_mbtowc+0x6>
   87dd6:	4610      	mov	r0, r2
   87dd8:	b002      	add	sp, #8
   87dda:	4770      	bx	lr
   87ddc:	f06f 0001 	mvn.w	r0, #1
   87de0:	e7f4      	b.n	87dcc <__ascii_mbtowc+0x14>
   87de2:	bf00      	nop

00087de4 <memchr>:
   87de4:	0783      	lsls	r3, r0, #30
   87de6:	b470      	push	{r4, r5, r6}
   87de8:	b2cd      	uxtb	r5, r1
   87dea:	d03d      	beq.n	87e68 <memchr+0x84>
   87dec:	1e54      	subs	r4, r2, #1
   87dee:	b30a      	cbz	r2, 87e34 <memchr+0x50>
   87df0:	7803      	ldrb	r3, [r0, #0]
   87df2:	42ab      	cmp	r3, r5
   87df4:	d01f      	beq.n	87e36 <memchr+0x52>
   87df6:	1c43      	adds	r3, r0, #1
   87df8:	e005      	b.n	87e06 <memchr+0x22>
   87dfa:	f114 34ff 	adds.w	r4, r4, #4294967295
   87dfe:	d319      	bcc.n	87e34 <memchr+0x50>
   87e00:	7802      	ldrb	r2, [r0, #0]
   87e02:	42aa      	cmp	r2, r5
   87e04:	d017      	beq.n	87e36 <memchr+0x52>
   87e06:	f013 0f03 	tst.w	r3, #3
   87e0a:	4618      	mov	r0, r3
   87e0c:	f103 0301 	add.w	r3, r3, #1
   87e10:	d1f3      	bne.n	87dfa <memchr+0x16>
   87e12:	2c03      	cmp	r4, #3
   87e14:	d811      	bhi.n	87e3a <memchr+0x56>
   87e16:	b34c      	cbz	r4, 87e6c <memchr+0x88>
   87e18:	7803      	ldrb	r3, [r0, #0]
   87e1a:	42ab      	cmp	r3, r5
   87e1c:	d00b      	beq.n	87e36 <memchr+0x52>
   87e1e:	4404      	add	r4, r0
   87e20:	1c43      	adds	r3, r0, #1
   87e22:	e002      	b.n	87e2a <memchr+0x46>
   87e24:	7802      	ldrb	r2, [r0, #0]
   87e26:	42aa      	cmp	r2, r5
   87e28:	d005      	beq.n	87e36 <memchr+0x52>
   87e2a:	429c      	cmp	r4, r3
   87e2c:	4618      	mov	r0, r3
   87e2e:	f103 0301 	add.w	r3, r3, #1
   87e32:	d1f7      	bne.n	87e24 <memchr+0x40>
   87e34:	2000      	movs	r0, #0
   87e36:	bc70      	pop	{r4, r5, r6}
   87e38:	4770      	bx	lr
   87e3a:	0209      	lsls	r1, r1, #8
   87e3c:	b289      	uxth	r1, r1
   87e3e:	4329      	orrs	r1, r5
   87e40:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   87e44:	6803      	ldr	r3, [r0, #0]
   87e46:	4606      	mov	r6, r0
   87e48:	404b      	eors	r3, r1
   87e4a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   87e4e:	ea22 0303 	bic.w	r3, r2, r3
   87e52:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   87e56:	f100 0004 	add.w	r0, r0, #4
   87e5a:	d103      	bne.n	87e64 <memchr+0x80>
   87e5c:	3c04      	subs	r4, #4
   87e5e:	2c03      	cmp	r4, #3
   87e60:	d8f0      	bhi.n	87e44 <memchr+0x60>
   87e62:	e7d8      	b.n	87e16 <memchr+0x32>
   87e64:	4630      	mov	r0, r6
   87e66:	e7d7      	b.n	87e18 <memchr+0x34>
   87e68:	4614      	mov	r4, r2
   87e6a:	e7d2      	b.n	87e12 <memchr+0x2e>
   87e6c:	4620      	mov	r0, r4
   87e6e:	e7e2      	b.n	87e36 <memchr+0x52>

00087e70 <memcpy>:
   87e70:	4684      	mov	ip, r0
   87e72:	ea41 0300 	orr.w	r3, r1, r0
   87e76:	f013 0303 	ands.w	r3, r3, #3
   87e7a:	d149      	bne.n	87f10 <memcpy+0xa0>
   87e7c:	3a40      	subs	r2, #64	; 0x40
   87e7e:	d323      	bcc.n	87ec8 <memcpy+0x58>
   87e80:	680b      	ldr	r3, [r1, #0]
   87e82:	6003      	str	r3, [r0, #0]
   87e84:	684b      	ldr	r3, [r1, #4]
   87e86:	6043      	str	r3, [r0, #4]
   87e88:	688b      	ldr	r3, [r1, #8]
   87e8a:	6083      	str	r3, [r0, #8]
   87e8c:	68cb      	ldr	r3, [r1, #12]
   87e8e:	60c3      	str	r3, [r0, #12]
   87e90:	690b      	ldr	r3, [r1, #16]
   87e92:	6103      	str	r3, [r0, #16]
   87e94:	694b      	ldr	r3, [r1, #20]
   87e96:	6143      	str	r3, [r0, #20]
   87e98:	698b      	ldr	r3, [r1, #24]
   87e9a:	6183      	str	r3, [r0, #24]
   87e9c:	69cb      	ldr	r3, [r1, #28]
   87e9e:	61c3      	str	r3, [r0, #28]
   87ea0:	6a0b      	ldr	r3, [r1, #32]
   87ea2:	6203      	str	r3, [r0, #32]
   87ea4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   87ea6:	6243      	str	r3, [r0, #36]	; 0x24
   87ea8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   87eaa:	6283      	str	r3, [r0, #40]	; 0x28
   87eac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   87eae:	62c3      	str	r3, [r0, #44]	; 0x2c
   87eb0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   87eb2:	6303      	str	r3, [r0, #48]	; 0x30
   87eb4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   87eb6:	6343      	str	r3, [r0, #52]	; 0x34
   87eb8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   87eba:	6383      	str	r3, [r0, #56]	; 0x38
   87ebc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   87ebe:	63c3      	str	r3, [r0, #60]	; 0x3c
   87ec0:	3040      	adds	r0, #64	; 0x40
   87ec2:	3140      	adds	r1, #64	; 0x40
   87ec4:	3a40      	subs	r2, #64	; 0x40
   87ec6:	d2db      	bcs.n	87e80 <memcpy+0x10>
   87ec8:	3230      	adds	r2, #48	; 0x30
   87eca:	d30b      	bcc.n	87ee4 <memcpy+0x74>
   87ecc:	680b      	ldr	r3, [r1, #0]
   87ece:	6003      	str	r3, [r0, #0]
   87ed0:	684b      	ldr	r3, [r1, #4]
   87ed2:	6043      	str	r3, [r0, #4]
   87ed4:	688b      	ldr	r3, [r1, #8]
   87ed6:	6083      	str	r3, [r0, #8]
   87ed8:	68cb      	ldr	r3, [r1, #12]
   87eda:	60c3      	str	r3, [r0, #12]
   87edc:	3010      	adds	r0, #16
   87ede:	3110      	adds	r1, #16
   87ee0:	3a10      	subs	r2, #16
   87ee2:	d2f3      	bcs.n	87ecc <memcpy+0x5c>
   87ee4:	320c      	adds	r2, #12
   87ee6:	d305      	bcc.n	87ef4 <memcpy+0x84>
   87ee8:	f851 3b04 	ldr.w	r3, [r1], #4
   87eec:	f840 3b04 	str.w	r3, [r0], #4
   87ef0:	3a04      	subs	r2, #4
   87ef2:	d2f9      	bcs.n	87ee8 <memcpy+0x78>
   87ef4:	3204      	adds	r2, #4
   87ef6:	d008      	beq.n	87f0a <memcpy+0x9a>
   87ef8:	07d2      	lsls	r2, r2, #31
   87efa:	bf1c      	itt	ne
   87efc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87f00:	f800 3b01 	strbne.w	r3, [r0], #1
   87f04:	d301      	bcc.n	87f0a <memcpy+0x9a>
   87f06:	880b      	ldrh	r3, [r1, #0]
   87f08:	8003      	strh	r3, [r0, #0]
   87f0a:	4660      	mov	r0, ip
   87f0c:	4770      	bx	lr
   87f0e:	bf00      	nop
   87f10:	2a08      	cmp	r2, #8
   87f12:	d313      	bcc.n	87f3c <memcpy+0xcc>
   87f14:	078b      	lsls	r3, r1, #30
   87f16:	d0b1      	beq.n	87e7c <memcpy+0xc>
   87f18:	f010 0303 	ands.w	r3, r0, #3
   87f1c:	d0ae      	beq.n	87e7c <memcpy+0xc>
   87f1e:	f1c3 0304 	rsb	r3, r3, #4
   87f22:	1ad2      	subs	r2, r2, r3
   87f24:	07db      	lsls	r3, r3, #31
   87f26:	bf1c      	itt	ne
   87f28:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87f2c:	f800 3b01 	strbne.w	r3, [r0], #1
   87f30:	d3a4      	bcc.n	87e7c <memcpy+0xc>
   87f32:	f831 3b02 	ldrh.w	r3, [r1], #2
   87f36:	f820 3b02 	strh.w	r3, [r0], #2
   87f3a:	e79f      	b.n	87e7c <memcpy+0xc>
   87f3c:	3a04      	subs	r2, #4
   87f3e:	d3d9      	bcc.n	87ef4 <memcpy+0x84>
   87f40:	3a01      	subs	r2, #1
   87f42:	f811 3b01 	ldrb.w	r3, [r1], #1
   87f46:	f800 3b01 	strb.w	r3, [r0], #1
   87f4a:	d2f9      	bcs.n	87f40 <memcpy+0xd0>
   87f4c:	780b      	ldrb	r3, [r1, #0]
   87f4e:	7003      	strb	r3, [r0, #0]
   87f50:	784b      	ldrb	r3, [r1, #1]
   87f52:	7043      	strb	r3, [r0, #1]
   87f54:	788b      	ldrb	r3, [r1, #2]
   87f56:	7083      	strb	r3, [r0, #2]
   87f58:	4660      	mov	r0, ip
   87f5a:	4770      	bx	lr

00087f5c <__malloc_lock>:
   87f5c:	4770      	bx	lr
   87f5e:	bf00      	nop

00087f60 <__malloc_unlock>:
   87f60:	4770      	bx	lr
   87f62:	bf00      	nop

00087f64 <_Balloc>:
   87f64:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   87f66:	b570      	push	{r4, r5, r6, lr}
   87f68:	4605      	mov	r5, r0
   87f6a:	460c      	mov	r4, r1
   87f6c:	b14b      	cbz	r3, 87f82 <_Balloc+0x1e>
   87f6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   87f72:	b180      	cbz	r0, 87f96 <_Balloc+0x32>
   87f74:	6802      	ldr	r2, [r0, #0]
   87f76:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   87f7a:	2300      	movs	r3, #0
   87f7c:	6103      	str	r3, [r0, #16]
   87f7e:	60c3      	str	r3, [r0, #12]
   87f80:	bd70      	pop	{r4, r5, r6, pc}
   87f82:	2221      	movs	r2, #33	; 0x21
   87f84:	2104      	movs	r1, #4
   87f86:	f000 fbdb 	bl	88740 <_calloc_r>
   87f8a:	64e8      	str	r0, [r5, #76]	; 0x4c
   87f8c:	4603      	mov	r3, r0
   87f8e:	2800      	cmp	r0, #0
   87f90:	d1ed      	bne.n	87f6e <_Balloc+0xa>
   87f92:	2000      	movs	r0, #0
   87f94:	bd70      	pop	{r4, r5, r6, pc}
   87f96:	2101      	movs	r1, #1
   87f98:	fa01 f604 	lsl.w	r6, r1, r4
   87f9c:	1d72      	adds	r2, r6, #5
   87f9e:	4628      	mov	r0, r5
   87fa0:	0092      	lsls	r2, r2, #2
   87fa2:	f000 fbcd 	bl	88740 <_calloc_r>
   87fa6:	2800      	cmp	r0, #0
   87fa8:	d0f3      	beq.n	87f92 <_Balloc+0x2e>
   87faa:	6044      	str	r4, [r0, #4]
   87fac:	6086      	str	r6, [r0, #8]
   87fae:	e7e4      	b.n	87f7a <_Balloc+0x16>

00087fb0 <_Bfree>:
   87fb0:	b131      	cbz	r1, 87fc0 <_Bfree+0x10>
   87fb2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   87fb4:	684a      	ldr	r2, [r1, #4]
   87fb6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   87fba:	6008      	str	r0, [r1, #0]
   87fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   87fc0:	4770      	bx	lr
   87fc2:	bf00      	nop

00087fc4 <__multadd>:
   87fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   87fc6:	460c      	mov	r4, r1
   87fc8:	4605      	mov	r5, r0
   87fca:	f04f 0e00 	mov.w	lr, #0
   87fce:	690e      	ldr	r6, [r1, #16]
   87fd0:	b083      	sub	sp, #12
   87fd2:	f101 0714 	add.w	r7, r1, #20
   87fd6:	6838      	ldr	r0, [r7, #0]
   87fd8:	f10e 0e01 	add.w	lr, lr, #1
   87fdc:	b281      	uxth	r1, r0
   87fde:	fb02 3301 	mla	r3, r2, r1, r3
   87fe2:	0c01      	lsrs	r1, r0, #16
   87fe4:	0c18      	lsrs	r0, r3, #16
   87fe6:	fb02 0101 	mla	r1, r2, r1, r0
   87fea:	b29b      	uxth	r3, r3
   87fec:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   87ff0:	4576      	cmp	r6, lr
   87ff2:	f847 3b04 	str.w	r3, [r7], #4
   87ff6:	ea4f 4311 	mov.w	r3, r1, lsr #16
   87ffa:	dcec      	bgt.n	87fd6 <__multadd+0x12>
   87ffc:	b13b      	cbz	r3, 8800e <__multadd+0x4a>
   87ffe:	68a2      	ldr	r2, [r4, #8]
   88000:	4296      	cmp	r6, r2
   88002:	da07      	bge.n	88014 <__multadd+0x50>
   88004:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   88008:	3601      	adds	r6, #1
   8800a:	6153      	str	r3, [r2, #20]
   8800c:	6126      	str	r6, [r4, #16]
   8800e:	4620      	mov	r0, r4
   88010:	b003      	add	sp, #12
   88012:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88014:	6861      	ldr	r1, [r4, #4]
   88016:	4628      	mov	r0, r5
   88018:	3101      	adds	r1, #1
   8801a:	9301      	str	r3, [sp, #4]
   8801c:	f7ff ffa2 	bl	87f64 <_Balloc>
   88020:	4607      	mov	r7, r0
   88022:	6922      	ldr	r2, [r4, #16]
   88024:	f104 010c 	add.w	r1, r4, #12
   88028:	3202      	adds	r2, #2
   8802a:	0092      	lsls	r2, r2, #2
   8802c:	300c      	adds	r0, #12
   8802e:	f7ff ff1f 	bl	87e70 <memcpy>
   88032:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   88034:	6861      	ldr	r1, [r4, #4]
   88036:	9b01      	ldr	r3, [sp, #4]
   88038:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   8803c:	6020      	str	r0, [r4, #0]
   8803e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   88042:	463c      	mov	r4, r7
   88044:	e7de      	b.n	88004 <__multadd+0x40>
   88046:	bf00      	nop

00088048 <__hi0bits>:
   88048:	0c02      	lsrs	r2, r0, #16
   8804a:	0412      	lsls	r2, r2, #16
   8804c:	4603      	mov	r3, r0
   8804e:	b9b2      	cbnz	r2, 8807e <__hi0bits+0x36>
   88050:	0403      	lsls	r3, r0, #16
   88052:	2010      	movs	r0, #16
   88054:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   88058:	bf04      	itt	eq
   8805a:	021b      	lsleq	r3, r3, #8
   8805c:	3008      	addeq	r0, #8
   8805e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   88062:	bf04      	itt	eq
   88064:	011b      	lsleq	r3, r3, #4
   88066:	3004      	addeq	r0, #4
   88068:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8806c:	bf04      	itt	eq
   8806e:	009b      	lsleq	r3, r3, #2
   88070:	3002      	addeq	r0, #2
   88072:	2b00      	cmp	r3, #0
   88074:	db02      	blt.n	8807c <__hi0bits+0x34>
   88076:	005b      	lsls	r3, r3, #1
   88078:	d403      	bmi.n	88082 <__hi0bits+0x3a>
   8807a:	2020      	movs	r0, #32
   8807c:	4770      	bx	lr
   8807e:	2000      	movs	r0, #0
   88080:	e7e8      	b.n	88054 <__hi0bits+0xc>
   88082:	3001      	adds	r0, #1
   88084:	4770      	bx	lr
   88086:	bf00      	nop

00088088 <__lo0bits>:
   88088:	6803      	ldr	r3, [r0, #0]
   8808a:	4601      	mov	r1, r0
   8808c:	f013 0207 	ands.w	r2, r3, #7
   88090:	d007      	beq.n	880a2 <__lo0bits+0x1a>
   88092:	07da      	lsls	r2, r3, #31
   88094:	d421      	bmi.n	880da <__lo0bits+0x52>
   88096:	0798      	lsls	r0, r3, #30
   88098:	d421      	bmi.n	880de <__lo0bits+0x56>
   8809a:	089b      	lsrs	r3, r3, #2
   8809c:	600b      	str	r3, [r1, #0]
   8809e:	2002      	movs	r0, #2
   880a0:	4770      	bx	lr
   880a2:	b298      	uxth	r0, r3
   880a4:	b198      	cbz	r0, 880ce <__lo0bits+0x46>
   880a6:	4610      	mov	r0, r2
   880a8:	f013 0fff 	tst.w	r3, #255	; 0xff
   880ac:	bf04      	itt	eq
   880ae:	0a1b      	lsreq	r3, r3, #8
   880b0:	3008      	addeq	r0, #8
   880b2:	071a      	lsls	r2, r3, #28
   880b4:	bf04      	itt	eq
   880b6:	091b      	lsreq	r3, r3, #4
   880b8:	3004      	addeq	r0, #4
   880ba:	079a      	lsls	r2, r3, #30
   880bc:	bf04      	itt	eq
   880be:	089b      	lsreq	r3, r3, #2
   880c0:	3002      	addeq	r0, #2
   880c2:	07da      	lsls	r2, r3, #31
   880c4:	d407      	bmi.n	880d6 <__lo0bits+0x4e>
   880c6:	085b      	lsrs	r3, r3, #1
   880c8:	d104      	bne.n	880d4 <__lo0bits+0x4c>
   880ca:	2020      	movs	r0, #32
   880cc:	4770      	bx	lr
   880ce:	0c1b      	lsrs	r3, r3, #16
   880d0:	2010      	movs	r0, #16
   880d2:	e7e9      	b.n	880a8 <__lo0bits+0x20>
   880d4:	3001      	adds	r0, #1
   880d6:	600b      	str	r3, [r1, #0]
   880d8:	4770      	bx	lr
   880da:	2000      	movs	r0, #0
   880dc:	4770      	bx	lr
   880de:	085b      	lsrs	r3, r3, #1
   880e0:	600b      	str	r3, [r1, #0]
   880e2:	2001      	movs	r0, #1
   880e4:	4770      	bx	lr
   880e6:	bf00      	nop

000880e8 <__i2b>:
   880e8:	b510      	push	{r4, lr}
   880ea:	460c      	mov	r4, r1
   880ec:	2101      	movs	r1, #1
   880ee:	f7ff ff39 	bl	87f64 <_Balloc>
   880f2:	2201      	movs	r2, #1
   880f4:	6144      	str	r4, [r0, #20]
   880f6:	6102      	str	r2, [r0, #16]
   880f8:	bd10      	pop	{r4, pc}
   880fa:	bf00      	nop

000880fc <__multiply>:
   880fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88100:	690c      	ldr	r4, [r1, #16]
   88102:	6915      	ldr	r5, [r2, #16]
   88104:	b083      	sub	sp, #12
   88106:	42ac      	cmp	r4, r5
   88108:	468b      	mov	fp, r1
   8810a:	4616      	mov	r6, r2
   8810c:	da04      	bge.n	88118 <__multiply+0x1c>
   8810e:	4622      	mov	r2, r4
   88110:	46b3      	mov	fp, r6
   88112:	462c      	mov	r4, r5
   88114:	460e      	mov	r6, r1
   88116:	4615      	mov	r5, r2
   88118:	f8db 3008 	ldr.w	r3, [fp, #8]
   8811c:	eb04 0805 	add.w	r8, r4, r5
   88120:	f8db 1004 	ldr.w	r1, [fp, #4]
   88124:	4598      	cmp	r8, r3
   88126:	bfc8      	it	gt
   88128:	3101      	addgt	r1, #1
   8812a:	f7ff ff1b 	bl	87f64 <_Balloc>
   8812e:	f100 0914 	add.w	r9, r0, #20
   88132:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   88136:	45d1      	cmp	r9, sl
   88138:	9000      	str	r0, [sp, #0]
   8813a:	d205      	bcs.n	88148 <__multiply+0x4c>
   8813c:	464b      	mov	r3, r9
   8813e:	2100      	movs	r1, #0
   88140:	f843 1b04 	str.w	r1, [r3], #4
   88144:	459a      	cmp	sl, r3
   88146:	d8fb      	bhi.n	88140 <__multiply+0x44>
   88148:	f106 0c14 	add.w	ip, r6, #20
   8814c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   88150:	f10b 0b14 	add.w	fp, fp, #20
   88154:	459c      	cmp	ip, r3
   88156:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   8815a:	d24b      	bcs.n	881f4 <__multiply+0xf8>
   8815c:	f8cd a004 	str.w	sl, [sp, #4]
   88160:	469a      	mov	sl, r3
   88162:	f8dc 5000 	ldr.w	r5, [ip]
   88166:	b2af      	uxth	r7, r5
   88168:	b1e7      	cbz	r7, 881a4 <__multiply+0xa8>
   8816a:	464d      	mov	r5, r9
   8816c:	465e      	mov	r6, fp
   8816e:	2100      	movs	r1, #0
   88170:	f856 2b04 	ldr.w	r2, [r6], #4
   88174:	6828      	ldr	r0, [r5, #0]
   88176:	b293      	uxth	r3, r2
   88178:	b284      	uxth	r4, r0
   8817a:	0c12      	lsrs	r2, r2, #16
   8817c:	fb07 4303 	mla	r3, r7, r3, r4
   88180:	0c00      	lsrs	r0, r0, #16
   88182:	fb07 0202 	mla	r2, r7, r2, r0
   88186:	440b      	add	r3, r1
   88188:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   8818c:	b29b      	uxth	r3, r3
   8818e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   88192:	45b6      	cmp	lr, r6
   88194:	f845 3b04 	str.w	r3, [r5], #4
   88198:	ea4f 4111 	mov.w	r1, r1, lsr #16
   8819c:	d8e8      	bhi.n	88170 <__multiply+0x74>
   8819e:	6029      	str	r1, [r5, #0]
   881a0:	f8dc 5000 	ldr.w	r5, [ip]
   881a4:	0c2d      	lsrs	r5, r5, #16
   881a6:	d01d      	beq.n	881e4 <__multiply+0xe8>
   881a8:	f8d9 3000 	ldr.w	r3, [r9]
   881ac:	4648      	mov	r0, r9
   881ae:	461c      	mov	r4, r3
   881b0:	4659      	mov	r1, fp
   881b2:	2200      	movs	r2, #0
   881b4:	880e      	ldrh	r6, [r1, #0]
   881b6:	0c24      	lsrs	r4, r4, #16
   881b8:	fb05 4406 	mla	r4, r5, r6, r4
   881bc:	b29b      	uxth	r3, r3
   881be:	4422      	add	r2, r4
   881c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   881c4:	f840 3b04 	str.w	r3, [r0], #4
   881c8:	f851 3b04 	ldr.w	r3, [r1], #4
   881cc:	6804      	ldr	r4, [r0, #0]
   881ce:	0c1b      	lsrs	r3, r3, #16
   881d0:	b2a6      	uxth	r6, r4
   881d2:	fb05 6303 	mla	r3, r5, r3, r6
   881d6:	458e      	cmp	lr, r1
   881d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   881dc:	ea4f 4213 	mov.w	r2, r3, lsr #16
   881e0:	d8e8      	bhi.n	881b4 <__multiply+0xb8>
   881e2:	6003      	str	r3, [r0, #0]
   881e4:	f10c 0c04 	add.w	ip, ip, #4
   881e8:	45e2      	cmp	sl, ip
   881ea:	f109 0904 	add.w	r9, r9, #4
   881ee:	d8b8      	bhi.n	88162 <__multiply+0x66>
   881f0:	f8dd a004 	ldr.w	sl, [sp, #4]
   881f4:	f1b8 0f00 	cmp.w	r8, #0
   881f8:	dd0b      	ble.n	88212 <__multiply+0x116>
   881fa:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   881fe:	f1aa 0a04 	sub.w	sl, sl, #4
   88202:	b11b      	cbz	r3, 8820c <__multiply+0x110>
   88204:	e005      	b.n	88212 <__multiply+0x116>
   88206:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8820a:	b913      	cbnz	r3, 88212 <__multiply+0x116>
   8820c:	f1b8 0801 	subs.w	r8, r8, #1
   88210:	d1f9      	bne.n	88206 <__multiply+0x10a>
   88212:	9800      	ldr	r0, [sp, #0]
   88214:	f8c0 8010 	str.w	r8, [r0, #16]
   88218:	b003      	add	sp, #12
   8821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8821e:	bf00      	nop

00088220 <__pow5mult>:
   88220:	f012 0303 	ands.w	r3, r2, #3
   88224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88228:	4614      	mov	r4, r2
   8822a:	4607      	mov	r7, r0
   8822c:	d12e      	bne.n	8828c <__pow5mult+0x6c>
   8822e:	460d      	mov	r5, r1
   88230:	10a4      	asrs	r4, r4, #2
   88232:	d01c      	beq.n	8826e <__pow5mult+0x4e>
   88234:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   88236:	b396      	cbz	r6, 8829e <__pow5mult+0x7e>
   88238:	07e3      	lsls	r3, r4, #31
   8823a:	f04f 0800 	mov.w	r8, #0
   8823e:	d406      	bmi.n	8824e <__pow5mult+0x2e>
   88240:	1064      	asrs	r4, r4, #1
   88242:	d014      	beq.n	8826e <__pow5mult+0x4e>
   88244:	6830      	ldr	r0, [r6, #0]
   88246:	b1a8      	cbz	r0, 88274 <__pow5mult+0x54>
   88248:	4606      	mov	r6, r0
   8824a:	07e3      	lsls	r3, r4, #31
   8824c:	d5f8      	bpl.n	88240 <__pow5mult+0x20>
   8824e:	4632      	mov	r2, r6
   88250:	4629      	mov	r1, r5
   88252:	4638      	mov	r0, r7
   88254:	f7ff ff52 	bl	880fc <__multiply>
   88258:	b1b5      	cbz	r5, 88288 <__pow5mult+0x68>
   8825a:	686a      	ldr	r2, [r5, #4]
   8825c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8825e:	1064      	asrs	r4, r4, #1
   88260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88264:	6029      	str	r1, [r5, #0]
   88266:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8826a:	4605      	mov	r5, r0
   8826c:	d1ea      	bne.n	88244 <__pow5mult+0x24>
   8826e:	4628      	mov	r0, r5
   88270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88274:	4632      	mov	r2, r6
   88276:	4631      	mov	r1, r6
   88278:	4638      	mov	r0, r7
   8827a:	f7ff ff3f 	bl	880fc <__multiply>
   8827e:	6030      	str	r0, [r6, #0]
   88280:	f8c0 8000 	str.w	r8, [r0]
   88284:	4606      	mov	r6, r0
   88286:	e7e0      	b.n	8824a <__pow5mult+0x2a>
   88288:	4605      	mov	r5, r0
   8828a:	e7d9      	b.n	88240 <__pow5mult+0x20>
   8828c:	4a0b      	ldr	r2, [pc, #44]	; (882bc <__pow5mult+0x9c>)
   8828e:	3b01      	subs	r3, #1
   88290:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   88294:	2300      	movs	r3, #0
   88296:	f7ff fe95 	bl	87fc4 <__multadd>
   8829a:	4605      	mov	r5, r0
   8829c:	e7c8      	b.n	88230 <__pow5mult+0x10>
   8829e:	2101      	movs	r1, #1
   882a0:	4638      	mov	r0, r7
   882a2:	f7ff fe5f 	bl	87f64 <_Balloc>
   882a6:	f240 2171 	movw	r1, #625	; 0x271
   882aa:	2201      	movs	r2, #1
   882ac:	2300      	movs	r3, #0
   882ae:	6141      	str	r1, [r0, #20]
   882b0:	6102      	str	r2, [r0, #16]
   882b2:	4606      	mov	r6, r0
   882b4:	64b8      	str	r0, [r7, #72]	; 0x48
   882b6:	6003      	str	r3, [r0, #0]
   882b8:	e7be      	b.n	88238 <__pow5mult+0x18>
   882ba:	bf00      	nop
   882bc:	0008b0a8 	.word	0x0008b0a8

000882c0 <__lshift>:
   882c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   882c4:	690b      	ldr	r3, [r1, #16]
   882c6:	1154      	asrs	r4, r2, #5
   882c8:	eb04 0803 	add.w	r8, r4, r3
   882cc:	688b      	ldr	r3, [r1, #8]
   882ce:	f108 0501 	add.w	r5, r8, #1
   882d2:	429d      	cmp	r5, r3
   882d4:	460e      	mov	r6, r1
   882d6:	4691      	mov	r9, r2
   882d8:	4607      	mov	r7, r0
   882da:	6849      	ldr	r1, [r1, #4]
   882dc:	dd04      	ble.n	882e8 <__lshift+0x28>
   882de:	005b      	lsls	r3, r3, #1
   882e0:	429d      	cmp	r5, r3
   882e2:	f101 0101 	add.w	r1, r1, #1
   882e6:	dcfa      	bgt.n	882de <__lshift+0x1e>
   882e8:	4638      	mov	r0, r7
   882ea:	f7ff fe3b 	bl	87f64 <_Balloc>
   882ee:	2c00      	cmp	r4, #0
   882f0:	f100 0314 	add.w	r3, r0, #20
   882f4:	dd06      	ble.n	88304 <__lshift+0x44>
   882f6:	2100      	movs	r1, #0
   882f8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   882fc:	f843 1b04 	str.w	r1, [r3], #4
   88300:	429a      	cmp	r2, r3
   88302:	d1fb      	bne.n	882fc <__lshift+0x3c>
   88304:	6934      	ldr	r4, [r6, #16]
   88306:	f106 0114 	add.w	r1, r6, #20
   8830a:	f019 091f 	ands.w	r9, r9, #31
   8830e:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   88312:	d01d      	beq.n	88350 <__lshift+0x90>
   88314:	2200      	movs	r2, #0
   88316:	f1c9 0c20 	rsb	ip, r9, #32
   8831a:	680c      	ldr	r4, [r1, #0]
   8831c:	fa04 f409 	lsl.w	r4, r4, r9
   88320:	4314      	orrs	r4, r2
   88322:	f843 4b04 	str.w	r4, [r3], #4
   88326:	f851 2b04 	ldr.w	r2, [r1], #4
   8832a:	458e      	cmp	lr, r1
   8832c:	fa22 f20c 	lsr.w	r2, r2, ip
   88330:	d8f3      	bhi.n	8831a <__lshift+0x5a>
   88332:	601a      	str	r2, [r3, #0]
   88334:	b10a      	cbz	r2, 8833a <__lshift+0x7a>
   88336:	f108 0502 	add.w	r5, r8, #2
   8833a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8833c:	6872      	ldr	r2, [r6, #4]
   8833e:	3d01      	subs	r5, #1
   88340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88344:	6105      	str	r5, [r0, #16]
   88346:	6031      	str	r1, [r6, #0]
   88348:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8834c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88350:	3b04      	subs	r3, #4
   88352:	f851 2b04 	ldr.w	r2, [r1], #4
   88356:	458e      	cmp	lr, r1
   88358:	f843 2f04 	str.w	r2, [r3, #4]!
   8835c:	d8f9      	bhi.n	88352 <__lshift+0x92>
   8835e:	e7ec      	b.n	8833a <__lshift+0x7a>

00088360 <__mcmp>:
   88360:	b430      	push	{r4, r5}
   88362:	690b      	ldr	r3, [r1, #16]
   88364:	4605      	mov	r5, r0
   88366:	6900      	ldr	r0, [r0, #16]
   88368:	1ac0      	subs	r0, r0, r3
   8836a:	d10f      	bne.n	8838c <__mcmp+0x2c>
   8836c:	009b      	lsls	r3, r3, #2
   8836e:	3514      	adds	r5, #20
   88370:	3114      	adds	r1, #20
   88372:	4419      	add	r1, r3
   88374:	442b      	add	r3, r5
   88376:	e001      	b.n	8837c <__mcmp+0x1c>
   88378:	429d      	cmp	r5, r3
   8837a:	d207      	bcs.n	8838c <__mcmp+0x2c>
   8837c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   88380:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88384:	4294      	cmp	r4, r2
   88386:	d0f7      	beq.n	88378 <__mcmp+0x18>
   88388:	d302      	bcc.n	88390 <__mcmp+0x30>
   8838a:	2001      	movs	r0, #1
   8838c:	bc30      	pop	{r4, r5}
   8838e:	4770      	bx	lr
   88390:	f04f 30ff 	mov.w	r0, #4294967295
   88394:	e7fa      	b.n	8838c <__mcmp+0x2c>
   88396:	bf00      	nop

00088398 <__mdiff>:
   88398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8839c:	690c      	ldr	r4, [r1, #16]
   8839e:	4689      	mov	r9, r1
   883a0:	6911      	ldr	r1, [r2, #16]
   883a2:	4692      	mov	sl, r2
   883a4:	1a64      	subs	r4, r4, r1
   883a6:	2c00      	cmp	r4, #0
   883a8:	d117      	bne.n	883da <__mdiff+0x42>
   883aa:	0089      	lsls	r1, r1, #2
   883ac:	f109 0714 	add.w	r7, r9, #20
   883b0:	f102 0614 	add.w	r6, r2, #20
   883b4:	187b      	adds	r3, r7, r1
   883b6:	4431      	add	r1, r6
   883b8:	e001      	b.n	883be <__mdiff+0x26>
   883ba:	429f      	cmp	r7, r3
   883bc:	d265      	bcs.n	8848a <__mdiff+0xf2>
   883be:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   883c2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   883c6:	4295      	cmp	r5, r2
   883c8:	d0f7      	beq.n	883ba <__mdiff+0x22>
   883ca:	d267      	bcs.n	8849c <__mdiff+0x104>
   883cc:	464b      	mov	r3, r9
   883ce:	46bb      	mov	fp, r7
   883d0:	46d1      	mov	r9, sl
   883d2:	4637      	mov	r7, r6
   883d4:	469a      	mov	sl, r3
   883d6:	2401      	movs	r4, #1
   883d8:	e005      	b.n	883e6 <__mdiff+0x4e>
   883da:	db61      	blt.n	884a0 <__mdiff+0x108>
   883dc:	2400      	movs	r4, #0
   883de:	f109 0714 	add.w	r7, r9, #20
   883e2:	f10a 0b14 	add.w	fp, sl, #20
   883e6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   883ea:	f7ff fdbb 	bl	87f64 <_Balloc>
   883ee:	465d      	mov	r5, fp
   883f0:	f04f 0800 	mov.w	r8, #0
   883f4:	f8d9 e010 	ldr.w	lr, [r9, #16]
   883f8:	f8da 3010 	ldr.w	r3, [sl, #16]
   883fc:	463e      	mov	r6, r7
   883fe:	60c4      	str	r4, [r0, #12]
   88400:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   88404:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   88408:	f100 0414 	add.w	r4, r0, #20
   8840c:	f856 9b04 	ldr.w	r9, [r6], #4
   88410:	f855 2b04 	ldr.w	r2, [r5], #4
   88414:	fa1f f389 	uxth.w	r3, r9
   88418:	4443      	add	r3, r8
   8841a:	fa1f f882 	uxth.w	r8, r2
   8841e:	0c12      	lsrs	r2, r2, #16
   88420:	eba3 0308 	sub.w	r3, r3, r8
   88424:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   88428:	eb02 4223 	add.w	r2, r2, r3, asr #16
   8842c:	b29b      	uxth	r3, r3
   8842e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88432:	45ac      	cmp	ip, r5
   88434:	f844 3b04 	str.w	r3, [r4], #4
   88438:	ea4f 4822 	mov.w	r8, r2, asr #16
   8843c:	d8e6      	bhi.n	8840c <__mdiff+0x74>
   8843e:	42b7      	cmp	r7, r6
   88440:	d917      	bls.n	88472 <__mdiff+0xda>
   88442:	46a4      	mov	ip, r4
   88444:	4635      	mov	r5, r6
   88446:	f855 3b04 	ldr.w	r3, [r5], #4
   8844a:	b299      	uxth	r1, r3
   8844c:	4441      	add	r1, r8
   8844e:	140a      	asrs	r2, r1, #16
   88450:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   88454:	b289      	uxth	r1, r1
   88456:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8845a:	42af      	cmp	r7, r5
   8845c:	f84c 3b04 	str.w	r3, [ip], #4
   88460:	ea4f 4822 	mov.w	r8, r2, asr #16
   88464:	d8ef      	bhi.n	88446 <__mdiff+0xae>
   88466:	43f6      	mvns	r6, r6
   88468:	4437      	add	r7, r6
   8846a:	f027 0703 	bic.w	r7, r7, #3
   8846e:	3704      	adds	r7, #4
   88470:	443c      	add	r4, r7
   88472:	3c04      	subs	r4, #4
   88474:	b92b      	cbnz	r3, 88482 <__mdiff+0xea>
   88476:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8847a:	f10e 3eff 	add.w	lr, lr, #4294967295
   8847e:	2b00      	cmp	r3, #0
   88480:	d0f9      	beq.n	88476 <__mdiff+0xde>
   88482:	f8c0 e010 	str.w	lr, [r0, #16]
   88486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8848a:	2100      	movs	r1, #0
   8848c:	f7ff fd6a 	bl	87f64 <_Balloc>
   88490:	2201      	movs	r2, #1
   88492:	2300      	movs	r3, #0
   88494:	6102      	str	r2, [r0, #16]
   88496:	6143      	str	r3, [r0, #20]
   88498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8849c:	46b3      	mov	fp, r6
   8849e:	e7a2      	b.n	883e6 <__mdiff+0x4e>
   884a0:	464b      	mov	r3, r9
   884a2:	f109 0b14 	add.w	fp, r9, #20
   884a6:	f102 0714 	add.w	r7, r2, #20
   884aa:	4691      	mov	r9, r2
   884ac:	2401      	movs	r4, #1
   884ae:	469a      	mov	sl, r3
   884b0:	e799      	b.n	883e6 <__mdiff+0x4e>
   884b2:	bf00      	nop

000884b4 <__d2b>:
   884b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   884b6:	2101      	movs	r1, #1
   884b8:	b083      	sub	sp, #12
   884ba:	461c      	mov	r4, r3
   884bc:	f3c3 550a 	ubfx	r5, r3, #20, #11
   884c0:	4616      	mov	r6, r2
   884c2:	f7ff fd4f 	bl	87f64 <_Balloc>
   884c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   884ca:	4607      	mov	r7, r0
   884cc:	b10d      	cbz	r5, 884d2 <__d2b+0x1e>
   884ce:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   884d2:	9401      	str	r4, [sp, #4]
   884d4:	b306      	cbz	r6, 88518 <__d2b+0x64>
   884d6:	a802      	add	r0, sp, #8
   884d8:	f840 6d08 	str.w	r6, [r0, #-8]!
   884dc:	f7ff fdd4 	bl	88088 <__lo0bits>
   884e0:	2800      	cmp	r0, #0
   884e2:	d130      	bne.n	88546 <__d2b+0x92>
   884e4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   884e8:	617a      	str	r2, [r7, #20]
   884ea:	2b00      	cmp	r3, #0
   884ec:	bf0c      	ite	eq
   884ee:	2101      	moveq	r1, #1
   884f0:	2102      	movne	r1, #2
   884f2:	61bb      	str	r3, [r7, #24]
   884f4:	6139      	str	r1, [r7, #16]
   884f6:	b9d5      	cbnz	r5, 8852e <__d2b+0x7a>
   884f8:	9a08      	ldr	r2, [sp, #32]
   884fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   884fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   88502:	6010      	str	r0, [r2, #0]
   88504:	6918      	ldr	r0, [r3, #16]
   88506:	f7ff fd9f 	bl	88048 <__hi0bits>
   8850a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8850c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   88510:	6018      	str	r0, [r3, #0]
   88512:	4638      	mov	r0, r7
   88514:	b003      	add	sp, #12
   88516:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88518:	a801      	add	r0, sp, #4
   8851a:	f7ff fdb5 	bl	88088 <__lo0bits>
   8851e:	2201      	movs	r2, #1
   88520:	9b01      	ldr	r3, [sp, #4]
   88522:	4611      	mov	r1, r2
   88524:	3020      	adds	r0, #32
   88526:	613a      	str	r2, [r7, #16]
   88528:	617b      	str	r3, [r7, #20]
   8852a:	2d00      	cmp	r5, #0
   8852c:	d0e4      	beq.n	884f8 <__d2b+0x44>
   8852e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   88532:	9a08      	ldr	r2, [sp, #32]
   88534:	4403      	add	r3, r0
   88536:	6013      	str	r3, [r2, #0]
   88538:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8853a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8853e:	6018      	str	r0, [r3, #0]
   88540:	4638      	mov	r0, r7
   88542:	b003      	add	sp, #12
   88544:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88546:	9b01      	ldr	r3, [sp, #4]
   88548:	f1c0 0220 	rsb	r2, r0, #32
   8854c:	9900      	ldr	r1, [sp, #0]
   8854e:	fa03 f202 	lsl.w	r2, r3, r2
   88552:	430a      	orrs	r2, r1
   88554:	40c3      	lsrs	r3, r0
   88556:	9301      	str	r3, [sp, #4]
   88558:	617a      	str	r2, [r7, #20]
   8855a:	e7c6      	b.n	884ea <__d2b+0x36>

0008855c <_sbrk_r>:
   8855c:	b538      	push	{r3, r4, r5, lr}
   8855e:	2300      	movs	r3, #0
   88560:	4c06      	ldr	r4, [pc, #24]	; (8857c <_sbrk_r+0x20>)
   88562:	4605      	mov	r5, r0
   88564:	4608      	mov	r0, r1
   88566:	6023      	str	r3, [r4, #0]
   88568:	f7fc fa92 	bl	84a90 <_sbrk>
   8856c:	1c43      	adds	r3, r0, #1
   8856e:	d000      	beq.n	88572 <_sbrk_r+0x16>
   88570:	bd38      	pop	{r3, r4, r5, pc}
   88572:	6823      	ldr	r3, [r4, #0]
   88574:	2b00      	cmp	r3, #0
   88576:	d0fb      	beq.n	88570 <_sbrk_r+0x14>
   88578:	602b      	str	r3, [r5, #0]
   8857a:	bd38      	pop	{r3, r4, r5, pc}
   8857c:	200029f0 	.word	0x200029f0

00088580 <__ssprint_r>:
   88580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88584:	6893      	ldr	r3, [r2, #8]
   88586:	b083      	sub	sp, #12
   88588:	4690      	mov	r8, r2
   8858a:	2b00      	cmp	r3, #0
   8858c:	d070      	beq.n	88670 <__ssprint_r+0xf0>
   8858e:	4682      	mov	sl, r0
   88590:	460c      	mov	r4, r1
   88592:	6817      	ldr	r7, [r2, #0]
   88594:	688d      	ldr	r5, [r1, #8]
   88596:	6808      	ldr	r0, [r1, #0]
   88598:	e042      	b.n	88620 <__ssprint_r+0xa0>
   8859a:	89a3      	ldrh	r3, [r4, #12]
   8859c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   885a0:	d02e      	beq.n	88600 <__ssprint_r+0x80>
   885a2:	6965      	ldr	r5, [r4, #20]
   885a4:	6921      	ldr	r1, [r4, #16]
   885a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   885aa:	eba0 0b01 	sub.w	fp, r0, r1
   885ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   885b2:	f10b 0001 	add.w	r0, fp, #1
   885b6:	106d      	asrs	r5, r5, #1
   885b8:	4430      	add	r0, r6
   885ba:	42a8      	cmp	r0, r5
   885bc:	462a      	mov	r2, r5
   885be:	bf84      	itt	hi
   885c0:	4605      	movhi	r5, r0
   885c2:	462a      	movhi	r2, r5
   885c4:	055b      	lsls	r3, r3, #21
   885c6:	d538      	bpl.n	8863a <__ssprint_r+0xba>
   885c8:	4611      	mov	r1, r2
   885ca:	4650      	mov	r0, sl
   885cc:	f7ff f952 	bl	87874 <_malloc_r>
   885d0:	2800      	cmp	r0, #0
   885d2:	d03c      	beq.n	8864e <__ssprint_r+0xce>
   885d4:	465a      	mov	r2, fp
   885d6:	6921      	ldr	r1, [r4, #16]
   885d8:	9001      	str	r0, [sp, #4]
   885da:	f7ff fc49 	bl	87e70 <memcpy>
   885de:	89a2      	ldrh	r2, [r4, #12]
   885e0:	9b01      	ldr	r3, [sp, #4]
   885e2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   885e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   885ea:	81a2      	strh	r2, [r4, #12]
   885ec:	eba5 020b 	sub.w	r2, r5, fp
   885f0:	eb03 000b 	add.w	r0, r3, fp
   885f4:	6165      	str	r5, [r4, #20]
   885f6:	46b3      	mov	fp, r6
   885f8:	4635      	mov	r5, r6
   885fa:	6123      	str	r3, [r4, #16]
   885fc:	6020      	str	r0, [r4, #0]
   885fe:	60a2      	str	r2, [r4, #8]
   88600:	465a      	mov	r2, fp
   88602:	4649      	mov	r1, r9
   88604:	f000 fa02 	bl	88a0c <memmove>
   88608:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8860c:	68a2      	ldr	r2, [r4, #8]
   8860e:	6820      	ldr	r0, [r4, #0]
   88610:	1b55      	subs	r5, r2, r5
   88612:	4458      	add	r0, fp
   88614:	1b9e      	subs	r6, r3, r6
   88616:	60a5      	str	r5, [r4, #8]
   88618:	6020      	str	r0, [r4, #0]
   8861a:	f8c8 6008 	str.w	r6, [r8, #8]
   8861e:	b33e      	cbz	r6, 88670 <__ssprint_r+0xf0>
   88620:	687e      	ldr	r6, [r7, #4]
   88622:	463b      	mov	r3, r7
   88624:	3708      	adds	r7, #8
   88626:	2e00      	cmp	r6, #0
   88628:	d0fa      	beq.n	88620 <__ssprint_r+0xa0>
   8862a:	42ae      	cmp	r6, r5
   8862c:	f8d3 9000 	ldr.w	r9, [r3]
   88630:	46ab      	mov	fp, r5
   88632:	d2b2      	bcs.n	8859a <__ssprint_r+0x1a>
   88634:	4635      	mov	r5, r6
   88636:	46b3      	mov	fp, r6
   88638:	e7e2      	b.n	88600 <__ssprint_r+0x80>
   8863a:	4650      	mov	r0, sl
   8863c:	f000 fa4a 	bl	88ad4 <_realloc_r>
   88640:	4603      	mov	r3, r0
   88642:	2800      	cmp	r0, #0
   88644:	d1d2      	bne.n	885ec <__ssprint_r+0x6c>
   88646:	6921      	ldr	r1, [r4, #16]
   88648:	4650      	mov	r0, sl
   8864a:	f000 f8f9 	bl	88840 <_free_r>
   8864e:	230c      	movs	r3, #12
   88650:	2200      	movs	r2, #0
   88652:	f04f 30ff 	mov.w	r0, #4294967295
   88656:	f8ca 3000 	str.w	r3, [sl]
   8865a:	89a3      	ldrh	r3, [r4, #12]
   8865c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88660:	81a3      	strh	r3, [r4, #12]
   88662:	f8c8 2008 	str.w	r2, [r8, #8]
   88666:	f8c8 2004 	str.w	r2, [r8, #4]
   8866a:	b003      	add	sp, #12
   8866c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88670:	2000      	movs	r0, #0
   88672:	f8c8 0004 	str.w	r0, [r8, #4]
   88676:	b003      	add	sp, #12
   88678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008867c <__ascii_wctomb>:
   8867c:	b119      	cbz	r1, 88686 <__ascii_wctomb+0xa>
   8867e:	2aff      	cmp	r2, #255	; 0xff
   88680:	d803      	bhi.n	8868a <__ascii_wctomb+0xe>
   88682:	700a      	strb	r2, [r1, #0]
   88684:	2101      	movs	r1, #1
   88686:	4608      	mov	r0, r1
   88688:	4770      	bx	lr
   8868a:	238a      	movs	r3, #138	; 0x8a
   8868c:	f04f 31ff 	mov.w	r1, #4294967295
   88690:	6003      	str	r3, [r0, #0]
   88692:	e7f8      	b.n	88686 <__ascii_wctomb+0xa>

00088694 <__register_exitproc>:
   88694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   88698:	4c27      	ldr	r4, [pc, #156]	; (88738 <__register_exitproc+0xa4>)
   8869a:	4607      	mov	r7, r0
   8869c:	6826      	ldr	r6, [r4, #0]
   8869e:	4688      	mov	r8, r1
   886a0:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   886a4:	4692      	mov	sl, r2
   886a6:	4699      	mov	r9, r3
   886a8:	2c00      	cmp	r4, #0
   886aa:	d03c      	beq.n	88726 <__register_exitproc+0x92>
   886ac:	6865      	ldr	r5, [r4, #4]
   886ae:	2d1f      	cmp	r5, #31
   886b0:	dc1a      	bgt.n	886e8 <__register_exitproc+0x54>
   886b2:	f105 0e01 	add.w	lr, r5, #1
   886b6:	b17f      	cbz	r7, 886d8 <__register_exitproc+0x44>
   886b8:	2001      	movs	r0, #1
   886ba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   886be:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   886c2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
   886c6:	fa00 f205 	lsl.w	r2, r0, r5
   886ca:	4311      	orrs	r1, r2
   886cc:	2f02      	cmp	r7, #2
   886ce:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
   886d2:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   886d6:	d020      	beq.n	8871a <__register_exitproc+0x86>
   886d8:	3502      	adds	r5, #2
   886da:	f8c4 e004 	str.w	lr, [r4, #4]
   886de:	2000      	movs	r0, #0
   886e0:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
   886e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   886e8:	4b14      	ldr	r3, [pc, #80]	; (8873c <__register_exitproc+0xa8>)
   886ea:	b30b      	cbz	r3, 88730 <__register_exitproc+0x9c>
   886ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
   886f0:	f3af 8000 	nop.w
   886f4:	4604      	mov	r4, r0
   886f6:	b1d8      	cbz	r0, 88730 <__register_exitproc+0x9c>
   886f8:	2000      	movs	r0, #0
   886fa:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
   886fe:	f04f 0e01 	mov.w	lr, #1
   88702:	6060      	str	r0, [r4, #4]
   88704:	6023      	str	r3, [r4, #0]
   88706:	4605      	mov	r5, r0
   88708:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8870c:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   88710:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   88714:	2f00      	cmp	r7, #0
   88716:	d0df      	beq.n	886d8 <__register_exitproc+0x44>
   88718:	e7ce      	b.n	886b8 <__register_exitproc+0x24>
   8871a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8871e:	431a      	orrs	r2, r3
   88720:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   88724:	e7d8      	b.n	886d8 <__register_exitproc+0x44>
   88726:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   8872a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8872e:	e7bd      	b.n	886ac <__register_exitproc+0x18>
   88730:	f04f 30ff 	mov.w	r0, #4294967295
   88734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88738:	0008af30 	.word	0x0008af30
   8873c:	00000000 	.word	0x00000000

00088740 <_calloc_r>:
   88740:	b510      	push	{r4, lr}
   88742:	fb02 f101 	mul.w	r1, r2, r1
   88746:	f7ff f895 	bl	87874 <_malloc_r>
   8874a:	4604      	mov	r4, r0
   8874c:	b1d8      	cbz	r0, 88786 <_calloc_r+0x46>
   8874e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   88752:	f022 0203 	bic.w	r2, r2, #3
   88756:	3a04      	subs	r2, #4
   88758:	2a24      	cmp	r2, #36	; 0x24
   8875a:	d818      	bhi.n	8878e <_calloc_r+0x4e>
   8875c:	2a13      	cmp	r2, #19
   8875e:	d914      	bls.n	8878a <_calloc_r+0x4a>
   88760:	2300      	movs	r3, #0
   88762:	2a1b      	cmp	r2, #27
   88764:	6003      	str	r3, [r0, #0]
   88766:	6043      	str	r3, [r0, #4]
   88768:	d916      	bls.n	88798 <_calloc_r+0x58>
   8876a:	2a24      	cmp	r2, #36	; 0x24
   8876c:	6083      	str	r3, [r0, #8]
   8876e:	60c3      	str	r3, [r0, #12]
   88770:	bf11      	iteee	ne
   88772:	f100 0210 	addne.w	r2, r0, #16
   88776:	6103      	streq	r3, [r0, #16]
   88778:	6143      	streq	r3, [r0, #20]
   8877a:	f100 0218 	addeq.w	r2, r0, #24
   8877e:	2300      	movs	r3, #0
   88780:	6013      	str	r3, [r2, #0]
   88782:	6053      	str	r3, [r2, #4]
   88784:	6093      	str	r3, [r2, #8]
   88786:	4620      	mov	r0, r4
   88788:	bd10      	pop	{r4, pc}
   8878a:	4602      	mov	r2, r0
   8878c:	e7f7      	b.n	8877e <_calloc_r+0x3e>
   8878e:	2100      	movs	r1, #0
   88790:	f7fc fc7a 	bl	85088 <memset>
   88794:	4620      	mov	r0, r4
   88796:	bd10      	pop	{r4, pc}
   88798:	f100 0208 	add.w	r2, r0, #8
   8879c:	e7ef      	b.n	8877e <_calloc_r+0x3e>
   8879e:	bf00      	nop

000887a0 <_malloc_trim_r>:
   887a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   887a2:	460c      	mov	r4, r1
   887a4:	4f23      	ldr	r7, [pc, #140]	; (88834 <_malloc_trim_r+0x94>)
   887a6:	4606      	mov	r6, r0
   887a8:	f7ff fbd8 	bl	87f5c <__malloc_lock>
   887ac:	68bb      	ldr	r3, [r7, #8]
   887ae:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   887b2:	685d      	ldr	r5, [r3, #4]
   887b4:	310f      	adds	r1, #15
   887b6:	f025 0503 	bic.w	r5, r5, #3
   887ba:	4429      	add	r1, r5
   887bc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   887c0:	f021 010f 	bic.w	r1, r1, #15
   887c4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   887c8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   887cc:	db07      	blt.n	887de <_malloc_trim_r+0x3e>
   887ce:	2100      	movs	r1, #0
   887d0:	4630      	mov	r0, r6
   887d2:	f7ff fec3 	bl	8855c <_sbrk_r>
   887d6:	68bb      	ldr	r3, [r7, #8]
   887d8:	442b      	add	r3, r5
   887da:	4298      	cmp	r0, r3
   887dc:	d004      	beq.n	887e8 <_malloc_trim_r+0x48>
   887de:	4630      	mov	r0, r6
   887e0:	f7ff fbbe 	bl	87f60 <__malloc_unlock>
   887e4:	2000      	movs	r0, #0
   887e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   887e8:	4261      	negs	r1, r4
   887ea:	4630      	mov	r0, r6
   887ec:	f7ff feb6 	bl	8855c <_sbrk_r>
   887f0:	3001      	adds	r0, #1
   887f2:	d00d      	beq.n	88810 <_malloc_trim_r+0x70>
   887f4:	4b10      	ldr	r3, [pc, #64]	; (88838 <_malloc_trim_r+0x98>)
   887f6:	68ba      	ldr	r2, [r7, #8]
   887f8:	6819      	ldr	r1, [r3, #0]
   887fa:	1b2d      	subs	r5, r5, r4
   887fc:	f045 0501 	orr.w	r5, r5, #1
   88800:	4630      	mov	r0, r6
   88802:	1b09      	subs	r1, r1, r4
   88804:	6055      	str	r5, [r2, #4]
   88806:	6019      	str	r1, [r3, #0]
   88808:	f7ff fbaa 	bl	87f60 <__malloc_unlock>
   8880c:	2001      	movs	r0, #1
   8880e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88810:	2100      	movs	r1, #0
   88812:	4630      	mov	r0, r6
   88814:	f7ff fea2 	bl	8855c <_sbrk_r>
   88818:	68ba      	ldr	r2, [r7, #8]
   8881a:	1a83      	subs	r3, r0, r2
   8881c:	2b0f      	cmp	r3, #15
   8881e:	ddde      	ble.n	887de <_malloc_trim_r+0x3e>
   88820:	4c06      	ldr	r4, [pc, #24]	; (8883c <_malloc_trim_r+0x9c>)
   88822:	4905      	ldr	r1, [pc, #20]	; (88838 <_malloc_trim_r+0x98>)
   88824:	6824      	ldr	r4, [r4, #0]
   88826:	f043 0301 	orr.w	r3, r3, #1
   8882a:	1b00      	subs	r0, r0, r4
   8882c:	6053      	str	r3, [r2, #4]
   8882e:	6008      	str	r0, [r1, #0]
   88830:	e7d5      	b.n	887de <_malloc_trim_r+0x3e>
   88832:	bf00      	nop
   88834:	20000bcc 	.word	0x20000bcc
   88838:	20001188 	.word	0x20001188
   8883c:	20000fd4 	.word	0x20000fd4

00088840 <_free_r>:
   88840:	2900      	cmp	r1, #0
   88842:	d044      	beq.n	888ce <_free_r+0x8e>
   88844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88848:	460d      	mov	r5, r1
   8884a:	4680      	mov	r8, r0
   8884c:	f7ff fb86 	bl	87f5c <__malloc_lock>
   88850:	f855 7c04 	ldr.w	r7, [r5, #-4]
   88854:	4969      	ldr	r1, [pc, #420]	; (889fc <_free_r+0x1bc>)
   88856:	f1a5 0408 	sub.w	r4, r5, #8
   8885a:	f027 0301 	bic.w	r3, r7, #1
   8885e:	18e2      	adds	r2, r4, r3
   88860:	688e      	ldr	r6, [r1, #8]
   88862:	6850      	ldr	r0, [r2, #4]
   88864:	42b2      	cmp	r2, r6
   88866:	f020 0003 	bic.w	r0, r0, #3
   8886a:	d05e      	beq.n	8892a <_free_r+0xea>
   8886c:	07fe      	lsls	r6, r7, #31
   8886e:	6050      	str	r0, [r2, #4]
   88870:	d40b      	bmi.n	8888a <_free_r+0x4a>
   88872:	f855 7c08 	ldr.w	r7, [r5, #-8]
   88876:	f101 0e08 	add.w	lr, r1, #8
   8887a:	1be4      	subs	r4, r4, r7
   8887c:	68a5      	ldr	r5, [r4, #8]
   8887e:	443b      	add	r3, r7
   88880:	4575      	cmp	r5, lr
   88882:	d06d      	beq.n	88960 <_free_r+0x120>
   88884:	68e7      	ldr	r7, [r4, #12]
   88886:	60ef      	str	r7, [r5, #12]
   88888:	60bd      	str	r5, [r7, #8]
   8888a:	1815      	adds	r5, r2, r0
   8888c:	686d      	ldr	r5, [r5, #4]
   8888e:	07ed      	lsls	r5, r5, #31
   88890:	d53e      	bpl.n	88910 <_free_r+0xd0>
   88892:	f043 0201 	orr.w	r2, r3, #1
   88896:	6062      	str	r2, [r4, #4]
   88898:	50e3      	str	r3, [r4, r3]
   8889a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8889e:	d217      	bcs.n	888d0 <_free_r+0x90>
   888a0:	2201      	movs	r2, #1
   888a2:	08db      	lsrs	r3, r3, #3
   888a4:	1098      	asrs	r0, r3, #2
   888a6:	684d      	ldr	r5, [r1, #4]
   888a8:	4413      	add	r3, r2
   888aa:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   888ae:	4082      	lsls	r2, r0
   888b0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   888b4:	432a      	orrs	r2, r5
   888b6:	3808      	subs	r0, #8
   888b8:	60e0      	str	r0, [r4, #12]
   888ba:	60a7      	str	r7, [r4, #8]
   888bc:	604a      	str	r2, [r1, #4]
   888be:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   888c2:	60fc      	str	r4, [r7, #12]
   888c4:	4640      	mov	r0, r8
   888c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   888ca:	f7ff bb49 	b.w	87f60 <__malloc_unlock>
   888ce:	4770      	bx	lr
   888d0:	0a5a      	lsrs	r2, r3, #9
   888d2:	2a04      	cmp	r2, #4
   888d4:	d852      	bhi.n	8897c <_free_r+0x13c>
   888d6:	099a      	lsrs	r2, r3, #6
   888d8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   888dc:	00ff      	lsls	r7, r7, #3
   888de:	f102 0538 	add.w	r5, r2, #56	; 0x38
   888e2:	19c8      	adds	r0, r1, r7
   888e4:	59ca      	ldr	r2, [r1, r7]
   888e6:	3808      	subs	r0, #8
   888e8:	4290      	cmp	r0, r2
   888ea:	d04f      	beq.n	8898c <_free_r+0x14c>
   888ec:	6851      	ldr	r1, [r2, #4]
   888ee:	f021 0103 	bic.w	r1, r1, #3
   888f2:	428b      	cmp	r3, r1
   888f4:	d232      	bcs.n	8895c <_free_r+0x11c>
   888f6:	6892      	ldr	r2, [r2, #8]
   888f8:	4290      	cmp	r0, r2
   888fa:	d1f7      	bne.n	888ec <_free_r+0xac>
   888fc:	68c3      	ldr	r3, [r0, #12]
   888fe:	60a0      	str	r0, [r4, #8]
   88900:	60e3      	str	r3, [r4, #12]
   88902:	609c      	str	r4, [r3, #8]
   88904:	60c4      	str	r4, [r0, #12]
   88906:	4640      	mov	r0, r8
   88908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8890c:	f7ff bb28 	b.w	87f60 <__malloc_unlock>
   88910:	6895      	ldr	r5, [r2, #8]
   88912:	4f3b      	ldr	r7, [pc, #236]	; (88a00 <_free_r+0x1c0>)
   88914:	4403      	add	r3, r0
   88916:	42bd      	cmp	r5, r7
   88918:	d040      	beq.n	8899c <_free_r+0x15c>
   8891a:	68d0      	ldr	r0, [r2, #12]
   8891c:	f043 0201 	orr.w	r2, r3, #1
   88920:	60e8      	str	r0, [r5, #12]
   88922:	6085      	str	r5, [r0, #8]
   88924:	6062      	str	r2, [r4, #4]
   88926:	50e3      	str	r3, [r4, r3]
   88928:	e7b7      	b.n	8889a <_free_r+0x5a>
   8892a:	07ff      	lsls	r7, r7, #31
   8892c:	4403      	add	r3, r0
   8892e:	d407      	bmi.n	88940 <_free_r+0x100>
   88930:	f855 5c08 	ldr.w	r5, [r5, #-8]
   88934:	1b64      	subs	r4, r4, r5
   88936:	68e2      	ldr	r2, [r4, #12]
   88938:	68a0      	ldr	r0, [r4, #8]
   8893a:	442b      	add	r3, r5
   8893c:	60c2      	str	r2, [r0, #12]
   8893e:	6090      	str	r0, [r2, #8]
   88940:	4a30      	ldr	r2, [pc, #192]	; (88a04 <_free_r+0x1c4>)
   88942:	f043 0001 	orr.w	r0, r3, #1
   88946:	6812      	ldr	r2, [r2, #0]
   88948:	6060      	str	r0, [r4, #4]
   8894a:	4293      	cmp	r3, r2
   8894c:	608c      	str	r4, [r1, #8]
   8894e:	d3b9      	bcc.n	888c4 <_free_r+0x84>
   88950:	4b2d      	ldr	r3, [pc, #180]	; (88a08 <_free_r+0x1c8>)
   88952:	4640      	mov	r0, r8
   88954:	6819      	ldr	r1, [r3, #0]
   88956:	f7ff ff23 	bl	887a0 <_malloc_trim_r>
   8895a:	e7b3      	b.n	888c4 <_free_r+0x84>
   8895c:	4610      	mov	r0, r2
   8895e:	e7cd      	b.n	888fc <_free_r+0xbc>
   88960:	1811      	adds	r1, r2, r0
   88962:	6849      	ldr	r1, [r1, #4]
   88964:	07c9      	lsls	r1, r1, #31
   88966:	d444      	bmi.n	889f2 <_free_r+0x1b2>
   88968:	6891      	ldr	r1, [r2, #8]
   8896a:	4403      	add	r3, r0
   8896c:	68d2      	ldr	r2, [r2, #12]
   8896e:	f043 0001 	orr.w	r0, r3, #1
   88972:	60ca      	str	r2, [r1, #12]
   88974:	6091      	str	r1, [r2, #8]
   88976:	6060      	str	r0, [r4, #4]
   88978:	50e3      	str	r3, [r4, r3]
   8897a:	e7a3      	b.n	888c4 <_free_r+0x84>
   8897c:	2a14      	cmp	r2, #20
   8897e:	d816      	bhi.n	889ae <_free_r+0x16e>
   88980:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   88984:	00ff      	lsls	r7, r7, #3
   88986:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8898a:	e7aa      	b.n	888e2 <_free_r+0xa2>
   8898c:	2301      	movs	r3, #1
   8898e:	10aa      	asrs	r2, r5, #2
   88990:	684d      	ldr	r5, [r1, #4]
   88992:	4093      	lsls	r3, r2
   88994:	432b      	orrs	r3, r5
   88996:	604b      	str	r3, [r1, #4]
   88998:	4603      	mov	r3, r0
   8899a:	e7b0      	b.n	888fe <_free_r+0xbe>
   8899c:	f043 0201 	orr.w	r2, r3, #1
   889a0:	614c      	str	r4, [r1, #20]
   889a2:	610c      	str	r4, [r1, #16]
   889a4:	60e5      	str	r5, [r4, #12]
   889a6:	60a5      	str	r5, [r4, #8]
   889a8:	6062      	str	r2, [r4, #4]
   889aa:	50e3      	str	r3, [r4, r3]
   889ac:	e78a      	b.n	888c4 <_free_r+0x84>
   889ae:	2a54      	cmp	r2, #84	; 0x54
   889b0:	d806      	bhi.n	889c0 <_free_r+0x180>
   889b2:	0b1a      	lsrs	r2, r3, #12
   889b4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   889b8:	00ff      	lsls	r7, r7, #3
   889ba:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   889be:	e790      	b.n	888e2 <_free_r+0xa2>
   889c0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   889c4:	d806      	bhi.n	889d4 <_free_r+0x194>
   889c6:	0bda      	lsrs	r2, r3, #15
   889c8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   889cc:	00ff      	lsls	r7, r7, #3
   889ce:	f102 0577 	add.w	r5, r2, #119	; 0x77
   889d2:	e786      	b.n	888e2 <_free_r+0xa2>
   889d4:	f240 5054 	movw	r0, #1364	; 0x554
   889d8:	4282      	cmp	r2, r0
   889da:	d806      	bhi.n	889ea <_free_r+0x1aa>
   889dc:	0c9a      	lsrs	r2, r3, #18
   889de:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   889e2:	00ff      	lsls	r7, r7, #3
   889e4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   889e8:	e77b      	b.n	888e2 <_free_r+0xa2>
   889ea:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   889ee:	257e      	movs	r5, #126	; 0x7e
   889f0:	e777      	b.n	888e2 <_free_r+0xa2>
   889f2:	f043 0101 	orr.w	r1, r3, #1
   889f6:	6061      	str	r1, [r4, #4]
   889f8:	6013      	str	r3, [r2, #0]
   889fa:	e763      	b.n	888c4 <_free_r+0x84>
   889fc:	20000bcc 	.word	0x20000bcc
   88a00:	20000bd4 	.word	0x20000bd4
   88a04:	20000fd8 	.word	0x20000fd8
   88a08:	200011b8 	.word	0x200011b8

00088a0c <memmove>:
   88a0c:	4288      	cmp	r0, r1
   88a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
   88a10:	d90d      	bls.n	88a2e <memmove+0x22>
   88a12:	188b      	adds	r3, r1, r2
   88a14:	4298      	cmp	r0, r3
   88a16:	d20a      	bcs.n	88a2e <memmove+0x22>
   88a18:	1884      	adds	r4, r0, r2
   88a1a:	2a00      	cmp	r2, #0
   88a1c:	d051      	beq.n	88ac2 <memmove+0xb6>
   88a1e:	4622      	mov	r2, r4
   88a20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   88a24:	4299      	cmp	r1, r3
   88a26:	f802 4d01 	strb.w	r4, [r2, #-1]!
   88a2a:	d1f9      	bne.n	88a20 <memmove+0x14>
   88a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88a2e:	2a0f      	cmp	r2, #15
   88a30:	d948      	bls.n	88ac4 <memmove+0xb8>
   88a32:	ea41 0300 	orr.w	r3, r1, r0
   88a36:	079b      	lsls	r3, r3, #30
   88a38:	d146      	bne.n	88ac8 <memmove+0xbc>
   88a3a:	4615      	mov	r5, r2
   88a3c:	f100 0410 	add.w	r4, r0, #16
   88a40:	f101 0310 	add.w	r3, r1, #16
   88a44:	f853 6c10 	ldr.w	r6, [r3, #-16]
   88a48:	3d10      	subs	r5, #16
   88a4a:	f844 6c10 	str.w	r6, [r4, #-16]
   88a4e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   88a52:	2d0f      	cmp	r5, #15
   88a54:	f844 6c0c 	str.w	r6, [r4, #-12]
   88a58:	f853 6c08 	ldr.w	r6, [r3, #-8]
   88a5c:	f104 0410 	add.w	r4, r4, #16
   88a60:	f844 6c18 	str.w	r6, [r4, #-24]
   88a64:	f853 6c04 	ldr.w	r6, [r3, #-4]
   88a68:	f103 0310 	add.w	r3, r3, #16
   88a6c:	f844 6c14 	str.w	r6, [r4, #-20]
   88a70:	d8e8      	bhi.n	88a44 <memmove+0x38>
   88a72:	f1a2 0310 	sub.w	r3, r2, #16
   88a76:	f023 030f 	bic.w	r3, r3, #15
   88a7a:	f002 0e0f 	and.w	lr, r2, #15
   88a7e:	3310      	adds	r3, #16
   88a80:	f1be 0f03 	cmp.w	lr, #3
   88a84:	4419      	add	r1, r3
   88a86:	4403      	add	r3, r0
   88a88:	d921      	bls.n	88ace <memmove+0xc2>
   88a8a:	460e      	mov	r6, r1
   88a8c:	4674      	mov	r4, lr
   88a8e:	1f1d      	subs	r5, r3, #4
   88a90:	f856 7b04 	ldr.w	r7, [r6], #4
   88a94:	3c04      	subs	r4, #4
   88a96:	2c03      	cmp	r4, #3
   88a98:	f845 7f04 	str.w	r7, [r5, #4]!
   88a9c:	d8f8      	bhi.n	88a90 <memmove+0x84>
   88a9e:	f1ae 0404 	sub.w	r4, lr, #4
   88aa2:	f024 0403 	bic.w	r4, r4, #3
   88aa6:	3404      	adds	r4, #4
   88aa8:	4421      	add	r1, r4
   88aaa:	4423      	add	r3, r4
   88aac:	f002 0203 	and.w	r2, r2, #3
   88ab0:	b162      	cbz	r2, 88acc <memmove+0xc0>
   88ab2:	3b01      	subs	r3, #1
   88ab4:	440a      	add	r2, r1
   88ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
   88aba:	428a      	cmp	r2, r1
   88abc:	f803 4f01 	strb.w	r4, [r3, #1]!
   88ac0:	d1f9      	bne.n	88ab6 <memmove+0xaa>
   88ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88ac4:	4603      	mov	r3, r0
   88ac6:	e7f3      	b.n	88ab0 <memmove+0xa4>
   88ac8:	4603      	mov	r3, r0
   88aca:	e7f2      	b.n	88ab2 <memmove+0xa6>
   88acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88ace:	4672      	mov	r2, lr
   88ad0:	e7ee      	b.n	88ab0 <memmove+0xa4>
   88ad2:	bf00      	nop

00088ad4 <_realloc_r>:
   88ad4:	2900      	cmp	r1, #0
   88ad6:	f000 8094 	beq.w	88c02 <_realloc_r+0x12e>
   88ada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88ade:	460c      	mov	r4, r1
   88ae0:	4615      	mov	r5, r2
   88ae2:	b083      	sub	sp, #12
   88ae4:	4680      	mov	r8, r0
   88ae6:	f105 060b 	add.w	r6, r5, #11
   88aea:	f7ff fa37 	bl	87f5c <__malloc_lock>
   88aee:	f854 ec04 	ldr.w	lr, [r4, #-4]
   88af2:	2e16      	cmp	r6, #22
   88af4:	f02e 0703 	bic.w	r7, lr, #3
   88af8:	f1a4 0908 	sub.w	r9, r4, #8
   88afc:	d83c      	bhi.n	88b78 <_realloc_r+0xa4>
   88afe:	2210      	movs	r2, #16
   88b00:	4616      	mov	r6, r2
   88b02:	42b5      	cmp	r5, r6
   88b04:	d83d      	bhi.n	88b82 <_realloc_r+0xae>
   88b06:	4297      	cmp	r7, r2
   88b08:	da43      	bge.n	88b92 <_realloc_r+0xbe>
   88b0a:	4bc6      	ldr	r3, [pc, #792]	; (88e24 <_realloc_r+0x350>)
   88b0c:	eb09 0007 	add.w	r0, r9, r7
   88b10:	6899      	ldr	r1, [r3, #8]
   88b12:	4288      	cmp	r0, r1
   88b14:	f000 80c3 	beq.w	88c9e <_realloc_r+0x1ca>
   88b18:	6843      	ldr	r3, [r0, #4]
   88b1a:	f023 0101 	bic.w	r1, r3, #1
   88b1e:	4401      	add	r1, r0
   88b20:	6849      	ldr	r1, [r1, #4]
   88b22:	07c9      	lsls	r1, r1, #31
   88b24:	d54d      	bpl.n	88bc2 <_realloc_r+0xee>
   88b26:	f01e 0f01 	tst.w	lr, #1
   88b2a:	f000 809b 	beq.w	88c64 <_realloc_r+0x190>
   88b2e:	4629      	mov	r1, r5
   88b30:	4640      	mov	r0, r8
   88b32:	f7fe fe9f 	bl	87874 <_malloc_r>
   88b36:	4605      	mov	r5, r0
   88b38:	2800      	cmp	r0, #0
   88b3a:	d03b      	beq.n	88bb4 <_realloc_r+0xe0>
   88b3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88b40:	f1a0 0208 	sub.w	r2, r0, #8
   88b44:	f023 0301 	bic.w	r3, r3, #1
   88b48:	444b      	add	r3, r9
   88b4a:	429a      	cmp	r2, r3
   88b4c:	f000 812b 	beq.w	88da6 <_realloc_r+0x2d2>
   88b50:	1f3a      	subs	r2, r7, #4
   88b52:	2a24      	cmp	r2, #36	; 0x24
   88b54:	f200 8118 	bhi.w	88d88 <_realloc_r+0x2b4>
   88b58:	2a13      	cmp	r2, #19
   88b5a:	f200 80eb 	bhi.w	88d34 <_realloc_r+0x260>
   88b5e:	4603      	mov	r3, r0
   88b60:	4622      	mov	r2, r4
   88b62:	6811      	ldr	r1, [r2, #0]
   88b64:	6019      	str	r1, [r3, #0]
   88b66:	6851      	ldr	r1, [r2, #4]
   88b68:	6059      	str	r1, [r3, #4]
   88b6a:	6892      	ldr	r2, [r2, #8]
   88b6c:	609a      	str	r2, [r3, #8]
   88b6e:	4621      	mov	r1, r4
   88b70:	4640      	mov	r0, r8
   88b72:	f7ff fe65 	bl	88840 <_free_r>
   88b76:	e01d      	b.n	88bb4 <_realloc_r+0xe0>
   88b78:	f026 0607 	bic.w	r6, r6, #7
   88b7c:	2e00      	cmp	r6, #0
   88b7e:	4632      	mov	r2, r6
   88b80:	dabf      	bge.n	88b02 <_realloc_r+0x2e>
   88b82:	2500      	movs	r5, #0
   88b84:	230c      	movs	r3, #12
   88b86:	4628      	mov	r0, r5
   88b88:	f8c8 3000 	str.w	r3, [r8]
   88b8c:	b003      	add	sp, #12
   88b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88b92:	4625      	mov	r5, r4
   88b94:	1bbb      	subs	r3, r7, r6
   88b96:	2b0f      	cmp	r3, #15
   88b98:	f8d9 2004 	ldr.w	r2, [r9, #4]
   88b9c:	d81d      	bhi.n	88bda <_realloc_r+0x106>
   88b9e:	f002 0201 	and.w	r2, r2, #1
   88ba2:	433a      	orrs	r2, r7
   88ba4:	eb09 0107 	add.w	r1, r9, r7
   88ba8:	f8c9 2004 	str.w	r2, [r9, #4]
   88bac:	684b      	ldr	r3, [r1, #4]
   88bae:	f043 0301 	orr.w	r3, r3, #1
   88bb2:	604b      	str	r3, [r1, #4]
   88bb4:	4640      	mov	r0, r8
   88bb6:	f7ff f9d3 	bl	87f60 <__malloc_unlock>
   88bba:	4628      	mov	r0, r5
   88bbc:	b003      	add	sp, #12
   88bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88bc2:	f023 0303 	bic.w	r3, r3, #3
   88bc6:	18f9      	adds	r1, r7, r3
   88bc8:	4291      	cmp	r1, r2
   88bca:	db1d      	blt.n	88c08 <_realloc_r+0x134>
   88bcc:	68c3      	ldr	r3, [r0, #12]
   88bce:	6882      	ldr	r2, [r0, #8]
   88bd0:	4625      	mov	r5, r4
   88bd2:	60d3      	str	r3, [r2, #12]
   88bd4:	460f      	mov	r7, r1
   88bd6:	609a      	str	r2, [r3, #8]
   88bd8:	e7dc      	b.n	88b94 <_realloc_r+0xc0>
   88bda:	f002 0201 	and.w	r2, r2, #1
   88bde:	eb09 0106 	add.w	r1, r9, r6
   88be2:	f043 0301 	orr.w	r3, r3, #1
   88be6:	4332      	orrs	r2, r6
   88be8:	f8c9 2004 	str.w	r2, [r9, #4]
   88bec:	444f      	add	r7, r9
   88bee:	604b      	str	r3, [r1, #4]
   88bf0:	687b      	ldr	r3, [r7, #4]
   88bf2:	3108      	adds	r1, #8
   88bf4:	f043 0301 	orr.w	r3, r3, #1
   88bf8:	607b      	str	r3, [r7, #4]
   88bfa:	4640      	mov	r0, r8
   88bfc:	f7ff fe20 	bl	88840 <_free_r>
   88c00:	e7d8      	b.n	88bb4 <_realloc_r+0xe0>
   88c02:	4611      	mov	r1, r2
   88c04:	f7fe be36 	b.w	87874 <_malloc_r>
   88c08:	f01e 0f01 	tst.w	lr, #1
   88c0c:	d18f      	bne.n	88b2e <_realloc_r+0x5a>
   88c0e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   88c12:	eba9 0a01 	sub.w	sl, r9, r1
   88c16:	f8da 1004 	ldr.w	r1, [sl, #4]
   88c1a:	f021 0103 	bic.w	r1, r1, #3
   88c1e:	440b      	add	r3, r1
   88c20:	443b      	add	r3, r7
   88c22:	4293      	cmp	r3, r2
   88c24:	db26      	blt.n	88c74 <_realloc_r+0x1a0>
   88c26:	4655      	mov	r5, sl
   88c28:	68c1      	ldr	r1, [r0, #12]
   88c2a:	6880      	ldr	r0, [r0, #8]
   88c2c:	1f3a      	subs	r2, r7, #4
   88c2e:	60c1      	str	r1, [r0, #12]
   88c30:	6088      	str	r0, [r1, #8]
   88c32:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88c36:	f8da 100c 	ldr.w	r1, [sl, #12]
   88c3a:	2a24      	cmp	r2, #36	; 0x24
   88c3c:	60c1      	str	r1, [r0, #12]
   88c3e:	6088      	str	r0, [r1, #8]
   88c40:	d826      	bhi.n	88c90 <_realloc_r+0x1bc>
   88c42:	2a13      	cmp	r2, #19
   88c44:	f240 8081 	bls.w	88d4a <_realloc_r+0x276>
   88c48:	6821      	ldr	r1, [r4, #0]
   88c4a:	2a1b      	cmp	r2, #27
   88c4c:	f8ca 1008 	str.w	r1, [sl, #8]
   88c50:	6861      	ldr	r1, [r4, #4]
   88c52:	f8ca 100c 	str.w	r1, [sl, #12]
   88c56:	f200 80ad 	bhi.w	88db4 <_realloc_r+0x2e0>
   88c5a:	f104 0008 	add.w	r0, r4, #8
   88c5e:	f10a 0210 	add.w	r2, sl, #16
   88c62:	e074      	b.n	88d4e <_realloc_r+0x27a>
   88c64:	f854 3c08 	ldr.w	r3, [r4, #-8]
   88c68:	eba9 0a03 	sub.w	sl, r9, r3
   88c6c:	f8da 1004 	ldr.w	r1, [sl, #4]
   88c70:	f021 0103 	bic.w	r1, r1, #3
   88c74:	187b      	adds	r3, r7, r1
   88c76:	4293      	cmp	r3, r2
   88c78:	f6ff af59 	blt.w	88b2e <_realloc_r+0x5a>
   88c7c:	4655      	mov	r5, sl
   88c7e:	f8da 100c 	ldr.w	r1, [sl, #12]
   88c82:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88c86:	1f3a      	subs	r2, r7, #4
   88c88:	2a24      	cmp	r2, #36	; 0x24
   88c8a:	60c1      	str	r1, [r0, #12]
   88c8c:	6088      	str	r0, [r1, #8]
   88c8e:	d9d8      	bls.n	88c42 <_realloc_r+0x16e>
   88c90:	4621      	mov	r1, r4
   88c92:	4628      	mov	r0, r5
   88c94:	461f      	mov	r7, r3
   88c96:	46d1      	mov	r9, sl
   88c98:	f7ff feb8 	bl	88a0c <memmove>
   88c9c:	e77a      	b.n	88b94 <_realloc_r+0xc0>
   88c9e:	6841      	ldr	r1, [r0, #4]
   88ca0:	f106 0010 	add.w	r0, r6, #16
   88ca4:	f021 0b03 	bic.w	fp, r1, #3
   88ca8:	44bb      	add	fp, r7
   88caa:	4583      	cmp	fp, r0
   88cac:	da58      	bge.n	88d60 <_realloc_r+0x28c>
   88cae:	f01e 0f01 	tst.w	lr, #1
   88cb2:	f47f af3c 	bne.w	88b2e <_realloc_r+0x5a>
   88cb6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   88cba:	eba9 0a01 	sub.w	sl, r9, r1
   88cbe:	f8da 1004 	ldr.w	r1, [sl, #4]
   88cc2:	f021 0103 	bic.w	r1, r1, #3
   88cc6:	448b      	add	fp, r1
   88cc8:	4558      	cmp	r0, fp
   88cca:	dcd3      	bgt.n	88c74 <_realloc_r+0x1a0>
   88ccc:	4655      	mov	r5, sl
   88cce:	f8da 100c 	ldr.w	r1, [sl, #12]
   88cd2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88cd6:	1f3a      	subs	r2, r7, #4
   88cd8:	2a24      	cmp	r2, #36	; 0x24
   88cda:	60c1      	str	r1, [r0, #12]
   88cdc:	6088      	str	r0, [r1, #8]
   88cde:	f200 808d 	bhi.w	88dfc <_realloc_r+0x328>
   88ce2:	2a13      	cmp	r2, #19
   88ce4:	f240 8087 	bls.w	88df6 <_realloc_r+0x322>
   88ce8:	6821      	ldr	r1, [r4, #0]
   88cea:	2a1b      	cmp	r2, #27
   88cec:	f8ca 1008 	str.w	r1, [sl, #8]
   88cf0:	6861      	ldr	r1, [r4, #4]
   88cf2:	f8ca 100c 	str.w	r1, [sl, #12]
   88cf6:	f200 8088 	bhi.w	88e0a <_realloc_r+0x336>
   88cfa:	f104 0108 	add.w	r1, r4, #8
   88cfe:	f10a 0210 	add.w	r2, sl, #16
   88d02:	6808      	ldr	r0, [r1, #0]
   88d04:	6010      	str	r0, [r2, #0]
   88d06:	6848      	ldr	r0, [r1, #4]
   88d08:	6050      	str	r0, [r2, #4]
   88d0a:	6889      	ldr	r1, [r1, #8]
   88d0c:	6091      	str	r1, [r2, #8]
   88d0e:	ebab 0206 	sub.w	r2, fp, r6
   88d12:	eb0a 0106 	add.w	r1, sl, r6
   88d16:	f042 0201 	orr.w	r2, r2, #1
   88d1a:	6099      	str	r1, [r3, #8]
   88d1c:	604a      	str	r2, [r1, #4]
   88d1e:	f8da 3004 	ldr.w	r3, [sl, #4]
   88d22:	4640      	mov	r0, r8
   88d24:	f003 0301 	and.w	r3, r3, #1
   88d28:	431e      	orrs	r6, r3
   88d2a:	f8ca 6004 	str.w	r6, [sl, #4]
   88d2e:	f7ff f917 	bl	87f60 <__malloc_unlock>
   88d32:	e742      	b.n	88bba <_realloc_r+0xe6>
   88d34:	6823      	ldr	r3, [r4, #0]
   88d36:	2a1b      	cmp	r2, #27
   88d38:	6003      	str	r3, [r0, #0]
   88d3a:	6863      	ldr	r3, [r4, #4]
   88d3c:	6043      	str	r3, [r0, #4]
   88d3e:	d827      	bhi.n	88d90 <_realloc_r+0x2bc>
   88d40:	f100 0308 	add.w	r3, r0, #8
   88d44:	f104 0208 	add.w	r2, r4, #8
   88d48:	e70b      	b.n	88b62 <_realloc_r+0x8e>
   88d4a:	4620      	mov	r0, r4
   88d4c:	462a      	mov	r2, r5
   88d4e:	6801      	ldr	r1, [r0, #0]
   88d50:	461f      	mov	r7, r3
   88d52:	6011      	str	r1, [r2, #0]
   88d54:	6841      	ldr	r1, [r0, #4]
   88d56:	46d1      	mov	r9, sl
   88d58:	6051      	str	r1, [r2, #4]
   88d5a:	6883      	ldr	r3, [r0, #8]
   88d5c:	6093      	str	r3, [r2, #8]
   88d5e:	e719      	b.n	88b94 <_realloc_r+0xc0>
   88d60:	ebab 0b06 	sub.w	fp, fp, r6
   88d64:	eb09 0106 	add.w	r1, r9, r6
   88d68:	f04b 0201 	orr.w	r2, fp, #1
   88d6c:	6099      	str	r1, [r3, #8]
   88d6e:	604a      	str	r2, [r1, #4]
   88d70:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88d74:	4640      	mov	r0, r8
   88d76:	f003 0301 	and.w	r3, r3, #1
   88d7a:	431e      	orrs	r6, r3
   88d7c:	f844 6c04 	str.w	r6, [r4, #-4]
   88d80:	f7ff f8ee 	bl	87f60 <__malloc_unlock>
   88d84:	4625      	mov	r5, r4
   88d86:	e718      	b.n	88bba <_realloc_r+0xe6>
   88d88:	4621      	mov	r1, r4
   88d8a:	f7ff fe3f 	bl	88a0c <memmove>
   88d8e:	e6ee      	b.n	88b6e <_realloc_r+0x9a>
   88d90:	68a3      	ldr	r3, [r4, #8]
   88d92:	2a24      	cmp	r2, #36	; 0x24
   88d94:	6083      	str	r3, [r0, #8]
   88d96:	68e3      	ldr	r3, [r4, #12]
   88d98:	60c3      	str	r3, [r0, #12]
   88d9a:	d018      	beq.n	88dce <_realloc_r+0x2fa>
   88d9c:	f100 0310 	add.w	r3, r0, #16
   88da0:	f104 0210 	add.w	r2, r4, #16
   88da4:	e6dd      	b.n	88b62 <_realloc_r+0x8e>
   88da6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   88daa:	4625      	mov	r5, r4
   88dac:	f023 0303 	bic.w	r3, r3, #3
   88db0:	441f      	add	r7, r3
   88db2:	e6ef      	b.n	88b94 <_realloc_r+0xc0>
   88db4:	68a1      	ldr	r1, [r4, #8]
   88db6:	2a24      	cmp	r2, #36	; 0x24
   88db8:	f8ca 1010 	str.w	r1, [sl, #16]
   88dbc:	68e1      	ldr	r1, [r4, #12]
   88dbe:	f8ca 1014 	str.w	r1, [sl, #20]
   88dc2:	d00d      	beq.n	88de0 <_realloc_r+0x30c>
   88dc4:	f104 0010 	add.w	r0, r4, #16
   88dc8:	f10a 0218 	add.w	r2, sl, #24
   88dcc:	e7bf      	b.n	88d4e <_realloc_r+0x27a>
   88dce:	6922      	ldr	r2, [r4, #16]
   88dd0:	f100 0318 	add.w	r3, r0, #24
   88dd4:	6102      	str	r2, [r0, #16]
   88dd6:	6961      	ldr	r1, [r4, #20]
   88dd8:	f104 0218 	add.w	r2, r4, #24
   88ddc:	6141      	str	r1, [r0, #20]
   88dde:	e6c0      	b.n	88b62 <_realloc_r+0x8e>
   88de0:	6922      	ldr	r2, [r4, #16]
   88de2:	f104 0018 	add.w	r0, r4, #24
   88de6:	f8ca 2018 	str.w	r2, [sl, #24]
   88dea:	6961      	ldr	r1, [r4, #20]
   88dec:	f10a 0220 	add.w	r2, sl, #32
   88df0:	f8ca 101c 	str.w	r1, [sl, #28]
   88df4:	e7ab      	b.n	88d4e <_realloc_r+0x27a>
   88df6:	4621      	mov	r1, r4
   88df8:	462a      	mov	r2, r5
   88dfa:	e782      	b.n	88d02 <_realloc_r+0x22e>
   88dfc:	4621      	mov	r1, r4
   88dfe:	4628      	mov	r0, r5
   88e00:	9301      	str	r3, [sp, #4]
   88e02:	f7ff fe03 	bl	88a0c <memmove>
   88e06:	9b01      	ldr	r3, [sp, #4]
   88e08:	e781      	b.n	88d0e <_realloc_r+0x23a>
   88e0a:	68a1      	ldr	r1, [r4, #8]
   88e0c:	2a24      	cmp	r2, #36	; 0x24
   88e0e:	f8ca 1010 	str.w	r1, [sl, #16]
   88e12:	68e1      	ldr	r1, [r4, #12]
   88e14:	f8ca 1014 	str.w	r1, [sl, #20]
   88e18:	d006      	beq.n	88e28 <_realloc_r+0x354>
   88e1a:	f104 0110 	add.w	r1, r4, #16
   88e1e:	f10a 0218 	add.w	r2, sl, #24
   88e22:	e76e      	b.n	88d02 <_realloc_r+0x22e>
   88e24:	20000bcc 	.word	0x20000bcc
   88e28:	6922      	ldr	r2, [r4, #16]
   88e2a:	f104 0118 	add.w	r1, r4, #24
   88e2e:	f8ca 2018 	str.w	r2, [sl, #24]
   88e32:	6960      	ldr	r0, [r4, #20]
   88e34:	f10a 0220 	add.w	r2, sl, #32
   88e38:	f8ca 001c 	str.w	r0, [sl, #28]
   88e3c:	e761      	b.n	88d02 <_realloc_r+0x22e>
   88e3e:	bf00      	nop

00088e40 <__aeabi_drsub>:
   88e40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   88e44:	e002      	b.n	88e4c <__adddf3>
   88e46:	bf00      	nop

00088e48 <__aeabi_dsub>:
   88e48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00088e4c <__adddf3>:
   88e4c:	b530      	push	{r4, r5, lr}
   88e4e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   88e52:	ea4f 0543 	mov.w	r5, r3, lsl #1
   88e56:	ea94 0f05 	teq	r4, r5
   88e5a:	bf08      	it	eq
   88e5c:	ea90 0f02 	teqeq	r0, r2
   88e60:	bf1f      	itttt	ne
   88e62:	ea54 0c00 	orrsne.w	ip, r4, r0
   88e66:	ea55 0c02 	orrsne.w	ip, r5, r2
   88e6a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   88e6e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   88e72:	f000 80e2 	beq.w	8903a <__adddf3+0x1ee>
   88e76:	ea4f 5454 	mov.w	r4, r4, lsr #21
   88e7a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   88e7e:	bfb8      	it	lt
   88e80:	426d      	neglt	r5, r5
   88e82:	dd0c      	ble.n	88e9e <__adddf3+0x52>
   88e84:	442c      	add	r4, r5
   88e86:	ea80 0202 	eor.w	r2, r0, r2
   88e8a:	ea81 0303 	eor.w	r3, r1, r3
   88e8e:	ea82 0000 	eor.w	r0, r2, r0
   88e92:	ea83 0101 	eor.w	r1, r3, r1
   88e96:	ea80 0202 	eor.w	r2, r0, r2
   88e9a:	ea81 0303 	eor.w	r3, r1, r3
   88e9e:	2d36      	cmp	r5, #54	; 0x36
   88ea0:	bf88      	it	hi
   88ea2:	bd30      	pophi	{r4, r5, pc}
   88ea4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   88ea8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   88eac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   88eb0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   88eb4:	d002      	beq.n	88ebc <__adddf3+0x70>
   88eb6:	4240      	negs	r0, r0
   88eb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   88ebc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   88ec0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   88ec4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   88ec8:	d002      	beq.n	88ed0 <__adddf3+0x84>
   88eca:	4252      	negs	r2, r2
   88ecc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   88ed0:	ea94 0f05 	teq	r4, r5
   88ed4:	f000 80a7 	beq.w	89026 <__adddf3+0x1da>
   88ed8:	f1a4 0401 	sub.w	r4, r4, #1
   88edc:	f1d5 0e20 	rsbs	lr, r5, #32
   88ee0:	db0d      	blt.n	88efe <__adddf3+0xb2>
   88ee2:	fa02 fc0e 	lsl.w	ip, r2, lr
   88ee6:	fa22 f205 	lsr.w	r2, r2, r5
   88eea:	1880      	adds	r0, r0, r2
   88eec:	f141 0100 	adc.w	r1, r1, #0
   88ef0:	fa03 f20e 	lsl.w	r2, r3, lr
   88ef4:	1880      	adds	r0, r0, r2
   88ef6:	fa43 f305 	asr.w	r3, r3, r5
   88efa:	4159      	adcs	r1, r3
   88efc:	e00e      	b.n	88f1c <__adddf3+0xd0>
   88efe:	f1a5 0520 	sub.w	r5, r5, #32
   88f02:	f10e 0e20 	add.w	lr, lr, #32
   88f06:	2a01      	cmp	r2, #1
   88f08:	fa03 fc0e 	lsl.w	ip, r3, lr
   88f0c:	bf28      	it	cs
   88f0e:	f04c 0c02 	orrcs.w	ip, ip, #2
   88f12:	fa43 f305 	asr.w	r3, r3, r5
   88f16:	18c0      	adds	r0, r0, r3
   88f18:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   88f1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   88f20:	d507      	bpl.n	88f32 <__adddf3+0xe6>
   88f22:	f04f 0e00 	mov.w	lr, #0
   88f26:	f1dc 0c00 	rsbs	ip, ip, #0
   88f2a:	eb7e 0000 	sbcs.w	r0, lr, r0
   88f2e:	eb6e 0101 	sbc.w	r1, lr, r1
   88f32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   88f36:	d31b      	bcc.n	88f70 <__adddf3+0x124>
   88f38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   88f3c:	d30c      	bcc.n	88f58 <__adddf3+0x10c>
   88f3e:	0849      	lsrs	r1, r1, #1
   88f40:	ea5f 0030 	movs.w	r0, r0, rrx
   88f44:	ea4f 0c3c 	mov.w	ip, ip, rrx
   88f48:	f104 0401 	add.w	r4, r4, #1
   88f4c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   88f50:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   88f54:	f080 809a 	bcs.w	8908c <__adddf3+0x240>
   88f58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   88f5c:	bf08      	it	eq
   88f5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   88f62:	f150 0000 	adcs.w	r0, r0, #0
   88f66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   88f6a:	ea41 0105 	orr.w	r1, r1, r5
   88f6e:	bd30      	pop	{r4, r5, pc}
   88f70:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   88f74:	4140      	adcs	r0, r0
   88f76:	eb41 0101 	adc.w	r1, r1, r1
   88f7a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88f7e:	f1a4 0401 	sub.w	r4, r4, #1
   88f82:	d1e9      	bne.n	88f58 <__adddf3+0x10c>
   88f84:	f091 0f00 	teq	r1, #0
   88f88:	bf04      	itt	eq
   88f8a:	4601      	moveq	r1, r0
   88f8c:	2000      	moveq	r0, #0
   88f8e:	fab1 f381 	clz	r3, r1
   88f92:	bf08      	it	eq
   88f94:	3320      	addeq	r3, #32
   88f96:	f1a3 030b 	sub.w	r3, r3, #11
   88f9a:	f1b3 0220 	subs.w	r2, r3, #32
   88f9e:	da0c      	bge.n	88fba <__adddf3+0x16e>
   88fa0:	320c      	adds	r2, #12
   88fa2:	dd08      	ble.n	88fb6 <__adddf3+0x16a>
   88fa4:	f102 0c14 	add.w	ip, r2, #20
   88fa8:	f1c2 020c 	rsb	r2, r2, #12
   88fac:	fa01 f00c 	lsl.w	r0, r1, ip
   88fb0:	fa21 f102 	lsr.w	r1, r1, r2
   88fb4:	e00c      	b.n	88fd0 <__adddf3+0x184>
   88fb6:	f102 0214 	add.w	r2, r2, #20
   88fba:	bfd8      	it	le
   88fbc:	f1c2 0c20 	rsble	ip, r2, #32
   88fc0:	fa01 f102 	lsl.w	r1, r1, r2
   88fc4:	fa20 fc0c 	lsr.w	ip, r0, ip
   88fc8:	bfdc      	itt	le
   88fca:	ea41 010c 	orrle.w	r1, r1, ip
   88fce:	4090      	lslle	r0, r2
   88fd0:	1ae4      	subs	r4, r4, r3
   88fd2:	bfa2      	ittt	ge
   88fd4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   88fd8:	4329      	orrge	r1, r5
   88fda:	bd30      	popge	{r4, r5, pc}
   88fdc:	ea6f 0404 	mvn.w	r4, r4
   88fe0:	3c1f      	subs	r4, #31
   88fe2:	da1c      	bge.n	8901e <__adddf3+0x1d2>
   88fe4:	340c      	adds	r4, #12
   88fe6:	dc0e      	bgt.n	89006 <__adddf3+0x1ba>
   88fe8:	f104 0414 	add.w	r4, r4, #20
   88fec:	f1c4 0220 	rsb	r2, r4, #32
   88ff0:	fa20 f004 	lsr.w	r0, r0, r4
   88ff4:	fa01 f302 	lsl.w	r3, r1, r2
   88ff8:	ea40 0003 	orr.w	r0, r0, r3
   88ffc:	fa21 f304 	lsr.w	r3, r1, r4
   89000:	ea45 0103 	orr.w	r1, r5, r3
   89004:	bd30      	pop	{r4, r5, pc}
   89006:	f1c4 040c 	rsb	r4, r4, #12
   8900a:	f1c4 0220 	rsb	r2, r4, #32
   8900e:	fa20 f002 	lsr.w	r0, r0, r2
   89012:	fa01 f304 	lsl.w	r3, r1, r4
   89016:	ea40 0003 	orr.w	r0, r0, r3
   8901a:	4629      	mov	r1, r5
   8901c:	bd30      	pop	{r4, r5, pc}
   8901e:	fa21 f004 	lsr.w	r0, r1, r4
   89022:	4629      	mov	r1, r5
   89024:	bd30      	pop	{r4, r5, pc}
   89026:	f094 0f00 	teq	r4, #0
   8902a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8902e:	bf06      	itte	eq
   89030:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   89034:	3401      	addeq	r4, #1
   89036:	3d01      	subne	r5, #1
   89038:	e74e      	b.n	88ed8 <__adddf3+0x8c>
   8903a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8903e:	bf18      	it	ne
   89040:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   89044:	d029      	beq.n	8909a <__adddf3+0x24e>
   89046:	ea94 0f05 	teq	r4, r5
   8904a:	bf08      	it	eq
   8904c:	ea90 0f02 	teqeq	r0, r2
   89050:	d005      	beq.n	8905e <__adddf3+0x212>
   89052:	ea54 0c00 	orrs.w	ip, r4, r0
   89056:	bf04      	itt	eq
   89058:	4619      	moveq	r1, r3
   8905a:	4610      	moveq	r0, r2
   8905c:	bd30      	pop	{r4, r5, pc}
   8905e:	ea91 0f03 	teq	r1, r3
   89062:	bf1e      	ittt	ne
   89064:	2100      	movne	r1, #0
   89066:	2000      	movne	r0, #0
   89068:	bd30      	popne	{r4, r5, pc}
   8906a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8906e:	d105      	bne.n	8907c <__adddf3+0x230>
   89070:	0040      	lsls	r0, r0, #1
   89072:	4149      	adcs	r1, r1
   89074:	bf28      	it	cs
   89076:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8907a:	bd30      	pop	{r4, r5, pc}
   8907c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   89080:	bf3c      	itt	cc
   89082:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   89086:	bd30      	popcc	{r4, r5, pc}
   89088:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8908c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   89090:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   89094:	f04f 0000 	mov.w	r0, #0
   89098:	bd30      	pop	{r4, r5, pc}
   8909a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8909e:	bf1a      	itte	ne
   890a0:	4619      	movne	r1, r3
   890a2:	4610      	movne	r0, r2
   890a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   890a8:	bf1c      	itt	ne
   890aa:	460b      	movne	r3, r1
   890ac:	4602      	movne	r2, r0
   890ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   890b2:	bf06      	itte	eq
   890b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   890b8:	ea91 0f03 	teqeq	r1, r3
   890bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   890c0:	bd30      	pop	{r4, r5, pc}
   890c2:	bf00      	nop

000890c4 <__aeabi_ui2d>:
   890c4:	f090 0f00 	teq	r0, #0
   890c8:	bf04      	itt	eq
   890ca:	2100      	moveq	r1, #0
   890cc:	4770      	bxeq	lr
   890ce:	b530      	push	{r4, r5, lr}
   890d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   890d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   890d8:	f04f 0500 	mov.w	r5, #0
   890dc:	f04f 0100 	mov.w	r1, #0
   890e0:	e750      	b.n	88f84 <__adddf3+0x138>
   890e2:	bf00      	nop

000890e4 <__aeabi_i2d>:
   890e4:	f090 0f00 	teq	r0, #0
   890e8:	bf04      	itt	eq
   890ea:	2100      	moveq	r1, #0
   890ec:	4770      	bxeq	lr
   890ee:	b530      	push	{r4, r5, lr}
   890f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   890f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   890f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   890fc:	bf48      	it	mi
   890fe:	4240      	negmi	r0, r0
   89100:	f04f 0100 	mov.w	r1, #0
   89104:	e73e      	b.n	88f84 <__adddf3+0x138>
   89106:	bf00      	nop

00089108 <__aeabi_f2d>:
   89108:	0042      	lsls	r2, r0, #1
   8910a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8910e:	ea4f 0131 	mov.w	r1, r1, rrx
   89112:	ea4f 7002 	mov.w	r0, r2, lsl #28
   89116:	bf1f      	itttt	ne
   89118:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8911c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   89120:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   89124:	4770      	bxne	lr
   89126:	f092 0f00 	teq	r2, #0
   8912a:	bf14      	ite	ne
   8912c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   89130:	4770      	bxeq	lr
   89132:	b530      	push	{r4, r5, lr}
   89134:	f44f 7460 	mov.w	r4, #896	; 0x380
   89138:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8913c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   89140:	e720      	b.n	88f84 <__adddf3+0x138>
   89142:	bf00      	nop

00089144 <__aeabi_ul2d>:
   89144:	ea50 0201 	orrs.w	r2, r0, r1
   89148:	bf08      	it	eq
   8914a:	4770      	bxeq	lr
   8914c:	b530      	push	{r4, r5, lr}
   8914e:	f04f 0500 	mov.w	r5, #0
   89152:	e00a      	b.n	8916a <__aeabi_l2d+0x16>

00089154 <__aeabi_l2d>:
   89154:	ea50 0201 	orrs.w	r2, r0, r1
   89158:	bf08      	it	eq
   8915a:	4770      	bxeq	lr
   8915c:	b530      	push	{r4, r5, lr}
   8915e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   89162:	d502      	bpl.n	8916a <__aeabi_l2d+0x16>
   89164:	4240      	negs	r0, r0
   89166:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8916a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8916e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   89172:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   89176:	f43f aedc 	beq.w	88f32 <__adddf3+0xe6>
   8917a:	f04f 0203 	mov.w	r2, #3
   8917e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   89182:	bf18      	it	ne
   89184:	3203      	addne	r2, #3
   89186:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8918a:	bf18      	it	ne
   8918c:	3203      	addne	r2, #3
   8918e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   89192:	f1c2 0320 	rsb	r3, r2, #32
   89196:	fa00 fc03 	lsl.w	ip, r0, r3
   8919a:	fa20 f002 	lsr.w	r0, r0, r2
   8919e:	fa01 fe03 	lsl.w	lr, r1, r3
   891a2:	ea40 000e 	orr.w	r0, r0, lr
   891a6:	fa21 f102 	lsr.w	r1, r1, r2
   891aa:	4414      	add	r4, r2
   891ac:	e6c1      	b.n	88f32 <__adddf3+0xe6>
   891ae:	bf00      	nop

000891b0 <__aeabi_dmul>:
   891b0:	b570      	push	{r4, r5, r6, lr}
   891b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   891b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   891ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   891be:	bf1d      	ittte	ne
   891c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   891c4:	ea94 0f0c 	teqne	r4, ip
   891c8:	ea95 0f0c 	teqne	r5, ip
   891cc:	f000 f8de 	bleq	8938c <__aeabi_dmul+0x1dc>
   891d0:	442c      	add	r4, r5
   891d2:	ea81 0603 	eor.w	r6, r1, r3
   891d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   891da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   891de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   891e2:	bf18      	it	ne
   891e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   891e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   891ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   891f0:	d038      	beq.n	89264 <__aeabi_dmul+0xb4>
   891f2:	fba0 ce02 	umull	ip, lr, r0, r2
   891f6:	f04f 0500 	mov.w	r5, #0
   891fa:	fbe1 e502 	umlal	lr, r5, r1, r2
   891fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   89202:	fbe0 e503 	umlal	lr, r5, r0, r3
   89206:	f04f 0600 	mov.w	r6, #0
   8920a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8920e:	f09c 0f00 	teq	ip, #0
   89212:	bf18      	it	ne
   89214:	f04e 0e01 	orrne.w	lr, lr, #1
   89218:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8921c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   89220:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   89224:	d204      	bcs.n	89230 <__aeabi_dmul+0x80>
   89226:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8922a:	416d      	adcs	r5, r5
   8922c:	eb46 0606 	adc.w	r6, r6, r6
   89230:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   89234:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   89238:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8923c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   89240:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   89244:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   89248:	bf88      	it	hi
   8924a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8924e:	d81e      	bhi.n	8928e <__aeabi_dmul+0xde>
   89250:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   89254:	bf08      	it	eq
   89256:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8925a:	f150 0000 	adcs.w	r0, r0, #0
   8925e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   89262:	bd70      	pop	{r4, r5, r6, pc}
   89264:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   89268:	ea46 0101 	orr.w	r1, r6, r1
   8926c:	ea40 0002 	orr.w	r0, r0, r2
   89270:	ea81 0103 	eor.w	r1, r1, r3
   89274:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   89278:	bfc2      	ittt	gt
   8927a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8927e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   89282:	bd70      	popgt	{r4, r5, r6, pc}
   89284:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   89288:	f04f 0e00 	mov.w	lr, #0
   8928c:	3c01      	subs	r4, #1
   8928e:	f300 80ab 	bgt.w	893e8 <__aeabi_dmul+0x238>
   89292:	f114 0f36 	cmn.w	r4, #54	; 0x36
   89296:	bfde      	ittt	le
   89298:	2000      	movle	r0, #0
   8929a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8929e:	bd70      	pople	{r4, r5, r6, pc}
   892a0:	f1c4 0400 	rsb	r4, r4, #0
   892a4:	3c20      	subs	r4, #32
   892a6:	da35      	bge.n	89314 <__aeabi_dmul+0x164>
   892a8:	340c      	adds	r4, #12
   892aa:	dc1b      	bgt.n	892e4 <__aeabi_dmul+0x134>
   892ac:	f104 0414 	add.w	r4, r4, #20
   892b0:	f1c4 0520 	rsb	r5, r4, #32
   892b4:	fa00 f305 	lsl.w	r3, r0, r5
   892b8:	fa20 f004 	lsr.w	r0, r0, r4
   892bc:	fa01 f205 	lsl.w	r2, r1, r5
   892c0:	ea40 0002 	orr.w	r0, r0, r2
   892c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   892c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   892cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   892d0:	fa21 f604 	lsr.w	r6, r1, r4
   892d4:	eb42 0106 	adc.w	r1, r2, r6
   892d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   892dc:	bf08      	it	eq
   892de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   892e2:	bd70      	pop	{r4, r5, r6, pc}
   892e4:	f1c4 040c 	rsb	r4, r4, #12
   892e8:	f1c4 0520 	rsb	r5, r4, #32
   892ec:	fa00 f304 	lsl.w	r3, r0, r4
   892f0:	fa20 f005 	lsr.w	r0, r0, r5
   892f4:	fa01 f204 	lsl.w	r2, r1, r4
   892f8:	ea40 0002 	orr.w	r0, r0, r2
   892fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   89300:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   89304:	f141 0100 	adc.w	r1, r1, #0
   89308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8930c:	bf08      	it	eq
   8930e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   89312:	bd70      	pop	{r4, r5, r6, pc}
   89314:	f1c4 0520 	rsb	r5, r4, #32
   89318:	fa00 f205 	lsl.w	r2, r0, r5
   8931c:	ea4e 0e02 	orr.w	lr, lr, r2
   89320:	fa20 f304 	lsr.w	r3, r0, r4
   89324:	fa01 f205 	lsl.w	r2, r1, r5
   89328:	ea43 0302 	orr.w	r3, r3, r2
   8932c:	fa21 f004 	lsr.w	r0, r1, r4
   89330:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   89334:	fa21 f204 	lsr.w	r2, r1, r4
   89338:	ea20 0002 	bic.w	r0, r0, r2
   8933c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   89340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   89344:	bf08      	it	eq
   89346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8934a:	bd70      	pop	{r4, r5, r6, pc}
   8934c:	f094 0f00 	teq	r4, #0
   89350:	d10f      	bne.n	89372 <__aeabi_dmul+0x1c2>
   89352:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   89356:	0040      	lsls	r0, r0, #1
   89358:	eb41 0101 	adc.w	r1, r1, r1
   8935c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   89360:	bf08      	it	eq
   89362:	3c01      	subeq	r4, #1
   89364:	d0f7      	beq.n	89356 <__aeabi_dmul+0x1a6>
   89366:	ea41 0106 	orr.w	r1, r1, r6
   8936a:	f095 0f00 	teq	r5, #0
   8936e:	bf18      	it	ne
   89370:	4770      	bxne	lr
   89372:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   89376:	0052      	lsls	r2, r2, #1
   89378:	eb43 0303 	adc.w	r3, r3, r3
   8937c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   89380:	bf08      	it	eq
   89382:	3d01      	subeq	r5, #1
   89384:	d0f7      	beq.n	89376 <__aeabi_dmul+0x1c6>
   89386:	ea43 0306 	orr.w	r3, r3, r6
   8938a:	4770      	bx	lr
   8938c:	ea94 0f0c 	teq	r4, ip
   89390:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   89394:	bf18      	it	ne
   89396:	ea95 0f0c 	teqne	r5, ip
   8939a:	d00c      	beq.n	893b6 <__aeabi_dmul+0x206>
   8939c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   893a0:	bf18      	it	ne
   893a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   893a6:	d1d1      	bne.n	8934c <__aeabi_dmul+0x19c>
   893a8:	ea81 0103 	eor.w	r1, r1, r3
   893ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   893b0:	f04f 0000 	mov.w	r0, #0
   893b4:	bd70      	pop	{r4, r5, r6, pc}
   893b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   893ba:	bf06      	itte	eq
   893bc:	4610      	moveq	r0, r2
   893be:	4619      	moveq	r1, r3
   893c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   893c4:	d019      	beq.n	893fa <__aeabi_dmul+0x24a>
   893c6:	ea94 0f0c 	teq	r4, ip
   893ca:	d102      	bne.n	893d2 <__aeabi_dmul+0x222>
   893cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   893d0:	d113      	bne.n	893fa <__aeabi_dmul+0x24a>
   893d2:	ea95 0f0c 	teq	r5, ip
   893d6:	d105      	bne.n	893e4 <__aeabi_dmul+0x234>
   893d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   893dc:	bf1c      	itt	ne
   893de:	4610      	movne	r0, r2
   893e0:	4619      	movne	r1, r3
   893e2:	d10a      	bne.n	893fa <__aeabi_dmul+0x24a>
   893e4:	ea81 0103 	eor.w	r1, r1, r3
   893e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   893ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   893f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   893f4:	f04f 0000 	mov.w	r0, #0
   893f8:	bd70      	pop	{r4, r5, r6, pc}
   893fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   893fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   89402:	bd70      	pop	{r4, r5, r6, pc}

00089404 <__aeabi_ddiv>:
   89404:	b570      	push	{r4, r5, r6, lr}
   89406:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8940a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8940e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   89412:	bf1d      	ittte	ne
   89414:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   89418:	ea94 0f0c 	teqne	r4, ip
   8941c:	ea95 0f0c 	teqne	r5, ip
   89420:	f000 f8a7 	bleq	89572 <__aeabi_ddiv+0x16e>
   89424:	eba4 0405 	sub.w	r4, r4, r5
   89428:	ea81 0e03 	eor.w	lr, r1, r3
   8942c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   89430:	ea4f 3101 	mov.w	r1, r1, lsl #12
   89434:	f000 8088 	beq.w	89548 <__aeabi_ddiv+0x144>
   89438:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8943c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   89440:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   89444:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   89448:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8944c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   89450:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   89454:	ea4f 2600 	mov.w	r6, r0, lsl #8
   89458:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8945c:	429d      	cmp	r5, r3
   8945e:	bf08      	it	eq
   89460:	4296      	cmpeq	r6, r2
   89462:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   89466:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8946a:	d202      	bcs.n	89472 <__aeabi_ddiv+0x6e>
   8946c:	085b      	lsrs	r3, r3, #1
   8946e:	ea4f 0232 	mov.w	r2, r2, rrx
   89472:	1ab6      	subs	r6, r6, r2
   89474:	eb65 0503 	sbc.w	r5, r5, r3
   89478:	085b      	lsrs	r3, r3, #1
   8947a:	ea4f 0232 	mov.w	r2, r2, rrx
   8947e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   89482:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   89486:	ebb6 0e02 	subs.w	lr, r6, r2
   8948a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8948e:	bf22      	ittt	cs
   89490:	1ab6      	subcs	r6, r6, r2
   89492:	4675      	movcs	r5, lr
   89494:	ea40 000c 	orrcs.w	r0, r0, ip
   89498:	085b      	lsrs	r3, r3, #1
   8949a:	ea4f 0232 	mov.w	r2, r2, rrx
   8949e:	ebb6 0e02 	subs.w	lr, r6, r2
   894a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   894a6:	bf22      	ittt	cs
   894a8:	1ab6      	subcs	r6, r6, r2
   894aa:	4675      	movcs	r5, lr
   894ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   894b0:	085b      	lsrs	r3, r3, #1
   894b2:	ea4f 0232 	mov.w	r2, r2, rrx
   894b6:	ebb6 0e02 	subs.w	lr, r6, r2
   894ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   894be:	bf22      	ittt	cs
   894c0:	1ab6      	subcs	r6, r6, r2
   894c2:	4675      	movcs	r5, lr
   894c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   894c8:	085b      	lsrs	r3, r3, #1
   894ca:	ea4f 0232 	mov.w	r2, r2, rrx
   894ce:	ebb6 0e02 	subs.w	lr, r6, r2
   894d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   894d6:	bf22      	ittt	cs
   894d8:	1ab6      	subcs	r6, r6, r2
   894da:	4675      	movcs	r5, lr
   894dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   894e0:	ea55 0e06 	orrs.w	lr, r5, r6
   894e4:	d018      	beq.n	89518 <__aeabi_ddiv+0x114>
   894e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   894ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   894ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
   894f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   894f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   894fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   894fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   89502:	d1c0      	bne.n	89486 <__aeabi_ddiv+0x82>
   89504:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   89508:	d10b      	bne.n	89522 <__aeabi_ddiv+0x11e>
   8950a:	ea41 0100 	orr.w	r1, r1, r0
   8950e:	f04f 0000 	mov.w	r0, #0
   89512:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   89516:	e7b6      	b.n	89486 <__aeabi_ddiv+0x82>
   89518:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8951c:	bf04      	itt	eq
   8951e:	4301      	orreq	r1, r0
   89520:	2000      	moveq	r0, #0
   89522:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   89526:	bf88      	it	hi
   89528:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8952c:	f63f aeaf 	bhi.w	8928e <__aeabi_dmul+0xde>
   89530:	ebb5 0c03 	subs.w	ip, r5, r3
   89534:	bf04      	itt	eq
   89536:	ebb6 0c02 	subseq.w	ip, r6, r2
   8953a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8953e:	f150 0000 	adcs.w	r0, r0, #0
   89542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   89546:	bd70      	pop	{r4, r5, r6, pc}
   89548:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8954c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   89550:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   89554:	bfc2      	ittt	gt
   89556:	ebd4 050c 	rsbsgt	r5, r4, ip
   8955a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8955e:	bd70      	popgt	{r4, r5, r6, pc}
   89560:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   89564:	f04f 0e00 	mov.w	lr, #0
   89568:	3c01      	subs	r4, #1
   8956a:	e690      	b.n	8928e <__aeabi_dmul+0xde>
   8956c:	ea45 0e06 	orr.w	lr, r5, r6
   89570:	e68d      	b.n	8928e <__aeabi_dmul+0xde>
   89572:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   89576:	ea94 0f0c 	teq	r4, ip
   8957a:	bf08      	it	eq
   8957c:	ea95 0f0c 	teqeq	r5, ip
   89580:	f43f af3b 	beq.w	893fa <__aeabi_dmul+0x24a>
   89584:	ea94 0f0c 	teq	r4, ip
   89588:	d10a      	bne.n	895a0 <__aeabi_ddiv+0x19c>
   8958a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8958e:	f47f af34 	bne.w	893fa <__aeabi_dmul+0x24a>
   89592:	ea95 0f0c 	teq	r5, ip
   89596:	f47f af25 	bne.w	893e4 <__aeabi_dmul+0x234>
   8959a:	4610      	mov	r0, r2
   8959c:	4619      	mov	r1, r3
   8959e:	e72c      	b.n	893fa <__aeabi_dmul+0x24a>
   895a0:	ea95 0f0c 	teq	r5, ip
   895a4:	d106      	bne.n	895b4 <__aeabi_ddiv+0x1b0>
   895a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   895aa:	f43f aefd 	beq.w	893a8 <__aeabi_dmul+0x1f8>
   895ae:	4610      	mov	r0, r2
   895b0:	4619      	mov	r1, r3
   895b2:	e722      	b.n	893fa <__aeabi_dmul+0x24a>
   895b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   895b8:	bf18      	it	ne
   895ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   895be:	f47f aec5 	bne.w	8934c <__aeabi_dmul+0x19c>
   895c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   895c6:	f47f af0d 	bne.w	893e4 <__aeabi_dmul+0x234>
   895ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   895ce:	f47f aeeb 	bne.w	893a8 <__aeabi_dmul+0x1f8>
   895d2:	e712      	b.n	893fa <__aeabi_dmul+0x24a>

000895d4 <__gedf2>:
   895d4:	f04f 3cff 	mov.w	ip, #4294967295
   895d8:	e006      	b.n	895e8 <__cmpdf2+0x4>
   895da:	bf00      	nop

000895dc <__ledf2>:
   895dc:	f04f 0c01 	mov.w	ip, #1
   895e0:	e002      	b.n	895e8 <__cmpdf2+0x4>
   895e2:	bf00      	nop

000895e4 <__cmpdf2>:
   895e4:	f04f 0c01 	mov.w	ip, #1
   895e8:	f84d cd04 	str.w	ip, [sp, #-4]!
   895ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   895f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   895f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   895f8:	bf18      	it	ne
   895fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   895fe:	d01b      	beq.n	89638 <__cmpdf2+0x54>
   89600:	b001      	add	sp, #4
   89602:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   89606:	bf0c      	ite	eq
   89608:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8960c:	ea91 0f03 	teqne	r1, r3
   89610:	bf02      	ittt	eq
   89612:	ea90 0f02 	teqeq	r0, r2
   89616:	2000      	moveq	r0, #0
   89618:	4770      	bxeq	lr
   8961a:	f110 0f00 	cmn.w	r0, #0
   8961e:	ea91 0f03 	teq	r1, r3
   89622:	bf58      	it	pl
   89624:	4299      	cmppl	r1, r3
   89626:	bf08      	it	eq
   89628:	4290      	cmpeq	r0, r2
   8962a:	bf2c      	ite	cs
   8962c:	17d8      	asrcs	r0, r3, #31
   8962e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   89632:	f040 0001 	orr.w	r0, r0, #1
   89636:	4770      	bx	lr
   89638:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8963c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89640:	d102      	bne.n	89648 <__cmpdf2+0x64>
   89642:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   89646:	d107      	bne.n	89658 <__cmpdf2+0x74>
   89648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8964c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89650:	d1d6      	bne.n	89600 <__cmpdf2+0x1c>
   89652:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   89656:	d0d3      	beq.n	89600 <__cmpdf2+0x1c>
   89658:	f85d 0b04 	ldr.w	r0, [sp], #4
   8965c:	4770      	bx	lr
   8965e:	bf00      	nop

00089660 <__aeabi_cdrcmple>:
   89660:	4684      	mov	ip, r0
   89662:	4610      	mov	r0, r2
   89664:	4662      	mov	r2, ip
   89666:	468c      	mov	ip, r1
   89668:	4619      	mov	r1, r3
   8966a:	4663      	mov	r3, ip
   8966c:	e000      	b.n	89670 <__aeabi_cdcmpeq>
   8966e:	bf00      	nop

00089670 <__aeabi_cdcmpeq>:
   89670:	b501      	push	{r0, lr}
   89672:	f7ff ffb7 	bl	895e4 <__cmpdf2>
   89676:	2800      	cmp	r0, #0
   89678:	bf48      	it	mi
   8967a:	f110 0f00 	cmnmi.w	r0, #0
   8967e:	bd01      	pop	{r0, pc}

00089680 <__aeabi_dcmpeq>:
   89680:	f84d ed08 	str.w	lr, [sp, #-8]!
   89684:	f7ff fff4 	bl	89670 <__aeabi_cdcmpeq>
   89688:	bf0c      	ite	eq
   8968a:	2001      	moveq	r0, #1
   8968c:	2000      	movne	r0, #0
   8968e:	f85d fb08 	ldr.w	pc, [sp], #8
   89692:	bf00      	nop

00089694 <__aeabi_dcmplt>:
   89694:	f84d ed08 	str.w	lr, [sp, #-8]!
   89698:	f7ff ffea 	bl	89670 <__aeabi_cdcmpeq>
   8969c:	bf34      	ite	cc
   8969e:	2001      	movcc	r0, #1
   896a0:	2000      	movcs	r0, #0
   896a2:	f85d fb08 	ldr.w	pc, [sp], #8
   896a6:	bf00      	nop

000896a8 <__aeabi_dcmple>:
   896a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   896ac:	f7ff ffe0 	bl	89670 <__aeabi_cdcmpeq>
   896b0:	bf94      	ite	ls
   896b2:	2001      	movls	r0, #1
   896b4:	2000      	movhi	r0, #0
   896b6:	f85d fb08 	ldr.w	pc, [sp], #8
   896ba:	bf00      	nop

000896bc <__aeabi_dcmpge>:
   896bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   896c0:	f7ff ffce 	bl	89660 <__aeabi_cdrcmple>
   896c4:	bf94      	ite	ls
   896c6:	2001      	movls	r0, #1
   896c8:	2000      	movhi	r0, #0
   896ca:	f85d fb08 	ldr.w	pc, [sp], #8
   896ce:	bf00      	nop

000896d0 <__aeabi_dcmpgt>:
   896d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   896d4:	f7ff ffc4 	bl	89660 <__aeabi_cdrcmple>
   896d8:	bf34      	ite	cc
   896da:	2001      	movcc	r0, #1
   896dc:	2000      	movcs	r0, #0
   896de:	f85d fb08 	ldr.w	pc, [sp], #8
   896e2:	bf00      	nop

000896e4 <__aeabi_dcmpun>:
   896e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   896e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   896ec:	d102      	bne.n	896f4 <__aeabi_dcmpun+0x10>
   896ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   896f2:	d10a      	bne.n	8970a <__aeabi_dcmpun+0x26>
   896f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   896f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   896fc:	d102      	bne.n	89704 <__aeabi_dcmpun+0x20>
   896fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   89702:	d102      	bne.n	8970a <__aeabi_dcmpun+0x26>
   89704:	f04f 0000 	mov.w	r0, #0
   89708:	4770      	bx	lr
   8970a:	f04f 0001 	mov.w	r0, #1
   8970e:	4770      	bx	lr

00089710 <__aeabi_d2iz>:
   89710:	ea4f 0241 	mov.w	r2, r1, lsl #1
   89714:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   89718:	d215      	bcs.n	89746 <__aeabi_d2iz+0x36>
   8971a:	d511      	bpl.n	89740 <__aeabi_d2iz+0x30>
   8971c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   89720:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   89724:	d912      	bls.n	8974c <__aeabi_d2iz+0x3c>
   89726:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8972a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8972e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   89732:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   89736:	fa23 f002 	lsr.w	r0, r3, r2
   8973a:	bf18      	it	ne
   8973c:	4240      	negne	r0, r0
   8973e:	4770      	bx	lr
   89740:	f04f 0000 	mov.w	r0, #0
   89744:	4770      	bx	lr
   89746:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8974a:	d105      	bne.n	89758 <__aeabi_d2iz+0x48>
   8974c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   89750:	bf08      	it	eq
   89752:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   89756:	4770      	bx	lr
   89758:	f04f 0000 	mov.w	r0, #0
   8975c:	4770      	bx	lr
   8975e:	bf00      	nop

00089760 <__aeabi_uldivmod>:
   89760:	b953      	cbnz	r3, 89778 <__aeabi_uldivmod+0x18>
   89762:	b94a      	cbnz	r2, 89778 <__aeabi_uldivmod+0x18>
   89764:	2900      	cmp	r1, #0
   89766:	bf08      	it	eq
   89768:	2800      	cmpeq	r0, #0
   8976a:	bf1c      	itt	ne
   8976c:	f04f 31ff 	movne.w	r1, #4294967295
   89770:	f04f 30ff 	movne.w	r0, #4294967295
   89774:	f000 b97a 	b.w	89a6c <__aeabi_idiv0>
   89778:	f1ad 0c08 	sub.w	ip, sp, #8
   8977c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   89780:	f000 f806 	bl	89790 <__udivmoddi4>
   89784:	f8dd e004 	ldr.w	lr, [sp, #4]
   89788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8978c:	b004      	add	sp, #16
   8978e:	4770      	bx	lr

00089790 <__udivmoddi4>:
   89790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89794:	468c      	mov	ip, r1
   89796:	460e      	mov	r6, r1
   89798:	4604      	mov	r4, r0
   8979a:	9d08      	ldr	r5, [sp, #32]
   8979c:	2b00      	cmp	r3, #0
   8979e:	d150      	bne.n	89842 <__udivmoddi4+0xb2>
   897a0:	428a      	cmp	r2, r1
   897a2:	4617      	mov	r7, r2
   897a4:	d96c      	bls.n	89880 <__udivmoddi4+0xf0>
   897a6:	fab2 fe82 	clz	lr, r2
   897aa:	f1be 0f00 	cmp.w	lr, #0
   897ae:	d00b      	beq.n	897c8 <__udivmoddi4+0x38>
   897b0:	f1ce 0c20 	rsb	ip, lr, #32
   897b4:	fa01 f60e 	lsl.w	r6, r1, lr
   897b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   897bc:	fa02 f70e 	lsl.w	r7, r2, lr
   897c0:	ea4c 0c06 	orr.w	ip, ip, r6
   897c4:	fa00 f40e 	lsl.w	r4, r0, lr
   897c8:	0c3a      	lsrs	r2, r7, #16
   897ca:	fbbc f9f2 	udiv	r9, ip, r2
   897ce:	b2bb      	uxth	r3, r7
   897d0:	fb02 cc19 	mls	ip, r2, r9, ip
   897d4:	fb09 fa03 	mul.w	sl, r9, r3
   897d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   897dc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   897e0:	45b2      	cmp	sl, r6
   897e2:	d90a      	bls.n	897fa <__udivmoddi4+0x6a>
   897e4:	19f6      	adds	r6, r6, r7
   897e6:	f109 31ff 	add.w	r1, r9, #4294967295
   897ea:	f080 8125 	bcs.w	89a38 <__udivmoddi4+0x2a8>
   897ee:	45b2      	cmp	sl, r6
   897f0:	f240 8122 	bls.w	89a38 <__udivmoddi4+0x2a8>
   897f4:	f1a9 0902 	sub.w	r9, r9, #2
   897f8:	443e      	add	r6, r7
   897fa:	eba6 060a 	sub.w	r6, r6, sl
   897fe:	fbb6 f0f2 	udiv	r0, r6, r2
   89802:	fb02 6610 	mls	r6, r2, r0, r6
   89806:	fb00 f303 	mul.w	r3, r0, r3
   8980a:	b2a4      	uxth	r4, r4
   8980c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   89810:	42a3      	cmp	r3, r4
   89812:	d909      	bls.n	89828 <__udivmoddi4+0x98>
   89814:	19e4      	adds	r4, r4, r7
   89816:	f100 32ff 	add.w	r2, r0, #4294967295
   8981a:	f080 810b 	bcs.w	89a34 <__udivmoddi4+0x2a4>
   8981e:	42a3      	cmp	r3, r4
   89820:	f240 8108 	bls.w	89a34 <__udivmoddi4+0x2a4>
   89824:	3802      	subs	r0, #2
   89826:	443c      	add	r4, r7
   89828:	2100      	movs	r1, #0
   8982a:	1ae4      	subs	r4, r4, r3
   8982c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89830:	2d00      	cmp	r5, #0
   89832:	d062      	beq.n	898fa <__udivmoddi4+0x16a>
   89834:	2300      	movs	r3, #0
   89836:	fa24 f40e 	lsr.w	r4, r4, lr
   8983a:	602c      	str	r4, [r5, #0]
   8983c:	606b      	str	r3, [r5, #4]
   8983e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89842:	428b      	cmp	r3, r1
   89844:	d907      	bls.n	89856 <__udivmoddi4+0xc6>
   89846:	2d00      	cmp	r5, #0
   89848:	d055      	beq.n	898f6 <__udivmoddi4+0x166>
   8984a:	2100      	movs	r1, #0
   8984c:	e885 0041 	stmia.w	r5, {r0, r6}
   89850:	4608      	mov	r0, r1
   89852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89856:	fab3 f183 	clz	r1, r3
   8985a:	2900      	cmp	r1, #0
   8985c:	f040 808f 	bne.w	8997e <__udivmoddi4+0x1ee>
   89860:	42b3      	cmp	r3, r6
   89862:	d302      	bcc.n	8986a <__udivmoddi4+0xda>
   89864:	4282      	cmp	r2, r0
   89866:	f200 80fc 	bhi.w	89a62 <__udivmoddi4+0x2d2>
   8986a:	1a84      	subs	r4, r0, r2
   8986c:	eb66 0603 	sbc.w	r6, r6, r3
   89870:	2001      	movs	r0, #1
   89872:	46b4      	mov	ip, r6
   89874:	2d00      	cmp	r5, #0
   89876:	d040      	beq.n	898fa <__udivmoddi4+0x16a>
   89878:	e885 1010 	stmia.w	r5, {r4, ip}
   8987c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89880:	b912      	cbnz	r2, 89888 <__udivmoddi4+0xf8>
   89882:	2701      	movs	r7, #1
   89884:	fbb7 f7f2 	udiv	r7, r7, r2
   89888:	fab7 fe87 	clz	lr, r7
   8988c:	f1be 0f00 	cmp.w	lr, #0
   89890:	d135      	bne.n	898fe <__udivmoddi4+0x16e>
   89892:	2101      	movs	r1, #1
   89894:	1bf6      	subs	r6, r6, r7
   89896:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8989a:	fa1f f887 	uxth.w	r8, r7
   8989e:	fbb6 f2fc 	udiv	r2, r6, ip
   898a2:	fb0c 6612 	mls	r6, ip, r2, r6
   898a6:	fb08 f002 	mul.w	r0, r8, r2
   898aa:	0c23      	lsrs	r3, r4, #16
   898ac:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   898b0:	42b0      	cmp	r0, r6
   898b2:	d907      	bls.n	898c4 <__udivmoddi4+0x134>
   898b4:	19f6      	adds	r6, r6, r7
   898b6:	f102 33ff 	add.w	r3, r2, #4294967295
   898ba:	d202      	bcs.n	898c2 <__udivmoddi4+0x132>
   898bc:	42b0      	cmp	r0, r6
   898be:	f200 80d2 	bhi.w	89a66 <__udivmoddi4+0x2d6>
   898c2:	461a      	mov	r2, r3
   898c4:	1a36      	subs	r6, r6, r0
   898c6:	fbb6 f0fc 	udiv	r0, r6, ip
   898ca:	fb0c 6610 	mls	r6, ip, r0, r6
   898ce:	fb08 f800 	mul.w	r8, r8, r0
   898d2:	b2a3      	uxth	r3, r4
   898d4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   898d8:	45a0      	cmp	r8, r4
   898da:	d907      	bls.n	898ec <__udivmoddi4+0x15c>
   898dc:	19e4      	adds	r4, r4, r7
   898de:	f100 33ff 	add.w	r3, r0, #4294967295
   898e2:	d202      	bcs.n	898ea <__udivmoddi4+0x15a>
   898e4:	45a0      	cmp	r8, r4
   898e6:	f200 80b9 	bhi.w	89a5c <__udivmoddi4+0x2cc>
   898ea:	4618      	mov	r0, r3
   898ec:	eba4 0408 	sub.w	r4, r4, r8
   898f0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   898f4:	e79c      	b.n	89830 <__udivmoddi4+0xa0>
   898f6:	4629      	mov	r1, r5
   898f8:	4628      	mov	r0, r5
   898fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   898fe:	fa07 f70e 	lsl.w	r7, r7, lr
   89902:	f1ce 0320 	rsb	r3, lr, #32
   89906:	fa26 f203 	lsr.w	r2, r6, r3
   8990a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8990e:	fbb2 f1fc 	udiv	r1, r2, ip
   89912:	fa1f f887 	uxth.w	r8, r7
   89916:	fb0c 2211 	mls	r2, ip, r1, r2
   8991a:	fa06 f60e 	lsl.w	r6, r6, lr
   8991e:	fa20 f303 	lsr.w	r3, r0, r3
   89922:	fb01 f908 	mul.w	r9, r1, r8
   89926:	4333      	orrs	r3, r6
   89928:	0c1e      	lsrs	r6, r3, #16
   8992a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8992e:	45b1      	cmp	r9, r6
   89930:	fa00 f40e 	lsl.w	r4, r0, lr
   89934:	d909      	bls.n	8994a <__udivmoddi4+0x1ba>
   89936:	19f6      	adds	r6, r6, r7
   89938:	f101 32ff 	add.w	r2, r1, #4294967295
   8993c:	f080 808c 	bcs.w	89a58 <__udivmoddi4+0x2c8>
   89940:	45b1      	cmp	r9, r6
   89942:	f240 8089 	bls.w	89a58 <__udivmoddi4+0x2c8>
   89946:	3902      	subs	r1, #2
   89948:	443e      	add	r6, r7
   8994a:	eba6 0609 	sub.w	r6, r6, r9
   8994e:	fbb6 f0fc 	udiv	r0, r6, ip
   89952:	fb0c 6210 	mls	r2, ip, r0, r6
   89956:	fb00 f908 	mul.w	r9, r0, r8
   8995a:	b29e      	uxth	r6, r3
   8995c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   89960:	45b1      	cmp	r9, r6
   89962:	d907      	bls.n	89974 <__udivmoddi4+0x1e4>
   89964:	19f6      	adds	r6, r6, r7
   89966:	f100 33ff 	add.w	r3, r0, #4294967295
   8996a:	d271      	bcs.n	89a50 <__udivmoddi4+0x2c0>
   8996c:	45b1      	cmp	r9, r6
   8996e:	d96f      	bls.n	89a50 <__udivmoddi4+0x2c0>
   89970:	3802      	subs	r0, #2
   89972:	443e      	add	r6, r7
   89974:	eba6 0609 	sub.w	r6, r6, r9
   89978:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   8997c:	e78f      	b.n	8989e <__udivmoddi4+0x10e>
   8997e:	f1c1 0720 	rsb	r7, r1, #32
   89982:	fa22 f807 	lsr.w	r8, r2, r7
   89986:	408b      	lsls	r3, r1
   89988:	ea48 0303 	orr.w	r3, r8, r3
   8998c:	fa26 f407 	lsr.w	r4, r6, r7
   89990:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   89994:	fbb4 f9fe 	udiv	r9, r4, lr
   89998:	fa1f fc83 	uxth.w	ip, r3
   8999c:	fb0e 4419 	mls	r4, lr, r9, r4
   899a0:	408e      	lsls	r6, r1
   899a2:	fa20 f807 	lsr.w	r8, r0, r7
   899a6:	fb09 fa0c 	mul.w	sl, r9, ip
   899aa:	ea48 0806 	orr.w	r8, r8, r6
   899ae:	ea4f 4618 	mov.w	r6, r8, lsr #16
   899b2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   899b6:	45a2      	cmp	sl, r4
   899b8:	fa02 f201 	lsl.w	r2, r2, r1
   899bc:	fa00 f601 	lsl.w	r6, r0, r1
   899c0:	d908      	bls.n	899d4 <__udivmoddi4+0x244>
   899c2:	18e4      	adds	r4, r4, r3
   899c4:	f109 30ff 	add.w	r0, r9, #4294967295
   899c8:	d244      	bcs.n	89a54 <__udivmoddi4+0x2c4>
   899ca:	45a2      	cmp	sl, r4
   899cc:	d942      	bls.n	89a54 <__udivmoddi4+0x2c4>
   899ce:	f1a9 0902 	sub.w	r9, r9, #2
   899d2:	441c      	add	r4, r3
   899d4:	eba4 040a 	sub.w	r4, r4, sl
   899d8:	fbb4 f0fe 	udiv	r0, r4, lr
   899dc:	fb0e 4410 	mls	r4, lr, r0, r4
   899e0:	fb00 fc0c 	mul.w	ip, r0, ip
   899e4:	fa1f f888 	uxth.w	r8, r8
   899e8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   899ec:	45a4      	cmp	ip, r4
   899ee:	d907      	bls.n	89a00 <__udivmoddi4+0x270>
   899f0:	18e4      	adds	r4, r4, r3
   899f2:	f100 3eff 	add.w	lr, r0, #4294967295
   899f6:	d229      	bcs.n	89a4c <__udivmoddi4+0x2bc>
   899f8:	45a4      	cmp	ip, r4
   899fa:	d927      	bls.n	89a4c <__udivmoddi4+0x2bc>
   899fc:	3802      	subs	r0, #2
   899fe:	441c      	add	r4, r3
   89a00:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89a04:	fba0 8902 	umull	r8, r9, r0, r2
   89a08:	eba4 0c0c 	sub.w	ip, r4, ip
   89a0c:	45cc      	cmp	ip, r9
   89a0e:	46c2      	mov	sl, r8
   89a10:	46ce      	mov	lr, r9
   89a12:	d315      	bcc.n	89a40 <__udivmoddi4+0x2b0>
   89a14:	d012      	beq.n	89a3c <__udivmoddi4+0x2ac>
   89a16:	b155      	cbz	r5, 89a2e <__udivmoddi4+0x29e>
   89a18:	ebb6 030a 	subs.w	r3, r6, sl
   89a1c:	eb6c 060e 	sbc.w	r6, ip, lr
   89a20:	fa06 f707 	lsl.w	r7, r6, r7
   89a24:	40cb      	lsrs	r3, r1
   89a26:	431f      	orrs	r7, r3
   89a28:	40ce      	lsrs	r6, r1
   89a2a:	602f      	str	r7, [r5, #0]
   89a2c:	606e      	str	r6, [r5, #4]
   89a2e:	2100      	movs	r1, #0
   89a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89a34:	4610      	mov	r0, r2
   89a36:	e6f7      	b.n	89828 <__udivmoddi4+0x98>
   89a38:	4689      	mov	r9, r1
   89a3a:	e6de      	b.n	897fa <__udivmoddi4+0x6a>
   89a3c:	4546      	cmp	r6, r8
   89a3e:	d2ea      	bcs.n	89a16 <__udivmoddi4+0x286>
   89a40:	ebb8 0a02 	subs.w	sl, r8, r2
   89a44:	eb69 0e03 	sbc.w	lr, r9, r3
   89a48:	3801      	subs	r0, #1
   89a4a:	e7e4      	b.n	89a16 <__udivmoddi4+0x286>
   89a4c:	4670      	mov	r0, lr
   89a4e:	e7d7      	b.n	89a00 <__udivmoddi4+0x270>
   89a50:	4618      	mov	r0, r3
   89a52:	e78f      	b.n	89974 <__udivmoddi4+0x1e4>
   89a54:	4681      	mov	r9, r0
   89a56:	e7bd      	b.n	899d4 <__udivmoddi4+0x244>
   89a58:	4611      	mov	r1, r2
   89a5a:	e776      	b.n	8994a <__udivmoddi4+0x1ba>
   89a5c:	3802      	subs	r0, #2
   89a5e:	443c      	add	r4, r7
   89a60:	e744      	b.n	898ec <__udivmoddi4+0x15c>
   89a62:	4608      	mov	r0, r1
   89a64:	e706      	b.n	89874 <__udivmoddi4+0xe4>
   89a66:	3a02      	subs	r2, #2
   89a68:	443e      	add	r6, r7
   89a6a:	e72b      	b.n	898c4 <__udivmoddi4+0x134>

00089a6c <__aeabi_idiv0>:
   89a6c:	4770      	bx	lr
   89a6e:	bf00      	nop
   89a70:	090a0a0d 	.word	0x090a0a0d
   89a74:	5f5f5f2a 	.word	0x5f5f5f2a
   89a78:	5f5f5f5f 	.word	0x5f5f5f5f
   89a7c:	5f5f5f5f 	.word	0x5f5f5f5f
   89a80:	205f5f5f 	.word	0x205f5f5f
   89a84:	2e555043 	.word	0x2e555043
   89a88:	2d584341 	.word	0x2d584341
   89a8c:	41535441 	.word	0x41535441
   89a90:	3455334d 	.word	0x3455334d
   89a94:	412d4143 	.word	0x412d4143
   89a98:	5f5f2055 	.word	0x5f5f2055
   89a9c:	5f5f5f5f 	.word	0x5f5f5f5f
   89aa0:	56414c53 	.word	0x56414c53
   89aa4:	5f5f5f45 	.word	0x5f5f5f45
   89aa8:	0d2a5f5f 	.word	0x0d2a5f5f
   89aac:	00000a0a 	.word	0x00000a0a
   89ab0:	2e555043 	.word	0x2e555043
   89ab4:	20584341 	.word	0x20584341
   89ab8:	53544120 	.word	0x53544120
   89abc:	55334d41 	.word	0x55334d41
   89ac0:	00004334 	.word	0x00004334
   89ac4:	000186a0 	.word	0x000186a0
   89ac8:	000186a0 	.word	0x000186a0
   89acc:	00b71b00 	.word	0x00b71b00
   89ad0:	65540a0d 	.word	0x65540a0d
   89ad4:	73207473 	.word	0x73207473
   89ad8:	74726174 	.word	0x74726174
   89adc:	2e2e6465 	.word	0x2e2e6465
   89ae0:	000a0d2e 	.word	0x000a0d2e
   89ae4:	48500a0d 	.word	0x48500a0d
   89ae8:	2d64253a 	.word	0x2d64253a
   89aec:	0d64252d 	.word	0x0d64252d
   89af0:	0000000a 	.word	0x0000000a
   89af4:	454e4550 	.word	0x454e4550
   89af8:	56554f20 	.word	0x56554f20
   89afc:	00545245 	.word	0x00545245
   89b00:	00203a09 	.word	0x00203a09
   89b04:	00004e4f 	.word	0x00004e4f
   89b08:	0046464f 	.word	0x0046464f
   89b0c:	454e4550 	.word	0x454e4550
   89b10:	52454620 	.word	0x52454620
   89b14:	0000454d 	.word	0x0000454d
   89b18:	00534c49 	.word	0x00534c49
   89b1c:	203a0909 	.word	0x203a0909
   89b20:	00000000 	.word	0x00000000
   89b24:	00005653 	.word	0x00005653
   89b28:	41444152 	.word	0x41444152
   89b2c:	00000052 	.word	0x00000052
   89b30:	00555644 	.word	0x00555644
   89b34:	4d455250 	.word	0x4d455250
   89b38:	45524549 	.word	0x45524549
   89b3c:	544e4520 	.word	0x544e4520
   89b40:	00454552 	.word	0x00454552
   89b44:	20555644 	.word	0x20555644
   89b48:	454e4547 	.word	0x454e4547
   89b4c:	004c4152 	.word	0x004c4152
   89b50:	52544e45 	.word	0x52544e45
   89b54:	4c204545 	.word	0x4c204545
   89b58:	45524249 	.word	0x45524249
   89b5c:	00000000 	.word	0x00000000
   89b60:	52544e45 	.word	0x52544e45
   89b64:	4f204545 	.word	0x4f204545
   89b68:	4f495450 	.word	0x4f495450
   89b6c:	0000004e 	.word	0x0000004e
   89b70:	65540a0d 	.word	0x65540a0d
   89b74:	74207473 	.word	0x74207473
   89b78:	696d7265 	.word	0x696d7265
   89b7c:	6574616e 	.word	0x6574616e
   89b80:	2e2e2e64 	.word	0x2e2e2e64
   89b84:	00000a0d 	.word	0x00000a0d

00089b88 <commands>:
   89b88:	0000624f 0008083d 0000ae76 00080791     Ob..=...v.......
   89b98:	00003427 000809ed 00000000 00000000     '4..............
   89ba8:	42090a0d 64616f72 74736163 6e797320     ...Broadcast syn
   89bb8:	6f726863 617a696e 6e6f6974 6b6f7420     chronization tok
   89bc8:	0a0d6e65 00000000 624e0a0d 74736554     en........NbTest
   89bd8:	6425203a 00000a0d 75420a0d 72657a7a     : %d......Buzzer
   89be8:	206e6f20 20726f66 00000000 6d206425      on for ....%d m
   89bf8:	2e2e2e73 00000a0d 75420a0d 72657a7a     s.........Buzzer
   89c08:	66666f20 0d2e2e2e 0000000a 43090a0d      off...........C
   89c18:	53524d4f 5f353834 3a57454e 00000a0d     OMRS485_NEW:....
   89c28:	53520a0d 20353834 4445454e 4b434120     ..RS485 NEED ACK
   89c38:	6425203a 00000a0d 3d3d0a0d 3d3d3d3d     : %d......======
   89c48:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89c58:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89c68:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89c78:	0a0d3d3d 00000000 3d3d0a0d 3d3d3d3d     ==........======
   89c88:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89c98:	4152463d 5220454d 49454345 3d444556     =FRAME RECEIVED=
   89ca8:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89cb8:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89cc8:	00000a0d 63657209 3a637243 58343025     .....recCrc:%04X
   89cd8:	63726320 30253a43 00205834 3d3d0a0d      crcC:%04X ...==
   89ce8:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89cf8:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89d08:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89d18:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89d28:	3d3d3d3d 00000a0d 5f6d0a0d 54494157     ====......m_WAIT
   89d38:	4b43415f 00000a0d 2a090a0d 2a2a2a2a     _ACK.......*****
   89d48:	4d4f4320 38345352 4f4e2035 4b434120      COMRS485 NO ACK
   89d58:	4f524620 4c53204d 20455641 00000023      FROM SLAVE #...
   89d68:	58323025 20796220 74206425 73656972     %02X by %d tries
   89d78:	2a2a2a20 0a0d2a2a 00000000               *****......

00089d84 <usart_console_settings>:
   89d84:	0001c200 000000c0 00000800 00000000     ................
	...
   89d9c:	2a090a0d 2a2a2a2a 4f525245 64253a52     ...*****ERROR:%d
   89dac:	3a435309 2a2a6425 0d2a2a2a 0000000a     .SC:%d*****.....
   89dbc:	46090a0d 454d4152 5f465542 0d57454e     ...FRAMEBUF_NEW.
   89dcc:	0000000a 20090a0d 454d5246 5355505f     ....... FRME_PUS
   89ddc:	0a0d2048 00000000 53090a0d 58253a43     H .........SC:%X
   89dec:	00000a0d 20090a0d 454d5246 504f505f     ....... FRME_POP
   89dfc:	000a0d20 70090a0d 3a504f50 00582520      ......pPOP: %X.
   89e0c:	20090a0d 454d5246 504f505f 504d4520     ... FRME_POP EMP
   89e1c:	0d205954 0000000a 25207325 73252064     TY .....%s %d %s
   89e2c:	64342520 00000000                        %4d....

00089e34 <nbDaysInMonth>:
   89e34:	1e1f1c1f 1f1f1e1f 1f1e1f1e 756e614a     ............Janu
   89e44:	00797261 72626546 79726175 00000000     ary.February....
   89e54:	6372614d 00000068 69727041 0000006c     March...April...
   89e64:	0079614d 656e754a 00000000 796c754a     May.June....July
   89e74:	00000000 75677541 00007473 74706553     ....August..Sept
   89e84:	65626d65 00000072 6f74634f 00726562     ember...October.
   89e94:	65766f4e 7265626d 00000000 65636544     November....Dece
   89ea4:	7265626d 00000000 646e7553 00007961     mber....Sunday..
   89eb4:	646e6f4d 00007961 73657554 00796164     Monday..Tuesday.
   89ec4:	6e646557 61647365 00000079 72756854     Wednesday...Thur
   89ed4:	79616473 00000000 64697246 00007961     sday....Friday..
   89ee4:	75746153 79616472 00000000              Saturday....

00089ef0 <line2addr>:
   89ef0:	54144000 5453414d 00005245 76616c53     .@.TMASTER..Slav
   89f00:	44412065 78253a44 00000000 6c530a0d     e ADD:%x......Sl
   89f10:	20657661 3a6d6f63 09782520 6c530909     ave com: %x...Sl
   89f20:	20657661 3a646461 0a0d7825 00000000     ave add:%x......
   89f30:	75460a0d 203a636e 0a0d7825 00000000     ..Func: %x......
   89f40:	73490a0d 526b6341 203a7165 0a0d6425     ..IsAckReq: %d..
   89f50:	00000000 50090a0d 45434f52 46205353     .......PROCESS F
   89f60:	454d4152 00000a0d 53490a0d 53414d20     RAME......IS MAS
   89f70:	3a524554 00642520 49090a0d 414d2073     TER: %d....Is MA
   89f80:	52455453 00000a0d 41090a0d 52204b43     STER.......ACK R
   89f90:	49555145 3a444552 0d642520 0000000a     EQUIRED: %d.....
   89fa0:	57090a0d 45544952 4e49535f 5f454c47     ...WRITE_SINGLE_
   89fb0:	4c494f43 4b43415f 0d4b4f5f 0000000a     COIL_ACK_OK.....
   89fc0:	52090a0d 5f444145 4c494f43 43415f53     ...READ_COILS_AC
   89fd0:	4b4f5f4b 00000a0d 4e090a0d 73207765     K_OK.......New s
   89fe0:	6576616c 3a444920 0d582520 0000000a     lave ID: %X.....
   89ff0:	454a0a0d 4d454420 45444e41 20414c20     ..JE DEMANDE LA 
   8a000:	434e4f46 4e4f4954 5825203a 000a0d20     FONCTION: %X ...
   8a010:	53090a0d 4556414c 51455220 4552203a     ...SLAVE REQ: RE
   8a020:	43204441 534c494f 00000a0d 53090a0d     AD COILS.......S
   8a030:	4556414c 51455220 5257203a 20455449     LAVE REQ: WRITE 
   8a040:	474e4953 4320454c 534c494f 00000a0d     SINGLE COILS....
   8a050:	20090a0d 52204f4e 45555145 00005453     ... NO REQUEST..
   8a060:	52570a0d 20455449 474e4953 4320454c     ..WRITE SINGLE C
   8a070:	0d4c494f 6e75460a 6f697463 646f436e     OIL..FunctionCod
   8a080:	25203a65 4f0a0d58 55505455 44412054     e: %X..OUTPUT AD
   8a090:	203a5244 4f205825 55505455 41562054     DR: %X OUTPUT VA
   8a0a0:	3a45554c 00582520 570a0a0d 45544952     LUE: %X....WRITE
   8a0b0:	4e495320 20454c47 4c494f43 4b434120      SINGLE COIL ACK
   8a0c0:	0a0d2121 00000000 520a0a0d 20444145     !!.........READ 
   8a0d0:	4c494f43 43412053 0d21214b 0000000a     COILS ACK!!.....
   8a0e0:	2a090a0d 2a2a2a2a 444f4d20 5f535542     ...***** MODBUS_
   8a0f0:	56414c53 4f4e5f45 43415f54 5246204b     SLAVE_NOT_ACK FR
   8a100:	53204d4f 4556414c 00002320 78323025     OM SLAVE #..%02x
   8a110:	2a2a2a20 0a0d2a2a 00000000               *****......

0008a11c <slaves>:
   8a11c:	00000016 00000020 00000025 00000000     .... ...%.......
   8a12c:	3230250d 30253a64 253a6432 00643230     .%02d:%02d:%02d.
   8a13c:	64323025 3230253a 30253a64 00006432     %02d:%02d:%02d..
   8a14c:	64323025 3230252f 30252f64 00006434     %02d/%02d/%04d..
   8a15c:	003e0a0d 00445b1b 00435b1b 3e2f0a0d     ..>..[D..[C.../>
   8a16c:	00000000 6b6e7509 6e776f6e 646d6320     .....unknown cmd
   8a17c:	3025203a 0a0d5834 00000000 2a090a0d     : %04X.........*
   8a18c:	2a2a2a2a 73616320 535f2065 4c4c4548     **** case _SHELL
   8a19c:	48424b5f 203a5449 20444142 65736163     _KBHIT: BAD case
   8a1ac:	2a2a2021 2a2a2a2a 00000a0d 20200a0d     ! ******......  
   8a1bc:	43534520 5145535f 0000203a 30253c20      ESC_SEQ: .. <%0
   8a1cc:	0d3e5834 0000000a 4b325b1b 0000000d     4X>......[2K....
   8a1dc:	3b315b1b 00004335                       .[1;5C..

0008a1e4 <heartBeatRhythm>:
   8a1e4:	00000028 000000fe 00000028 00000548     (.......(...H...
   8a1f4:	00000000                                ....

0008a1f8 <hexDigits>:
   8a1f8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   8a208:	00000000                                ....

0008a20c <restartTimeOut>:
   8a20c:	00000033                                3...

0008a210 <separators>:
   8a210:	3a3b2e20 0d095c2f 0000000a 4a325b1b      .;:/\.......[2J
   8a220:	00000000 3d090a0d 3d3d3d3d 3d3d3d3d     .......=========
   8a230:	3d3d3d3d 43203d3d 20504948 4e454449     ====== CHIP IDEN
   8a240:	49464954 49205245 534f464e 3d3d3d20     TIFIER INFOS ===
   8a250:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0a0d     ============....
   8a260:	52455609 4e4f4953 6325203a 00000a0d     .VERSION: %c....
   8a270:	45202009 434f5250 0000203a 564e2009     .  EPROC: ... NV
   8a280:	5a495350 0000203a 50564e09 325a4953     PSIZ: ...NVPSIZ2
   8a290:	0000203a 41525309 5a49534d 0000203a     : ...SRAMSIZ: ..
   8a2a0:	20202009 48435241 0000203a 2d2d2d20     .   ARCH: .. ---
   8a2b0:	00000020 564e2009 50595450 0000203a      .... NVPTYP: ..
   8a2c0:	20202009 44495845 3025203a 0a0d5838     .   EXID: %08X..
   8a2d0:	00000000 3d090a0d 3d3d3d3d 3d3d3d3d     .......=========
   8a2e0:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   8a2f0:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   8a300:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0a0d     ============....
   8a310:	7379530d 206d6574 6c6c6977 73657220     .System will res
   8a320:	74726174 206e6920 73206925 6e6f6365     tart in %i secon
   8a330:	2e2e2e64 00000000 2f2e3a20 00000a0d     d....... :./....
   8a340:	4b325b1b 00000000 646d6320 61747320     .[2K.... cmd sta
   8a350:	3a207472 00000020                       rt : ...

0008a358 <arch>:
   8a358:	00000019 0008a61c 0008a628 00000029     ........(...)...
   8a368:	0008a63c 0008a64c 00000034 0008a660     <...L...4...`...
   8a378:	0008a668 00000037 0008a678 0008a680     h...7...x.......
   8a388:	00000039 0008a68c 0008a694 0000003b     9...........;...
   8a398:	0008a6a0 0008a6a8 00000040 0008a6b8     ........@.......
   8a3a8:	0008a6c0 00000042 0008a6d0 0008a6d8     ....B...........
   8a3b8:	00000055 0008a6e8 0008a6f0 00000060     U...........`...
   8a3c8:	0008a700 0008a70c 00000061 0008a720     ........a... ...
   8a3d8:	0008a730 00000063 0008a744 0008a74c     0...c...D...L...
   8a3e8:	00000070 0008a75c 0008a768 00000071     p...\...h...q...
   8a3f8:	0008a77c 0008a78c 00000072 0008a7a0     |.......r.......
   8a408:	0008a7b0 00000073 0008a7c4 0008a7d0     ....s...........
   8a418:	00000075 0008a7e4 0008a7f0 00000076     u...........v...
   8a428:	0008a804 0008a814 00000080 0008a828     ............(...
   8a438:	0008a830 00000081 0008a854 0008a85c     0.......T...\...
   8a448:	00000083 0008a880 0008a890 00000084     ................
   8a458:	0008a8bc 0008a8cc 00000085 0008a8f8     ................
   8a468:	0008a908 00000086 0008a934 0008a944     ........4...D...
   8a478:	00000088 0008a974 0008a984 00000089     ....t...........
   8a488:	0008a9ac 0008a9bc 0000008a 0008a9e4     ................
   8a498:	0008a9f4 00000092 0008aa20 0008aa28     ........ ...(...
   8a4a8:	00000093 0008aa38 0008aa40 00000094     ....8...@.......
   8a4b8:	0008aa60 0008aa68 00000095 0008aa88     `...h...........
   8a4c8:	0008aa90 00000099 0008aab4 0008aac0     ................
   8a4d8:	0000009a 0008aae4 0008aaf0 000000a5     ................
   8a4e8:	0008ab14 0008ab14 000000f0 0008ab1c     ................
   8a4f8:	0008ab24 00000000 0008ab34 00000000     $.......4.......

0008a508 <cmdEntries>:
   8a508:	0000624f 00083129 00006cab 00083159     Ob..)1...l..Y1..
   8a518:	00003bed 00083145 0000aaf6 000830a9     .;..E1.......0..
   8a528:	0000b326 000830e9 0000902b 000832ed     &....0..+....2..
   8a538:	0000b344 000832ed 0000ebe8 00083321     D....2......!3..
	...
   8a550:	204d4f52 202d2d2d 004d4f52 4c4d4f52     ROM --- ROM.ROML
   8a560:	20535345 202d2d2d 6c4d4f52 20737365     ESS --- ROMless 
   8a570:	6f20726f 68632d6e 46207069 6873616c     or on-chip Flash
   8a580:	00000000 53414c46 2d2d2048 6d45202d     ....FLASH --- Em
   8a590:	64646562 46206465 6873616c 6d654d20     bedded Flash Mem
   8a5a0:	0079726f 5f4d4f52 53414c46 2d2d2048     ory.ROM_FLASH --
   8a5b0:	4f52202d 6e61204d 6d452064 64646562     - ROM and Embedd
   8a5c0:	46206465 6873616c 6d654d20 2079726f     ed Flash Memory 
   8a5d0:	50564e5b 205a4953 52207369 73204d4f     [NVPSIZ is ROM s
   8a5e0:	20657a69 564e202f 5a495350 73692032     ize / NVPSIZ2 is
   8a5f0:	616c4620 73206873 5d657a69 00000000      Flash size]....
   8a600:	4d415253 2d2d2d20 41525320 6d65204d     SRAM --- SRAM em
   8a610:	74616c75 20676e69 004d4f52 31395441     ulating ROM.AT91
   8a620:	394d4153 00007878 31395441 394d4153     SAM9xx..AT91SAM9
   8a630:	53207878 65697265 00000073 31395441     xx Series...AT91
   8a640:	394d4153 78784558 00000000 31395441     SAM9XExx....AT91
   8a650:	394d4153 78784558 72655320 00736569     SAM9XExx Series.
   8a660:	31395441 00343378 31395441 20343378     AT91x34.AT91x34 
   8a670:	69726553 00007365 37504143 00000000     Series..CAP7....
   8a680:	37504143 72655320 00736569 39504143     CAP7 Series.CAP9
   8a690:	00000000 39504143 72655320 00736569     ....CAP9 Series.
   8a6a0:	31504143 00000031 31504143 65532031     CAP11...CAP11 Se
   8a6b0:	73656972 00000000 31395441 00303478     ries....AT91x40.
   8a6c0:	31395441 20303478 69726553 00007365     AT91x40 Series..
   8a6d0:	31395441 00323478 31395441 20323478     AT91x42.AT91x42 
   8a6e0:	69726553 00007365 31395441 00353578     Series..AT91x55.
   8a6f0:	31395441 20353578 69726553 00007365     AT91x55 Series..
   8a700:	31395441 374d4153 00787841 31395441     AT91SAM7Axx.AT91
   8a710:	374d4153 20787841 69726553 00007365     SAM7Axx Series..
   8a720:	31395441 374d4153 78785141 00000000     AT91SAM7AQxx....
   8a730:	31395441 374d4153 78785141 72655320     AT91SAM7AQxx Ser
   8a740:	00736569 31395441 00333678 31395441     ies.AT91x63.AT91
   8a750:	20333678 69726553 00007365 31395441     x63 Series..AT91
   8a760:	374d4153 00787853 31395441 374d4153     SAM7Sxx.AT91SAM7
   8a770:	20787853 69726553 00007365 31395441     Sxx Series..AT91
   8a780:	374d4153 78784358 00000000 31395441     SAM7XCxx....AT91
   8a790:	374d4153 78784358 72655320 00736569     SAM7XCxx Series.
   8a7a0:	31395441 374d4153 78784553 00000000     AT91SAM7SExx....
   8a7b0:	31395441 374d4153 78784553 72655320     AT91SAM7SExx Ser
   8a7c0:	00736569 31395441 374d4153 0078784c     ies.AT91SAM7Lxx.
   8a7d0:	31395441 374d4153 2078784c 69726553     AT91SAM7Lxx Seri
   8a7e0:	00007365 31395441 374d4153 00787858     es..AT91SAM7Xxx.
   8a7f0:	31395441 374d4153 20787858 69726553     AT91SAM7Xxx Seri
   8a800:	00007365 31395441 374d4153 78784c53     es..AT91SAM7SLxx
   8a810:	00000000 31395441 374d4153 78784c53     ....AT91SAM7SLxx
   8a820:	72655320 00736569 334d4153 00437855      Series.SAM3UxC.
   8a830:	334d4153 20437855 69726553 28207365     SAM3UxC Series (
   8a840:	2d303031 206e6970 73726576 296e6f69     100-pin version)
   8a850:	00000000 334d4153 00457855 334d4153     ....SAM3UxE.SAM3
   8a860:	20457855 69726553 28207365 2d343431     UxE Series (144-
   8a870:	206e6970 73726576 296e6f69 00000000     pin version)....
   8a880:	334d4153 2f437841 334d4153 00437841     SAM3AxC/SAM3AxC.
   8a890:	334d4153 2f437841 344d4153 20437841     SAM3AxC/SAM4AxC 
   8a8a0:	69726553 28207365 2d303031 206e6970     Series (100-pin 
   8a8b0:	73726576 296e6f69 00000000 334d4153     version)....SAM3
   8a8c0:	2f437858 344d4153 00437858 334d4153     XxC/SAM4XxC.SAM3
   8a8d0:	2f437858 344d4153 20437858 69726553     XxC/SAM4XxC Seri
   8a8e0:	28207365 2d303031 206e6970 73726576     es (100-pin vers
   8a8f0:	296e6f69 00000000 334d4153 2f457858     ion)....SAM3XxE/
   8a900:	344d4153 00457858 334d4153 2f457858     SAM4XxE.SAM3XxE/
   8a910:	344d4153 20457858 69726553 28207365     SAM4XxE Series (
   8a920:	2d343431 206e6970 73726576 296e6f69     144-pin version)
   8a930:	00000000 334d4153 2f477858 344d4153     ....SAM3XxG/SAM4
   8a940:	00477858 334d4153 2f477858 344d4153     XxG.SAM3XxG/SAM4
   8a950:	20477858 69726553 28207365 2f383032     XxG Series (208/
   8a960:	2d373132 206e6970 73726576 296e6f69     217-pin version)
   8a970:	00000000 334d4153 2f417853 344d4153     ....SAM3SxA/SAM4
   8a980:	00417853 334d4153 2f417853 344d4153     SxA.SAM3SxA/SAM4
   8a990:	20417853 69726553 28207365 702d3834     SxA Series (48-p
   8a9a0:	76206e69 69737265 00296e6f 334d4153     in version).SAM3
   8a9b0:	2f427853 344d4153 00427853 334d4153     SxB/SAM4SxB.SAM3
   8a9c0:	2f427853 344d4153 20427853 69726553     SxB/SAM4SxB Seri
   8a9d0:	28207365 702d3436 76206e69 69737265     es (64-pin versi
   8a9e0:	00296e6f 334d4153 2f437853 344d4153     on).SAM3SxC/SAM4
   8a9f0:	00437853 334d4153 2f437853 344d4153     SxC.SAM3SxC/SAM4
   8aa00:	20437853 69726553 28207365 2d303031     SxC Series (100-
   8aa10:	206e6970 73726576 296e6f69 00000000     pin version)....
   8aa20:	31395441 00323978 31395441 20323978     AT91x92.AT91x92 
   8aa30:	69726553 00007365 334d4153 0041784e     Series..SAM3NxA.
   8aa40:	334d4153 2041784e 69726553 28207365     SAM3NxA Series (
   8aa50:	702d3834 76206e69 69737265 00296e6f     48-pin version).
   8aa60:	334d4153 0042784e 334d4153 2042784e     SAM3NxB.SAM3NxB 
   8aa70:	69726553 28207365 702d3436 76206e69     Series (64-pin v
   8aa80:	69737265 00296e6f 334d4153 0043784e     ersion).SAM3NxC.
   8aa90:	334d4153 2043784e 69726553 28207365     SAM3NxC Series (
   8aaa0:	2d303031 206e6970 73726576 296e6f69     100-pin version)
   8aab0:	00000000 334d4153 42784453 00000000     ....SAM3SDxB....
   8aac0:	334d4153 42784453 72655320 20736569     SAM3SDxB Series 
   8aad0:	2d343628 206e6970 73726576 296e6f69     (64-pin version)
   8aae0:	00000000 334d4153 43784453 00000000     ....SAM3SDxC....
   8aaf0:	334d4153 43784453 72655320 20736569     SAM3SDxC Series 
   8ab00:	30303128 6e69702d 72657620 6e6f6973     (100-pin version
   8ab10:	00000029 354d4153 00000041 35375441     )...SAM5A...AT75
   8ab20:	00787843 35375441 20787843 69726553     Cxx.AT75Cxx Seri
   8ab30:	00007365 41204f4e 21484352 00000000     es..NO ARCH!....
   8ab40:	204b3834 65747962 00000073 62204b31     48K bytes...1K b
   8ab50:	73657479 00000000 62204b32 73657479     ytes....2K bytes
   8ab60:	00000000 62204b36 73657479 00000000     ....6K bytes....
   8ab70:	204b3432 65747962 00000073 62204b34     24K bytes...4K b
   8ab80:	73657479 00000000 204b3038 65747962     ytes....80K byte
   8ab90:	00000073 4b303631 74796220 00007365     s...160K bytes..
   8aba0:	62204b38 73657479 00000000 204b3631     8K bytes....16K 
   8abb0:	65747962 00000073 204b3233 65747962     bytes...32K byte
   8abc0:	00000073 204b3436 65747962 00000073     s...64K bytes...
   8abd0:	4b383231 74796220 00007365 4b363532     128K bytes..256K
   8abe0:	74796220 00007365 204b3639 65747962      bytes..96K byte
   8abf0:	00000073 4b323135 74796220 00007365     s...512K bytes..
   8ac00:	454e4f4e 00000000 34323031 7962204b     NONE....1024K by
   8ac10:	00736574 38343032 7962204b 00736574     tes.2048K bytes.
   8ac20:	45444e55 454e4946 00002144 394d5241     UNDEFINED!..ARM9
   8ac30:	00533634 374d5241 494d4454 00000000     46S.ARM7TDMI....
   8ac40:	74726f43 4d2d7865 00000033 394d5241     Cortex-M3...ARM9
   8ac50:	00543032 394d5241 4a453632 00000053     20T.ARM926EJS...
   8ac60:	74726f43 412d7865 00000035 74726f43     Cortex-A5...Cort
   8ac70:	4d2d7865 00000034                       ex-M4...

0008ac78 <uart_opt>:
   8ac78:	05b8d800 0001c200 00000800 454d0a0d     ..............ME
   8ac88:	4e5f554e 0a0d5745 00000000 20202020     NU_NEW......    
   8ac98:	20202020 20202020 20202020 20202020                     
   8aca8:	00000000                                ....

0008acac <_etatMenu>:
   8acac:	0008ae7c 0008add4 00000000 00083bb1     |............;..
   8acbc:	0008ae8c 0008add4 00000000 00083bf1     .............;..
   8accc:	0008ae70 0008add4 00000000 00083c31     p...........1<..
	...

0008acec <_mainMenu>:
   8acec:	0008ae14 00000000 00000000 00083b71     ............q;..
   8acfc:	0008ae20 00000000 0008add4 00000000      ...............
   8ad0c:	0008ae30 00000000 0008add4 00000000     0...............
   8ad1c:	0008ae40 00000000 0008add4 00000000     @...............
	...
   8ad3c:	54415445 524f5020 31204554 00000000     ETAT PORTE 1....
   8ad4c:	54415445 524f5020 00534554 6e656d5f     ETAT PORTES._men
   8ad5c:	74704f75 536e6f69 75467361 203a636e     uOptionSasFunc: 
   8ad6c:	20444142 00004353 20202020 20202020     BAD SC..        
   8ad7c:	20202020 20202020 20202020 00000020                  ...
   8ad8c:	4d524546 52555445 41532045 00000053     FERMETURE SAS...
   8ad9c:	6e656d5f 726f5075 65466574 72656d72     _menuPorteFermer
   8adac:	42203a31 53204441 00000043 6e656d5f     1: BAD SC..._men
   8adbc:	726f5075 65466574 72656d72 42203a32     uPorteFermer2: B
   8adcc:	53204441 00000043                       AD SC...

0008add4 <_porteMenu>:
   8add4:	0008ae50 0008acec 00000000 00083b31     P...........1;..
   8ade4:	0008ae60 0008acec 00000000 00083b51     `...........Q;..
   8adf4:	0008ae70 0008acec 0008acac 00000000     p...............
	...
   8ae14:	6974704f 73206e6f 00007361 6974704f     Option sas..Opti
   8ae24:	70206e6f 6574726f 00000073 6974704f     on portes...Opti
   8ae34:	66206e6f 74656e65 00006572 6974704f     on fenetre..Opti
   8ae44:	74206e6f 70706172 00000065 6d726546     on trappe...Ferm
   8ae54:	70207265 6574726f 00003120 6d726546     er porte 1..Ferm
   8ae64:	70207265 6574726f 00003220 74617445     er porte 2..Etat
   8ae74:	726f7020 00736574 74617445 726f7020      portes.Etat por
   8ae84:	31206574 00000000 74617445 726f7020     te 1....Etat por
   8ae94:	32206574 00000000 20090a0d 55444f4d     te 2....... MODU
   8aea4:	4e20454c 21215745 000a0d21 20090a0d     LE NEW!!!...... 
   8aeb4:	45444649 414d2046 52455453 0d212121     IFDEF MASTER!!!.
   8aec4:	0000000a 4d090a0d 4c55444f 44412045     .......MODULE AD
   8aed4:	53534552 25203a45 45530958 4c414952     RESSE: %X.SERIAL
   8aee4:	4d554e20 3a524542 00582520 55444f4d      NUMBER: %X.MODU
   8aef4:	4120454c 53455244 203a4553 00005825     LE ADRESSE: %X..
   8af04:	00000001 00000002 00000004 00000008     ................
   8af14:	00000010 00000020 00000040 00000080     .... ...@.......
   8af24:	00000100 00000200 00000400              ............

0008af30 <_global_impure_ptr>:
   8af30:	20000638 00464e49 00666e69 004e414e     8.. INF.inf.NAN.
   8af40:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   8af50:	46454443 00000000 33323130 37363534     CDEF....01234567
   8af60:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8af70:	0000296c 00000030                       l)..0...

0008af78 <blanks.7208>:
   8af78:	20202020 20202020 20202020 20202020                     

0008af88 <zeroes.7209>:
   8af88:	30303030 30303030 30303030 30303030     0000000000000000
   8af98:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8afa8:	49534f50 00000058 0000002e 00000000     POSIX...........

0008afb8 <__mprec_bigtens>:
   8afb8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8afc8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8afd8:	7f73bf3c 75154fdd                       <.s..O.u

0008afe0 <__mprec_tens>:
   8afe0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8aff0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8b000:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8b010:	00000000 412e8480 00000000 416312d0     .......A......cA
   8b020:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8b030:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8b040:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8b050:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8b060:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8b070:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8b080:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8b090:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8b0a0:	79d99db4 44ea7843                       ...yCx.D

0008b0a8 <p05.6040>:
   8b0a8:	00000005 00000019 0000007d              ........}...

0008b0b4 <_ctype_>:
   8b0b4:	20202000 20202020 28282020 20282828     .         ((((( 
   8b0c4:	20202020 20202020 20202020 20202020                     
   8b0d4:	10108820 10101010 10101010 10101010      ...............
   8b0e4:	04040410 04040404 10040404 10101010     ................
   8b0f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8b104:	01010101 01010101 01010101 10101010     ................
   8b114:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8b124:	02020202 02020202 02020202 10101010     ................
   8b134:	00000020 00000000 00000000 00000000      ...............
	...

0008b1b8 <_init>:
   8b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b1ba:	bf00      	nop
   8b1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8b1be:	bc08      	pop	{r3}
   8b1c0:	469e      	mov	lr, r3
   8b1c2:	4770      	bx	lr

0008b1c4 <__init_array_start>:
   8b1c4:	0008688d 	.word	0x0008688d

0008b1c8 <__frame_dummy_init_array_entry>:
   8b1c8:	000800e1                                ....

0008b1cc <_fini>:
   8b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b1ce:	bf00      	nop
   8b1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8b1d2:	bc08      	pop	{r3}
   8b1d4:	469e      	mov	lr, r3
   8b1d6:	4770      	bx	lr

0008b1d8 <__fini_array_start>:
   8b1d8:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000010:	4a21      	ldr	r2, [pc, #132]	; (20000098 <SystemInit+0x8c>)
20000012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000001a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
2000001e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
20000022:	6a1b      	ldr	r3, [r3, #32]
20000024:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20000028:	d107      	bne.n	2000003a <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000002a:	4a1c      	ldr	r2, [pc, #112]	; (2000009c <SystemInit+0x90>)
2000002c:	4b1c      	ldr	r3, [pc, #112]	; (200000a0 <SystemInit+0x94>)
2000002e:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000030:	461a      	mov	r2, r3
20000032:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000034:	f013 0f01 	tst.w	r3, #1
20000038:	d0fb      	beq.n	20000032 <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000003a:	4a1a      	ldr	r2, [pc, #104]	; (200000a4 <SystemInit+0x98>)
2000003c:	4b18      	ldr	r3, [pc, #96]	; (200000a0 <SystemInit+0x94>)
2000003e:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000040:	461a      	mov	r2, r3
20000042:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000044:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20000048:	d0fb      	beq.n	20000042 <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2000004a:	4a15      	ldr	r2, [pc, #84]	; (200000a0 <SystemInit+0x94>)
2000004c:	6b13      	ldr	r3, [r2, #48]	; 0x30
2000004e:	f023 0303 	bic.w	r3, r3, #3
20000052:	f043 0301 	orr.w	r3, r3, #1
20000056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000005a:	f013 0f08 	tst.w	r3, #8
2000005e:	d0fb      	beq.n	20000058 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000060:	4a11      	ldr	r2, [pc, #68]	; (200000a8 <SystemInit+0x9c>)
20000062:	4b0f      	ldr	r3, [pc, #60]	; (200000a0 <SystemInit+0x94>)
20000064:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000066:	461a      	mov	r2, r3
20000068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000006a:	f013 0f02 	tst.w	r3, #2
2000006e:	d0fb      	beq.n	20000068 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000070:	2211      	movs	r2, #17
20000072:	4b0b      	ldr	r3, [pc, #44]	; (200000a0 <SystemInit+0x94>)
20000074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000076:	461a      	mov	r2, r3
20000078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000007a:	f013 0f08 	tst.w	r3, #8
2000007e:	d0fb      	beq.n	20000078 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000080:	2212      	movs	r2, #18
20000082:	4b07      	ldr	r3, [pc, #28]	; (200000a0 <SystemInit+0x94>)
20000084:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000086:	461a      	mov	r2, r3
20000088:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000008a:	f013 0f08 	tst.w	r3, #8
2000008e:	d0fb      	beq.n	20000088 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000090:	4a06      	ldr	r2, [pc, #24]	; (200000ac <SystemInit+0xa0>)
20000092:	4b07      	ldr	r3, [pc, #28]	; (200000b0 <SystemInit+0xa4>)
20000094:	601a      	str	r2, [r3, #0]
20000096:	4770      	bx	lr
20000098:	400e0800 	.word	0x400e0800
2000009c:	00370809 	.word	0x00370809
200000a0:	400e0400 	.word	0x400e0400
200000a4:	01370809 	.word	0x01370809
200000a8:	200f3f01 	.word	0x200f3f01
200000ac:	05b8d800 	.word	0x05b8d800
200000b0:	2000062c 	.word	0x2000062c

200000b4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000b4:	4b16      	ldr	r3, [pc, #88]	; (20000110 <system_init_flash+0x5c>)
200000b6:	4298      	cmp	r0, r3
200000b8:	d912      	bls.n	200000e0 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000ba:	4b16      	ldr	r3, [pc, #88]	; (20000114 <system_init_flash+0x60>)
200000bc:	4298      	cmp	r0, r3
200000be:	d916      	bls.n	200000ee <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000c0:	4b15      	ldr	r3, [pc, #84]	; (20000118 <system_init_flash+0x64>)
200000c2:	4298      	cmp	r0, r3
200000c4:	d91b      	bls.n	200000fe <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200000c6:	4b15      	ldr	r3, [pc, #84]	; (2000011c <system_init_flash+0x68>)
200000c8:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200000ca:	bf94      	ite	ls
200000cc:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000d0:	f44f 6380 	movhi.w	r3, #1024	; 0x400
200000d4:	4a12      	ldr	r2, [pc, #72]	; (20000120 <system_init_flash+0x6c>)
200000d6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000dc:	6013      	str	r3, [r2, #0]
200000de:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200000e0:	2300      	movs	r3, #0
200000e2:	4a0f      	ldr	r2, [pc, #60]	; (20000120 <system_init_flash+0x6c>)
200000e4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200000e6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000ea:	6013      	str	r3, [r2, #0]
200000ec:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200000ee:	f44f 7380 	mov.w	r3, #256	; 0x100
200000f2:	4a0b      	ldr	r2, [pc, #44]	; (20000120 <system_init_flash+0x6c>)
200000f4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200000f6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000fa:	6013      	str	r3, [r2, #0]
200000fc:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200000fe:	f44f 7300 	mov.w	r3, #512	; 0x200
20000102:	4a07      	ldr	r2, [pc, #28]	; (20000120 <system_init_flash+0x6c>)
20000104:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000106:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000010a:	6013      	str	r3, [r2, #0]
2000010c:	4770      	bx	lr
2000010e:	bf00      	nop
20000110:	016e35ff 	.word	0x016e35ff
20000114:	026259ff 	.word	0x026259ff
20000118:	044aa1ff 	.word	0x044aa1ff
2000011c:	0501bcff 	.word	0x0501bcff
20000120:	400e0800 	.word	0x400e0800

20000124 <wCRCTable>:
20000124:	00000000 0000c0c1 0000c181 00000140     ............@...
20000134:	0000c301 000003c0 00000280 0000c241     ............A...
20000144:	0000c601 000006c0 00000780 0000c741     ............A...
20000154:	00000500 0000c5c1 0000c481 00000440     ............@...
20000164:	0000cc01 00000cc0 00000d80 0000cd41     ............A...
20000174:	00000f00 0000cfc1 0000ce81 00000e40     ............@...
20000184:	00000a00 0000cac1 0000cb81 00000b40     ............@...
20000194:	0000c901 000009c0 00000880 0000c841     ............A...
200001a4:	0000d801 000018c0 00001980 0000d941     ............A...
200001b4:	00001b00 0000dbc1 0000da81 00001a40     ............@...
200001c4:	00001e00 0000dec1 0000df81 00001f40     ............@...
200001d4:	0000dd01 00001dc0 00001c80 0000dc41     ............A...
200001e4:	00001400 0000d4c1 0000d581 00001540     ............@...
200001f4:	0000d701 000017c0 00001680 0000d641     ............A...
20000204:	0000d201 000012c0 00001380 0000d341     ............A...
20000214:	00001100 0000d1c1 0000d081 00001040     ............@...
20000224:	0000f001 000030c0 00003180 0000f141     .....0...1..A...
20000234:	00003300 0000f3c1 0000f281 00003240     .3..........@2..
20000244:	00003600 0000f6c1 0000f781 00003740     .6..........@7..
20000254:	0000f501 000035c0 00003480 0000f441     .....5...4..A...
20000264:	00003c00 0000fcc1 0000fd81 00003d40     .<..........@=..
20000274:	0000ff01 00003fc0 00003e80 0000fe41     .....?...>..A...
20000284:	0000fa01 00003ac0 00003b80 0000fb41     .....:...;..A...
20000294:	00003900 0000f9c1 0000f881 00003840     .9..........@8..
200002a4:	00002800 0000e8c1 0000e981 00002940     .(..........@)..
200002b4:	0000eb01 00002bc0 00002a80 0000ea41     .....+...*..A...
200002c4:	0000ee01 00002ec0 00002f80 0000ef41     ........./..A...
200002d4:	00002d00 0000edc1 0000ec81 00002c40     .-..........@,..
200002e4:	0000e401 000024c0 00002580 0000e541     .....$...%..A...
200002f4:	00002700 0000e7c1 0000e681 00002640     .'..........@&..
20000304:	00002200 0000e2c1 0000e381 00002340     ."..........@#..
20000314:	0000e101 000021c0 00002080 0000e041     .....!... ..A...
20000324:	0000a001 000060c0 00006180 0000a141     .....`...a..A...
20000334:	00006300 0000a3c1 0000a281 00006240     .c..........@b..
20000344:	00006600 0000a6c1 0000a781 00006740     .f..........@g..
20000354:	0000a501 000065c0 00006480 0000a441     .....e...d..A...
20000364:	00006c00 0000acc1 0000ad81 00006d40     .l..........@m..
20000374:	0000af01 00006fc0 00006e80 0000ae41     .....o...n..A...
20000384:	0000aa01 00006ac0 00006b80 0000ab41     .....j...k..A...
20000394:	00006900 0000a9c1 0000a881 00006840     .i..........@h..
200003a4:	00007800 0000b8c1 0000b981 00007940     .x..........@y..
200003b4:	0000bb01 00007bc0 00007a80 0000ba41     .....{...z..A...
200003c4:	0000be01 00007ec0 00007f80 0000bf41     .....~......A...
200003d4:	00007d00 0000bdc1 0000bc81 00007c40     .}..........@|..
200003e4:	0000b401 000074c0 00007580 0000b541     .....t...u..A...
200003f4:	00007700 0000b7c1 0000b681 00007640     .w..........@v..
20000404:	00007200 0000b2c1 0000b381 00007340     .r..........@s..
20000414:	0000b101 000071c0 00007080 0000b041     .....q...p..A...
20000424:	00005000 000090c1 00009181 00005140     .P..........@Q..
20000434:	00009301 000053c0 00005280 00009241     .....S...R..A...
20000444:	00009601 000056c0 00005780 00009741     .....V...W..A...
20000454:	00005500 000095c1 00009481 00005440     .U..........@T..
20000464:	00009c01 00005cc0 00005d80 00009d41     .....\...]..A...
20000474:	00005f00 00009fc1 00009e81 00005e40     ._..........@^..
20000484:	00005a00 00009ac1 00009b81 00005b40     .Z..........@[..
20000494:	00009901 000059c0 00005880 00009841     .....Y...X..A...
200004a4:	00008801 000048c0 00004980 00008941     .....H...I..A...
200004b4:	00004b00 00008bc1 00008a81 00004a40     .K..........@J..
200004c4:	00004e00 00008ec1 00008f81 00004f40     .N..........@O..
200004d4:	00008d01 00004dc0 00004c80 00008c41     .....M...L..A...
200004e4:	00004400 000084c1 00008581 00004540     .D..........@E..
200004f4:	00008701 000047c0 00004680 00008641     .....G...F..A...
20000504:	00008201 000042c0 00004380 00008341     .....B...C..A...
20000514:	00004100 000081c1 00008081 00004040     .A..........@@..

20000524 <daysOfWeek>:
20000524:	00089eac 00089eb4 00089ebc 00089ec4     ................
20000534:	00089ed0 00089edc 00089ee4              ............

20000540 <months>:
20000540:	00089e40 00089e48 00089e54 00089e5c     @...H...T...\...
20000550:	00089e64 00089e68 00089e70 00089e78     d...h...p...x...
20000560:	00089e80 00089e8c 00089e94 00089ea0     ................

20000570 <eprocs>:
20000570:	0008ac20 0008ac2c 0008ac34 0008ac40      ...,...4...@...
20000580:	0008ac4c 0008ac54 0008ac60 0008ac6c     L...T...`...l...

20000590 <nvpsiz>:
20000590:	0008ac00 0008aba0 0008abac 0008abb8     ................
200005a0:	00000000 0008abc4 00000000 0008abd0     ................
200005b0:	00000000 0008abdc 0008abf4 00000000     ................
200005c0:	0008ac08 00000000 0008ac14 00000000     ................

200005d0 <nvptyp>:
200005d0:	0008a550 0008a55c 0008a584 0008a5a4     P...\...........
200005e0:	0008a600                                ....

200005e4 <sramsiz>:
200005e4:	0008ab40 0008ab4c 0008ab58 0008ab64     @...L...X...d...
200005f4:	0008ab70 0008ab7c 0008ab88 0008ab94     p...|...........
20000604:	0008aba0 0008abac 0008abb8 0008abc4     ................
20000614:	0008abd0 0008abdc 0008abe8 0008abf4     ................

20000624 <moduleIdentification>:
20000624:	ffffffff                                ....

20000628 <g_interrupt_enabled>:
20000628:	00000001                                ....

2000062c <SystemCoreClock>:
2000062c:	003d0900                                ..=.

20000630 <_impure_ptr>:
20000630:	20000638 00000000                       8.. ....

20000638 <impure_data>:
20000638:	00000000 20000924 2000098c 200009f4     ....$.. ... ... 
	...
200006e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200006f0:	0005deec 0000000b 00000000 00000000     ................
	...

20000a60 <__global_locale>:
20000a60:	00000043 00000000 00000000 00000000     C...............
	...
20000a80:	00000043 00000000 00000000 00000000     C...............
	...
20000aa0:	00000043 00000000 00000000 00000000     C...............
	...
20000ac0:	00000043 00000000 00000000 00000000     C...............
	...
20000ae0:	00000043 00000000 00000000 00000000     C...............
	...
20000b00:	00000043 00000000 00000000 00000000     C...............
	...
20000b20:	00000043 00000000 00000000 00000000     C...............
	...
20000b40:	0008867d 00087db9 00000000 0008b0b4     }....}..........
20000b50:	0008afb0 00089de0 00089de0 00089de0     ................
20000b60:	00089de0 00089de0 00089de0 00089de0     ................
20000b70:	00089de0 00089de0 ffffffff ffffffff     ................
20000b80:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000ba8:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000bcc <__malloc_av_>:
	...
20000bd4:	20000bcc 20000bcc 20000bd4 20000bd4     ... ... ... ... 
20000be4:	20000bdc 20000bdc 20000be4 20000be4     ... ... ... ... 
20000bf4:	20000bec 20000bec 20000bf4 20000bf4     ... ... ... ... 
20000c04:	20000bfc 20000bfc 20000c04 20000c04     ... ... ... ... 
20000c14:	20000c0c 20000c0c 20000c14 20000c14     ... ... ... ... 
20000c24:	20000c1c 20000c1c 20000c24 20000c24     ... ... $.. $.. 
20000c34:	20000c2c 20000c2c 20000c34 20000c34     ,.. ,.. 4.. 4.. 
20000c44:	20000c3c 20000c3c 20000c44 20000c44     <.. <.. D.. D.. 
20000c54:	20000c4c 20000c4c 20000c54 20000c54     L.. L.. T.. T.. 
20000c64:	20000c5c 20000c5c 20000c64 20000c64     \.. \.. d.. d.. 
20000c74:	20000c6c 20000c6c 20000c74 20000c74     l.. l.. t.. t.. 
20000c84:	20000c7c 20000c7c 20000c84 20000c84     |.. |.. ... ... 
20000c94:	20000c8c 20000c8c 20000c94 20000c94     ... ... ... ... 
20000ca4:	20000c9c 20000c9c 20000ca4 20000ca4     ... ... ... ... 
20000cb4:	20000cac 20000cac 20000cb4 20000cb4     ... ... ... ... 
20000cc4:	20000cbc 20000cbc 20000cc4 20000cc4     ... ... ... ... 
20000cd4:	20000ccc 20000ccc 20000cd4 20000cd4     ... ... ... ... 
20000ce4:	20000cdc 20000cdc 20000ce4 20000ce4     ... ... ... ... 
20000cf4:	20000cec 20000cec 20000cf4 20000cf4     ... ... ... ... 
20000d04:	20000cfc 20000cfc 20000d04 20000d04     ... ... ... ... 
20000d14:	20000d0c 20000d0c 20000d14 20000d14     ... ... ... ... 
20000d24:	20000d1c 20000d1c 20000d24 20000d24     ... ... $.. $.. 
20000d34:	20000d2c 20000d2c 20000d34 20000d34     ,.. ,.. 4.. 4.. 
20000d44:	20000d3c 20000d3c 20000d44 20000d44     <.. <.. D.. D.. 
20000d54:	20000d4c 20000d4c 20000d54 20000d54     L.. L.. T.. T.. 
20000d64:	20000d5c 20000d5c 20000d64 20000d64     \.. \.. d.. d.. 
20000d74:	20000d6c 20000d6c 20000d74 20000d74     l.. l.. t.. t.. 
20000d84:	20000d7c 20000d7c 20000d84 20000d84     |.. |.. ... ... 
20000d94:	20000d8c 20000d8c 20000d94 20000d94     ... ... ... ... 
20000da4:	20000d9c 20000d9c 20000da4 20000da4     ... ... ... ... 
20000db4:	20000dac 20000dac 20000db4 20000db4     ... ... ... ... 
20000dc4:	20000dbc 20000dbc 20000dc4 20000dc4     ... ... ... ... 
20000dd4:	20000dcc 20000dcc 20000dd4 20000dd4     ... ... ... ... 
20000de4:	20000ddc 20000ddc 20000de4 20000de4     ... ... ... ... 
20000df4:	20000dec 20000dec 20000df4 20000df4     ... ... ... ... 
20000e04:	20000dfc 20000dfc 20000e04 20000e04     ... ... ... ... 
20000e14:	20000e0c 20000e0c 20000e14 20000e14     ... ... ... ... 
20000e24:	20000e1c 20000e1c 20000e24 20000e24     ... ... $.. $.. 
20000e34:	20000e2c 20000e2c 20000e34 20000e34     ,.. ,.. 4.. 4.. 
20000e44:	20000e3c 20000e3c 20000e44 20000e44     <.. <.. D.. D.. 
20000e54:	20000e4c 20000e4c 20000e54 20000e54     L.. L.. T.. T.. 
20000e64:	20000e5c 20000e5c 20000e64 20000e64     \.. \.. d.. d.. 
20000e74:	20000e6c 20000e6c 20000e74 20000e74     l.. l.. t.. t.. 
20000e84:	20000e7c 20000e7c 20000e84 20000e84     |.. |.. ... ... 
20000e94:	20000e8c 20000e8c 20000e94 20000e94     ... ... ... ... 
20000ea4:	20000e9c 20000e9c 20000ea4 20000ea4     ... ... ... ... 
20000eb4:	20000eac 20000eac 20000eb4 20000eb4     ... ... ... ... 
20000ec4:	20000ebc 20000ebc 20000ec4 20000ec4     ... ... ... ... 
20000ed4:	20000ecc 20000ecc 20000ed4 20000ed4     ... ... ... ... 
20000ee4:	20000edc 20000edc 20000ee4 20000ee4     ... ... ... ... 
20000ef4:	20000eec 20000eec 20000ef4 20000ef4     ... ... ... ... 
20000f04:	20000efc 20000efc 20000f04 20000f04     ... ... ... ... 
20000f14:	20000f0c 20000f0c 20000f14 20000f14     ... ... ... ... 
20000f24:	20000f1c 20000f1c 20000f24 20000f24     ... ... $.. $.. 
20000f34:	20000f2c 20000f2c 20000f34 20000f34     ,.. ,.. 4.. 4.. 
20000f44:	20000f3c 20000f3c 20000f44 20000f44     <.. <.. D.. D.. 
20000f54:	20000f4c 20000f4c 20000f54 20000f54     L.. L.. T.. T.. 
20000f64:	20000f5c 20000f5c 20000f64 20000f64     \.. \.. d.. d.. 
20000f74:	20000f6c 20000f6c 20000f74 20000f74     l.. l.. t.. t.. 
20000f84:	20000f7c 20000f7c 20000f84 20000f84     |.. |.. ... ... 
20000f94:	20000f8c 20000f8c 20000f94 20000f94     ... ... ... ... 
20000fa4:	20000f9c 20000f9c 20000fa4 20000fa4     ... ... ... ... 
20000fb4:	20000fac 20000fac 20000fb4 20000fb4     ... ... ... ... 
20000fc4:	20000fbc 20000fbc 20000fc4 20000fc4     ... ... ... ... 

20000fd4 <__malloc_sbrk_base>:
20000fd4:	ffffffff                                ....

20000fd8 <__malloc_trim_threshold>:
20000fd8:	00020000                                ....
