
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009ad4  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00089ad4  00089ad4  00019ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000fdc  20000000  00089adc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000086c  20000fdc  0008aab8  00020fdc  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020fdc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00021005  2**0
                  CONTENTS, READONLY
  7 .debug_info   00022c15  00000000  00000000  0002105e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004fd4  00000000  00000000  00043c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000057be  00000000  00000000  00048c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c40  00000000  00000000  0004e405  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a80  00000000  00000000  0004f045  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a042  00000000  00000000  0004fac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018ccf  00000000  00000000  00069b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00051b22  00000000  00000000  000827d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002784  00000000  00000000  000d42f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 f9 0f 08 00 f5 0f 08 00 f5 0f 08 00     .@. ............
   80010:	f5 0f 08 00 f5 0f 08 00 f5 0f 08 00 00 00 00 00     ................
	...
   8002c:	f5 0f 08 00 f5 0f 08 00 00 00 00 00 f5 0f 08 00     ................
   8003c:	f5 0f 08 00 f5 0f 08 00 f5 0f 08 00 e5 1c 08 00     ................
   8004c:	f5 0f 08 00 f5 0f 08 00 f5 0f 08 00 f5 0f 08 00     ................
   8005c:	f5 0f 08 00 05 35 08 00 f5 0f 08 00 09 07 08 00     .....5..........
   8006c:	1d 07 08 00 f5 0f 08 00 f5 0f 08 00 f5 0f 08 00     ................
   8007c:	f5 0f 08 00 f5 0f 08 00 f5 0f 08 00 f5 0f 08 00     ................
   8008c:	f5 0f 08 00 f5 0f 08 00 f5 0f 08 00 81 37 08 00     .............7..
   8009c:	f5 0f 08 00 f5 0f 08 00 f5 0f 08 00 f5 0f 08 00     ................
   800ac:	f5 0f 08 00 f5 0f 08 00 f5 0f 08 00 f5 0f 08 00     ................

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000fdc 	.word	0x20000fdc
   800d8:	00000000 	.word	0x00000000
   800dc:	00089adc 	.word	0x00089adc

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	00089adc 	.word	0x00089adc
   8011c:	20000fe0 	.word	0x20000fe0
   80120:	00089adc 	.word	0x00089adc
   80124:	00000000 	.word	0x00000000

00080128 <Appli>:
	_APPLI_TIMER=1,
};


uint32_t Appli(uint32_t sc, ...)
{
   80128:	b40f      	push	{r0, r1, r2, r3}
   8012a:	b530      	push	{r4, r5, lr}
   8012c:	b083      	sub	sp, #12
   8012e:	9906      	ldr	r1, [sp, #24]
	switch(sc)
   80130:	2964      	cmp	r1, #100	; 0x64
   80132:	d007      	beq.n	80144 <Appli+0x1c>
   80134:	2966      	cmp	r1, #102	; 0x66
   80136:	d057      	beq.n	801e8 <Appli+0xc0>
   80138:	2901      	cmp	r1, #1
   8013a:	d05a      	beq.n	801f2 <Appli+0xca>
		}
		break;

	//ERROR CODE TRAP////////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_APPLI_SWITCH_BAD_SC,sc);
   8013c:	2010      	movs	r0, #16
   8013e:	4b37      	ldr	r3, [pc, #220]	; (8021c <Appli+0xf4>)
   80140:	4798      	blx	r3
   80142:	e04b      	b.n	801dc <Appli+0xb4>
		appli.status = appli.timer = 0;
   80144:	4b36      	ldr	r3, [pc, #216]	; (80220 <Appli+0xf8>)
   80146:	2200      	movs	r2, #0
   80148:	605a      	str	r2, [r3, #4]
   8014a:	601a      	str	r2, [r3, #0]
		gpio_configure_pin(CMD_MOSFET,			CMD_MOSFET_FLAGS);
   8014c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80150:	2020      	movs	r0, #32
   80152:	4c34      	ldr	r4, [pc, #208]	; (80224 <Appli+0xfc>)
   80154:	47a0      	blx	r4
		gpio_configure_pin(CMD_MOT_SERRURE,		CMD_MOT_SERRURE_FLAGS);
   80156:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8015a:	2021      	movs	r0, #33	; 0x21
   8015c:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS,			CMD_RELAIS_FLAGS);
   8015e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80162:	2022      	movs	r0, #34	; 0x22
   80164:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS_1,		CMD_RELAIS_1_FLAGS);
   80166:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8016a:	2023      	movs	r0, #35	; 0x23
   8016c:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS_2,		CMD_RELAIS_2_FLAGS);
   8016e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80172:	2024      	movs	r0, #36	; 0x24
   80174:	47a0      	blx	r4
		pmc_enable_periph_clk(ID_PIOA);
   80176:	200a      	movs	r0, #10
   80178:	4d2b      	ldr	r5, [pc, #172]	; (80228 <Appli+0x100>)
   8017a:	47a8      	blx	r5
		pmc_enable_periph_clk(ID_PIOB);
   8017c:	200b      	movs	r0, #11
   8017e:	47a8      	blx	r5
		gpio_configure_pin(PENE_OUVERT,			PENE_OUVERT_FLAGS);
   80180:	4d2a      	ldr	r5, [pc, #168]	; (8022c <Appli+0x104>)
   80182:	4629      	mov	r1, r5
   80184:	200e      	movs	r0, #14
   80186:	47a0      	blx	r4
		gpio_configure_pin(PENE_FERME,			PENE_FERME_FLAGS);
   80188:	4629      	mov	r1, r5
   8018a:	200f      	movs	r0, #15
   8018c:	47a0      	blx	r4
		gpio_configure_pin(IN_ILS,				IN_ILS_FLAGS);
   8018e:	4629      	mov	r1, r5
   80190:	2010      	movs	r0, #16
   80192:	47a0      	blx	r4
		gpio_configure_pin(IN_SV,				IN_SV_FLAGS);
   80194:	4629      	mov	r1, r5
   80196:	2011      	movs	r0, #17
   80198:	47a0      	blx	r4
		gpio_configure_pin(IN_RADAR,			IN_RADAR_FLAGS);
   8019a:	4629      	mov	r1, r5
   8019c:	2018      	movs	r0, #24
   8019e:	47a0      	blx	r4
		gpio_configure_pin(IN_DVU,				IN_DVU_FLAGS);
   801a0:	4629      	mov	r1, r5
   801a2:	2019      	movs	r0, #25
   801a4:	47a0      	blx	r4
		gpio_configure_pin(IN_PREMIERE_ENTREE,	IN_PREMIERE_ENTREE_FLAGS);
   801a6:	4629      	mov	r1, r5
   801a8:	201a      	movs	r0, #26
   801aa:	47a0      	blx	r4
		gpio_configure_pin(IN_DVU_GENERAL,		IN_DVU_GENERAL_FLAGS);
   801ac:	4629      	mov	r1, r5
   801ae:	201b      	movs	r0, #27
   801b0:	47a0      	blx	r4
		gpio_configure_pin(IN_ENTREE_LIBRE,		IN_ENTREE_OPTION_FLAGS);
   801b2:	4629      	mov	r1, r5
   801b4:	201c      	movs	r0, #28
   801b6:	47a0      	blx	r4
		gpio_configure_pin(IN_ENTREE_OPTION,	IN_ENTREE_OPTION_FLAGS);
   801b8:	4629      	mov	r1, r5
   801ba:	201d      	movs	r0, #29
   801bc:	47a0      	blx	r4
		Putstr("\r\n\n\t*______________ CPU.ACX-ATSAM3U4CA-AU ______________*\r\n\n");
   801be:	491c      	ldr	r1, [pc, #112]	; (80230 <Appli+0x108>)
   801c0:	2067      	movs	r0, #103	; 0x67
   801c2:	4b1c      	ldr	r3, [pc, #112]	; (80234 <Appli+0x10c>)
   801c4:	4798      	blx	r3
		LcdPutstr("CPU.ACX  ATSAM3U4C",2,1);
   801c6:	2301      	movs	r3, #1
   801c8:	2202      	movs	r2, #2
   801ca:	491b      	ldr	r1, [pc, #108]	; (80238 <Appli+0x110>)
   801cc:	2067      	movs	r0, #103	; 0x67
   801ce:	4c1b      	ldr	r4, [pc, #108]	; (8023c <Appli+0x114>)
   801d0:	47a0      	blx	r4
		LcdPutstr("www.a-2-s.net",3,4);
   801d2:	2304      	movs	r3, #4
   801d4:	2203      	movs	r2, #3
   801d6:	491a      	ldr	r1, [pc, #104]	; (80240 <Appli+0x118>)
   801d8:	2067      	movs	r0, #103	; 0x67
   801da:	47a0      	blx	r4
	}

	//DEFAULT RETURN VALUE////////////////////////////////////////////////////////////////
	return 0;
}
   801dc:	2000      	movs	r0, #0
   801de:	b003      	add	sp, #12
   801e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   801e4:	b004      	add	sp, #16
   801e6:	4770      	bx	lr
		appli.timer=BUTTON_NO_ACTIVITY_TIMEOUT;	
   801e8:	f241 3288 	movw	r2, #5000	; 0x1388
   801ec:	4b0c      	ldr	r3, [pc, #48]	; (80220 <Appli+0xf8>)
   801ee:	605a      	str	r2, [r3, #4]
		break;
   801f0:	e7f4      	b.n	801dc <Appli+0xb4>
		if(appli.timer)
   801f2:	4b0b      	ldr	r3, [pc, #44]	; (80220 <Appli+0xf8>)
   801f4:	685b      	ldr	r3, [r3, #4]
   801f6:	2b00      	cmp	r3, #0
   801f8:	d0f0      	beq.n	801dc <Appli+0xb4>
			if(--appli.timer==0)
   801fa:	3b01      	subs	r3, #1
   801fc:	4a08      	ldr	r2, [pc, #32]	; (80220 <Appli+0xf8>)
   801fe:	6053      	str	r3, [r2, #4]
   80200:	2b00      	cmp	r3, #0
   80202:	d1eb      	bne.n	801dc <Appli+0xb4>
					mBitsClr(appli.status,ST_APPLI_IS_MENU_EDITING); //We acknowledge the event.
   80204:	6813      	ldr	r3, [r2, #0]
   80206:	f023 0301 	bic.w	r3, r3, #1
   8020a:	6013      	str	r3, [r2, #0]
					PushTask(Menu,MENU_RETURN_HOME,0,0);
   8020c:	2300      	movs	r3, #0
   8020e:	9300      	str	r3, [sp, #0]
   80210:	226c      	movs	r2, #108	; 0x6c
   80212:	490c      	ldr	r1, [pc, #48]	; (80244 <Appli+0x11c>)
   80214:	2066      	movs	r0, #102	; 0x66
   80216:	4c0c      	ldr	r4, [pc, #48]	; (80248 <Appli+0x120>)
   80218:	47a0      	blx	r4
   8021a:	e7df      	b.n	801dc <Appli+0xb4>
   8021c:	000817f5 	.word	0x000817f5
   80220:	200010b8 	.word	0x200010b8
   80224:	000808ed 	.word	0x000808ed
   80228:	00080aed 	.word	0x00080aed
   8022c:	28000001 	.word	0x28000001
   80230:	00088840 	.word	0x00088840
   80234:	00083345 	.word	0x00083345
   80238:	00088880 	.word	0x00088880
   8023c:	00081d15 	.word	0x00081d15
   80240:	00088894 	.word	0x00088894
   80244:	000803f1 	.word	0x000803f1
   80248:	00083581 	.word	0x00083581

0008024c <chipid_read>:
 *
 * \return 0 on success.
 */
uint32_t chipid_read(Chipid *p_chipid, chipid_data_t *p_chipid_data)
{
	if (NULL == p_chipid_data) {
   8024c:	b311      	cbz	r1, 80294 <chipid_read+0x48>
		return 0xFFFFFFFF;
	}
	
	p_chipid_data->ul_version =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_VERSION_Msk) >>
   8024e:	6802      	ldr	r2, [r0, #0]
   80250:	f002 021f 	and.w	r2, r2, #31
	p_chipid_data->ul_version =
   80254:	600a      	str	r2, [r1, #0]
			CHIPID_CIDR_VERSION_Pos;
	p_chipid_data->ul_eproc =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_EPROC_Msk) >>
   80256:	6802      	ldr	r2, [r0, #0]
   80258:	f3c2 1242 	ubfx	r2, r2, #5, #3
	p_chipid_data->ul_eproc =
   8025c:	604a      	str	r2, [r1, #4]
			CHIPID_CIDR_EPROC_Pos;
	p_chipid_data->ul_nvpsiz =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPSIZ_Msk) >>
   8025e:	6802      	ldr	r2, [r0, #0]
   80260:	f3c2 2203 	ubfx	r2, r2, #8, #4
	p_chipid_data->ul_nvpsiz =
   80264:	608a      	str	r2, [r1, #8]
			CHIPID_CIDR_NVPSIZ_Pos;
	p_chipid_data->ul_nvpsiz2 =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPSIZ2_Pos) >>
   80266:	6802      	ldr	r2, [r0, #0]
	p_chipid_data->ul_nvpsiz2 =
   80268:	2200      	movs	r2, #0
   8026a:	60ca      	str	r2, [r1, #12]
			CHIPID_CIDR_NVPSIZ2_Pos;
	p_chipid_data->ul_sramsiz =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_SRAMSIZ_Msk) >>
   8026c:	6802      	ldr	r2, [r0, #0]
   8026e:	f3c2 4203 	ubfx	r2, r2, #16, #4
	p_chipid_data->ul_sramsiz =
   80272:	610a      	str	r2, [r1, #16]
			CHIPID_CIDR_SRAMSIZ_Pos;
	p_chipid_data->ul_arch =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_ARCH_Msk) >>
   80274:	6802      	ldr	r2, [r0, #0]
   80276:	f3c2 5207 	ubfx	r2, r2, #20, #8
	p_chipid_data->ul_arch =
   8027a:	614a      	str	r2, [r1, #20]
			CHIPID_CIDR_ARCH_Pos;
	p_chipid_data->ul_nvptyp =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPTYP_Msk) >>
   8027c:	6802      	ldr	r2, [r0, #0]
   8027e:	f3c2 7202 	ubfx	r2, r2, #28, #3
	p_chipid_data->ul_nvptyp =
   80282:	618a      	str	r2, [r1, #24]
			CHIPID_CIDR_NVPTYP_Pos;
	p_chipid_data->ul_extflag =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_EXT) >> 31;
   80284:	6802      	ldr	r2, [r0, #0]
   80286:	0fd2      	lsrs	r2, r2, #31
	p_chipid_data->ul_extflag =
   80288:	61ca      	str	r2, [r1, #28]
		
	if (p_chipid_data->ul_extflag) {
   8028a:	b132      	cbz	r2, 8029a <chipid_read+0x4e>
		p_chipid_data->ul_extid =
			p_chipid->CHIPID_EXID & CHIPID_EXID_EXID_Msk;
   8028c:	6842      	ldr	r2, [r0, #4]
		p_chipid_data->ul_extid =
   8028e:	620a      	str	r2, [r1, #32]
	}
	return 0;
   80290:	2000      	movs	r0, #0
   80292:	4770      	bx	lr
		return 0xFFFFFFFF;
   80294:	f04f 30ff 	mov.w	r0, #4294967295
   80298:	4770      	bx	lr
	return 0;
   8029a:	2000      	movs	r0, #0
}
   8029c:	4770      	bx	lr
	...

000802a0 <_menuOptionSasFunc>:

	//if(getShellStatus() == ST_MENU_IDLE) setShellStatus(ST_MENU_MENU);
}

 uint32_t _menuOptionSasFunc(uint32_t sc, ...)
 {
   802a0:	b40f      	push	{r0, r1, r2, r3}
   802a2:	b510      	push	{r4, lr}
	switch(sc)
	{
	default:
		Putstr("_menuOptionSasFunc: BAD SC");
   802a4:	4908      	ldr	r1, [pc, #32]	; (802c8 <_menuOptionSasFunc+0x28>)
   802a6:	2067      	movs	r0, #103	; 0x67
   802a8:	4b08      	ldr	r3, [pc, #32]	; (802cc <_menuOptionSasFunc+0x2c>)
   802aa:	4798      	blx	r3
		LcdPutstr("Fermeture sas",
   802ac:	210d      	movs	r1, #13
   802ae:	2069      	movs	r0, #105	; 0x69
   802b0:	4c07      	ldr	r4, [pc, #28]	; (802d0 <_menuOptionSasFunc+0x30>)
   802b2:	47a0      	blx	r4
   802b4:	4603      	mov	r3, r0
   802b6:	2203      	movs	r2, #3
   802b8:	4906      	ldr	r1, [pc, #24]	; (802d4 <_menuOptionSasFunc+0x34>)
   802ba:	2067      	movs	r0, #103	; 0x67
   802bc:	47a0      	blx	r4
					LcdFindCenter(strlen("Fermeture sas"))
					);
		break;
	}
	return 0;
 }
   802be:	2000      	movs	r0, #0
   802c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   802c4:	b004      	add	sp, #16
   802c6:	4770      	bx	lr
   802c8:	00088984 	.word	0x00088984
   802cc:	00083345 	.word	0x00083345
   802d0:	00081d15 	.word	0x00081d15
   802d4:	000889a0 	.word	0x000889a0

000802d8 <_menuPorteFermer1>:

uint32_t _menuPorteFermer1(uint32_t sc, ...)
{
   802d8:	b40f      	push	{r0, r1, r2, r3}
   802da:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuPorteFermer1: BAD SC");
   802dc:	4908      	ldr	r1, [pc, #32]	; (80300 <_menuPorteFermer1+0x28>)
   802de:	2067      	movs	r0, #103	; 0x67
   802e0:	4b08      	ldr	r3, [pc, #32]	; (80304 <_menuPorteFermer1+0x2c>)
   802e2:	4798      	blx	r3
		LcdPutstr("Fermeture porte 1",
   802e4:	2111      	movs	r1, #17
   802e6:	2069      	movs	r0, #105	; 0x69
   802e8:	4c07      	ldr	r4, [pc, #28]	; (80308 <_menuPorteFermer1+0x30>)
   802ea:	47a0      	blx	r4
   802ec:	4603      	mov	r3, r0
   802ee:	2203      	movs	r2, #3
   802f0:	4906      	ldr	r1, [pc, #24]	; (8030c <_menuPorteFermer1+0x34>)
   802f2:	2067      	movs	r0, #103	; 0x67
   802f4:	47a0      	blx	r4
					LcdFindCenter(strlen("Fermeture porte 1"))
					);
		break;
	}
	return 0;
}
   802f6:	2000      	movs	r0, #0
   802f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   802fc:	b004      	add	sp, #16
   802fe:	4770      	bx	lr
   80300:	000889b0 	.word	0x000889b0
   80304:	00083345 	.word	0x00083345
   80308:	00081d15 	.word	0x00081d15
   8030c:	000889cc 	.word	0x000889cc

00080310 <_menuPorteFermer2>:

uint32_t _menuPorteFermer2(uint32_t sc, ...)
{
   80310:	b40f      	push	{r0, r1, r2, r3}
   80312:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuPorteFermer2: BAD SC");
   80314:	4908      	ldr	r1, [pc, #32]	; (80338 <_menuPorteFermer2+0x28>)
   80316:	2067      	movs	r0, #103	; 0x67
   80318:	4b08      	ldr	r3, [pc, #32]	; (8033c <_menuPorteFermer2+0x2c>)
   8031a:	4798      	blx	r3
		LcdPutstr("Fermeture porte 2",
   8031c:	2111      	movs	r1, #17
   8031e:	2069      	movs	r0, #105	; 0x69
   80320:	4c07      	ldr	r4, [pc, #28]	; (80340 <_menuPorteFermer2+0x30>)
   80322:	47a0      	blx	r4
   80324:	4603      	mov	r3, r0
   80326:	2203      	movs	r2, #3
   80328:	4906      	ldr	r1, [pc, #24]	; (80344 <_menuPorteFermer2+0x34>)
   8032a:	2067      	movs	r0, #103	; 0x67
   8032c:	47a0      	blx	r4
					LcdFindCenter(strlen("Fermeture porte 2"))
					);
		break;
	}
	return 0;
}
   8032e:	2000      	movs	r0, #0
   80330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80334:	b004      	add	sp, #16
   80336:	4770      	bx	lr
   80338:	000889e0 	.word	0x000889e0
   8033c:	00083345 	.word	0x00083345
   80340:	00081d15 	.word	0x00081d15
   80344:	000889fc 	.word	0x000889fc

00080348 <_menuEtatPorte1>:

uint32_t _menuEtatPorte1(uint32_t sc, ...)
{
   80348:	b40f      	push	{r0, r1, r2, r3}
   8034a:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   8034c:	4908      	ldr	r1, [pc, #32]	; (80370 <_menuEtatPorte1+0x28>)
   8034e:	2067      	movs	r0, #103	; 0x67
   80350:	4b08      	ldr	r3, [pc, #32]	; (80374 <_menuEtatPorte1+0x2c>)
   80352:	4798      	blx	r3
		LcdPutstr("Etat porte 1",
   80354:	210c      	movs	r1, #12
   80356:	2069      	movs	r0, #105	; 0x69
   80358:	4c07      	ldr	r4, [pc, #28]	; (80378 <_menuEtatPorte1+0x30>)
   8035a:	47a0      	blx	r4
   8035c:	4603      	mov	r3, r0
   8035e:	2203      	movs	r2, #3
   80360:	4906      	ldr	r1, [pc, #24]	; (8037c <_menuEtatPorte1+0x34>)
   80362:	2067      	movs	r0, #103	; 0x67
   80364:	47a0      	blx	r4
					LcdFindCenter(strlen("Etat porte 1"))
					);
		break;
	}
	return 0;
}
   80366:	2000      	movs	r0, #0
   80368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8036c:	b004      	add	sp, #16
   8036e:	4770      	bx	lr
   80370:	00088984 	.word	0x00088984
   80374:	00083345 	.word	0x00083345
   80378:	00081d15 	.word	0x00081d15
   8037c:	00088958 	.word	0x00088958

00080380 <_menuEtatPorte2>:

uint32_t _menuEtatPorte2(uint32_t sc, ...)
{
   80380:	b40f      	push	{r0, r1, r2, r3}
   80382:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   80384:	4908      	ldr	r1, [pc, #32]	; (803a8 <_menuEtatPorte2+0x28>)
   80386:	2067      	movs	r0, #103	; 0x67
   80388:	4b08      	ldr	r3, [pc, #32]	; (803ac <_menuEtatPorte2+0x2c>)
   8038a:	4798      	blx	r3
		LcdPutstr("Etat porte 2",
   8038c:	210c      	movs	r1, #12
   8038e:	2069      	movs	r0, #105	; 0x69
   80390:	4c07      	ldr	r4, [pc, #28]	; (803b0 <_menuEtatPorte2+0x30>)
   80392:	47a0      	blx	r4
   80394:	4603      	mov	r3, r0
   80396:	2203      	movs	r2, #3
   80398:	4906      	ldr	r1, [pc, #24]	; (803b4 <_menuEtatPorte2+0x34>)
   8039a:	2067      	movs	r0, #103	; 0x67
   8039c:	47a0      	blx	r4
					LcdFindCenter(strlen("Etat porte 2"))
					);
		break;
	}
	return 0;
}
   8039e:	2000      	movs	r0, #0
   803a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   803a4:	b004      	add	sp, #16
   803a6:	4770      	bx	lr
   803a8:	00088984 	.word	0x00088984
   803ac:	00083345 	.word	0x00083345
   803b0:	00081d15 	.word	0x00081d15
   803b4:	00088968 	.word	0x00088968

000803b8 <_menuEtatPortes>:

uint32_t _menuEtatPortes(uint32_t sc, ...)
{
   803b8:	b40f      	push	{r0, r1, r2, r3}
   803ba:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   803bc:	4908      	ldr	r1, [pc, #32]	; (803e0 <_menuEtatPortes+0x28>)
   803be:	2067      	movs	r0, #103	; 0x67
   803c0:	4b08      	ldr	r3, [pc, #32]	; (803e4 <_menuEtatPortes+0x2c>)
   803c2:	4798      	blx	r3
		LcdPutstr("Etat portes",
   803c4:	210b      	movs	r1, #11
   803c6:	2069      	movs	r0, #105	; 0x69
   803c8:	4c07      	ldr	r4, [pc, #28]	; (803e8 <_menuEtatPortes+0x30>)
   803ca:	47a0      	blx	r4
   803cc:	4603      	mov	r3, r0
   803ce:	2203      	movs	r2, #3
   803d0:	4906      	ldr	r1, [pc, #24]	; (803ec <_menuEtatPortes+0x34>)
   803d2:	2067      	movs	r0, #103	; 0x67
   803d4:	47a0      	blx	r4
					LcdFindCenter(strlen("Etat portes"))
					);
		break;
	}
	return 0;
   803d6:	2000      	movs	r0, #0
   803d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   803dc:	b004      	add	sp, #16
   803de:	4770      	bx	lr
   803e0:	00088984 	.word	0x00088984
   803e4:	00083345 	.word	0x00083345
   803e8:	00081d15 	.word	0x00081d15
   803ec:	00088978 	.word	0x00088978

000803f0 <Menu>:
{
   803f0:	b40f      	push	{r0, r1, r2, r3}
   803f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803f6:	b082      	sub	sp, #8
   803f8:	9908      	ldr	r1, [sp, #32]
	switch(sc)
   803fa:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   803fe:	2b08      	cmp	r3, #8
   80400:	f200 80c3 	bhi.w	8058a <Menu+0x19a>
   80404:	e8df f013 	tbh	[pc, r3, lsl #1]
   80408:	00620009 	.word	0x00620009
   8040c:	00870072 	.word	0x00870072
   80410:	009600c1 	.word	0x009600c1
   80414:	005c00c1 	.word	0x005c00c1
   80418:	00b5      	.short	0x00b5
			Putstr("MENU_NEW\r");
   8041a:	495e      	ldr	r1, [pc, #376]	; (80594 <Menu+0x1a4>)
   8041c:	2067      	movs	r0, #103	; 0x67
   8041e:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 805cc <Menu+0x1dc>
   80422:	47c0      	blx	r8
			pio_set_input(PIOA, PIN_BUTTON_SWITCH, PIO_PULLUP); //A0 (Bouton Gauche)
   80424:	4c5c      	ldr	r4, [pc, #368]	; (80598 <Menu+0x1a8>)
   80426:	2201      	movs	r2, #1
   80428:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8042c:	4620      	mov	r0, r4
   8042e:	4f5b      	ldr	r7, [pc, #364]	; (8059c <Menu+0x1ac>)
   80430:	47b8      	blx	r7
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_SWITCH, PIO_IT_FALL_EDGE, ButtonSwitch_ISR_Handler);
   80432:	4b5b      	ldr	r3, [pc, #364]	; (805a0 <Menu+0x1b0>)
   80434:	9300      	str	r3, [sp, #0]
   80436:	2350      	movs	r3, #80	; 0x50
   80438:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8043c:	210a      	movs	r1, #10
   8043e:	4620      	mov	r0, r4
   80440:	4e58      	ldr	r6, [pc, #352]	; (805a4 <Menu+0x1b4>)
   80442:	47b0      	blx	r6
			pio_enable_interrupt(PIOA, PIN_BUTTON_SWITCH);
   80444:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80448:	4620      	mov	r0, r4
   8044a:	4d57      	ldr	r5, [pc, #348]	; (805a8 <Menu+0x1b8>)
   8044c:	47a8      	blx	r5
			pio_set_input(PIOA, PIN_BUTTON_SELECT, PIO_PULLUP); //A1 (Bouton Milieu)
   8044e:	2201      	movs	r2, #1
   80450:	f44f 7100 	mov.w	r1, #512	; 0x200
   80454:	4620      	mov	r0, r4
   80456:	47b8      	blx	r7
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_SELECT, PIO_IT_FALL_EDGE, ButtonSelect_ISR_Handler);
   80458:	4b54      	ldr	r3, [pc, #336]	; (805ac <Menu+0x1bc>)
   8045a:	9300      	str	r3, [sp, #0]
   8045c:	2350      	movs	r3, #80	; 0x50
   8045e:	f44f 7200 	mov.w	r2, #512	; 0x200
   80462:	210a      	movs	r1, #10
   80464:	4620      	mov	r0, r4
   80466:	47b0      	blx	r6
			pio_enable_interrupt(PIOA, PIN_BUTTON_SELECT);
   80468:	f44f 7100 	mov.w	r1, #512	; 0x200
   8046c:	4620      	mov	r0, r4
   8046e:	47a8      	blx	r5
			pio_set_input(PIOA, PIN_BUTTON_BACK, PIO_PULLUP); //A1 (Bouton Droite)
   80470:	2201      	movs	r2, #1
   80472:	f44f 7180 	mov.w	r1, #256	; 0x100
   80476:	4620      	mov	r0, r4
   80478:	47b8      	blx	r7
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_BACK, PIO_IT_FALL_EDGE, ButtonBack_ISR_Handler);
   8047a:	4b4d      	ldr	r3, [pc, #308]	; (805b0 <Menu+0x1c0>)
   8047c:	9300      	str	r3, [sp, #0]
   8047e:	2350      	movs	r3, #80	; 0x50
   80480:	f44f 7280 	mov.w	r2, #256	; 0x100
   80484:	210a      	movs	r1, #10
   80486:	4620      	mov	r0, r4
   80488:	47b0      	blx	r6
			pio_enable_interrupt(PIOA, PIN_BUTTON_BACK);
   8048a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8048e:	4620      	mov	r0, r4
   80490:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80492:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80496:	4b47      	ldr	r3, [pc, #284]	; (805b4 <Menu+0x1c4>)
   80498:	601a      	str	r2, [r3, #0]
			sprintf(buf, "MENU NEW FINISHED \r\n");
   8049a:	4d47      	ldr	r5, [pc, #284]	; (805b8 <Menu+0x1c8>)
   8049c:	4c47      	ldr	r4, [pc, #284]	; (805bc <Menu+0x1cc>)
   8049e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   804a0:	6028      	str	r0, [r5, #0]
   804a2:	6069      	str	r1, [r5, #4]
   804a4:	60aa      	str	r2, [r5, #8]
   804a6:	60eb      	str	r3, [r5, #12]
   804a8:	6820      	ldr	r0, [r4, #0]
   804aa:	6128      	str	r0, [r5, #16]
   804ac:	7923      	ldrb	r3, [r4, #4]
   804ae:	752b      	strb	r3, [r5, #20]
			Putstr(buf);
   804b0:	4629      	mov	r1, r5
   804b2:	2067      	movs	r0, #103	; 0x67
   804b4:	47c0      	blx	r8
			menu.iIndexMenu = 0;
   804b6:	4b42      	ldr	r3, [pc, #264]	; (805c0 <Menu+0x1d0>)
   804b8:	2200      	movs	r2, #0
   804ba:	601a      	str	r2, [r3, #0]
			menu.pCurrentMenu = _mainMenu;
   804bc:	4a41      	ldr	r2, [pc, #260]	; (805c4 <Menu+0x1d4>)
   804be:	605a      	str	r2, [r3, #4]
}
   804c0:	2000      	movs	r0, #0
   804c2:	b002      	add	sp, #8
   804c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   804c8:	b004      	add	sp, #16
   804ca:	4770      	bx	lr
			menu.iIndexMenu++;
   804cc:	4a3c      	ldr	r2, [pc, #240]	; (805c0 <Menu+0x1d0>)
   804ce:	6813      	ldr	r3, [r2, #0]
   804d0:	3301      	adds	r3, #1
   804d2:	6013      	str	r3, [r2, #0]
			if(menu.pCurrentMenu[menu.iIndexMenu].pMenuLabel == NULL) menu.iIndexMenu = 0;
   804d4:	6852      	ldr	r2, [r2, #4]
   804d6:	011b      	lsls	r3, r3, #4
   804d8:	58d3      	ldr	r3, [r2, r3]
   804da:	b11b      	cbz	r3, 804e4 <Menu+0xf4>
			Menu(MENU_PROMPT);
   804dc:	2069      	movs	r0, #105	; 0x69
   804de:	f7ff ff87 	bl	803f0 <Menu>
			break;
   804e2:	e7ed      	b.n	804c0 <Menu+0xd0>
			if(menu.pCurrentMenu[menu.iIndexMenu].pMenuLabel == NULL) menu.iIndexMenu = 0;
   804e4:	2200      	movs	r2, #0
   804e6:	4b36      	ldr	r3, [pc, #216]	; (805c0 <Menu+0x1d0>)
   804e8:	601a      	str	r2, [r3, #0]
   804ea:	e7f7      	b.n	804dc <Menu+0xec>
			if(menu.pCurrentMenu[menu.iIndexMenu].pMenuFunc)
   804ec:	4a34      	ldr	r2, [pc, #208]	; (805c0 <Menu+0x1d0>)
   804ee:	6811      	ldr	r1, [r2, #0]
   804f0:	6853      	ldr	r3, [r2, #4]
   804f2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   804f6:	68da      	ldr	r2, [r3, #12]
   804f8:	b112      	cbz	r2, 80500 <Menu+0x110>
				menu.pCurrentMenu[menu.iIndexMenu].pMenuFunc(0);
   804fa:	2000      	movs	r0, #0
   804fc:	4790      	blx	r2
   804fe:	e7df      	b.n	804c0 <Menu+0xd0>
			else if(menu.pCurrentMenu[menu.iIndexMenu].pSubMenu)
   80500:	689b      	ldr	r3, [r3, #8]
   80502:	2b00      	cmp	r3, #0
   80504:	d0dc      	beq.n	804c0 <Menu+0xd0>
				menu.pCurrentMenu = menu.pCurrentMenu[menu.iIndexMenu].pSubMenu;
   80506:	4a2e      	ldr	r2, [pc, #184]	; (805c0 <Menu+0x1d0>)
   80508:	6053      	str	r3, [r2, #4]
				menu.iIndexMenu = 0;
   8050a:	2300      	movs	r3, #0
   8050c:	6013      	str	r3, [r2, #0]
				Menu(MENU_PROMPT);
   8050e:	2069      	movs	r0, #105	; 0x69
   80510:	f7ff ff6e 	bl	803f0 <Menu>
   80514:	e7d4      	b.n	804c0 <Menu+0xd0>
			if(menu.pCurrentMenu[menu.iIndexMenu].pParentMenu)
   80516:	4a2a      	ldr	r2, [pc, #168]	; (805c0 <Menu+0x1d0>)
   80518:	6811      	ldr	r1, [r2, #0]
   8051a:	6853      	ldr	r3, [r2, #4]
   8051c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   80520:	685b      	ldr	r3, [r3, #4]
   80522:	2b00      	cmp	r3, #0
   80524:	d0cc      	beq.n	804c0 <Menu+0xd0>
				menu.pCurrentMenu = menu.pCurrentMenu[menu.iIndexMenu].pParentMenu;
   80526:	6053      	str	r3, [r2, #4]
				menu.iIndexMenu = 0;
   80528:	2300      	movs	r3, #0
   8052a:	6013      	str	r3, [r2, #0]
				Menu(MENU_PROMPT);
   8052c:	2069      	movs	r0, #105	; 0x69
   8052e:	f7ff ff5f 	bl	803f0 <Menu>
   80532:	e7c5      	b.n	804c0 <Menu+0xd0>
			SetButtonTimeout();
   80534:	2066      	movs	r0, #102	; 0x66
   80536:	4b24      	ldr	r3, [pc, #144]	; (805c8 <Menu+0x1d8>)
   80538:	4798      	blx	r3
			Putstr(menu.pCurrentMenu[menu.iIndexMenu].pMenuLabel);
   8053a:	4c21      	ldr	r4, [pc, #132]	; (805c0 <Menu+0x1d0>)
   8053c:	6823      	ldr	r3, [r4, #0]
   8053e:	6862      	ldr	r2, [r4, #4]
   80540:	011b      	lsls	r3, r3, #4
   80542:	58d1      	ldr	r1, [r2, r3]
   80544:	2067      	movs	r0, #103	; 0x67
   80546:	4b21      	ldr	r3, [pc, #132]	; (805cc <Menu+0x1dc>)
   80548:	4798      	blx	r3
			LcdPutstr(menu.pCurrentMenu[menu.iIndexMenu].pMenuLabel,2,LcdFindCenter(strlen(menu.pCurrentMenu[menu.iIndexMenu].pMenuLabel)));
   8054a:	6823      	ldr	r3, [r4, #0]
   8054c:	6862      	ldr	r2, [r4, #4]
   8054e:	011b      	lsls	r3, r3, #4
   80550:	58d5      	ldr	r5, [r2, r3]
   80552:	4628      	mov	r0, r5
   80554:	4b1e      	ldr	r3, [pc, #120]	; (805d0 <Menu+0x1e0>)
   80556:	4798      	blx	r3
   80558:	4601      	mov	r1, r0
   8055a:	2069      	movs	r0, #105	; 0x69
   8055c:	4c1d      	ldr	r4, [pc, #116]	; (805d4 <Menu+0x1e4>)
   8055e:	47a0      	blx	r4
   80560:	4603      	mov	r3, r0
   80562:	2202      	movs	r2, #2
   80564:	4629      	mov	r1, r5
   80566:	2067      	movs	r0, #103	; 0x67
   80568:	47a0      	blx	r4
			setShellStatus(ST_MENU_MENU);
   8056a:	2002      	movs	r0, #2
   8056c:	4b1a      	ldr	r3, [pc, #104]	; (805d8 <Menu+0x1e8>)
   8056e:	4798      	blx	r3
			break;
   80570:	e7a6      	b.n	804c0 <Menu+0xd0>
			LcdPutstr("CPU.ACX  ATSAM3U4C",2,1);
   80572:	2301      	movs	r3, #1
   80574:	2202      	movs	r2, #2
   80576:	4919      	ldr	r1, [pc, #100]	; (805dc <Menu+0x1ec>)
   80578:	2067      	movs	r0, #103	; 0x67
   8057a:	4c16      	ldr	r4, [pc, #88]	; (805d4 <Menu+0x1e4>)
   8057c:	47a0      	blx	r4
			LcdPutstr("www.a-2-s.net",3,4);
   8057e:	2304      	movs	r3, #4
   80580:	2203      	movs	r2, #3
   80582:	4917      	ldr	r1, [pc, #92]	; (805e0 <Menu+0x1f0>)
   80584:	2067      	movs	r0, #103	; 0x67
   80586:	47a0      	blx	r4
			break;
   80588:	e79a      	b.n	804c0 <Menu+0xd0>
			Error(ERROR_MENU_SWITCH_BAD_SC, sc);
   8058a:	2011      	movs	r0, #17
   8058c:	4b15      	ldr	r3, [pc, #84]	; (805e4 <Menu+0x1f4>)
   8058e:	4798      	blx	r3
   80590:	e796      	b.n	804c0 <Menu+0xd0>
   80592:	bf00      	nop
   80594:	000888a4 	.word	0x000888a4
   80598:	400e0c00 	.word	0x400e0c00
   8059c:	000807eb 	.word	0x000807eb
   805a0:	000805e9 	.word	0x000805e9
   805a4:	00080699 	.word	0x00080699
   805a8:	00080871 	.word	0x00080871
   805ac:	00080609 	.word	0x00080609
   805b0:	00080629 	.word	0x00080629
   805b4:	e000e100 	.word	0xe000e100
   805b8:	200012b4 	.word	0x200012b4
   805bc:	000888b0 	.word	0x000888b0
   805c0:	200010c0 	.word	0x200010c0
   805c4:	00088908 	.word	0x00088908
   805c8:	00080129 	.word	0x00080129
   805cc:	00083345 	.word	0x00083345
   805d0:	00083f45 	.word	0x00083f45
   805d4:	00081d15 	.word	0x00081d15
   805d8:	00082ee5 	.word	0x00082ee5
   805dc:	00088880 	.word	0x00088880
   805e0:	00088894 	.word	0x00088894
   805e4:	000817f5 	.word	0x000817f5

000805e8 <ButtonSwitch_ISR_Handler>:
{
   805e8:	b510      	push	{r4, lr}
   805ea:	b082      	sub	sp, #8
	PushTask(Menu, MENU_SWITCH_BUTTON,0,0);
   805ec:	2300      	movs	r3, #0
   805ee:	9300      	str	r3, [sp, #0]
   805f0:	2265      	movs	r2, #101	; 0x65
   805f2:	4903      	ldr	r1, [pc, #12]	; (80600 <ButtonSwitch_ISR_Handler+0x18>)
   805f4:	2066      	movs	r0, #102	; 0x66
   805f6:	4c03      	ldr	r4, [pc, #12]	; (80604 <ButtonSwitch_ISR_Handler+0x1c>)
   805f8:	47a0      	blx	r4
}
   805fa:	b002      	add	sp, #8
   805fc:	bd10      	pop	{r4, pc}
   805fe:	bf00      	nop
   80600:	000803f1 	.word	0x000803f1
   80604:	00083581 	.word	0x00083581

00080608 <ButtonSelect_ISR_Handler>:
{
   80608:	b510      	push	{r4, lr}
   8060a:	b082      	sub	sp, #8
	PushTask(Menu, MENU_SELECT_BUTTON,0,0);
   8060c:	2300      	movs	r3, #0
   8060e:	9300      	str	r3, [sp, #0]
   80610:	2266      	movs	r2, #102	; 0x66
   80612:	4903      	ldr	r1, [pc, #12]	; (80620 <ButtonSelect_ISR_Handler+0x18>)
   80614:	4610      	mov	r0, r2
   80616:	4c03      	ldr	r4, [pc, #12]	; (80624 <ButtonSelect_ISR_Handler+0x1c>)
   80618:	47a0      	blx	r4
}
   8061a:	b002      	add	sp, #8
   8061c:	bd10      	pop	{r4, pc}
   8061e:	bf00      	nop
   80620:	000803f1 	.word	0x000803f1
   80624:	00083581 	.word	0x00083581

00080628 <ButtonBack_ISR_Handler>:
{
   80628:	b510      	push	{r4, lr}
   8062a:	b082      	sub	sp, #8
	PushTask(Menu, MENU_BACK_BUTTON,0,0);
   8062c:	2300      	movs	r3, #0
   8062e:	9300      	str	r3, [sp, #0]
   80630:	2267      	movs	r2, #103	; 0x67
   80632:	4903      	ldr	r1, [pc, #12]	; (80640 <ButtonBack_ISR_Handler+0x18>)
   80634:	2066      	movs	r0, #102	; 0x66
   80636:	4c03      	ldr	r4, [pc, #12]	; (80644 <ButtonBack_ISR_Handler+0x1c>)
   80638:	47a0      	blx	r4
}
   8063a:	b002      	add	sp, #8
   8063c:	bd10      	pop	{r4, pc}
   8063e:	bf00      	nop
   80640:	000803f1 	.word	0x000803f1
   80644:	00083581 	.word	0x00083581

00080648 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8064c:	4604      	mov	r4, r0
   8064e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80650:	4b0e      	ldr	r3, [pc, #56]	; (8068c <pio_handler_process+0x44>)
   80652:	4798      	blx	r3
   80654:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80656:	4620      	mov	r0, r4
   80658:	4b0d      	ldr	r3, [pc, #52]	; (80690 <pio_handler_process+0x48>)
   8065a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8065c:	4005      	ands	r5, r0
   8065e:	d013      	beq.n	80688 <pio_handler_process+0x40>
   80660:	4c0c      	ldr	r4, [pc, #48]	; (80694 <pio_handler_process+0x4c>)
   80662:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80666:	e003      	b.n	80670 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80668:	42b4      	cmp	r4, r6
   8066a:	d00d      	beq.n	80688 <pio_handler_process+0x40>
   8066c:	3410      	adds	r4, #16
		while (status != 0) {
   8066e:	b15d      	cbz	r5, 80688 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80670:	6820      	ldr	r0, [r4, #0]
   80672:	4540      	cmp	r0, r8
   80674:	d1f8      	bne.n	80668 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80676:	6861      	ldr	r1, [r4, #4]
   80678:	4229      	tst	r1, r5
   8067a:	d0f5      	beq.n	80668 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8067c:	68e3      	ldr	r3, [r4, #12]
   8067e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80680:	6863      	ldr	r3, [r4, #4]
   80682:	ea25 0503 	bic.w	r5, r5, r3
   80686:	e7ef      	b.n	80668 <pio_handler_process+0x20>
   80688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8068c:	00080875 	.word	0x00080875
   80690:	00080879 	.word	0x00080879
   80694:	20000ff8 	.word	0x20000ff8

00080698 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8069a:	4c18      	ldr	r4, [pc, #96]	; (806fc <pio_handler_set+0x64>)
   8069c:	6826      	ldr	r6, [r4, #0]
   8069e:	2e06      	cmp	r6, #6
   806a0:	d829      	bhi.n	806f6 <pio_handler_set+0x5e>
   806a2:	f04f 0c00 	mov.w	ip, #0
   806a6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   806a8:	4f15      	ldr	r7, [pc, #84]	; (80700 <pio_handler_set+0x68>)
   806aa:	e004      	b.n	806b6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   806ac:	3401      	adds	r4, #1
   806ae:	b2e4      	uxtb	r4, r4
   806b0:	46a4      	mov	ip, r4
   806b2:	42a6      	cmp	r6, r4
   806b4:	d309      	bcc.n	806ca <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   806b6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   806b8:	0125      	lsls	r5, r4, #4
   806ba:	597d      	ldr	r5, [r7, r5]
   806bc:	428d      	cmp	r5, r1
   806be:	d1f5      	bne.n	806ac <pio_handler_set+0x14>
   806c0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   806c4:	686d      	ldr	r5, [r5, #4]
   806c6:	4295      	cmp	r5, r2
   806c8:	d1f0      	bne.n	806ac <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   806ca:	4d0d      	ldr	r5, [pc, #52]	; (80700 <pio_handler_set+0x68>)
   806cc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   806d0:	eb05 040e 	add.w	r4, r5, lr
   806d4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   806d8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   806da:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   806dc:	9906      	ldr	r1, [sp, #24]
   806de:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   806e0:	3601      	adds	r6, #1
   806e2:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   806e4:	bf04      	itt	eq
   806e6:	4905      	ldreq	r1, [pc, #20]	; (806fc <pio_handler_set+0x64>)
   806e8:	600e      	streq	r6, [r1, #0]
   806ea:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   806ec:	461a      	mov	r2, r3
   806ee:	4b05      	ldr	r3, [pc, #20]	; (80704 <pio_handler_set+0x6c>)
   806f0:	4798      	blx	r3

	return 0;
   806f2:	2000      	movs	r0, #0
   806f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   806f6:	2001      	movs	r0, #1
}
   806f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806fa:	bf00      	nop
   806fc:	20001068 	.word	0x20001068
   80700:	20000ff8 	.word	0x20000ff8
   80704:	00080843 	.word	0x00080843

00080708 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80708:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8070a:	210a      	movs	r1, #10
   8070c:	4801      	ldr	r0, [pc, #4]	; (80714 <PIOA_Handler+0xc>)
   8070e:	4b02      	ldr	r3, [pc, #8]	; (80718 <PIOA_Handler+0x10>)
   80710:	4798      	blx	r3
   80712:	bd08      	pop	{r3, pc}
   80714:	400e0c00 	.word	0x400e0c00
   80718:	00080649 	.word	0x00080649

0008071c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8071c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8071e:	210b      	movs	r1, #11
   80720:	4801      	ldr	r0, [pc, #4]	; (80728 <PIOB_Handler+0xc>)
   80722:	4b02      	ldr	r3, [pc, #8]	; (8072c <PIOB_Handler+0x10>)
   80724:	4798      	blx	r3
   80726:	bd08      	pop	{r3, pc}
   80728:	400e0e00 	.word	0x400e0e00
   8072c:	00080649 	.word	0x00080649

00080730 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   80730:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80732:	4812      	ldr	r0, [pc, #72]	; (8077c <sysclk_init+0x4c>)
   80734:	4b12      	ldr	r3, [pc, #72]	; (80780 <sysclk_init+0x50>)
   80736:	4798      	blx	r3
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80738:	203e      	movs	r0, #62	; 0x3e
   8073a:	4b12      	ldr	r3, [pc, #72]	; (80784 <sysclk_init+0x54>)
   8073c:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   8073e:	4c12      	ldr	r4, [pc, #72]	; (80788 <sysclk_init+0x58>)
   80740:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80742:	2800      	cmp	r0, #0
   80744:	d0fc      	beq.n	80740 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   80746:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8074a:	4b10      	ldr	r3, [pc, #64]	; (8078c <sysclk_init+0x5c>)
   8074c:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8074e:	4c10      	ldr	r4, [pc, #64]	; (80790 <sysclk_init+0x60>)
   80750:	47a0      	blx	r4
   80752:	2800      	cmp	r0, #0
   80754:	d0fc      	beq.n	80750 <sysclk_init+0x20>
		uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80756:	4b0f      	ldr	r3, [pc, #60]	; (80794 <sysclk_init+0x64>)
   80758:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8075a:	4a0f      	ldr	r2, [pc, #60]	; (80798 <sysclk_init+0x68>)
   8075c:	4b0f      	ldr	r3, [pc, #60]	; (8079c <sysclk_init+0x6c>)
   8075e:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80760:	4c0f      	ldr	r4, [pc, #60]	; (807a0 <sysclk_init+0x70>)
   80762:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80764:	2800      	cmp	r0, #0
   80766:	d0fc      	beq.n	80762 <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80768:	2010      	movs	r0, #16
   8076a:	4b0e      	ldr	r3, [pc, #56]	; (807a4 <sysclk_init+0x74>)
   8076c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8076e:	4b0e      	ldr	r3, [pc, #56]	; (807a8 <sysclk_init+0x78>)
   80770:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80772:	4802      	ldr	r0, [pc, #8]	; (8077c <sysclk_init+0x4c>)
   80774:	4b02      	ldr	r3, [pc, #8]	; (80780 <sysclk_init+0x50>)
   80776:	4798      	blx	r3
   80778:	bd10      	pop	{r4, pc}
   8077a:	bf00      	nop
   8077c:	05b8d800 	.word	0x05b8d800
   80780:	200000b5 	.word	0x200000b5
   80784:	00080a65 	.word	0x00080a65
   80788:	00080a8d 	.word	0x00080a8d
   8078c:	00080aad 	.word	0x00080aad
   80790:	00080a9d 	.word	0x00080a9d
   80794:	00080acd 	.word	0x00080acd
   80798:	200f3f01 	.word	0x200f3f01
   8079c:	400e0400 	.word	0x400e0400
   807a0:	00080add 	.word	0x00080add
   807a4:	000809bd 	.word	0x000809bd
   807a8:	00081091 	.word	0x00081091

000807ac <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   807ac:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   807ae:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   807b2:	d016      	beq.n	807e2 <pio_set_peripheral+0x36>
   807b4:	d80b      	bhi.n	807ce <pio_set_peripheral+0x22>
   807b6:	b149      	cbz	r1, 807cc <pio_set_peripheral+0x20>
   807b8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   807bc:	d105      	bne.n	807ca <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   807be:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   807c0:	6f01      	ldr	r1, [r0, #112]	; 0x70
   807c2:	400b      	ands	r3, r1
   807c4:	ea23 0302 	bic.w	r3, r3, r2
   807c8:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   807ca:	6042      	str	r2, [r0, #4]
   807cc:	4770      	bx	lr
	switch (ul_type) {
   807ce:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   807d2:	d0fb      	beq.n	807cc <pio_set_peripheral+0x20>
   807d4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   807d8:	d0f8      	beq.n	807cc <pio_set_peripheral+0x20>
   807da:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   807de:	d1f4      	bne.n	807ca <pio_set_peripheral+0x1e>
   807e0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   807e2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   807e4:	4313      	orrs	r3, r2
   807e6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   807e8:	e7ef      	b.n	807ca <pio_set_peripheral+0x1e>

000807ea <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   807ea:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   807ec:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   807f0:	bf14      	ite	ne
   807f2:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   807f4:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   807f6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   807fa:	bf14      	ite	ne
   807fc:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   807fe:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80800:	f012 0f02 	tst.w	r2, #2
   80804:	d107      	bne.n	80816 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80806:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8080a:	bf18      	it	ne
   8080c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80810:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80812:	6001      	str	r1, [r0, #0]
   80814:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80816:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8081a:	e7f9      	b.n	80810 <pio_set_input+0x26>

0008081c <pio_set_output>:
{
   8081c:	b410      	push	{r4}
   8081e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80820:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80822:	b944      	cbnz	r4, 80836 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80824:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80826:	b143      	cbz	r3, 8083a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80828:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8082a:	b942      	cbnz	r2, 8083e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   8082c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8082e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80830:	6001      	str	r1, [r0, #0]
}
   80832:	bc10      	pop	{r4}
   80834:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80836:	6641      	str	r1, [r0, #100]	; 0x64
   80838:	e7f5      	b.n	80826 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8083a:	6541      	str	r1, [r0, #84]	; 0x54
   8083c:	e7f5      	b.n	8082a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   8083e:	6301      	str	r1, [r0, #48]	; 0x30
   80840:	e7f5      	b.n	8082e <pio_set_output+0x12>

00080842 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   80842:	f012 0f10 	tst.w	r2, #16
   80846:	d010      	beq.n	8086a <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   80848:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8084c:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   80850:	bf14      	ite	ne
   80852:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   80856:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   8085a:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   8085e:	bf14      	ite	ne
   80860:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   80864:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80868:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   8086a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   8086e:	4770      	bx	lr

00080870 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   80870:	6401      	str	r1, [r0, #64]	; 0x40
   80872:	4770      	bx	lr

00080874 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80874:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80876:	4770      	bx	lr

00080878 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80878:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8087a:	4770      	bx	lr

0008087c <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8087c:	0943      	lsrs	r3, r0, #5
   8087e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80882:	f203 7306 	addw	r3, r3, #1798	; 0x706
   80886:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   80888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8088a:	f000 001f 	and.w	r0, r0, #31
   8088e:	fa23 f000 	lsr.w	r0, r3, r0
}
   80892:	f000 0001 	and.w	r0, r0, #1
   80896:	4770      	bx	lr

00080898 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80898:	0943      	lsrs	r3, r0, #5
   8089a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8089e:	f203 7306 	addw	r3, r3, #1798	; 0x706
   808a2:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   808a4:	f000 001f 	and.w	r0, r0, #31
   808a8:	2201      	movs	r2, #1
   808aa:	fa02 f000 	lsl.w	r0, r2, r0
   808ae:	6318      	str	r0, [r3, #48]	; 0x30
   808b0:	4770      	bx	lr

000808b2 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   808b2:	0943      	lsrs	r3, r0, #5
   808b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   808b8:	f203 7306 	addw	r3, r3, #1798	; 0x706
   808bc:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   808be:	f000 001f 	and.w	r0, r0, #31
   808c2:	2201      	movs	r2, #1
   808c4:	fa02 f000 	lsl.w	r0, r2, r0
   808c8:	6358      	str	r0, [r3, #52]	; 0x34
   808ca:	4770      	bx	lr

000808cc <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   808cc:	0943      	lsrs	r3, r0, #5
   808ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   808d2:	f203 7306 	addw	r3, r3, #1798	; 0x706
   808d6:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   808d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
   808da:	f000 021f 	and.w	r2, r0, #31
   808de:	2001      	movs	r0, #1
   808e0:	4090      	lsls	r0, r2
   808e2:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   808e4:	bf14      	ite	ne
   808e6:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   808e8:	6318      	streq	r0, [r3, #48]	; 0x30
   808ea:	4770      	bx	lr

000808ec <pio_configure_pin>:
{
   808ec:	b570      	push	{r4, r5, r6, lr}
   808ee:	b082      	sub	sp, #8
   808f0:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   808f2:	0943      	lsrs	r3, r0, #5
   808f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   808f8:	f203 7306 	addw	r3, r3, #1798	; 0x706
   808fc:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   808fe:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80902:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80906:	d031      	beq.n	8096c <pio_configure_pin+0x80>
   80908:	d816      	bhi.n	80938 <pio_configure_pin+0x4c>
   8090a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8090e:	d01b      	beq.n	80948 <pio_configure_pin+0x5c>
   80910:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80914:	d116      	bne.n	80944 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80916:	f000 001f 	and.w	r0, r0, #31
   8091a:	2601      	movs	r6, #1
   8091c:	4086      	lsls	r6, r0
   8091e:	4632      	mov	r2, r6
   80920:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80924:	4620      	mov	r0, r4
   80926:	4b22      	ldr	r3, [pc, #136]	; (809b0 <pio_configure_pin+0xc4>)
   80928:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8092a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8092e:	bf14      	ite	ne
   80930:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80932:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80934:	2001      	movs	r0, #1
   80936:	e017      	b.n	80968 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80938:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8093c:	d021      	beq.n	80982 <pio_configure_pin+0x96>
   8093e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80942:	d01e      	beq.n	80982 <pio_configure_pin+0x96>
		return 0;
   80944:	2000      	movs	r0, #0
   80946:	e00f      	b.n	80968 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80948:	f000 001f 	and.w	r0, r0, #31
   8094c:	2601      	movs	r6, #1
   8094e:	4086      	lsls	r6, r0
   80950:	4632      	mov	r2, r6
   80952:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80956:	4620      	mov	r0, r4
   80958:	4b15      	ldr	r3, [pc, #84]	; (809b0 <pio_configure_pin+0xc4>)
   8095a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8095c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80960:	bf14      	ite	ne
   80962:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80964:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80966:	2001      	movs	r0, #1
}
   80968:	b002      	add	sp, #8
   8096a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8096c:	f000 011f 	and.w	r1, r0, #31
   80970:	2601      	movs	r6, #1
   80972:	462a      	mov	r2, r5
   80974:	fa06 f101 	lsl.w	r1, r6, r1
   80978:	4620      	mov	r0, r4
   8097a:	4b0e      	ldr	r3, [pc, #56]	; (809b4 <pio_configure_pin+0xc8>)
   8097c:	4798      	blx	r3
	return 1;
   8097e:	4630      	mov	r0, r6
		break;
   80980:	e7f2      	b.n	80968 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80982:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80986:	f000 011f 	and.w	r1, r0, #31
   8098a:	2601      	movs	r6, #1
   8098c:	ea05 0306 	and.w	r3, r5, r6
   80990:	9300      	str	r3, [sp, #0]
   80992:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80996:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8099a:	bf14      	ite	ne
   8099c:	2200      	movne	r2, #0
   8099e:	2201      	moveq	r2, #1
   809a0:	fa06 f101 	lsl.w	r1, r6, r1
   809a4:	4620      	mov	r0, r4
   809a6:	4c04      	ldr	r4, [pc, #16]	; (809b8 <pio_configure_pin+0xcc>)
   809a8:	47a0      	blx	r4
	return 1;
   809aa:	4630      	mov	r0, r6
		break;
   809ac:	e7dc      	b.n	80968 <pio_configure_pin+0x7c>
   809ae:	bf00      	nop
   809b0:	000807ad 	.word	0x000807ad
   809b4:	000807eb 	.word	0x000807eb
   809b8:	0008081d 	.word	0x0008081d

000809bc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   809bc:	4a17      	ldr	r2, [pc, #92]	; (80a1c <pmc_switch_mck_to_pllack+0x60>)
   809be:	6b13      	ldr	r3, [r2, #48]	; 0x30
   809c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   809c4:	4318      	orrs	r0, r3
   809c6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   809c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   809ca:	f013 0f08 	tst.w	r3, #8
   809ce:	d10a      	bne.n	809e6 <pmc_switch_mck_to_pllack+0x2a>
   809d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   809d4:	4911      	ldr	r1, [pc, #68]	; (80a1c <pmc_switch_mck_to_pllack+0x60>)
   809d6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   809d8:	f012 0f08 	tst.w	r2, #8
   809dc:	d103      	bne.n	809e6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   809de:	3b01      	subs	r3, #1
   809e0:	d1f9      	bne.n	809d6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   809e2:	2001      	movs	r0, #1
   809e4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   809e6:	4a0d      	ldr	r2, [pc, #52]	; (80a1c <pmc_switch_mck_to_pllack+0x60>)
   809e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   809ea:	f023 0303 	bic.w	r3, r3, #3
   809ee:	f043 0302 	orr.w	r3, r3, #2
   809f2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   809f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   809f6:	f013 0f08 	tst.w	r3, #8
   809fa:	d10a      	bne.n	80a12 <pmc_switch_mck_to_pllack+0x56>
   809fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a00:	4906      	ldr	r1, [pc, #24]	; (80a1c <pmc_switch_mck_to_pllack+0x60>)
   80a02:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80a04:	f012 0f08 	tst.w	r2, #8
   80a08:	d105      	bne.n	80a16 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a0a:	3b01      	subs	r3, #1
   80a0c:	d1f9      	bne.n	80a02 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80a0e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80a10:	4770      	bx	lr
	return 0;
   80a12:	2000      	movs	r0, #0
   80a14:	4770      	bx	lr
   80a16:	2000      	movs	r0, #0
   80a18:	4770      	bx	lr
   80a1a:	bf00      	nop
   80a1c:	400e0400 	.word	0x400e0400

00080a20 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   80a20:	2801      	cmp	r0, #1
   80a22:	d003      	beq.n	80a2c <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   80a24:	4a05      	ldr	r2, [pc, #20]	; (80a3c <pmc_switch_sclk_to_32kxtal+0x1c>)
   80a26:	4b06      	ldr	r3, [pc, #24]	; (80a40 <pmc_switch_sclk_to_32kxtal+0x20>)
   80a28:	601a      	str	r2, [r3, #0]
   80a2a:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   80a2c:	4a04      	ldr	r2, [pc, #16]	; (80a40 <pmc_switch_sclk_to_32kxtal+0x20>)
   80a2e:	6893      	ldr	r3, [r2, #8]
   80a30:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80a38:	6093      	str	r3, [r2, #8]
   80a3a:	e7f3      	b.n	80a24 <pmc_switch_sclk_to_32kxtal+0x4>
   80a3c:	a5000008 	.word	0xa5000008
   80a40:	400e1210 	.word	0x400e1210

00080a44 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   80a44:	4b05      	ldr	r3, [pc, #20]	; (80a5c <pmc_osc_is_ready_32kxtal+0x18>)
   80a46:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   80a48:	f013 0f80 	tst.w	r3, #128	; 0x80
   80a4c:	bf1d      	ittte	ne
   80a4e:	4b04      	ldrne	r3, [pc, #16]	; (80a60 <pmc_osc_is_ready_32kxtal+0x1c>)
   80a50:	6e98      	ldrne	r0, [r3, #104]	; 0x68
   80a52:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
   80a56:	2000      	moveq	r0, #0
}
   80a58:	4770      	bx	lr
   80a5a:	bf00      	nop
   80a5c:	400e1210 	.word	0x400e1210
   80a60:	400e0400 	.word	0x400e0400

00080a64 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   80a64:	4a08      	ldr	r2, [pc, #32]	; (80a88 <pmc_osc_enable_main_xtal+0x24>)
   80a66:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   80a68:	f023 0303 	bic.w	r3, r3, #3
   80a6c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80a70:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80a74:	0200      	lsls	r0, r0, #8
   80a76:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80a78:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   80a7a:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80a7c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80a7e:	f013 0f01 	tst.w	r3, #1
   80a82:	d0fb      	beq.n	80a7c <pmc_osc_enable_main_xtal+0x18>
}
   80a84:	4770      	bx	lr
   80a86:	bf00      	nop
   80a88:	400e0400 	.word	0x400e0400

00080a8c <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   80a8c:	4b02      	ldr	r3, [pc, #8]	; (80a98 <pmc_osc_is_ready_main_xtal+0xc>)
   80a8e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80a90:	f000 0001 	and.w	r0, r0, #1
   80a94:	4770      	bx	lr
   80a96:	bf00      	nop
   80a98:	400e0400 	.word	0x400e0400

00080a9c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80a9c:	4b02      	ldr	r3, [pc, #8]	; (80aa8 <pmc_osc_is_ready_mainck+0xc>)
   80a9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80aa0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80aa4:	4770      	bx	lr
   80aa6:	bf00      	nop
   80aa8:	400e0400 	.word	0x400e0400

00080aac <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   80aac:	4b06      	ldr	r3, [pc, #24]	; (80ac8 <pmc_mainck_osc_select+0x1c>)
   80aae:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   80ab0:	b930      	cbnz	r0, 80ac0 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   80ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   80ab6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80aba:	4a03      	ldr	r2, [pc, #12]	; (80ac8 <pmc_mainck_osc_select+0x1c>)
   80abc:	6213      	str	r3, [r2, #32]
   80abe:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   80ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   80ac4:	e7f7      	b.n	80ab6 <pmc_mainck_osc_select+0xa>
   80ac6:	bf00      	nop
   80ac8:	400e0400 	.word	0x400e0400

00080acc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80acc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80ad0:	4b01      	ldr	r3, [pc, #4]	; (80ad8 <pmc_disable_pllack+0xc>)
   80ad2:	629a      	str	r2, [r3, #40]	; 0x28
   80ad4:	4770      	bx	lr
   80ad6:	bf00      	nop
   80ad8:	400e0400 	.word	0x400e0400

00080adc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80adc:	4b02      	ldr	r3, [pc, #8]	; (80ae8 <pmc_is_locked_pllack+0xc>)
   80ade:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80ae0:	f000 0002 	and.w	r0, r0, #2
   80ae4:	4770      	bx	lr
   80ae6:	bf00      	nop
   80ae8:	400e0400 	.word	0x400e0400

00080aec <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80aec:	281d      	cmp	r0, #29
   80aee:	d80e      	bhi.n	80b0e <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   80af0:	281f      	cmp	r0, #31
   80af2:	d80e      	bhi.n	80b12 <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80af4:	4b09      	ldr	r3, [pc, #36]	; (80b1c <pmc_enable_periph_clk+0x30>)
   80af6:	699a      	ldr	r2, [r3, #24]
   80af8:	2301      	movs	r3, #1
   80afa:	4083      	lsls	r3, r0
   80afc:	4393      	bics	r3, r2
   80afe:	d00a      	beq.n	80b16 <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80b00:	2301      	movs	r3, #1
   80b02:	fa03 f000 	lsl.w	r0, r3, r0
   80b06:	4b05      	ldr	r3, [pc, #20]	; (80b1c <pmc_enable_periph_clk+0x30>)
   80b08:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80b0a:	2000      	movs	r0, #0
   80b0c:	4770      	bx	lr
		return 1;
   80b0e:	2001      	movs	r0, #1
   80b10:	4770      	bx	lr
	return 0;
   80b12:	2000      	movs	r0, #0
   80b14:	4770      	bx	lr
   80b16:	2000      	movs	r0, #0
}
   80b18:	4770      	bx	lr
   80b1a:	bf00      	nop
   80b1c:	400e0400 	.word	0x400e0400

00080b20 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   80b20:	4770      	bx	lr
	...

00080b24 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   80b24:	4b0b      	ldr	r3, [pc, #44]	; (80b54 <cpu_irq_enter_critical+0x30>)
   80b26:	681b      	ldr	r3, [r3, #0]
   80b28:	b92b      	cbnz	r3, 80b36 <cpu_irq_enter_critical+0x12>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80b2a:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   80b2e:	b13b      	cbz	r3, 80b40 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   80b30:	2200      	movs	r2, #0
   80b32:	4b09      	ldr	r3, [pc, #36]	; (80b58 <cpu_irq_enter_critical+0x34>)
   80b34:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   80b36:	4a07      	ldr	r2, [pc, #28]	; (80b54 <cpu_irq_enter_critical+0x30>)
   80b38:	6813      	ldr	r3, [r2, #0]
   80b3a:	3301      	adds	r3, #1
   80b3c:	6013      	str	r3, [r2, #0]
   80b3e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   80b40:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80b42:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   80b46:	2200      	movs	r2, #0
   80b48:	4b04      	ldr	r3, [pc, #16]	; (80b5c <cpu_irq_enter_critical+0x38>)
   80b4a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   80b4c:	2201      	movs	r2, #1
   80b4e:	4b02      	ldr	r3, [pc, #8]	; (80b58 <cpu_irq_enter_critical+0x34>)
   80b50:	701a      	strb	r2, [r3, #0]
   80b52:	e7f0      	b.n	80b36 <cpu_irq_enter_critical+0x12>
   80b54:	2000106c 	.word	0x2000106c
   80b58:	20001070 	.word	0x20001070
   80b5c:	2000012c 	.word	0x2000012c

00080b60 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   80b60:	4b07      	ldr	r3, [pc, #28]	; (80b80 <cpu_irq_leave_critical+0x20>)
   80b62:	681a      	ldr	r2, [r3, #0]
   80b64:	3a01      	subs	r2, #1
   80b66:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   80b68:	681b      	ldr	r3, [r3, #0]
   80b6a:	b943      	cbnz	r3, 80b7e <cpu_irq_leave_critical+0x1e>
   80b6c:	4b05      	ldr	r3, [pc, #20]	; (80b84 <cpu_irq_leave_critical+0x24>)
   80b6e:	781b      	ldrb	r3, [r3, #0]
   80b70:	b12b      	cbz	r3, 80b7e <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   80b72:	2201      	movs	r2, #1
   80b74:	4b04      	ldr	r3, [pc, #16]	; (80b88 <cpu_irq_leave_critical+0x28>)
   80b76:	701a      	strb	r2, [r3, #0]
   80b78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80b7c:	b662      	cpsie	i
   80b7e:	4770      	bx	lr
   80b80:	2000106c 	.word	0x2000106c
   80b84:	20001070 	.word	0x20001070
   80b88:	2000012c 	.word	0x2000012c

00080b8c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80b8c:	b4f0      	push	{r4, r5, r6, r7}
   80b8e:	b08c      	sub	sp, #48	; 0x30
   80b90:	4607      	mov	r7, r0
   80b92:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80b94:	ac01      	add	r4, sp, #4
   80b96:	4d11      	ldr	r5, [pc, #68]	; (80bdc <pwm_clocks_generate+0x50>)
   80b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80ba0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80ba4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   80ba8:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80baa:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80bac:	f852 0b04 	ldr.w	r0, [r2], #4
   80bb0:	fbb6 f0f0 	udiv	r0, r6, r0
   80bb4:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80bb8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   80bbc:	d907      	bls.n	80bce <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
   80bbe:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80bc0:	2b0b      	cmp	r3, #11
   80bc2:	d1f3      	bne.n	80bac <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   80bc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   80bc8:	b00c      	add	sp, #48	; 0x30
   80bca:	bcf0      	pop	{r4, r5, r6, r7}
   80bcc:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80bce:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
   80bd0:	bf94      	ite	ls
   80bd2:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
   80bd6:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
   80bda:	e7f5      	b.n	80bc8 <pwm_clocks_generate+0x3c>
   80bdc:	00088aac 	.word	0x00088aac

00080be0 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80be0:	b570      	push	{r4, r5, r6, lr}
   80be2:	4606      	mov	r6, r0
   80be4:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80be6:	680c      	ldr	r4, [r1, #0]
   80be8:	b144      	cbz	r4, 80bfc <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80bea:	6889      	ldr	r1, [r1, #8]
   80bec:	4620      	mov	r0, r4
   80bee:	4b0c      	ldr	r3, [pc, #48]	; (80c20 <pwm_init+0x40>)
   80bf0:	4798      	blx	r3
   80bf2:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80bf8:	4298      	cmp	r0, r3
   80bfa:	d00c      	beq.n	80c16 <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80bfc:	6868      	ldr	r0, [r5, #4]
   80bfe:	b140      	cbz	r0, 80c12 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80c00:	68a9      	ldr	r1, [r5, #8]
   80c02:	4b07      	ldr	r3, [pc, #28]	; (80c20 <pwm_init+0x40>)
   80c04:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80c0a:	4298      	cmp	r0, r3
   80c0c:	d005      	beq.n	80c1a <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80c0e:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80c12:	6034      	str	r4, [r6, #0]
#endif
	return 0;
   80c14:	2400      	movs	r4, #0
}
   80c16:	4620      	mov	r0, r4
   80c18:	bd70      	pop	{r4, r5, r6, pc}
			return result;
   80c1a:	4604      	mov	r4, r0
   80c1c:	e7fb      	b.n	80c16 <pwm_init+0x36>
   80c1e:	bf00      	nop
   80c20:	00080b8d 	.word	0x00080b8d

00080c24 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80c24:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80c26:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80c28:	684b      	ldr	r3, [r1, #4]
   80c2a:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   80c2e:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80c30:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
   80c32:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80c34:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
   80c36:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80c38:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80c3c:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80c3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80c42:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80c44:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80c48:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80c4a:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
   80c4e:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80c52:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80c56:	68cb      	ldr	r3, [r1, #12]
   80c58:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80c5c:	690b      	ldr	r3, [r1, #16]
   80c5e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80c62:	7d8b      	ldrb	r3, [r1, #22]
   80c64:	b13b      	cbz	r3, 80c76 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80c66:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80c68:	8b4b      	ldrh	r3, [r1, #26]
   80c6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80c6e:	eb00 1442 	add.w	r4, r0, r2, lsl #5
   80c72:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80c76:	6c85      	ldr	r5, [r0, #72]	; 0x48
   80c78:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   80c7c:	4093      	lsls	r3, r2
   80c7e:	43db      	mvns	r3, r3
   80c80:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80c82:	7fcc      	ldrb	r4, [r1, #31]
   80c84:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80c88:	7f8c      	ldrb	r4, [r1, #30]
   80c8a:	4094      	lsls	r4, r2
   80c8c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80c90:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80c92:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80c94:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80c96:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80c98:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
   80c9c:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80ca0:	f891 4020 	ldrb.w	r4, [r1, #32]
   80ca4:	4094      	lsls	r4, r2
   80ca6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80caa:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80cac:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80cae:	2301      	movs	r3, #1
   80cb0:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
   80cb2:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80cb6:	b31c      	cbz	r4, 80d00 <pwm_channel_init+0xdc>
		p_pwm->PWM_SCM |= channel;
   80cb8:	6a04      	ldr	r4, [r0, #32]
   80cba:	431c      	orrs	r4, r3
   80cbc:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80cbe:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80cc2:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80cc4:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80cc6:	bf0c      	ite	eq
   80cc8:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80cca:	439c      	bicne	r4, r3
   80ccc:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80cce:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80cd2:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80cd4:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80cd6:	bf0c      	ite	eq
   80cd8:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80cdc:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
   80ce0:	6683      	str	r3, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
   80ce2:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
   80ce4:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
   80ce6:	23ff      	movs	r3, #255	; 0xff
   80ce8:	4093      	lsls	r3, r2
   80cea:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80cee:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   80cf2:	fa03 f202 	lsl.w	r2, r3, r2
   80cf6:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
   80cf8:	66c2      	str	r2, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   80cfa:	2000      	movs	r0, #0
   80cfc:	bc70      	pop	{r4, r5, r6}
   80cfe:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80d00:	6a04      	ldr	r4, [r0, #32]
   80d02:	ea24 0403 	bic.w	r4, r4, r3
   80d06:	6204      	str	r4, [r0, #32]
   80d08:	e7d9      	b.n	80cbe <pwm_channel_init+0x9a>

00080d0a <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80d0a:	2301      	movs	r3, #1
   80d0c:	fa03 f101 	lsl.w	r1, r3, r1
   80d10:	6041      	str	r1, [r0, #4]
   80d12:	4770      	bx	lr

00080d14 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80d14:	2301      	movs	r3, #1
   80d16:	fa03 f101 	lsl.w	r1, r3, r1
   80d1a:	6081      	str	r1, [r0, #8]
   80d1c:	4770      	bx	lr
	...

00080d20 <rstc_start_software_reset>:
		Rstc *p_rstc)
{
#if (SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST;
#else
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
   80d20:	4b01      	ldr	r3, [pc, #4]	; (80d28 <rstc_start_software_reset+0x8>)
   80d22:	6003      	str	r3, [r0, #0]
   80d24:	4770      	bx	lr
   80d26:	bf00      	nop
   80d28:	a5000005 	.word	0xa5000005

00080d2c <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
   80d2c:	6201      	str	r1, [r0, #32]
   80d2e:	4770      	bx	lr

00080d30 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
   80d30:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
   80d32:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   80d34:	6884      	ldr	r4, [r0, #8]
   80d36:	42a5      	cmp	r5, r4
   80d38:	d003      	beq.n	80d42 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
   80d3a:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   80d3c:	6884      	ldr	r4, [r0, #8]
   80d3e:	42ac      	cmp	r4, r5
   80d40:	d1fb      	bne.n	80d3a <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
   80d42:	b161      	cbz	r1, 80d5e <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80d44:	f3c4 5001 	ubfx	r0, r4, #20, #2
   80d48:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   80d4c:	f3c4 4003 	ubfx	r0, r4, #16, #4
   80d50:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
   80d54:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
   80d58:	bf18      	it	ne
   80d5a:	300c      	addne	r0, #12
   80d5c:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
   80d5e:	b142      	cbz	r2, 80d72 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
   80d60:	f3c4 3102 	ubfx	r1, r4, #12, #3
   80d64:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80d68:	f3c4 2003 	ubfx	r0, r4, #8, #4
   80d6c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   80d70:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
   80d72:	b143      	cbz	r3, 80d86 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80d74:	f3c4 1202 	ubfx	r2, r4, #4, #3
   80d78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80d7c:	f004 040f 	and.w	r4, r4, #15
   80d80:	eb04 0442 	add.w	r4, r4, r2, lsl #1
   80d84:	601c      	str	r4, [r3, #0]
	}
}
   80d86:	bc30      	pop	{r4, r5}
   80d88:	4770      	bx	lr
	...

00080d8c <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
   80d8c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
   80d8e:	6844      	ldr	r4, [r0, #4]
   80d90:	f014 0f01 	tst.w	r4, #1
   80d94:	d005      	beq.n	80da2 <rtc_set_time+0x16>
		if (ul_hour > 12) {
   80d96:	290c      	cmp	r1, #12
   80d98:	d93d      	bls.n	80e16 <rtc_set_time+0x8a>
			ul_hour -= 12;
   80d9a:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
   80d9c:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   80da0:	e000      	b.n	80da4 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
   80da2:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   80da4:	4c1d      	ldr	r4, [pc, #116]	; (80e1c <rtc_set_time+0x90>)
   80da6:	fba4 5603 	umull	r5, r6, r4, r3
   80daa:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
   80dac:	eb06 0586 	add.w	r5, r6, r6, lsl #2
   80db0:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
   80db4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
   80db8:	fba4 6502 	umull	r6, r5, r4, r2
   80dbc:	08ed      	lsrs	r5, r5, #3
   80dbe:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
   80dc2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   80dc6:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
   80dca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   80dce:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
   80dd0:	fba4 4201 	umull	r4, r2, r4, r1
   80dd4:	08d2      	lsrs	r2, r2, #3
   80dd6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
   80dda:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80dde:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   80de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   80de6:	6983      	ldr	r3, [r0, #24]
   80de8:	f013 0f04 	tst.w	r3, #4
   80dec:	d0fb      	beq.n	80de6 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
   80dee:	6803      	ldr	r3, [r0, #0]
   80df0:	f043 0301 	orr.w	r3, r3, #1
   80df4:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   80df6:	6983      	ldr	r3, [r0, #24]
   80df8:	f013 0f01 	tst.w	r3, #1
   80dfc:	d0fb      	beq.n	80df6 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   80dfe:	2301      	movs	r3, #1
   80e00:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
   80e02:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
   80e04:	6803      	ldr	r3, [r0, #0]
   80e06:	f023 0301 	bic.w	r3, r3, #1
   80e0a:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
   80e0c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   80e0e:	f000 0001 	and.w	r0, r0, #1
   80e12:	bcf0      	pop	{r4, r5, r6, r7}
   80e14:	4770      	bx	lr
	uint32_t ul_time = 0;
   80e16:	2700      	movs	r7, #0
   80e18:	e7c4      	b.n	80da4 <rtc_set_time+0x18>
   80e1a:	bf00      	nop
   80e1c:	cccccccd 	.word	0xcccccccd

00080e20 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
   80e20:	b4f0      	push	{r4, r5, r6, r7}
   80e22:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
   80e24:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   80e26:	68c4      	ldr	r4, [r0, #12]
   80e28:	42a5      	cmp	r5, r4
   80e2a:	d003      	beq.n	80e34 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
   80e2c:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   80e2e:	68c4      	ldr	r4, [r0, #12]
   80e30:	42ac      	cmp	r4, r5
   80e32:	d1fb      	bne.n	80e2c <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
   80e34:	b199      	cbz	r1, 80e5e <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80e36:	f3c4 3003 	ubfx	r0, r4, #12, #4
   80e3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80e3e:	f3c4 2703 	ubfx	r7, r4, #8, #4
   80e42:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80e46:	f3c4 1002 	ubfx	r0, r4, #4, #3
   80e4a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   80e4e:	f004 000f 	and.w	r0, r4, #15
   80e52:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80e56:	2564      	movs	r5, #100	; 0x64
   80e58:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
   80e5c:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
   80e5e:	b142      	cbz	r2, 80e72 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80e60:	f3c4 5000 	ubfx	r0, r4, #20, #1
   80e64:	0081      	lsls	r1, r0, #2
   80e66:	4408      	add	r0, r1
   80e68:	f3c4 4103 	ubfx	r1, r4, #16, #4
   80e6c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
   80e70:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
   80e72:	b143      	cbz	r3, 80e86 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80e74:	f3c4 7201 	ubfx	r2, r4, #28, #2
   80e78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80e7c:	f3c4 6103 	ubfx	r1, r4, #24, #4
   80e80:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   80e84:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
   80e86:	b116      	cbz	r6, 80e8e <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
   80e88:	f3c4 5442 	ubfx	r4, r4, #21, #3
   80e8c:	6034      	str	r4, [r6, #0]
	}
}
   80e8e:	bcf0      	pop	{r4, r5, r6, r7}
   80e90:	4770      	bx	lr
	...

00080e94 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
   80e94:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80e96:	4d2a      	ldr	r5, [pc, #168]	; (80f40 <rtc_set_date+0xac>)
   80e98:	fba5 4603 	umull	r4, r6, r5, r3
   80e9c:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
   80e9e:	9c03      	ldr	r4, [sp, #12]
   80ea0:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80ea2:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
   80ea6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   80eaa:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80eae:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
   80eb2:	fba5 6402 	umull	r6, r4, r5, r2
   80eb6:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80eb8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
   80ebc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   80ec0:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80ec4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
   80ec8:	4b1e      	ldr	r3, [pc, #120]	; (80f44 <rtc_set_date+0xb0>)
   80eca:	fba3 4301 	umull	r4, r3, r3, r1
   80ece:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80ed0:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
   80ed4:	4b1c      	ldr	r3, [pc, #112]	; (80f48 <rtc_set_date+0xb4>)
   80ed6:	fba3 4301 	umull	r4, r3, r3, r1
   80eda:	095b      	lsrs	r3, r3, #5
   80edc:	fba5 6403 	umull	r6, r4, r5, r3
   80ee0:	08e4      	lsrs	r4, r4, #3
   80ee2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   80ee6:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80eea:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
   80eec:	fba5 4301 	umull	r4, r3, r5, r1
   80ef0:	08db      	lsrs	r3, r3, #3
   80ef2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   80ef6:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80efa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
   80efe:	fba5 1503 	umull	r1, r5, r5, r3
   80f02:	08ed      	lsrs	r5, r5, #3
   80f04:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   80f08:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80f0c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   80f10:	6983      	ldr	r3, [r0, #24]
   80f12:	f013 0f04 	tst.w	r3, #4
   80f16:	d0fb      	beq.n	80f10 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
   80f18:	6803      	ldr	r3, [r0, #0]
   80f1a:	f043 0302 	orr.w	r3, r3, #2
   80f1e:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   80f20:	6983      	ldr	r3, [r0, #24]
   80f22:	f013 0f01 	tst.w	r3, #1
   80f26:	d0fb      	beq.n	80f20 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   80f28:	2301      	movs	r3, #1
   80f2a:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
   80f2c:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
   80f2e:	6803      	ldr	r3, [r0, #0]
   80f30:	f023 0302 	bic.w	r3, r3, #2
   80f34:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
   80f36:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   80f38:	f000 0002 	and.w	r0, r0, #2
   80f3c:	bc70      	pop	{r4, r5, r6}
   80f3e:	4770      	bx	lr
   80f40:	cccccccd 	.word	0xcccccccd
   80f44:	10624dd3 	.word	0x10624dd3
   80f48:	51eb851f 	.word	0x51eb851f

00080f4c <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
   80f4c:	61c1      	str	r1, [r0, #28]
   80f4e:	4770      	bx	lr

00080f50 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80f50:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80f52:	0189      	lsls	r1, r1, #6
   80f54:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80f56:	2402      	movs	r4, #2
   80f58:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80f5a:	f04f 31ff 	mov.w	r1, #4294967295
   80f5e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80f60:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80f62:	605a      	str	r2, [r3, #4]
}
   80f64:	bc10      	pop	{r4}
   80f66:	4770      	bx	lr

00080f68 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80f68:	0189      	lsls	r1, r1, #6
   80f6a:	2305      	movs	r3, #5
   80f6c:	5043      	str	r3, [r0, r1]
   80f6e:	4770      	bx	lr

00080f70 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   80f70:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80f74:	614a      	str	r2, [r1, #20]
   80f76:	4770      	bx	lr

00080f78 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80f78:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80f7c:	61ca      	str	r2, [r1, #28]
   80f7e:	4770      	bx	lr

00080f80 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80f80:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   80f84:	624a      	str	r2, [r1, #36]	; 0x24
   80f86:	4770      	bx	lr

00080f88 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80f88:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   80f8c:	6a08      	ldr	r0, [r1, #32]
}
   80f8e:	4770      	bx	lr

00080f90 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80f90:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80f92:	23ac      	movs	r3, #172	; 0xac
   80f94:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80f96:	680b      	ldr	r3, [r1, #0]
   80f98:	684a      	ldr	r2, [r1, #4]
   80f9a:	fbb3 f3f2 	udiv	r3, r3, r2
   80f9e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80fa0:	1e5c      	subs	r4, r3, #1
   80fa2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80fa6:	4294      	cmp	r4, r2
   80fa8:	d80b      	bhi.n	80fc2 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80faa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80fac:	688b      	ldr	r3, [r1, #8]
   80fae:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80fb0:	f240 2302 	movw	r3, #514	; 0x202
   80fb4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80fb8:	2350      	movs	r3, #80	; 0x50
   80fba:	6003      	str	r3, [r0, #0]

	return 0;
   80fbc:	2000      	movs	r0, #0
}
   80fbe:	bc10      	pop	{r4}
   80fc0:	4770      	bx	lr
		return 1;
   80fc2:	2001      	movs	r0, #1
   80fc4:	e7fb      	b.n	80fbe <uart_init+0x2e>

00080fc6 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
   80fc6:	6081      	str	r1, [r0, #8]
   80fc8:	4770      	bx	lr

00080fca <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
   80fca:	60c1      	str	r1, [r0, #12]
   80fcc:	4770      	bx	lr

00080fce <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
   80fce:	6940      	ldr	r0, [r0, #20]
}
   80fd0:	4770      	bx	lr

00080fd2 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
   80fd2:	6940      	ldr	r0, [r0, #20]
}
   80fd4:	f000 0001 	and.w	r0, r0, #1
   80fd8:	4770      	bx	lr

00080fda <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80fda:	6943      	ldr	r3, [r0, #20]
   80fdc:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80fe0:	bf1d      	ittte	ne
   80fe2:	6983      	ldrne	r3, [r0, #24]
   80fe4:	700b      	strbne	r3, [r1, #0]
	return 0;
   80fe6:	2000      	movne	r0, #0
		return 1;
   80fe8:	2001      	moveq	r0, #1
}
   80fea:	4770      	bx	lr

00080fec <wdt_disable>:
/**
 * \brief Disable the watchdog editTimer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   80fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80ff0:	6043      	str	r3, [r0, #4]
   80ff2:	4770      	bx	lr

00080ff4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80ff4:	e7fe      	b.n	80ff4 <Dummy_Handler>
	...

00080ff8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80ff8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80ffa:	4b1c      	ldr	r3, [pc, #112]	; (8106c <Reset_Handler+0x74>)
   80ffc:	4a1c      	ldr	r2, [pc, #112]	; (81070 <Reset_Handler+0x78>)
   80ffe:	429a      	cmp	r2, r3
   81000:	d010      	beq.n	81024 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   81002:	4b1c      	ldr	r3, [pc, #112]	; (81074 <Reset_Handler+0x7c>)
   81004:	4a19      	ldr	r2, [pc, #100]	; (8106c <Reset_Handler+0x74>)
   81006:	429a      	cmp	r2, r3
   81008:	d20c      	bcs.n	81024 <Reset_Handler+0x2c>
   8100a:	3b01      	subs	r3, #1
   8100c:	1a9b      	subs	r3, r3, r2
   8100e:	f023 0303 	bic.w	r3, r3, #3
   81012:	3304      	adds	r3, #4
   81014:	4413      	add	r3, r2
   81016:	4916      	ldr	r1, [pc, #88]	; (81070 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81018:	f851 0b04 	ldr.w	r0, [r1], #4
   8101c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81020:	429a      	cmp	r2, r3
   81022:	d1f9      	bne.n	81018 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81024:	4b14      	ldr	r3, [pc, #80]	; (81078 <Reset_Handler+0x80>)
   81026:	4a15      	ldr	r2, [pc, #84]	; (8107c <Reset_Handler+0x84>)
   81028:	429a      	cmp	r2, r3
   8102a:	d20a      	bcs.n	81042 <Reset_Handler+0x4a>
   8102c:	3b01      	subs	r3, #1
   8102e:	1a9b      	subs	r3, r3, r2
   81030:	f023 0303 	bic.w	r3, r3, #3
   81034:	3304      	adds	r3, #4
   81036:	4413      	add	r3, r2
		*pDest++ = 0;
   81038:	2100      	movs	r1, #0
   8103a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8103e:	4293      	cmp	r3, r2
   81040:	d1fb      	bne.n	8103a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81042:	4b0f      	ldr	r3, [pc, #60]	; (81080 <Reset_Handler+0x88>)
   81044:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81048:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8104c:	490d      	ldr	r1, [pc, #52]	; (81084 <Reset_Handler+0x8c>)
   8104e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   81050:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81054:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
   81058:	d203      	bcs.n	81062 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8105a:	688b      	ldr	r3, [r1, #8]
   8105c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81060:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81062:	4b09      	ldr	r3, [pc, #36]	; (81088 <Reset_Handler+0x90>)
   81064:	4798      	blx	r3

	/* Branch to main function */
	main();
   81066:	4b09      	ldr	r3, [pc, #36]	; (8108c <Reset_Handler+0x94>)
   81068:	4798      	blx	r3
   8106a:	e7fe      	b.n	8106a <Reset_Handler+0x72>
   8106c:	20000000 	.word	0x20000000
   81070:	00089adc 	.word	0x00089adc
   81074:	20000fdc 	.word	0x20000fdc
   81078:	20001848 	.word	0x20001848
   8107c:	20000fdc 	.word	0x20000fdc
   81080:	00080000 	.word	0x00080000
   81084:	e000ed00 	.word	0xe000ed00
   81088:	00083e0d 	.word	0x00083e0d
   8108c:	0008389d 	.word	0x0008389d

00081090 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81090:	4b3d      	ldr	r3, [pc, #244]	; (81188 <SystemCoreClockUpdate+0xf8>)
   81092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81094:	f003 0303 	and.w	r3, r3, #3
   81098:	2b03      	cmp	r3, #3
   8109a:	d80e      	bhi.n	810ba <SystemCoreClockUpdate+0x2a>
   8109c:	e8df f003 	tbb	[pc, r3]
   810a0:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   810a4:	4b39      	ldr	r3, [pc, #228]	; (8118c <SystemCoreClockUpdate+0xfc>)
   810a6:	695b      	ldr	r3, [r3, #20]
   810a8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   810ac:	bf14      	ite	ne
   810ae:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   810b2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   810b6:	4b36      	ldr	r3, [pc, #216]	; (81190 <SystemCoreClockUpdate+0x100>)
   810b8:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   810ba:	4b33      	ldr	r3, [pc, #204]	; (81188 <SystemCoreClockUpdate+0xf8>)
   810bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   810be:	f003 0370 	and.w	r3, r3, #112	; 0x70
   810c2:	2b70      	cmp	r3, #112	; 0x70
   810c4:	d057      	beq.n	81176 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   810c6:	4b30      	ldr	r3, [pc, #192]	; (81188 <SystemCoreClockUpdate+0xf8>)
   810c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   810ca:	4931      	ldr	r1, [pc, #196]	; (81190 <SystemCoreClockUpdate+0x100>)
   810cc:	f3c2 1202 	ubfx	r2, r2, #4, #3
   810d0:	680b      	ldr	r3, [r1, #0]
   810d2:	40d3      	lsrs	r3, r2
   810d4:	600b      	str	r3, [r1, #0]
   810d6:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   810d8:	4b2b      	ldr	r3, [pc, #172]	; (81188 <SystemCoreClockUpdate+0xf8>)
   810da:	6a1b      	ldr	r3, [r3, #32]
   810dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   810e0:	d003      	beq.n	810ea <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   810e2:	4a2c      	ldr	r2, [pc, #176]	; (81194 <SystemCoreClockUpdate+0x104>)
   810e4:	4b2a      	ldr	r3, [pc, #168]	; (81190 <SystemCoreClockUpdate+0x100>)
   810e6:	601a      	str	r2, [r3, #0]
   810e8:	e7e7      	b.n	810ba <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   810ea:	4a2b      	ldr	r2, [pc, #172]	; (81198 <SystemCoreClockUpdate+0x108>)
   810ec:	4b28      	ldr	r3, [pc, #160]	; (81190 <SystemCoreClockUpdate+0x100>)
   810ee:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   810f0:	4b25      	ldr	r3, [pc, #148]	; (81188 <SystemCoreClockUpdate+0xf8>)
   810f2:	6a1b      	ldr	r3, [r3, #32]
   810f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   810f8:	2b10      	cmp	r3, #16
   810fa:	d005      	beq.n	81108 <SystemCoreClockUpdate+0x78>
   810fc:	2b20      	cmp	r3, #32
   810fe:	d1dc      	bne.n	810ba <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   81100:	4a24      	ldr	r2, [pc, #144]	; (81194 <SystemCoreClockUpdate+0x104>)
   81102:	4b23      	ldr	r3, [pc, #140]	; (81190 <SystemCoreClockUpdate+0x100>)
   81104:	601a      	str	r2, [r3, #0]
				break;
   81106:	e7d8      	b.n	810ba <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   81108:	4a24      	ldr	r2, [pc, #144]	; (8119c <SystemCoreClockUpdate+0x10c>)
   8110a:	4b21      	ldr	r3, [pc, #132]	; (81190 <SystemCoreClockUpdate+0x100>)
   8110c:	601a      	str	r2, [r3, #0]
				break;
   8110e:	e7d4      	b.n	810ba <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81110:	4b1d      	ldr	r3, [pc, #116]	; (81188 <SystemCoreClockUpdate+0xf8>)
   81112:	6a1b      	ldr	r3, [r3, #32]
   81114:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81118:	d00c      	beq.n	81134 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8111a:	4a1e      	ldr	r2, [pc, #120]	; (81194 <SystemCoreClockUpdate+0x104>)
   8111c:	4b1c      	ldr	r3, [pc, #112]	; (81190 <SystemCoreClockUpdate+0x100>)
   8111e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81120:	4b19      	ldr	r3, [pc, #100]	; (81188 <SystemCoreClockUpdate+0xf8>)
   81122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81124:	f003 0303 	and.w	r3, r3, #3
   81128:	2b02      	cmp	r3, #2
   8112a:	d016      	beq.n	8115a <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8112c:	4a1c      	ldr	r2, [pc, #112]	; (811a0 <SystemCoreClockUpdate+0x110>)
   8112e:	4b18      	ldr	r3, [pc, #96]	; (81190 <SystemCoreClockUpdate+0x100>)
   81130:	601a      	str	r2, [r3, #0]
   81132:	e7c2      	b.n	810ba <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81134:	4a18      	ldr	r2, [pc, #96]	; (81198 <SystemCoreClockUpdate+0x108>)
   81136:	4b16      	ldr	r3, [pc, #88]	; (81190 <SystemCoreClockUpdate+0x100>)
   81138:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8113a:	4b13      	ldr	r3, [pc, #76]	; (81188 <SystemCoreClockUpdate+0xf8>)
   8113c:	6a1b      	ldr	r3, [r3, #32]
   8113e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81142:	2b10      	cmp	r3, #16
   81144:	d005      	beq.n	81152 <SystemCoreClockUpdate+0xc2>
   81146:	2b20      	cmp	r3, #32
   81148:	d1ea      	bne.n	81120 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   8114a:	4a12      	ldr	r2, [pc, #72]	; (81194 <SystemCoreClockUpdate+0x104>)
   8114c:	4b10      	ldr	r3, [pc, #64]	; (81190 <SystemCoreClockUpdate+0x100>)
   8114e:	601a      	str	r2, [r3, #0]
				break;
   81150:	e7e6      	b.n	81120 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   81152:	4a12      	ldr	r2, [pc, #72]	; (8119c <SystemCoreClockUpdate+0x10c>)
   81154:	4b0e      	ldr	r3, [pc, #56]	; (81190 <SystemCoreClockUpdate+0x100>)
   81156:	601a      	str	r2, [r3, #0]
				break;
   81158:	e7e2      	b.n	81120 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8115a:	4a0b      	ldr	r2, [pc, #44]	; (81188 <SystemCoreClockUpdate+0xf8>)
   8115c:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   8115e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81160:	480b      	ldr	r0, [pc, #44]	; (81190 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81162:	f3c1 410a 	ubfx	r1, r1, #16, #11
   81166:	6803      	ldr	r3, [r0, #0]
   81168:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   8116c:	b2d2      	uxtb	r2, r2
   8116e:	fbb3 f3f2 	udiv	r3, r3, r2
   81172:	6003      	str	r3, [r0, #0]
   81174:	e7a1      	b.n	810ba <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   81176:	4a06      	ldr	r2, [pc, #24]	; (81190 <SystemCoreClockUpdate+0x100>)
   81178:	6813      	ldr	r3, [r2, #0]
   8117a:	490a      	ldr	r1, [pc, #40]	; (811a4 <SystemCoreClockUpdate+0x114>)
   8117c:	fba1 1303 	umull	r1, r3, r1, r3
   81180:	085b      	lsrs	r3, r3, #1
   81182:	6013      	str	r3, [r2, #0]
   81184:	4770      	bx	lr
   81186:	bf00      	nop
   81188:	400e0400 	.word	0x400e0400
   8118c:	400e1210 	.word	0x400e1210
   81190:	20000130 	.word	0x20000130
   81194:	00b71b00 	.word	0x00b71b00
   81198:	003d0900 	.word	0x003d0900
   8119c:	007a1200 	.word	0x007a1200
   811a0:	0e4e1c00 	.word	0x0e4e1c00
   811a4:	aaaaaaab 	.word	0xaaaaaaab

000811a8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   811a8:	4b0a      	ldr	r3, [pc, #40]	; (811d4 <_sbrk+0x2c>)
   811aa:	681b      	ldr	r3, [r3, #0]
   811ac:	b153      	cbz	r3, 811c4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   811ae:	4b09      	ldr	r3, [pc, #36]	; (811d4 <_sbrk+0x2c>)
   811b0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   811b2:	181a      	adds	r2, r3, r0
   811b4:	4908      	ldr	r1, [pc, #32]	; (811d8 <_sbrk+0x30>)
   811b6:	4291      	cmp	r1, r2
   811b8:	db08      	blt.n	811cc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   811ba:	4610      	mov	r0, r2
   811bc:	4a05      	ldr	r2, [pc, #20]	; (811d4 <_sbrk+0x2c>)
   811be:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   811c0:	4618      	mov	r0, r3
   811c2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   811c4:	4a05      	ldr	r2, [pc, #20]	; (811dc <_sbrk+0x34>)
   811c6:	4b03      	ldr	r3, [pc, #12]	; (811d4 <_sbrk+0x2c>)
   811c8:	601a      	str	r2, [r3, #0]
   811ca:	e7f0      	b.n	811ae <_sbrk+0x6>
		return (caddr_t) -1;	
   811cc:	f04f 30ff 	mov.w	r0, #4294967295
}
   811d0:	4770      	bx	lr
   811d2:	bf00      	nop
   811d4:	20001074 	.word	0x20001074
   811d8:	20083ffc 	.word	0x20083ffc
   811dc:	20084000 	.word	0x20084000

000811e0 <Test>:
	PH_CMD_RELAIS_1,
	PH_CMD_RELAIS_2
};

void Test(uint32_t sc, uint32_t phase)
{
   811e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   811e4:	b084      	sub	sp, #16
   811e6:	9103      	str	r1, [sp, #12]
	switch(sc)
   811e8:	2864      	cmp	r0, #100	; 0x64
   811ea:	f000 80dc 	beq.w	813a6 <Test+0x1c6>
   811ee:	2866      	cmp	r0, #102	; 0x66
   811f0:	f040 8123 	bne.w	8143a <Test+0x25a>
		phase<<=8;
		phase&=0xFF00;
		phase|=PH_CMD_MOSFET;
		//no break;
	case TEST_RUN:
		sprintf(buf,"\r\nPH:%d--%d\r\n",*((char*)&phase+1),*((char*)&phase+0));
   811f4:	f89d 700d 	ldrb.w	r7, [sp, #13]
   811f8:	4c9c      	ldr	r4, [pc, #624]	; (8146c <Test+0x28c>)
   811fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   811fe:	463a      	mov	r2, r7
   81200:	499b      	ldr	r1, [pc, #620]	; (81470 <Test+0x290>)
   81202:	4620      	mov	r0, r4
   81204:	4d9b      	ldr	r5, [pc, #620]	; (81474 <Test+0x294>)
   81206:	47a8      	blx	r5
		Putstr(buf);
   81208:	4621      	mov	r1, r4
   8120a:	2067      	movs	r0, #103	; 0x67
   8120c:	4c9a      	ldr	r4, [pc, #616]	; (81478 <Test+0x298>)
   8120e:	47a0      	blx	r4

		Putstr(PENE_OUVERT_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_OUVERT)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   81210:	499a      	ldr	r1, [pc, #616]	; (8147c <Test+0x29c>)
   81212:	2067      	movs	r0, #103	; 0x67
   81214:	47a0      	blx	r4
   81216:	4d9a      	ldr	r5, [pc, #616]	; (81480 <Test+0x2a0>)
   81218:	4629      	mov	r1, r5
   8121a:	2067      	movs	r0, #103	; 0x67
   8121c:	47a0      	blx	r4
   8121e:	200e      	movs	r0, #14
   81220:	4b98      	ldr	r3, [pc, #608]	; (81484 <Test+0x2a4>)
   81222:	4798      	blx	r3
   81224:	2800      	cmp	r0, #0
   81226:	f040 80c9 	bne.w	813bc <Test+0x1dc>
   8122a:	4997      	ldr	r1, [pc, #604]	; (81488 <Test+0x2a8>)
   8122c:	2067      	movs	r0, #103	; 0x67
   8122e:	47a0      	blx	r4
   81230:	4c96      	ldr	r4, [pc, #600]	; (8148c <Test+0x2ac>)
   81232:	4621      	mov	r1, r4
   81234:	2067      	movs	r0, #103	; 0x67
   81236:	4e90      	ldr	r6, [pc, #576]	; (81478 <Test+0x298>)
   81238:	47b0      	blx	r6
		Putstr(PENE_FERME_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_FERME)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   8123a:	4995      	ldr	r1, [pc, #596]	; (81490 <Test+0x2b0>)
   8123c:	2067      	movs	r0, #103	; 0x67
   8123e:	47b0      	blx	r6
   81240:	4629      	mov	r1, r5
   81242:	2067      	movs	r0, #103	; 0x67
   81244:	47b0      	blx	r6
   81246:	200f      	movs	r0, #15
   81248:	4b8e      	ldr	r3, [pc, #568]	; (81484 <Test+0x2a4>)
   8124a:	4798      	blx	r3
   8124c:	2800      	cmp	r0, #0
   8124e:	f040 80ba 	bne.w	813c6 <Test+0x1e6>
   81252:	498d      	ldr	r1, [pc, #564]	; (81488 <Test+0x2a8>)
   81254:	2067      	movs	r0, #103	; 0x67
   81256:	47b0      	blx	r6
   81258:	4621      	mov	r1, r4
   8125a:	2067      	movs	r0, #103	; 0x67
   8125c:	f8df 8218 	ldr.w	r8, [pc, #536]	; 81478 <Test+0x298>
   81260:	47c0      	blx	r8
		Putstr(IN_ILS_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_ILS)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   81262:	498c      	ldr	r1, [pc, #560]	; (81494 <Test+0x2b4>)
   81264:	2067      	movs	r0, #103	; 0x67
   81266:	47c0      	blx	r8
   81268:	4e8b      	ldr	r6, [pc, #556]	; (81498 <Test+0x2b8>)
   8126a:	4631      	mov	r1, r6
   8126c:	2067      	movs	r0, #103	; 0x67
   8126e:	47c0      	blx	r8
   81270:	2010      	movs	r0, #16
   81272:	4b84      	ldr	r3, [pc, #528]	; (81484 <Test+0x2a4>)
   81274:	4798      	blx	r3
   81276:	2800      	cmp	r0, #0
   81278:	f040 80aa 	bne.w	813d0 <Test+0x1f0>
   8127c:	4982      	ldr	r1, [pc, #520]	; (81488 <Test+0x2a8>)
   8127e:	2067      	movs	r0, #103	; 0x67
   81280:	47c0      	blx	r8
   81282:	4621      	mov	r1, r4
   81284:	2067      	movs	r0, #103	; 0x67
   81286:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 81478 <Test+0x298>
   8128a:	47c0      	blx	r8
		Putstr(IN_SV_NAME);					Putstr("\t\t: ");	gpio_pin_is_low(IN_SV)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   8128c:	4983      	ldr	r1, [pc, #524]	; (8149c <Test+0x2bc>)
   8128e:	2067      	movs	r0, #103	; 0x67
   81290:	47c0      	blx	r8
   81292:	4631      	mov	r1, r6
   81294:	2067      	movs	r0, #103	; 0x67
   81296:	47c0      	blx	r8
   81298:	2011      	movs	r0, #17
   8129a:	4b7a      	ldr	r3, [pc, #488]	; (81484 <Test+0x2a4>)
   8129c:	4798      	blx	r3
   8129e:	2800      	cmp	r0, #0
   812a0:	f040 809b 	bne.w	813da <Test+0x1fa>
   812a4:	4978      	ldr	r1, [pc, #480]	; (81488 <Test+0x2a8>)
   812a6:	2067      	movs	r0, #103	; 0x67
   812a8:	47c0      	blx	r8
   812aa:	4621      	mov	r1, r4
   812ac:	2067      	movs	r0, #103	; 0x67
   812ae:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 81478 <Test+0x298>
   812b2:	47c0      	blx	r8
		Putstr(IN_RADAR_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_RADAR)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   812b4:	497a      	ldr	r1, [pc, #488]	; (814a0 <Test+0x2c0>)
   812b6:	2067      	movs	r0, #103	; 0x67
   812b8:	47c0      	blx	r8
   812ba:	4631      	mov	r1, r6
   812bc:	2067      	movs	r0, #103	; 0x67
   812be:	47c0      	blx	r8
   812c0:	2018      	movs	r0, #24
   812c2:	4b70      	ldr	r3, [pc, #448]	; (81484 <Test+0x2a4>)
   812c4:	4798      	blx	r3
   812c6:	2800      	cmp	r0, #0
   812c8:	f040 808c 	bne.w	813e4 <Test+0x204>
   812cc:	496e      	ldr	r1, [pc, #440]	; (81488 <Test+0x2a8>)
   812ce:	2067      	movs	r0, #103	; 0x67
   812d0:	47c0      	blx	r8
   812d2:	4621      	mov	r1, r4
   812d4:	2067      	movs	r0, #103	; 0x67
   812d6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 81478 <Test+0x298>
   812da:	47c0      	blx	r8
		Putstr(IN_DVU_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_DVU)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   812dc:	4971      	ldr	r1, [pc, #452]	; (814a4 <Test+0x2c4>)
   812de:	2067      	movs	r0, #103	; 0x67
   812e0:	47c0      	blx	r8
   812e2:	4631      	mov	r1, r6
   812e4:	2067      	movs	r0, #103	; 0x67
   812e6:	47c0      	blx	r8
   812e8:	2019      	movs	r0, #25
   812ea:	4b66      	ldr	r3, [pc, #408]	; (81484 <Test+0x2a4>)
   812ec:	4798      	blx	r3
   812ee:	2800      	cmp	r0, #0
   812f0:	d17d      	bne.n	813ee <Test+0x20e>
   812f2:	4965      	ldr	r1, [pc, #404]	; (81488 <Test+0x2a8>)
   812f4:	2067      	movs	r0, #103	; 0x67
   812f6:	47c0      	blx	r8
   812f8:	4621      	mov	r1, r4
   812fa:	2067      	movs	r0, #103	; 0x67
   812fc:	4e5e      	ldr	r6, [pc, #376]	; (81478 <Test+0x298>)
   812fe:	47b0      	blx	r6
		Putstr(IN_PREMIERE_ENTREE_NAME);	Putstr("\t: ");		gpio_pin_is_low(IN_PREMIERE_ENTREE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   81300:	4969      	ldr	r1, [pc, #420]	; (814a8 <Test+0x2c8>)
   81302:	2067      	movs	r0, #103	; 0x67
   81304:	47b0      	blx	r6
   81306:	4629      	mov	r1, r5
   81308:	2067      	movs	r0, #103	; 0x67
   8130a:	47b0      	blx	r6
   8130c:	201a      	movs	r0, #26
   8130e:	4b5d      	ldr	r3, [pc, #372]	; (81484 <Test+0x2a4>)
   81310:	4798      	blx	r3
   81312:	2800      	cmp	r0, #0
   81314:	d170      	bne.n	813f8 <Test+0x218>
   81316:	495c      	ldr	r1, [pc, #368]	; (81488 <Test+0x2a8>)
   81318:	2067      	movs	r0, #103	; 0x67
   8131a:	47b0      	blx	r6
   8131c:	4621      	mov	r1, r4
   8131e:	2067      	movs	r0, #103	; 0x67
   81320:	4e55      	ldr	r6, [pc, #340]	; (81478 <Test+0x298>)
   81322:	47b0      	blx	r6
		Putstr(IN_DVU_GENERAL_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_DVU_GENERAL)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   81324:	4961      	ldr	r1, [pc, #388]	; (814ac <Test+0x2cc>)
   81326:	2067      	movs	r0, #103	; 0x67
   81328:	47b0      	blx	r6
   8132a:	4629      	mov	r1, r5
   8132c:	2067      	movs	r0, #103	; 0x67
   8132e:	47b0      	blx	r6
   81330:	201b      	movs	r0, #27
   81332:	4b54      	ldr	r3, [pc, #336]	; (81484 <Test+0x2a4>)
   81334:	4798      	blx	r3
   81336:	2800      	cmp	r0, #0
   81338:	d163      	bne.n	81402 <Test+0x222>
   8133a:	4953      	ldr	r1, [pc, #332]	; (81488 <Test+0x2a8>)
   8133c:	2067      	movs	r0, #103	; 0x67
   8133e:	47b0      	blx	r6
   81340:	4621      	mov	r1, r4
   81342:	2067      	movs	r0, #103	; 0x67
   81344:	4e4c      	ldr	r6, [pc, #304]	; (81478 <Test+0x298>)
   81346:	47b0      	blx	r6
		Putstr(IN_ENTREE_LIBRE_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_LIBRE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   81348:	4959      	ldr	r1, [pc, #356]	; (814b0 <Test+0x2d0>)
   8134a:	2067      	movs	r0, #103	; 0x67
   8134c:	47b0      	blx	r6
   8134e:	4629      	mov	r1, r5
   81350:	2067      	movs	r0, #103	; 0x67
   81352:	47b0      	blx	r6
   81354:	201c      	movs	r0, #28
   81356:	4b4b      	ldr	r3, [pc, #300]	; (81484 <Test+0x2a4>)
   81358:	4798      	blx	r3
   8135a:	2800      	cmp	r0, #0
   8135c:	d156      	bne.n	8140c <Test+0x22c>
   8135e:	494a      	ldr	r1, [pc, #296]	; (81488 <Test+0x2a8>)
   81360:	2067      	movs	r0, #103	; 0x67
   81362:	47b0      	blx	r6
   81364:	4621      	mov	r1, r4
   81366:	2067      	movs	r0, #103	; 0x67
   81368:	4e43      	ldr	r6, [pc, #268]	; (81478 <Test+0x298>)
   8136a:	47b0      	blx	r6
		Putstr(IN_ENTREE_OPTION_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_OPTION)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   8136c:	4951      	ldr	r1, [pc, #324]	; (814b4 <Test+0x2d4>)
   8136e:	2067      	movs	r0, #103	; 0x67
   81370:	47b0      	blx	r6
   81372:	4629      	mov	r1, r5
   81374:	2067      	movs	r0, #103	; 0x67
   81376:	47b0      	blx	r6
   81378:	201d      	movs	r0, #29
   8137a:	4b42      	ldr	r3, [pc, #264]	; (81484 <Test+0x2a4>)
   8137c:	4798      	blx	r3
   8137e:	2800      	cmp	r0, #0
   81380:	d149      	bne.n	81416 <Test+0x236>
   81382:	4941      	ldr	r1, [pc, #260]	; (81488 <Test+0x2a8>)
   81384:	2067      	movs	r0, #103	; 0x67
   81386:	47b0      	blx	r6
   81388:	4621      	mov	r1, r4
   8138a:	2067      	movs	r0, #103	; 0x67
   8138c:	4b3a      	ldr	r3, [pc, #232]	; (81478 <Test+0x298>)
   8138e:	4798      	blx	r3

		switch(mBitsMsk(phase,0xFF))
   81390:	f89d 300c 	ldrb.w	r3, [sp, #12]
   81394:	3b01      	subs	r3, #1
   81396:	2b04      	cmp	r3, #4
   81398:	f200 80a1 	bhi.w	814de <Test+0x2fe>
   8139c:	e8df f003 	tbb	[pc, r3]
   813a0:	5e575040 	.word	0x5e575040
   813a4:	98          	.byte	0x98
   813a5:	00          	.byte	0x00
		Putstr("\r\nTest started...\r\n");
   813a6:	4944      	ldr	r1, [pc, #272]	; (814b8 <Test+0x2d8>)
   813a8:	2067      	movs	r0, #103	; 0x67
   813aa:	4b33      	ldr	r3, [pc, #204]	; (81478 <Test+0x298>)
   813ac:	4798      	blx	r3
		phase<<=8;
   813ae:	9b03      	ldr	r3, [sp, #12]
   813b0:	021b      	lsls	r3, r3, #8
		phase&=0xFF00;
   813b2:	b29b      	uxth	r3, r3
		phase|=PH_CMD_MOSFET;
   813b4:	f043 0301 	orr.w	r3, r3, #1
   813b8:	9303      	str	r3, [sp, #12]
   813ba:	e71b      	b.n	811f4 <Test+0x14>
		Putstr(PENE_OUVERT_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_OUVERT)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   813bc:	493f      	ldr	r1, [pc, #252]	; (814bc <Test+0x2dc>)
   813be:	2067      	movs	r0, #103	; 0x67
   813c0:	4b2d      	ldr	r3, [pc, #180]	; (81478 <Test+0x298>)
   813c2:	4798      	blx	r3
   813c4:	e734      	b.n	81230 <Test+0x50>
		Putstr(PENE_FERME_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_FERME)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   813c6:	493d      	ldr	r1, [pc, #244]	; (814bc <Test+0x2dc>)
   813c8:	2067      	movs	r0, #103	; 0x67
   813ca:	4b2b      	ldr	r3, [pc, #172]	; (81478 <Test+0x298>)
   813cc:	4798      	blx	r3
   813ce:	e743      	b.n	81258 <Test+0x78>
		Putstr(IN_ILS_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_ILS)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   813d0:	493a      	ldr	r1, [pc, #232]	; (814bc <Test+0x2dc>)
   813d2:	2067      	movs	r0, #103	; 0x67
   813d4:	4b28      	ldr	r3, [pc, #160]	; (81478 <Test+0x298>)
   813d6:	4798      	blx	r3
   813d8:	e753      	b.n	81282 <Test+0xa2>
		Putstr(IN_SV_NAME);					Putstr("\t\t: ");	gpio_pin_is_low(IN_SV)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   813da:	4938      	ldr	r1, [pc, #224]	; (814bc <Test+0x2dc>)
   813dc:	2067      	movs	r0, #103	; 0x67
   813de:	4b26      	ldr	r3, [pc, #152]	; (81478 <Test+0x298>)
   813e0:	4798      	blx	r3
   813e2:	e762      	b.n	812aa <Test+0xca>
		Putstr(IN_RADAR_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_RADAR)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   813e4:	4935      	ldr	r1, [pc, #212]	; (814bc <Test+0x2dc>)
   813e6:	2067      	movs	r0, #103	; 0x67
   813e8:	4b23      	ldr	r3, [pc, #140]	; (81478 <Test+0x298>)
   813ea:	4798      	blx	r3
   813ec:	e771      	b.n	812d2 <Test+0xf2>
		Putstr(IN_DVU_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_DVU)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   813ee:	4933      	ldr	r1, [pc, #204]	; (814bc <Test+0x2dc>)
   813f0:	2067      	movs	r0, #103	; 0x67
   813f2:	4b21      	ldr	r3, [pc, #132]	; (81478 <Test+0x298>)
   813f4:	4798      	blx	r3
   813f6:	e77f      	b.n	812f8 <Test+0x118>
		Putstr(IN_PREMIERE_ENTREE_NAME);	Putstr("\t: ");		gpio_pin_is_low(IN_PREMIERE_ENTREE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   813f8:	4930      	ldr	r1, [pc, #192]	; (814bc <Test+0x2dc>)
   813fa:	2067      	movs	r0, #103	; 0x67
   813fc:	4b1e      	ldr	r3, [pc, #120]	; (81478 <Test+0x298>)
   813fe:	4798      	blx	r3
   81400:	e78c      	b.n	8131c <Test+0x13c>
		Putstr(IN_DVU_GENERAL_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_DVU_GENERAL)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   81402:	492e      	ldr	r1, [pc, #184]	; (814bc <Test+0x2dc>)
   81404:	2067      	movs	r0, #103	; 0x67
   81406:	4b1c      	ldr	r3, [pc, #112]	; (81478 <Test+0x298>)
   81408:	4798      	blx	r3
   8140a:	e799      	b.n	81340 <Test+0x160>
		Putstr(IN_ENTREE_LIBRE_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_LIBRE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   8140c:	492b      	ldr	r1, [pc, #172]	; (814bc <Test+0x2dc>)
   8140e:	2067      	movs	r0, #103	; 0x67
   81410:	4b19      	ldr	r3, [pc, #100]	; (81478 <Test+0x298>)
   81412:	4798      	blx	r3
   81414:	e7a6      	b.n	81364 <Test+0x184>
		Putstr(IN_ENTREE_OPTION_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_OPTION)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   81416:	4929      	ldr	r1, [pc, #164]	; (814bc <Test+0x2dc>)
   81418:	2067      	movs	r0, #103	; 0x67
   8141a:	4b17      	ldr	r3, [pc, #92]	; (81478 <Test+0x298>)
   8141c:	4798      	blx	r3
   8141e:	e7b3      	b.n	81388 <Test+0x1a8>
		{
		case PH_CMD_MOSFET:
			gpio_set_pin_high(CMD_MOSFET);
   81420:	2020      	movs	r0, #32
   81422:	4b27      	ldr	r3, [pc, #156]	; (814c0 <Test+0x2e0>)
   81424:	4798      	blx	r3
		}
		break;
	default:
		return;
	}
	PushTask(Test,TEST_RUN,++phase,1000);
   81426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8142a:	9300      	str	r3, [sp, #0]
   8142c:	9b03      	ldr	r3, [sp, #12]
   8142e:	3301      	adds	r3, #1
   81430:	2266      	movs	r2, #102	; 0x66
   81432:	4924      	ldr	r1, [pc, #144]	; (814c4 <Test+0x2e4>)
   81434:	4610      	mov	r0, r2
   81436:	4c24      	ldr	r4, [pc, #144]	; (814c8 <Test+0x2e8>)
   81438:	47a0      	blx	r4
}
   8143a:	b004      	add	sp, #16
   8143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_set_pin_low(CMD_MOSFET);
   81440:	2020      	movs	r0, #32
   81442:	4b22      	ldr	r3, [pc, #136]	; (814cc <Test+0x2ec>)
   81444:	4798      	blx	r3
			gpio_set_pin_high(CMD_MOT_SERRURE);
   81446:	2021      	movs	r0, #33	; 0x21
   81448:	4b1d      	ldr	r3, [pc, #116]	; (814c0 <Test+0x2e0>)
   8144a:	4798      	blx	r3
			break;
   8144c:	e7eb      	b.n	81426 <Test+0x246>
			gpio_set_pin_low(CMD_MOT_SERRURE);
   8144e:	2021      	movs	r0, #33	; 0x21
   81450:	4b1e      	ldr	r3, [pc, #120]	; (814cc <Test+0x2ec>)
   81452:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS);
   81454:	2022      	movs	r0, #34	; 0x22
   81456:	4b1a      	ldr	r3, [pc, #104]	; (814c0 <Test+0x2e0>)
   81458:	4798      	blx	r3
			break;
   8145a:	e7e4      	b.n	81426 <Test+0x246>
			gpio_set_pin_low(CMD_RELAIS);
   8145c:	2022      	movs	r0, #34	; 0x22
   8145e:	4b1b      	ldr	r3, [pc, #108]	; (814cc <Test+0x2ec>)
   81460:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS_1);
   81462:	2023      	movs	r0, #35	; 0x23
   81464:	4b16      	ldr	r3, [pc, #88]	; (814c0 <Test+0x2e0>)
   81466:	4798      	blx	r3
			break;
   81468:	e7dd      	b.n	81426 <Test+0x246>
   8146a:	bf00      	nop
   8146c:	200012b4 	.word	0x200012b4
   81470:	00088af8 	.word	0x00088af8
   81474:	00083ef9 	.word	0x00083ef9
   81478:	00083345 	.word	0x00083345
   8147c:	00088b08 	.word	0x00088b08
   81480:	00088b14 	.word	0x00088b14
   81484:	0008087d 	.word	0x0008087d
   81488:	00088b18 	.word	0x00088b18
   8148c:	00088d54 	.word	0x00088d54
   81490:	00088b20 	.word	0x00088b20
   81494:	00088b2c 	.word	0x00088b2c
   81498:	00088b30 	.word	0x00088b30
   8149c:	00088b38 	.word	0x00088b38
   814a0:	00088b3c 	.word	0x00088b3c
   814a4:	00088b44 	.word	0x00088b44
   814a8:	00088b48 	.word	0x00088b48
   814ac:	00088b58 	.word	0x00088b58
   814b0:	00088b64 	.word	0x00088b64
   814b4:	00088b74 	.word	0x00088b74
   814b8:	00088ae4 	.word	0x00088ae4
   814bc:	00088b1c 	.word	0x00088b1c
   814c0:	00080899 	.word	0x00080899
   814c4:	000811e1 	.word	0x000811e1
   814c8:	00083581 	.word	0x00083581
   814cc:	000808b3 	.word	0x000808b3
			gpio_set_pin_low(CMD_RELAIS_1);
   814d0:	2023      	movs	r0, #35	; 0x23
   814d2:	4b13      	ldr	r3, [pc, #76]	; (81520 <Test+0x340>)
   814d4:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS_2);
   814d6:	2024      	movs	r0, #36	; 0x24
   814d8:	4b12      	ldr	r3, [pc, #72]	; (81524 <Test+0x344>)
   814da:	4798      	blx	r3
			break;
   814dc:	e7a3      	b.n	81426 <Test+0x246>
			gpio_set_pin_low(CMD_MOSFET);
   814de:	2020      	movs	r0, #32
   814e0:	4c0f      	ldr	r4, [pc, #60]	; (81520 <Test+0x340>)
   814e2:	47a0      	blx	r4
			gpio_set_pin_low(CMD_MOT_SERRURE);
   814e4:	2021      	movs	r0, #33	; 0x21
   814e6:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS);
   814e8:	2022      	movs	r0, #34	; 0x22
   814ea:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS_1);
   814ec:	2023      	movs	r0, #35	; 0x23
   814ee:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS_2);
   814f0:	2024      	movs	r0, #36	; 0x24
   814f2:	47a0      	blx	r4
			if(*((char*)&phase+1))
   814f4:	b127      	cbz	r7, 81500 <Test+0x320>
				if(--(*((char*)&phase+1)))
   814f6:	3f01      	subs	r7, #1
   814f8:	b2ff      	uxtb	r7, r7
   814fa:	f88d 700d 	strb.w	r7, [sp, #13]
   814fe:	b927      	cbnz	r7, 8150a <Test+0x32a>
			Putstr("\r\nTest terminated...\r\n");
   81500:	4909      	ldr	r1, [pc, #36]	; (81528 <Test+0x348>)
   81502:	2067      	movs	r0, #103	; 0x67
   81504:	4b09      	ldr	r3, [pc, #36]	; (8152c <Test+0x34c>)
   81506:	4798      	blx	r3
			return;
   81508:	e797      	b.n	8143a <Test+0x25a>
					PushTask(Test,TEST_NEW,phase>>8,0);
   8150a:	2300      	movs	r3, #0
   8150c:	9300      	str	r3, [sp, #0]
   8150e:	9b03      	ldr	r3, [sp, #12]
   81510:	0a1b      	lsrs	r3, r3, #8
   81512:	2264      	movs	r2, #100	; 0x64
   81514:	4906      	ldr	r1, [pc, #24]	; (81530 <Test+0x350>)
   81516:	2066      	movs	r0, #102	; 0x66
   81518:	4c06      	ldr	r4, [pc, #24]	; (81534 <Test+0x354>)
   8151a:	47a0      	blx	r4
   8151c:	e7f0      	b.n	81500 <Test+0x320>
   8151e:	bf00      	nop
   81520:	000808b3 	.word	0x000808b3
   81524:	00080899 	.word	0x00080899
   81528:	00088b84 	.word	0x00088b84
   8152c:	00083345 	.word	0x00083345
   81530:	000811e1 	.word	0x000811e1
   81534:	00083581 	.word	0x00083581

00081538 <stop>:
	}
	mstrtokRestore();
}

void stop(uint32_t sc, void*pParam)
{
   81538:	b510      	push	{r4, lr}
	char *pToken;
	switch(sc)
   8153a:	f242 6316 	movw	r3, #9750	; 0x2616
   8153e:	4298      	cmp	r0, r3
   81540:	d01e      	beq.n	81580 <stop+0x48>
//#else
		//gpio_set_pin_high(BUZZER_PWR);
//#endif
		break;
	default:
		pToken = mstrtok(NULL," \r\n");
   81542:	491c      	ldr	r1, [pc, #112]	; (815b4 <stop+0x7c>)
   81544:	2000      	movs	r0, #0
   81546:	4b1c      	ldr	r3, [pc, #112]	; (815b8 <stop+0x80>)
   81548:	4798      	blx	r3
		if(pToken)
   8154a:	4604      	mov	r4, r0
   8154c:	b1a8      	cbz	r0, 8157a <stop+0x42>
		{
			switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   8154e:	4b1b      	ldr	r3, [pc, #108]	; (815bc <stop+0x84>)
   81550:	4798      	blx	r3
   81552:	4601      	mov	r1, r0
   81554:	4620      	mov	r0, r4
   81556:	4b1a      	ldr	r3, [pc, #104]	; (815c0 <stop+0x88>)
   81558:	4798      	blx	r3
   8155a:	f242 6316 	movw	r3, #9750	; 0x2616
   8155e:	4298      	cmp	r0, r3
   81560:	d020      	beq.n	815a4 <stop+0x6c>
   81562:	d912      	bls.n	8158a <stop+0x52>
   81564:	f243 132b 	movw	r3, #12587	; 0x312b
   81568:	4298      	cmp	r0, r3
   8156a:	d017      	beq.n	8159c <stop+0x64>
   8156c:	f24c 6398 	movw	r3, #50840	; 0xc698
   81570:	4298      	cmp	r0, r3
   81572:	d102      	bne.n	8157a <stop+0x42>
			{
			case 0xC698:	//lcd
				Lcd(LCD_DEL);
   81574:	2065      	movs	r0, #101	; 0x65
   81576:	4b13      	ldr	r3, [pc, #76]	; (815c4 <stop+0x8c>)
   81578:	4798      	blx	r3
				break;
			default:
				break;
			}
		}
		mstrtokRestore();
   8157a:	4b13      	ldr	r3, [pc, #76]	; (815c8 <stop+0x90>)
   8157c:	4798      	blx	r3
   8157e:	bd10      	pop	{r4, pc}
		Putstr("\r\nBuzzer off...\r\n");
   81580:	4912      	ldr	r1, [pc, #72]	; (815cc <stop+0x94>)
   81582:	2067      	movs	r0, #103	; 0x67
   81584:	4b12      	ldr	r3, [pc, #72]	; (815d0 <stop+0x98>)
   81586:	4798      	blx	r3
		break;
   81588:	bd10      	pop	{r4, pc}
			switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   8158a:	f240 6334 	movw	r3, #1588	; 0x634
   8158e:	4298      	cmp	r0, r3
   81590:	d1f3      	bne.n	8157a <stop+0x42>
				LcdBacklight(false);
   81592:	2100      	movs	r1, #0
   81594:	2066      	movs	r0, #102	; 0x66
   81596:	4b0b      	ldr	r3, [pc, #44]	; (815c4 <stop+0x8c>)
   81598:	4798      	blx	r3
				break;
   8159a:	e7ee      	b.n	8157a <stop+0x42>
				gpio_set_pin_high(BLUETOOTH_PWR);
   8159c:	2035      	movs	r0, #53	; 0x35
   8159e:	4b0d      	ldr	r3, [pc, #52]	; (815d4 <stop+0x9c>)
   815a0:	4798      	blx	r3
				break;
   815a2:	e7ea      	b.n	8157a <stop+0x42>
				Putstr("\r\nBuzzer off...\r\n");
   815a4:	4909      	ldr	r1, [pc, #36]	; (815cc <stop+0x94>)
   815a6:	2067      	movs	r0, #103	; 0x67
   815a8:	4b09      	ldr	r3, [pc, #36]	; (815d0 <stop+0x98>)
   815aa:	4798      	blx	r3
				gpio_set_pin_low(BUZZER_PWR);
   815ac:	2030      	movs	r0, #48	; 0x30
   815ae:	4b0a      	ldr	r3, [pc, #40]	; (815d8 <stop+0xa0>)
   815b0:	4798      	blx	r3
				break;
   815b2:	e7e2      	b.n	8157a <stop+0x42>
   815b4:	00088bf8 	.word	0x00088bf8
   815b8:	0008380d 	.word	0x0008380d
   815bc:	00083f45 	.word	0x00083f45
   815c0:	000817ad 	.word	0x000817ad
   815c4:	00081d15 	.word	0x00081d15
   815c8:	000837c9 	.word	0x000837c9
   815cc:	00088be4 	.word	0x00088be4
   815d0:	00083345 	.word	0x00083345
   815d4:	00080899 	.word	0x00080899
   815d8:	000808b3 	.word	0x000808b3

000815dc <start>:
{
   815dc:	b570      	push	{r4, r5, r6, lr}
   815de:	b090      	sub	sp, #64	; 0x40
	pToken = mstrtok(NULL," \r\n");
   815e0:	4957      	ldr	r1, [pc, #348]	; (81740 <start+0x164>)
   815e2:	2000      	movs	r0, #0
   815e4:	4b57      	ldr	r3, [pc, #348]	; (81744 <start+0x168>)
   815e6:	4798      	blx	r3
	if(pToken)
   815e8:	2800      	cmp	r0, #0
   815ea:	f000 8094 	beq.w	81716 <start+0x13a>
   815ee:	4604      	mov	r4, r0
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   815f0:	4b55      	ldr	r3, [pc, #340]	; (81748 <start+0x16c>)
   815f2:	4798      	blx	r3
   815f4:	4601      	mov	r1, r0
   815f6:	4620      	mov	r0, r4
   815f8:	4b54      	ldr	r3, [pc, #336]	; (8174c <start+0x170>)
   815fa:	4798      	blx	r3
   815fc:	f243 132b 	movw	r3, #12587	; 0x312b
   81600:	4298      	cmp	r0, r3
   81602:	f000 8093 	beq.w	8172c <start+0x150>
   81606:	d851      	bhi.n	816ac <start+0xd0>
   81608:	f240 6334 	movw	r3, #1588	; 0x634
   8160c:	4298      	cmp	r0, r3
   8160e:	f000 8086 	beq.w	8171e <start+0x142>
   81612:	f242 6316 	movw	r3, #9750	; 0x2616
   81616:	4298      	cmp	r0, r3
   81618:	d17d      	bne.n	81716 <start+0x13a>
			mstrtokRestore();
   8161a:	4b4d      	ldr	r3, [pc, #308]	; (81750 <start+0x174>)
   8161c:	4798      	blx	r3
			pToken = mstrtok(NULL," \r\n");
   8161e:	4948      	ldr	r1, [pc, #288]	; (81740 <start+0x164>)
   81620:	2000      	movs	r0, #0
   81622:	4b48      	ldr	r3, [pc, #288]	; (81744 <start+0x168>)
   81624:	4798      	blx	r3
			pParam=atoi((char*)pToken);
   81626:	4b4b      	ldr	r3, [pc, #300]	; (81754 <start+0x178>)
   81628:	4798      	blx	r3
			if(pParam)
   8162a:	4606      	mov	r6, r0
   8162c:	2800      	cmp	r0, #0
   8162e:	d072      	beq.n	81716 <start+0x13a>
				Putstr("\r\nBuzzer on for ");
   81630:	4949      	ldr	r1, [pc, #292]	; (81758 <start+0x17c>)
   81632:	2067      	movs	r0, #103	; 0x67
   81634:	4c49      	ldr	r4, [pc, #292]	; (8175c <start+0x180>)
   81636:	47a0      	blx	r4
				sprintf(buf,"%d ms...\r\n",(int)pParam);
   81638:	4d49      	ldr	r5, [pc, #292]	; (81760 <start+0x184>)
   8163a:	4632      	mov	r2, r6
   8163c:	4949      	ldr	r1, [pc, #292]	; (81764 <start+0x188>)
   8163e:	4628      	mov	r0, r5
   81640:	4b49      	ldr	r3, [pc, #292]	; (81768 <start+0x18c>)
   81642:	4798      	blx	r3
				Putstr(buf);
   81644:	4629      	mov	r1, r5
   81646:	2067      	movs	r0, #103	; 0x67
   81648:	47a0      	blx	r4
				gpio_configure_pin(BUZZER_PWR,BUZZER_FLAGS);
   8164a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8164e:	2030      	movs	r0, #48	; 0x30
   81650:	4b46      	ldr	r3, [pc, #280]	; (8176c <start+0x190>)
   81652:	4798      	blx	r3
					const pwm_clock_t clockSetting ={
   81654:	4b46      	ldr	r3, [pc, #280]	; (81770 <start+0x194>)
   81656:	ad03      	add	r5, sp, #12
   81658:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   8165c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
					pmc_enable_periph_clk(ID_PWM);
   81660:	2019      	movs	r0, #25
   81662:	4b44      	ldr	r3, [pc, #272]	; (81774 <start+0x198>)
   81664:	4798      	blx	r3
					pwm_channel_disable(PWM,PWM_CHANNEL_3);
   81666:	4c44      	ldr	r4, [pc, #272]	; (81778 <start+0x19c>)
   81668:	2103      	movs	r1, #3
   8166a:	4620      	mov	r0, r4
   8166c:	4b43      	ldr	r3, [pc, #268]	; (8177c <start+0x1a0>)
   8166e:	4798      	blx	r3
					pwm_init(PWM,(pwm_clock_t*)&clockSetting);
   81670:	4629      	mov	r1, r5
   81672:	4620      	mov	r0, r4
   81674:	4b42      	ldr	r3, [pc, #264]	; (81780 <start+0x1a4>)
   81676:	4798      	blx	r3
					pwmChannelInstance.ul_prescaler=PWM_CMR_CPRE_CLKB;
   81678:	230c      	movs	r3, #12
   8167a:	9307      	str	r3, [sp, #28]
					pwmChannelInstance.ul_period=100;
   8167c:	2364      	movs	r3, #100	; 0x64
   8167e:	930a      	str	r3, [sp, #40]	; 0x28
					pwmChannelInstance.ul_duty=50;
   81680:	2332      	movs	r3, #50	; 0x32
   81682:	9309      	str	r3, [sp, #36]	; 0x24
					pwmChannelInstance.channel=PWM_CHANNEL_3;
   81684:	2503      	movs	r5, #3
   81686:	a910      	add	r1, sp, #64	; 0x40
   81688:	f841 5d28 	str.w	r5, [r1, #-40]!
					pwm_channel_init(PWM,&pwmChannelInstance);
   8168c:	4620      	mov	r0, r4
   8168e:	4b3d      	ldr	r3, [pc, #244]	; (81784 <start+0x1a8>)
   81690:	4798      	blx	r3
					pwm_channel_enable(PWM,PWM_CHANNEL_3);
   81692:	4629      	mov	r1, r5
   81694:	4620      	mov	r0, r4
   81696:	4b3c      	ldr	r3, [pc, #240]	; (81788 <start+0x1ac>)
   81698:	4798      	blx	r3
				PushTask(stop,0x2616,0,(uint32_t)pParam);
   8169a:	9600      	str	r6, [sp, #0]
   8169c:	2300      	movs	r3, #0
   8169e:	f242 6216 	movw	r2, #9750	; 0x2616
   816a2:	493a      	ldr	r1, [pc, #232]	; (8178c <start+0x1b0>)
   816a4:	2066      	movs	r0, #102	; 0x66
   816a6:	4c3a      	ldr	r4, [pc, #232]	; (81790 <start+0x1b4>)
   816a8:	47a0      	blx	r4
   816aa:	e034      	b.n	81716 <start+0x13a>
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   816ac:	f24c 6398 	movw	r3, #50840	; 0xc698
   816b0:	4298      	cmp	r0, r3
   816b2:	d021      	beq.n	816f8 <start+0x11c>
   816b4:	f64d 432e 	movw	r3, #56366	; 0xdc2e
   816b8:	4298      	cmp	r0, r3
   816ba:	d12c      	bne.n	81716 <start+0x13a>
			mstrtokRestore();
   816bc:	4b24      	ldr	r3, [pc, #144]	; (81750 <start+0x174>)
   816be:	4798      	blx	r3
			pToken = mstrtok(NULL," \r\n");
   816c0:	491f      	ldr	r1, [pc, #124]	; (81740 <start+0x164>)
   816c2:	2000      	movs	r0, #0
   816c4:	4b1f      	ldr	r3, [pc, #124]	; (81744 <start+0x168>)
   816c6:	4798      	blx	r3
			if(pToken)
   816c8:	2800      	cmp	r0, #0
   816ca:	d02d      	beq.n	81728 <start+0x14c>
				 sc=atoi((char*)pToken);
   816cc:	4b21      	ldr	r3, [pc, #132]	; (81754 <start+0x178>)
   816ce:	4798      	blx	r3
   816d0:	4604      	mov	r4, r0
				 sprintf(buf,"\r\nNbTest: %d\r\n",(int)sc);
   816d2:	4d23      	ldr	r5, [pc, #140]	; (81760 <start+0x184>)
   816d4:	4602      	mov	r2, r0
   816d6:	492f      	ldr	r1, [pc, #188]	; (81794 <start+0x1b8>)
   816d8:	4628      	mov	r0, r5
   816da:	4b23      	ldr	r3, [pc, #140]	; (81768 <start+0x18c>)
   816dc:	4798      	blx	r3
				 Putstr(buf);
   816de:	4629      	mov	r1, r5
   816e0:	2067      	movs	r0, #103	; 0x67
   816e2:	4b1e      	ldr	r3, [pc, #120]	; (8175c <start+0x180>)
   816e4:	4798      	blx	r3
			PushTask(Test,TEST_NEW,sc,0);
   816e6:	2300      	movs	r3, #0
   816e8:	9300      	str	r3, [sp, #0]
   816ea:	4623      	mov	r3, r4
   816ec:	2264      	movs	r2, #100	; 0x64
   816ee:	492a      	ldr	r1, [pc, #168]	; (81798 <start+0x1bc>)
   816f0:	2066      	movs	r0, #102	; 0x66
   816f2:	4c27      	ldr	r4, [pc, #156]	; (81790 <start+0x1b4>)
   816f4:	47a0      	blx	r4
			break;
   816f6:	e00e      	b.n	81716 <start+0x13a>
			Lcd(LCD_DEL);
   816f8:	2065      	movs	r0, #101	; 0x65
   816fa:	4c28      	ldr	r4, [pc, #160]	; (8179c <start+0x1c0>)
   816fc:	47a0      	blx	r4
			Lcd(LCD_NEW);
   816fe:	2064      	movs	r0, #100	; 0x64
   81700:	47a0      	blx	r4
			LcdPutstr("CPU.ACX  ATSAM3U4C",2,1);
   81702:	2301      	movs	r3, #1
   81704:	2202      	movs	r2, #2
   81706:	4926      	ldr	r1, [pc, #152]	; (817a0 <start+0x1c4>)
   81708:	2067      	movs	r0, #103	; 0x67
   8170a:	47a0      	blx	r4
			LcdPutstr("www.a-2-s.net",3,4);
   8170c:	2304      	movs	r3, #4
   8170e:	2203      	movs	r2, #3
   81710:	4924      	ldr	r1, [pc, #144]	; (817a4 <start+0x1c8>)
   81712:	2067      	movs	r0, #103	; 0x67
   81714:	47a0      	blx	r4
	mstrtokRestore();
   81716:	4b0e      	ldr	r3, [pc, #56]	; (81750 <start+0x174>)
   81718:	4798      	blx	r3
}
   8171a:	b010      	add	sp, #64	; 0x40
   8171c:	bd70      	pop	{r4, r5, r6, pc}
			LcdBacklight(true);
   8171e:	2101      	movs	r1, #1
   81720:	2066      	movs	r0, #102	; 0x66
   81722:	4b1e      	ldr	r3, [pc, #120]	; (8179c <start+0x1c0>)
   81724:	4798      	blx	r3
			break;
   81726:	e7f6      	b.n	81716 <start+0x13a>
				sc=1;
   81728:	2401      	movs	r4, #1
   8172a:	e7dc      	b.n	816e6 <start+0x10a>
			gpio_configure_pin(BLUETOOTH_PWR,BLUETOOTH_FLAGS);
   8172c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81730:	2035      	movs	r0, #53	; 0x35
   81732:	4b0e      	ldr	r3, [pc, #56]	; (8176c <start+0x190>)
   81734:	4798      	blx	r3
			gpio_set_pin_low(BLUETOOTH_PWR);
   81736:	2035      	movs	r0, #53	; 0x35
   81738:	4b1b      	ldr	r3, [pc, #108]	; (817a8 <start+0x1cc>)
   8173a:	4798      	blx	r3
			break;
   8173c:	e7eb      	b.n	81716 <start+0x13a>
   8173e:	bf00      	nop
   81740:	00088bf8 	.word	0x00088bf8
   81744:	0008380d 	.word	0x0008380d
   81748:	00083f45 	.word	0x00083f45
   8174c:	000817ad 	.word	0x000817ad
   81750:	000837c9 	.word	0x000837c9
   81754:	00083e05 	.word	0x00083e05
   81758:	00088bc4 	.word	0x00088bc4
   8175c:	00083345 	.word	0x00083345
   81760:	200012b4 	.word	0x200012b4
   81764:	00088bd8 	.word	0x00088bd8
   81768:	00083ef9 	.word	0x00083ef9
   8176c:	000808ed 	.word	0x000808ed
   81770:	00088ad8 	.word	0x00088ad8
   81774:	00080aed 	.word	0x00080aed
   81778:	4008c000 	.word	0x4008c000
   8177c:	00080d15 	.word	0x00080d15
   81780:	00080be1 	.word	0x00080be1
   81784:	00080c25 	.word	0x00080c25
   81788:	00080d0b 	.word	0x00080d0b
   8178c:	00081539 	.word	0x00081539
   81790:	00083581 	.word	0x00083581
   81794:	00088bb4 	.word	0x00088bb4
   81798:	000811e1 	.word	0x000811e1
   8179c:	00081d15 	.word	0x00081d15
   817a0:	00088880 	.word	0x00088880
   817a4:	00088894 	.word	0x00088894
   817a8:	000808b3 	.word	0x000808b3

000817ac <CRC16MODBUSFRAME>:
unsigned int CRC16MODBUSFRAME (unsigned char *nData, unsigned int wLength)
{
    unsigned char  nTemp;
    unsigned int  wCRCWord = 0xFFFF;

    while (wLength--)
   817ac:	b189      	cbz	r1, 817d2 <CRC16MODBUSFRAME+0x26>
{
   817ae:	b410      	push	{r4}
   817b0:	1841      	adds	r1, r0, r1
    while (wLength--)
   817b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    {
        nTemp = *nData++ ^ wCRCWord;
        wCRCWord >>= 8;
        wCRCWord ^= wCRCTable[nTemp];
   817b6:	4c09      	ldr	r4, [pc, #36]	; (817dc <CRC16MODBUSFRAME+0x30>)
        nTemp = *nData++ ^ wCRCWord;
   817b8:	f810 3b01 	ldrb.w	r3, [r0], #1
   817bc:	4053      	eors	r3, r2
        wCRCWord ^= wCRCTable[nTemp];
   817be:	b2db      	uxtb	r3, r3
   817c0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   817c4:	ea83 2212 	eor.w	r2, r3, r2, lsr #8
    while (wLength--)
   817c8:	4281      	cmp	r1, r0
   817ca:	d1f5      	bne.n	817b8 <CRC16MODBUSFRAME+0xc>
    }
    return wCRCWord;
}
   817cc:	4610      	mov	r0, r2
   817ce:	bc10      	pop	{r4}
   817d0:	4770      	bx	lr
    unsigned int  wCRCWord = 0xFFFF;
   817d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
   817d6:	4610      	mov	r0, r2
   817d8:	4770      	bx	lr
   817da:	bf00      	nop
   817dc:	20000134 	.word	0x20000134

000817e0 <CRC16MODBUS>:

unsigned int CRC16MODBUS (unsigned char nData, unsigned int wCRCWord)
{
    unsigned char  nTemp;

    nTemp = (((unsigned int)nData&0xFF) ^ wCRCWord)&0xFF;
   817e0:	4048      	eors	r0, r1
    wCRCWord >>= 8;
    wCRCWord ^= wCRCTable[nTemp];
   817e2:	b2c0      	uxtb	r0, r0
   817e4:	4b02      	ldr	r3, [pc, #8]	; (817f0 <CRC16MODBUS+0x10>)
   817e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    return wCRCWord;
}
   817ea:	ea80 2011 	eor.w	r0, r0, r1, lsr #8
   817ee:	4770      	bx	lr
   817f0:	20000134 	.word	0x20000134

000817f4 <Error>:




void Error(uint32_t sc, ...)
{
   817f4:	b40f      	push	{r0, r1, r2, r3}
   817f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   817fa:	b672      	cpsid	i
   817fc:	f3bf 8f5f 	dmb	sy
	uint32_t i,k;
#define er sc
	cpu_irq_disable();
   81800:	2200      	movs	r2, #0
   81802:	4b65      	ldr	r3, [pc, #404]	; (81998 <Error+0x1a4>)
   81804:	701a      	strb	r2, [r3, #0]
	gpio_configure_pin(ERROR_LED, ERROR_LED_FLAGS);
   81806:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8180a:	2033      	movs	r0, #51	; 0x33
   8180c:	4b63      	ldr	r3, [pc, #396]	; (8199c <Error+0x1a8>)
   8180e:	4798      	blx	r3
   81810:	f04f 0805 	mov.w	r8, #5
//#if HEART_LED_ACTIVE_LEVEL==1	
	
	for(k=0;k<5;k++)
	{
		gpio_set_pin_high(ERROR_LED);
		delay_ms(3000);
   81814:	4c62      	ldr	r4, [pc, #392]	; (819a0 <Error+0x1ac>)
			delay_ms(1500);
			gpio_set_pin_low(ERROR_LED);
		}
		else
		{
			for(i=0;i<(er/10)*2;i++)
   81816:	4f63      	ldr	r7, [pc, #396]	; (819a4 <Error+0x1b0>)
   81818:	e031      	b.n	8187e <Error+0x8a>
			gpio_set_pin_high(ERROR_LED);
   8181a:	2033      	movs	r0, #51	; 0x33
   8181c:	4b62      	ldr	r3, [pc, #392]	; (819a8 <Error+0x1b4>)
   8181e:	4798      	blx	r3
			delay_ms(1500);
   81820:	4862      	ldr	r0, [pc, #392]	; (819ac <Error+0x1b8>)
   81822:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   81824:	2033      	movs	r0, #51	; 0x33
   81826:	4b62      	ldr	r3, [pc, #392]	; (819b0 <Error+0x1bc>)
   81828:	4798      	blx	r3
   8182a:	e048      	b.n	818be <Error+0xca>
		}
		delay_ms(800);

		if((er%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   8182c:	2033      	movs	r0, #51	; 0x33
   8182e:	4b5e      	ldr	r3, [pc, #376]	; (819a8 <Error+0x1b4>)
   81830:	4798      	blx	r3
			delay_ms(1500);
   81832:	485e      	ldr	r0, [pc, #376]	; (819ac <Error+0x1b8>)
   81834:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   81836:	2033      	movs	r0, #51	; 0x33
   81838:	4b5d      	ldr	r3, [pc, #372]	; (819b0 <Error+0x1bc>)
   8183a:	4798      	blx	r3
   8183c:	e057      	b.n	818ee <Error+0xfa>
		delay_ms(1000);
#undef er
#define _param	pa1
		if((_param/100)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   8183e:	2033      	movs	r0, #51	; 0x33
   81840:	4b59      	ldr	r3, [pc, #356]	; (819a8 <Error+0x1b4>)
   81842:	4798      	blx	r3
			delay_ms(1500);
   81844:	4859      	ldr	r0, [pc, #356]	; (819ac <Error+0x1b8>)
   81846:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   81848:	2033      	movs	r0, #51	; 0x33
   8184a:	4b59      	ldr	r3, [pc, #356]	; (819b0 <Error+0x1bc>)
   8184c:	4798      	blx	r3
   8184e:	e067      	b.n	81920 <Error+0x12c>
		}
		delay_ms(800);

		if(((_param/10)%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   81850:	2033      	movs	r0, #51	; 0x33
   81852:	4b55      	ldr	r3, [pc, #340]	; (819a8 <Error+0x1b4>)
   81854:	4798      	blx	r3
			delay_ms(1500);
   81856:	4855      	ldr	r0, [pc, #340]	; (819ac <Error+0x1b8>)
   81858:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   8185a:	2033      	movs	r0, #51	; 0x33
   8185c:	4b54      	ldr	r3, [pc, #336]	; (819b0 <Error+0x1bc>)
   8185e:	4798      	blx	r3
   81860:	e079      	b.n	81956 <Error+0x162>
		delay_ms(800);


		if((_param%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   81862:	2033      	movs	r0, #51	; 0x33
   81864:	4b50      	ldr	r3, [pc, #320]	; (819a8 <Error+0x1b4>)
   81866:	4798      	blx	r3
			delay_ms(1500);
   81868:	4850      	ldr	r0, [pc, #320]	; (819ac <Error+0x1b8>)
   8186a:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   8186c:	2033      	movs	r0, #51	; 0x33
   8186e:	4b50      	ldr	r3, [pc, #320]	; (819b0 <Error+0x1bc>)
   81870:	4798      	blx	r3
				gpio_toggle_pin(ERROR_LED);
				delay_ms(200);
			}
		}
		
		delay_ms(1000);
   81872:	4850      	ldr	r0, [pc, #320]	; (819b4 <Error+0x1c0>)
   81874:	47a0      	blx	r4
	for(k=0;k<5;k++)
   81876:	f1b8 0801 	subs.w	r8, r8, #1
   8187a:	f000 8086 	beq.w	8198a <Error+0x196>
		gpio_set_pin_high(ERROR_LED);
   8187e:	2033      	movs	r0, #51	; 0x33
   81880:	4b49      	ldr	r3, [pc, #292]	; (819a8 <Error+0x1b4>)
   81882:	4798      	blx	r3
		delay_ms(3000);
   81884:	484c      	ldr	r0, [pc, #304]	; (819b8 <Error+0x1c4>)
   81886:	47a0      	blx	r4
		gpio_set_pin_low(ERROR_LED);
   81888:	2033      	movs	r0, #51	; 0x33
   8188a:	4b49      	ldr	r3, [pc, #292]	; (819b0 <Error+0x1bc>)
   8188c:	4798      	blx	r3
		delay_ms(800);
   8188e:	484b      	ldr	r0, [pc, #300]	; (819bc <Error+0x1c8>)
   81890:	47a0      	blx	r4
		if((er/10)==0)
   81892:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   81896:	f1b9 0f09 	cmp.w	r9, #9
   8189a:	d9be      	bls.n	8181a <Error+0x26>
			for(i=0;i<(er/10)*2;i++)
   8189c:	fba7 2309 	umull	r2, r3, r7, r9
   818a0:	08db      	lsrs	r3, r3, #3
   818a2:	005e      	lsls	r6, r3, #1
   818a4:	b15b      	cbz	r3, 818be <Error+0xca>
   818a6:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   818a8:	f8df b120 	ldr.w	fp, [pc, #288]	; 819cc <Error+0x1d8>
				delay_ms(200);
   818ac:	f8df a120 	ldr.w	sl, [pc, #288]	; 819d0 <Error+0x1dc>
				gpio_toggle_pin(ERROR_LED);
   818b0:	2033      	movs	r0, #51	; 0x33
   818b2:	47d8      	blx	fp
				delay_ms(200);
   818b4:	4650      	mov	r0, sl
   818b6:	47a0      	blx	r4
			for(i=0;i<(er/10)*2;i++)
   818b8:	3501      	adds	r5, #1
   818ba:	42b5      	cmp	r5, r6
   818bc:	d1f8      	bne.n	818b0 <Error+0xbc>
		delay_ms(800);
   818be:	483f      	ldr	r0, [pc, #252]	; (819bc <Error+0x1c8>)
   818c0:	47a0      	blx	r4
		if((er%10)==0)
   818c2:	fba7 3609 	umull	r3, r6, r7, r9
   818c6:	08f6      	lsrs	r6, r6, #3
   818c8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   818cc:	ebb9 0646 	subs.w	r6, r9, r6, lsl #1
   818d0:	d0ac      	beq.n	8182c <Error+0x38>
			for(i=0;i<(er%10)*2;i++)
   818d2:	0076      	lsls	r6, r6, #1
   818d4:	d00b      	beq.n	818ee <Error+0xfa>
   818d6:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   818d8:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 819cc <Error+0x1d8>
				delay_ms(200);
   818dc:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 819d0 <Error+0x1dc>
				gpio_toggle_pin(ERROR_LED);
   818e0:	2033      	movs	r0, #51	; 0x33
   818e2:	47d0      	blx	sl
				delay_ms(200);
   818e4:	4648      	mov	r0, r9
   818e6:	47a0      	blx	r4
			for(i=0;i<(er%10)*2;i++)
   818e8:	3501      	adds	r5, #1
   818ea:	42b5      	cmp	r5, r6
   818ec:	d1f8      	bne.n	818e0 <Error+0xec>
		delay_ms(1000);
   818ee:	4831      	ldr	r0, [pc, #196]	; (819b4 <Error+0x1c0>)
   818f0:	47a0      	blx	r4
		if((_param/100)==0)
   818f2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   818f6:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
   818fa:	d9a0      	bls.n	8183e <Error+0x4a>
			for(i=0;i<(_param/100)*2;i++)
   818fc:	4b30      	ldr	r3, [pc, #192]	; (819c0 <Error+0x1cc>)
   818fe:	fba3 2309 	umull	r2, r3, r3, r9
   81902:	095b      	lsrs	r3, r3, #5
   81904:	005e      	lsls	r6, r3, #1
   81906:	b15b      	cbz	r3, 81920 <Error+0x12c>
   81908:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   8190a:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 819cc <Error+0x1d8>
				delay_ms(200);
   8190e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 819d0 <Error+0x1dc>
				gpio_toggle_pin(ERROR_LED);
   81912:	2033      	movs	r0, #51	; 0x33
   81914:	47d8      	blx	fp
				delay_ms(200);
   81916:	4650      	mov	r0, sl
   81918:	47a0      	blx	r4
			for(i=0;i<(_param/100)*2;i++)
   8191a:	3501      	adds	r5, #1
   8191c:	42b5      	cmp	r5, r6
   8191e:	d1f8      	bne.n	81912 <Error+0x11e>
		delay_ms(800);
   81920:	4826      	ldr	r0, [pc, #152]	; (819bc <Error+0x1c8>)
   81922:	47a0      	blx	r4
		if(((_param/10)%10)==0)
   81924:	fba7 2309 	umull	r2, r3, r7, r9
   81928:	08db      	lsrs	r3, r3, #3
   8192a:	fba7 2603 	umull	r2, r6, r7, r3
   8192e:	08f6      	lsrs	r6, r6, #3
   81930:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   81934:	ebb3 0646 	subs.w	r6, r3, r6, lsl #1
   81938:	d08a      	beq.n	81850 <Error+0x5c>
			for(i=0;i<((_param/10)%10)*2;i++)
   8193a:	0076      	lsls	r6, r6, #1
   8193c:	d00b      	beq.n	81956 <Error+0x162>
   8193e:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   81940:	f8df b088 	ldr.w	fp, [pc, #136]	; 819cc <Error+0x1d8>
				delay_ms(200);
   81944:	f8df a088 	ldr.w	sl, [pc, #136]	; 819d0 <Error+0x1dc>
				gpio_toggle_pin(ERROR_LED);
   81948:	2033      	movs	r0, #51	; 0x33
   8194a:	47d8      	blx	fp
				delay_ms(200);
   8194c:	4650      	mov	r0, sl
   8194e:	47a0      	blx	r4
			for(i=0;i<((_param/10)%10)*2;i++)
   81950:	3501      	adds	r5, #1
   81952:	42b5      	cmp	r5, r6
   81954:	d1f8      	bne.n	81948 <Error+0x154>
		delay_ms(800);
   81956:	4819      	ldr	r0, [pc, #100]	; (819bc <Error+0x1c8>)
   81958:	47a0      	blx	r4
		if((_param%10)==0)
   8195a:	fba7 3609 	umull	r3, r6, r7, r9
   8195e:	08f6      	lsrs	r6, r6, #3
   81960:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   81964:	ebb9 0646 	subs.w	r6, r9, r6, lsl #1
   81968:	f43f af7b 	beq.w	81862 <Error+0x6e>
			for(i=0;i<(_param%10)*2;i++)
   8196c:	0076      	lsls	r6, r6, #1
   8196e:	d080      	beq.n	81872 <Error+0x7e>
   81970:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   81972:	f8df a058 	ldr.w	sl, [pc, #88]	; 819cc <Error+0x1d8>
				delay_ms(200);
   81976:	f8df 9058 	ldr.w	r9, [pc, #88]	; 819d0 <Error+0x1dc>
				gpio_toggle_pin(ERROR_LED);
   8197a:	2033      	movs	r0, #51	; 0x33
   8197c:	47d0      	blx	sl
				delay_ms(200);
   8197e:	4648      	mov	r0, r9
   81980:	47a0      	blx	r4
			for(i=0;i<(_param%10)*2;i++)
   81982:	3501      	adds	r5, #1
   81984:	42b5      	cmp	r5, r6
   81986:	d1f8      	bne.n	8197a <Error+0x186>
   81988:	e773      	b.n	81872 <Error+0x7e>

#undef _param
	}
	rstc_start_software_reset(RSTC);
   8198a:	480e      	ldr	r0, [pc, #56]	; (819c4 <Error+0x1d0>)
   8198c:	4b0e      	ldr	r3, [pc, #56]	; (819c8 <Error+0x1d4>)
   8198e:	4798      	blx	r3
   81990:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81994:	b004      	add	sp, #16
   81996:	4770      	bx	lr
   81998:	2000012c 	.word	0x2000012c
   8199c:	000808ed 	.word	0x000808ed
   819a0:	20000001 	.word	0x20000001
   819a4:	cccccccd 	.word	0xcccccccd
   819a8:	00080899 	.word	0x00080899
   819ac:	009cf293 	.word	0x009cf293
   819b0:	000808b3 	.word	0x000808b3
   819b4:	0068a1b7 	.word	0x0068a1b7
   819b8:	0139e525 	.word	0x0139e525
   819bc:	0053b493 	.word	0x0053b493
   819c0:	51eb851f 	.word	0x51eb851f
   819c4:	400e1200 	.word	0x400e1200
   819c8:	00080d21 	.word	0x00080d21
   819cc:	000808cd 	.word	0x000808cd
   819d0:	0014ed25 	.word	0x0014ed25

000819d4 <kRtc>:
#define _rtcCalr	((t_RTC_CALR*)&RTC->RTC_CALR)
#define _rtcTimr	((t_RTC_TIMR*)&RTC->RTC_TIMR)


uint32_t kRtc(uint32_t sc,...)
{
   819d4:	b40f      	push	{r0, r1, r2, r3}
   819d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   819d8:	b087      	sub	sp, #28
	uint32_t u1,u2,u3,u4;
	
	switch(sc)
   819da:	990c      	ldr	r1, [sp, #48]	; 0x30
   819dc:	2964      	cmp	r1, #100	; 0x64
   819de:	d021      	beq.n	81a24 <kRtc+0x50>
   819e0:	d814      	bhi.n	81a0c <kRtc+0x38>
   819e2:	2901      	cmp	r1, #1
   819e4:	f000 810e 	beq.w	81c04 <kRtc+0x230>
   819e8:	2900      	cmp	r1, #0
   819ea:	f000 80bb 	beq.w	81b64 <kRtc+0x190>
   819ee:	2902      	cmp	r1, #2
   819f0:	d113      	bne.n	81a1a <kRtc+0x46>
	case _KRTC_IS_SUMMER_TIME:
#define _day	pa1
#define _date	pa2
#define _month	pa3
#define _hour	pa4
		if((_month>MARCH)&&(_month<OCTOBER)) return 1;
   819f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   819f4:	1f1a      	subs	r2, r3, #4
   819f6:	2a05      	cmp	r2, #5
   819f8:	f240 8148 	bls.w	81c8c <kRtc+0x2b8>
		else
		{
			if(_month==MARCH)
   819fc:	2b03      	cmp	r3, #3
   819fe:	f000 811b 	beq.w	81c38 <kRtc+0x264>
					{
						return (((int8_t)(_date-24)-(int8_t)_day)>0);
					}
				}
			}
			else if(_month==OCTOBER)
   81a02:	2b0a      	cmp	r3, #10
   81a04:	f000 812d 	beq.w	81c62 <kRtc+0x28e>
						return (((int8_t)(_date-24)-(int8_t)_day)<=0);
					}
				}
			}
		}
		return 0;
   81a08:	2400      	movs	r4, #0
   81a0a:	e0d1      	b.n	81bb0 <kRtc+0x1dc>
	switch(sc)
   81a0c:	2967      	cmp	r1, #103	; 0x67
   81a0e:	d040      	beq.n	81a92 <kRtc+0xbe>
   81a10:	2968      	cmp	r1, #104	; 0x68
   81a12:	f000 808d 	beq.w	81b30 <kRtc+0x15c>
   81a16:	2966      	cmp	r1, #102	; 0x66
   81a18:	d01a      	beq.n	81a50 <kRtc+0x7c>
		//no break;


	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_KRTC_SWITCH_BAD_SC,sc);
   81a1a:	200e      	movs	r0, #14
   81a1c:	4b9e      	ldr	r3, [pc, #632]	; (81c98 <kRtc+0x2c4>)
   81a1e:	4798      	blx	r3
}
	return 0;
   81a20:	2400      	movs	r4, #0
   81a22:	e0c5      	b.n	81bb0 <kRtc+0x1dc>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   81a24:	2000      	movs	r0, #0
   81a26:	4b9d      	ldr	r3, [pc, #628]	; (81c9c <kRtc+0x2c8>)
   81a28:	4798      	blx	r3
		while (!pmc_osc_is_ready_32kxtal());
   81a2a:	4c9d      	ldr	r4, [pc, #628]	; (81ca0 <kRtc+0x2cc>)
   81a2c:	47a0      	blx	r4
   81a2e:	2800      	cmp	r0, #0
   81a30:	d0fc      	beq.n	81a2c <kRtc+0x58>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   81a32:	4b9c      	ldr	r3, [pc, #624]	; (81ca4 <kRtc+0x2d0>)
   81a34:	2104      	movs	r1, #4
   81a36:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81a3a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81a3e:	2210      	movs	r2, #16
   81a40:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81a44:	6019      	str	r1, [r3, #0]
		rtc_enable_interrupt(RTC,RTC_IER_SECEN);	//Second IRQ enabled
   81a46:	4898      	ldr	r0, [pc, #608]	; (81ca8 <kRtc+0x2d4>)
   81a48:	4b98      	ldr	r3, [pc, #608]	; (81cac <kRtc+0x2d8>)
   81a4a:	4798      	blx	r3
	return 0;
   81a4c:	2400      	movs	r4, #0
		break;
   81a4e:	e0af      	b.n	81bb0 <kRtc+0x1dc>
		_res = rtc_set_time(RTC,_hour,_minute,_second);
   81a50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   81a54:	990d      	ldr	r1, [sp, #52]	; 0x34
   81a56:	4894      	ldr	r0, [pc, #592]	; (81ca8 <kRtc+0x2d4>)
   81a58:	4c95      	ldr	r4, [pc, #596]	; (81cb0 <kRtc+0x2dc>)
   81a5a:	47a0      	blx	r4
   81a5c:	4604      	mov	r4, r0
   81a5e:	900c      	str	r0, [sp, #48]	; 0x30
		if(_res	== 0)
   81a60:	2800      	cmp	r0, #0
   81a62:	f040 80a5 	bne.w	81bb0 <kRtc+0x1dc>
			rtc.summerTime = _kRtcIsSummerTime(_rtcCalr->DAY,_rtcCalr->DATE,_rtcCalr->MONTH,_rtcTimr->HOUR);
   81a66:	4b93      	ldr	r3, [pc, #588]	; (81cb4 <kRtc+0x2e0>)
   81a68:	7899      	ldrb	r1, [r3, #2]
   81a6a:	78da      	ldrb	r2, [r3, #3]
   81a6c:	3b04      	subs	r3, #4
   81a6e:	789b      	ldrb	r3, [r3, #2]
   81a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   81a74:	9300      	str	r3, [sp, #0]
   81a76:	f001 031f 	and.w	r3, r1, #31
   81a7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   81a7e:	0949      	lsrs	r1, r1, #5
   81a80:	2002      	movs	r0, #2
   81a82:	f7ff ffa7 	bl	819d4 <kRtc>
   81a86:	4b8c      	ldr	r3, [pc, #560]	; (81cb8 <kRtc+0x2e4>)
   81a88:	781a      	ldrb	r2, [r3, #0]
   81a8a:	f360 0282 	bfi	r2, r0, #2, #1
   81a8e:	701a      	strb	r2, [r3, #0]
   81a90:	e08e      	b.n	81bb0 <kRtc+0x1dc>
		if((_month==0)||(_month)>12) return -1;
   81a92:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   81a94:	1e63      	subs	r3, r4, #1
   81a96:	2b0b      	cmp	r3, #11
   81a98:	d902      	bls.n	81aa0 <kRtc+0xcc>
   81a9a:	f04f 34ff 	mov.w	r4, #4294967295
   81a9e:	e087      	b.n	81bb0 <kRtc+0x1dc>
		if(_date>nbDaysInMonth[_month-1]+_kRtcIsLeapYear(_centyear)?1:0) return -1;
   81aa0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   81aa2:	4a86      	ldr	r2, [pc, #536]	; (81cbc <kRtc+0x2e8>)
   81aa4:	5cd5      	ldrb	r5, [r2, r3]
   81aa6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   81aa8:	4631      	mov	r1, r6
   81aaa:	2001      	movs	r0, #1
   81aac:	f7ff ff92 	bl	819d4 <kRtc>
   81ab0:	4428      	add	r0, r5
   81ab2:	4287      	cmp	r7, r0
   81ab4:	d902      	bls.n	81abc <kRtc+0xe8>
   81ab6:	f04f 34ff 	mov.w	r4, #4294967295
   81aba:	e079      	b.n	81bb0 <kRtc+0x1dc>
		if((_centyear/100>20)||(_centyear/100<19)||(_centyear%100>99)) return -1;
   81abc:	f2a6 736c 	subw	r3, r6, #1900	; 0x76c
   81ac0:	2bc7      	cmp	r3, #199	; 0xc7
   81ac2:	d902      	bls.n	81aca <kRtc+0xf6>
   81ac4:	f04f 34ff 	mov.w	r4, #4294967295
   81ac8:	e072      	b.n	81bb0 <kRtc+0x1dc>
   81aca:	4d7d      	ldr	r5, [pc, #500]	; (81cc0 <kRtc+0x2ec>)
   81acc:	fba5 3506 	umull	r3, r5, r5, r6
   81ad0:	096d      	lsrs	r5, r5, #5
   81ad2:	2364      	movs	r3, #100	; 0x64
   81ad4:	fb03 6515 	mls	r5, r3, r5, r6
   81ad8:	2d63      	cmp	r5, #99	; 0x63
   81ada:	d902      	bls.n	81ae2 <kRtc+0x10e>
   81adc:	f04f 34ff 	mov.w	r4, #4294967295
   81ae0:	e066      	b.n	81bb0 <kRtc+0x1dc>
		_day = _kRtcDayByDate(_date,_month,_centyear);
   81ae2:	4633      	mov	r3, r6
   81ae4:	4622      	mov	r2, r4
   81ae6:	4639      	mov	r1, r7
   81ae8:	2000      	movs	r0, #0
   81aea:	f7ff ff73 	bl	819d4 <kRtc>
		_res = rtc_set_date(RTC,_centyear%100,_month,_date,_day);
   81aee:	9000      	str	r0, [sp, #0]
   81af0:	463b      	mov	r3, r7
   81af2:	4622      	mov	r2, r4
   81af4:	4629      	mov	r1, r5
   81af6:	486c      	ldr	r0, [pc, #432]	; (81ca8 <kRtc+0x2d4>)
   81af8:	4c72      	ldr	r4, [pc, #456]	; (81cc4 <kRtc+0x2f0>)
   81afa:	47a0      	blx	r4
   81afc:	4604      	mov	r4, r0
   81afe:	900c      	str	r0, [sp, #48]	; 0x30
		if(_res == 0)
   81b00:	2800      	cmp	r0, #0
   81b02:	d155      	bne.n	81bb0 <kRtc+0x1dc>
			rtc.summerTime = _kRtcIsSummerTime(_rtcCalr->DAY,_rtcCalr->DATE,_rtcCalr->MONTH,_rtcTimr->HOUR);
   81b04:	4b6b      	ldr	r3, [pc, #428]	; (81cb4 <kRtc+0x2e0>)
   81b06:	7899      	ldrb	r1, [r3, #2]
   81b08:	78da      	ldrb	r2, [r3, #3]
   81b0a:	3b04      	subs	r3, #4
   81b0c:	789b      	ldrb	r3, [r3, #2]
   81b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   81b12:	9300      	str	r3, [sp, #0]
   81b14:	f001 031f 	and.w	r3, r1, #31
   81b18:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   81b1c:	0949      	lsrs	r1, r1, #5
   81b1e:	2002      	movs	r0, #2
   81b20:	f7ff ff58 	bl	819d4 <kRtc>
   81b24:	4b64      	ldr	r3, [pc, #400]	; (81cb8 <kRtc+0x2e4>)
   81b26:	781a      	ldrb	r2, [r3, #0]
   81b28:	f360 0282 	bfi	r2, r0, #2, #1
   81b2c:	701a      	strb	r2, [r3, #0]
   81b2e:	e03f      	b.n	81bb0 <kRtc+0x1dc>
		rtc_get_date(RTC,&_year,&_month,&_date,&_day);
   81b30:	ab02      	add	r3, sp, #8
   81b32:	9300      	str	r3, [sp, #0]
   81b34:	ab03      	add	r3, sp, #12
   81b36:	aa04      	add	r2, sp, #16
   81b38:	a905      	add	r1, sp, #20
   81b3a:	485b      	ldr	r0, [pc, #364]	; (81ca8 <kRtc+0x2d4>)
   81b3c:	4c62      	ldr	r4, [pc, #392]	; (81cc8 <kRtc+0x2f4>)
   81b3e:	47a0      	blx	r4
		sprintf((char*)_pStr,"%s %d %s %4d",daysOfWeek[_day-1],(int)_date,months[_month-1],(int)_year);
   81b40:	9b02      	ldr	r3, [sp, #8]
   81b42:	3b01      	subs	r3, #1
   81b44:	4a61      	ldr	r2, [pc, #388]	; (81ccc <kRtc+0x2f8>)
   81b46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   81b4a:	9b05      	ldr	r3, [sp, #20]
   81b4c:	9301      	str	r3, [sp, #4]
   81b4e:	9b04      	ldr	r3, [sp, #16]
   81b50:	3b01      	subs	r3, #1
   81b52:	495f      	ldr	r1, [pc, #380]	; (81cd0 <kRtc+0x2fc>)
   81b54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   81b58:	9300      	str	r3, [sp, #0]
   81b5a:	9b03      	ldr	r3, [sp, #12]
   81b5c:	495d      	ldr	r1, [pc, #372]	; (81cd4 <kRtc+0x300>)
   81b5e:	980d      	ldr	r0, [sp, #52]	; 0x34
   81b60:	4c5d      	ldr	r4, [pc, #372]	; (81cd8 <kRtc+0x304>)
   81b62:	47a0      	blx	r4
		if(_month>=3)
   81b64:	990e      	ldr	r1, [sp, #56]	; 0x38
   81b66:	2902      	cmp	r1, #2
   81b68:	d928      	bls.n	81bbc <kRtc+0x1e8>
			_day = ((_month*23)/9 + _date + 4 + _centyear + _centyear/4 - _centyear/100 + _centyear/400 - 2 ) % 7 + 1;
   81b6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   81b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81b6e:	1883      	adds	r3, r0, r2
   81b70:	3302      	adds	r3, #2
   81b72:	eb03 0390 	add.w	r3, r3, r0, lsr #2
   81b76:	4a52      	ldr	r2, [pc, #328]	; (81cc0 <kRtc+0x2ec>)
   81b78:	fba2 2000 	umull	r2, r0, r2, r0
   81b7c:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
   81b80:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   81b84:	ebc1 02c2 	rsb	r2, r1, r2, lsl #3
   81b88:	4954      	ldr	r1, [pc, #336]	; (81cdc <kRtc+0x308>)
   81b8a:	fba1 1202 	umull	r1, r2, r1, r2
   81b8e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   81b92:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
   81b96:	4a52      	ldr	r2, [pc, #328]	; (81ce0 <kRtc+0x30c>)
   81b98:	fba2 1203 	umull	r1, r2, r2, r3
   81b9c:	1a99      	subs	r1, r3, r2
   81b9e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   81ba2:	0892      	lsrs	r2, r2, #2
   81ba4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   81ba8:	1a9b      	subs	r3, r3, r2
   81baa:	3301      	adds	r3, #1
   81bac:	930c      	str	r3, [sp, #48]	; 0x30
		return _day; //Normally 1 to 7 !!!!
   81bae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
}
   81bb0:	4620      	mov	r0, r4
   81bb2:	b007      	add	sp, #28
   81bb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   81bb8:	b004      	add	sp, #16
   81bba:	4770      	bx	lr
			_day = ((_month*23)/9 + _date + 4 + _centyear + (_centyear-1)/4 - (_centyear-1)/100 + (_centyear-1)/400 ) % 7 + 1;
   81bbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81bbe:	1e50      	subs	r0, r2, #1
   81bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81bc2:	4413      	add	r3, r2
   81bc4:	3304      	adds	r3, #4
   81bc6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   81bca:	ebc1 02c2 	rsb	r2, r1, r2, lsl #3
   81bce:	4943      	ldr	r1, [pc, #268]	; (81cdc <kRtc+0x308>)
   81bd0:	fba1 1202 	umull	r1, r2, r1, r2
   81bd4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   81bd8:	eb03 0390 	add.w	r3, r3, r0, lsr #2
   81bdc:	4a38      	ldr	r2, [pc, #224]	; (81cc0 <kRtc+0x2ec>)
   81bde:	fba2 1200 	umull	r1, r2, r2, r0
   81be2:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
   81be6:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
   81bea:	4a3d      	ldr	r2, [pc, #244]	; (81ce0 <kRtc+0x30c>)
   81bec:	fba2 1203 	umull	r1, r2, r2, r3
   81bf0:	1a99      	subs	r1, r3, r2
   81bf2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   81bf6:	0892      	lsrs	r2, r2, #2
   81bf8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   81bfc:	1a9b      	subs	r3, r3, r2
   81bfe:	3301      	adds	r3, #1
   81c00:	930c      	str	r3, [sp, #48]	; 0x30
   81c02:	e7d4      	b.n	81bae <kRtc+0x1da>
		return (((_centyear%4==0)&&(_centyear%100!=0)) || (_centyear%400==0));
   81c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81c06:	f013 0f03 	tst.w	r3, #3
   81c0a:	d107      	bne.n	81c1c <kRtc+0x248>
   81c0c:	4a2c      	ldr	r2, [pc, #176]	; (81cc0 <kRtc+0x2ec>)
   81c0e:	fba2 1203 	umull	r1, r2, r2, r3
   81c12:	0952      	lsrs	r2, r2, #5
   81c14:	2164      	movs	r1, #100	; 0x64
   81c16:	fb01 3212 	mls	r2, r1, r2, r3
   81c1a:	b95a      	cbnz	r2, 81c34 <kRtc+0x260>
   81c1c:	4c28      	ldr	r4, [pc, #160]	; (81cc0 <kRtc+0x2ec>)
   81c1e:	fba4 2403 	umull	r2, r4, r4, r3
   81c22:	09e4      	lsrs	r4, r4, #7
   81c24:	f44f 72c8 	mov.w	r2, #400	; 0x190
   81c28:	fb02 3414 	mls	r4, r2, r4, r3
   81c2c:	fab4 f484 	clz	r4, r4
   81c30:	0964      	lsrs	r4, r4, #5
   81c32:	e7bd      	b.n	81bb0 <kRtc+0x1dc>
   81c34:	2401      	movs	r4, #1
   81c36:	e7bb      	b.n	81bb0 <kRtc+0x1dc>
				if(_date>=25)
   81c38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   81c3a:	2c18      	cmp	r4, #24
   81c3c:	d928      	bls.n	81c90 <kRtc+0x2bc>
					if(_day==SUNDAY)
   81c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81c40:	2a01      	cmp	r2, #1
   81c42:	d008      	beq.n	81c56 <kRtc+0x282>
						return (((int8_t)(_date-24)-(int8_t)_day)>0);
   81c44:	3c18      	subs	r4, #24
   81c46:	b264      	sxtb	r4, r4
   81c48:	b252      	sxtb	r2, r2
   81c4a:	1aa4      	subs	r4, r4, r2
   81c4c:	2c00      	cmp	r4, #0
   81c4e:	bfd4      	ite	le
   81c50:	2400      	movle	r4, #0
   81c52:	2401      	movgt	r4, #1
   81c54:	e7ac      	b.n	81bb0 <kRtc+0x1dc>
						if(_hour>=2) return 1;
   81c56:	9c10      	ldr	r4, [sp, #64]	; 0x40
   81c58:	2c01      	cmp	r4, #1
   81c5a:	bf94      	ite	ls
   81c5c:	2400      	movls	r4, #0
   81c5e:	2401      	movhi	r4, #1
   81c60:	e7a6      	b.n	81bb0 <kRtc+0x1dc>
				if(_date>=25)
   81c62:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   81c64:	2c18      	cmp	r4, #24
   81c66:	d915      	bls.n	81c94 <kRtc+0x2c0>
					if(_day==SUNDAY)
   81c68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81c6a:	2a01      	cmp	r2, #1
   81c6c:	d008      	beq.n	81c80 <kRtc+0x2ac>
						return (((int8_t)(_date-24)-(int8_t)_day)<=0);
   81c6e:	3c18      	subs	r4, #24
   81c70:	b264      	sxtb	r4, r4
   81c72:	b252      	sxtb	r2, r2
   81c74:	1aa4      	subs	r4, r4, r2
   81c76:	2c00      	cmp	r4, #0
   81c78:	bfcc      	ite	gt
   81c7a:	2400      	movgt	r4, #0
   81c7c:	2401      	movle	r4, #1
   81c7e:	e797      	b.n	81bb0 <kRtc+0x1dc>
						if(_hour<2) return 1;
   81c80:	9c10      	ldr	r4, [sp, #64]	; 0x40
   81c82:	2c01      	cmp	r4, #1
   81c84:	bf8c      	ite	hi
   81c86:	2400      	movhi	r4, #0
   81c88:	2401      	movls	r4, #1
   81c8a:	e791      	b.n	81bb0 <kRtc+0x1dc>
		if((_month>MARCH)&&(_month<OCTOBER)) return 1;
   81c8c:	2401      	movs	r4, #1
   81c8e:	e78f      	b.n	81bb0 <kRtc+0x1dc>
		return 0;
   81c90:	2400      	movs	r4, #0
   81c92:	e78d      	b.n	81bb0 <kRtc+0x1dc>
   81c94:	2400      	movs	r4, #0
   81c96:	e78b      	b.n	81bb0 <kRtc+0x1dc>
   81c98:	000817f5 	.word	0x000817f5
   81c9c:	00080a21 	.word	0x00080a21
   81ca0:	00080a45 	.word	0x00080a45
   81ca4:	e000e100 	.word	0xe000e100
   81ca8:	400e1260 	.word	0x400e1260
   81cac:	00080d2d 	.word	0x00080d2d
   81cb0:	00080d8d 	.word	0x00080d8d
   81cb4:	400e126c 	.word	0x400e126c
   81cb8:	200010c8 	.word	0x200010c8
   81cbc:	00088c0c 	.word	0x00088c0c
   81cc0:	51eb851f 	.word	0x51eb851f
   81cc4:	00080e95 	.word	0x00080e95
   81cc8:	00080e21 	.word	0x00080e21
   81ccc:	20000534 	.word	0x20000534
   81cd0:	20000550 	.word	0x20000550
   81cd4:	00088bfc 	.word	0x00088bfc
   81cd8:	00083ef9 	.word	0x00083ef9
   81cdc:	38e38e39 	.word	0x38e38e39
   81ce0:	24924925 	.word	0x24924925

00081ce4 <RTC_Handler>:
enum{
	_SHELL_PROMPT = 4
};

void RTC_Handler(void)
{
   81ce4:	b510      	push	{r4, lr}
   81ce6:	b082      	sub	sp, #8
	rtc_clear_status(RTC,RTC_SCCR_SECCLR);
   81ce8:	2104      	movs	r1, #4
   81cea:	4806      	ldr	r0, [pc, #24]	; (81d04 <RTC_Handler+0x20>)
   81cec:	4b06      	ldr	r3, [pc, #24]	; (81d08 <RTC_Handler+0x24>)
   81cee:	4798      	blx	r3
	PushTask(Shell,_SHELL_PROMPT,0,0);
   81cf0:	2300      	movs	r3, #0
   81cf2:	9300      	str	r3, [sp, #0]
   81cf4:	2204      	movs	r2, #4
   81cf6:	4905      	ldr	r1, [pc, #20]	; (81d0c <RTC_Handler+0x28>)
   81cf8:	2066      	movs	r0, #102	; 0x66
   81cfa:	4c05      	ldr	r4, [pc, #20]	; (81d10 <RTC_Handler+0x2c>)
   81cfc:	47a0      	blx	r4
}
   81cfe:	b002      	add	sp, #8
   81d00:	bd10      	pop	{r4, pc}
   81d02:	bf00      	nop
   81d04:	400e1260 	.word	0x400e1260
   81d08:	00080f4d 	.word	0x00080f4d
   81d0c:	00082175 	.word	0x00082175
   81d10:	00083581 	.word	0x00083581

00081d14 <Lcd>:
}lcd;

#define ST_LCD_ON		0x0000001

uint32_t Lcd(uint32_t sc, ...)
{
   81d14:	b40f      	push	{r0, r1, r2, r3}
   81d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float col;

	switch(sc)
   81d18:	9906      	ldr	r1, [sp, #24]
   81d1a:	1e4b      	subs	r3, r1, #1
   81d1c:	2b68      	cmp	r3, #104	; 0x68
   81d1e:	f200 8217 	bhi.w	82150 <Lcd+0x43c>
   81d22:	e8df f013 	tbh	[pc, r3, lsl #1]
   81d26:	0111      	.short	0x0111
   81d28:	016b0161 	.word	0x016b0161
   81d2c:	01940182 	.word	0x01940182
   81d30:	01ac01a0 	.word	0x01ac01a0
   81d34:	01cf021a 	.word	0x01cf021a
   81d38:	021501f2 	.word	0x021501f2
   81d3c:	02150215 	.word	0x02150215
   81d40:	02150215 	.word	0x02150215
   81d44:	02150215 	.word	0x02150215
   81d48:	02150215 	.word	0x02150215
   81d4c:	02150215 	.word	0x02150215
   81d50:	02150215 	.word	0x02150215
   81d54:	02150215 	.word	0x02150215
   81d58:	02150215 	.word	0x02150215
   81d5c:	02150215 	.word	0x02150215
   81d60:	02150215 	.word	0x02150215
   81d64:	02150215 	.word	0x02150215
   81d68:	02150215 	.word	0x02150215
   81d6c:	02150215 	.word	0x02150215
   81d70:	02150215 	.word	0x02150215
   81d74:	02150215 	.word	0x02150215
   81d78:	02150215 	.word	0x02150215
   81d7c:	02150215 	.word	0x02150215
   81d80:	02150215 	.word	0x02150215
   81d84:	02150215 	.word	0x02150215
   81d88:	02150215 	.word	0x02150215
   81d8c:	02150215 	.word	0x02150215
   81d90:	02150215 	.word	0x02150215
   81d94:	02150215 	.word	0x02150215
   81d98:	02150215 	.word	0x02150215
   81d9c:	02150215 	.word	0x02150215
   81da0:	02150215 	.word	0x02150215
   81da4:	02150215 	.word	0x02150215
   81da8:	02150215 	.word	0x02150215
   81dac:	02150215 	.word	0x02150215
   81db0:	02150215 	.word	0x02150215
   81db4:	02150215 	.word	0x02150215
   81db8:	02150215 	.word	0x02150215
   81dbc:	02150215 	.word	0x02150215
   81dc0:	02150215 	.word	0x02150215
   81dc4:	02150215 	.word	0x02150215
   81dc8:	02150215 	.word	0x02150215
   81dcc:	02150215 	.word	0x02150215
   81dd0:	02150215 	.word	0x02150215
   81dd4:	02150215 	.word	0x02150215
   81dd8:	02150215 	.word	0x02150215
   81ddc:	02150215 	.word	0x02150215
   81de0:	02150215 	.word	0x02150215
   81de4:	02150215 	.word	0x02150215
   81de8:	02150215 	.word	0x02150215
   81dec:	00b80069 	.word	0x00b80069
   81df0:	00e20106 	.word	0x00e20106
   81df4:	017500dd 	.word	0x017500dd
	{
	case LCD_NEW:
		_LcdSetDataLineOut();
   81df8:	2009      	movs	r0, #9
   81dfa:	f7ff ff8b 	bl	81d14 <Lcd>
		gpio_configure_pin(LCD_E,			LCD_PIN_OUT_FLAGS);
   81dfe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81e02:	2004      	movs	r0, #4
   81e04:	4ca5      	ldr	r4, [pc, #660]	; (8209c <Lcd+0x388>)
   81e06:	47a0      	blx	r4
		gpio_configure_pin(LCD_RWB,			LCD_PIN_OUT_FLAGS);
   81e08:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81e0c:	2005      	movs	r0, #5
   81e0e:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,			LCD_PIN_OUT_FLAGS);
   81e10:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81e14:	2006      	movs	r0, #6
   81e16:	47a0      	blx	r4
		gpio_configure_pin(LCD_BACKLIGHT,	LCD_PIN_OUT_FLAGS);
   81e18:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81e1c:	2007      	movs	r0, #7
   81e1e:	47a0      	blx	r4

		gpio_set_pin_low(LCD_E);
   81e20:	2004      	movs	r0, #4
   81e22:	4c9f      	ldr	r4, [pc, #636]	; (820a0 <Lcd+0x38c>)
   81e24:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   81e26:	2006      	movs	r0, #6
   81e28:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RWB);
   81e2a:	2005      	movs	r0, #5
   81e2c:	47a0      	blx	r4
		gpio_set_pin_high(LCD_BACKLIGHT);
   81e2e:	2007      	movs	r0, #7
   81e30:	4b9c      	ldr	r3, [pc, #624]	; (820a4 <Lcd+0x390>)
   81e32:	4798      	blx	r3

		delay_ms(500);
   81e34:	489c      	ldr	r0, [pc, #624]	; (820a8 <Lcd+0x394>)
   81e36:	4c9d      	ldr	r4, [pc, #628]	; (820ac <Lcd+0x398>)
   81e38:	47a0      	blx	r4

#ifdef LCD_USE_8_BIT_INTERFACE
		//8 bit data interface/////////////////////////////
		_LcdWriteInst(0x30);
   81e3a:	2130      	movs	r1, #48	; 0x30
   81e3c:	2002      	movs	r0, #2
   81e3e:	f7ff ff69 	bl	81d14 <Lcd>
		delay_ms(6);
   81e42:	f24a 00b7 	movw	r0, #41143	; 0xa0b7
   81e46:	47a0      	blx	r4
		_LcdWriteInst(0x30);
   81e48:	2130      	movs	r1, #48	; 0x30
   81e4a:	2002      	movs	r0, #2
   81e4c:	f7ff ff62 	bl	81d14 <Lcd>
		delay_ms(2);
   81e50:	f243 5093 	movw	r0, #13715	; 0x3593
   81e54:	47a0      	blx	r4
		_LcdWriteInst(0x30);
   81e56:	2130      	movs	r1, #48	; 0x30
   81e58:	2002      	movs	r0, #2
   81e5a:	f7ff ff5b 	bl	81d14 <Lcd>
		delay_ms(2);
   81e5e:	f243 5093 	movw	r0, #13715	; 0x3593
   81e62:	47a0      	blx	r4
		_LcdWriteInst(0x38);	//SET FUNCTION : 8 bits interface/2 line display/5x7 dots
   81e64:	2138      	movs	r1, #56	; 0x38
   81e66:	2002      	movs	r0, #2
   81e68:	f7ff ff54 	bl	81d14 <Lcd>
		delay_ms(10);
		_LcdWriteByte(0x20);
		delay_ms(10);
		_LcdWriteInst(0x28);	//SET FUNCTION : 4 bits interface/2 line display/5x7 dots
#endif
		_LcdWriteInst(0x08);	//DISPLAY OFF
   81e6c:	2108      	movs	r1, #8
   81e6e:	2002      	movs	r0, #2
   81e70:	f7ff ff50 	bl	81d14 <Lcd>
		_LcdWriteInst(0x01);	//DISPLAY CLEAR
   81e74:	2101      	movs	r1, #1
   81e76:	2002      	movs	r0, #2
   81e78:	f7ff ff4c 	bl	81d14 <Lcd>
		_LcdWriteInst(0x06);	//ENTRY MODE SET : Cursor Increase/Display is not shift
   81e7c:	2106      	movs	r1, #6
   81e7e:	2002      	movs	r0, #2
   81e80:	f7ff ff48 	bl	81d14 <Lcd>
		_LcdWriteInst(0x0C);	//DISPLAY ON/CURSOR OFF
   81e84:	210c      	movs	r1, #12
   81e86:	2002      	movs	r0, #2
   81e88:	f7ff ff44 	bl	81d14 <Lcd>

		lcd.status = ST_LCD_ON;
   81e8c:	2201      	movs	r2, #1
   81e8e:	4b88      	ldr	r3, [pc, #544]	; (820b0 <Lcd+0x39c>)
   81e90:	601a      	str	r2, [r3, #0]

	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_LCD_SWITCH_BAD_SC,sc);
	}
	return 0;
   81e92:	2400      	movs	r4, #0
		break;
   81e94:	e162      	b.n	8215c <Lcd+0x448>
		_LcdWriteInst(0x08);	//DISPLAY OFF
   81e96:	2108      	movs	r1, #8
   81e98:	2002      	movs	r0, #2
   81e9a:	f7ff ff3b 	bl	81d14 <Lcd>
		_LcdSetDataLineIn();
   81e9e:	200a      	movs	r0, #10
   81ea0:	f7ff ff38 	bl	81d14 <Lcd>
		gpio_configure_pin(LCD_E,			LCD_PIN_OUT_FLAGS);
   81ea4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81ea8:	2004      	movs	r0, #4
   81eaa:	4c7c      	ldr	r4, [pc, #496]	; (8209c <Lcd+0x388>)
   81eac:	47a0      	blx	r4
		gpio_configure_pin(LCD_RWB,			LCD_PIN_OUT_FLAGS);
   81eae:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81eb2:	2005      	movs	r0, #5
   81eb4:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,			LCD_PIN_OUT_FLAGS);
   81eb6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81eba:	2006      	movs	r0, #6
   81ebc:	47a0      	blx	r4
		gpio_configure_pin(LCD_BACKLIGHT,	LCD_PIN_OUT_FLAGS);
   81ebe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81ec2:	2007      	movs	r0, #7
   81ec4:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   81ec6:	2004      	movs	r0, #4
   81ec8:	4c75      	ldr	r4, [pc, #468]	; (820a0 <Lcd+0x38c>)
   81eca:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   81ecc:	2006      	movs	r0, #6
   81ece:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RWB);
   81ed0:	2005      	movs	r0, #5
   81ed2:	47a0      	blx	r4
		gpio_set_pin_low(LCD_BACKLIGHT);
   81ed4:	2007      	movs	r0, #7
   81ed6:	47a0      	blx	r4
		lcd.status=0;
   81ed8:	2400      	movs	r4, #0
   81eda:	4b75      	ldr	r3, [pc, #468]	; (820b0 <Lcd+0x39c>)
   81edc:	601c      	str	r4, [r3, #0]
		break;
   81ede:	e13d      	b.n	8215c <Lcd+0x448>
		return (uint32_t)(mIsBitsSet(lcd.status,ST_LCD_ON));
   81ee0:	4b73      	ldr	r3, [pc, #460]	; (820b0 <Lcd+0x39c>)
   81ee2:	681c      	ldr	r4, [r3, #0]
   81ee4:	f004 0401 	and.w	r4, r4, #1
   81ee8:	e138      	b.n	8215c <Lcd+0x448>
		_LcdSetCursor(_line,0);
   81eea:	9f08      	ldr	r7, [sp, #32]
   81eec:	2200      	movs	r2, #0
   81eee:	4639      	mov	r1, r7
   81ef0:	2007      	movs	r0, #7
   81ef2:	f7ff ff0f 	bl	81d14 <Lcd>
   81ef6:	2414      	movs	r4, #20
			_LcdWriteData(' ');
   81ef8:	2620      	movs	r6, #32
   81efa:	2503      	movs	r5, #3
   81efc:	4631      	mov	r1, r6
   81efe:	4628      	mov	r0, r5
   81f00:	f7ff ff08 	bl	81d14 <Lcd>
		for(int i=0;i<20;i++)
   81f04:	3c01      	subs	r4, #1
   81f06:	d1f9      	bne.n	81efc <Lcd+0x1e8>
		_LcdSetCursor(_line,_col);
   81f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
   81f0a:	4639      	mov	r1, r7
   81f0c:	2007      	movs	r0, #7
   81f0e:	f7ff ff01 	bl	81d14 <Lcd>
		while(*(char*)_str)
   81f12:	9c07      	ldr	r4, [sp, #28]
   81f14:	7821      	ldrb	r1, [r4, #0]
   81f16:	2900      	cmp	r1, #0
   81f18:	f000 8125 	beq.w	82166 <Lcd+0x452>
			_LcdWriteData(*(char*)_str++);
   81f1c:	2503      	movs	r5, #3
   81f1e:	3401      	adds	r4, #1
   81f20:	9407      	str	r4, [sp, #28]
   81f22:	4628      	mov	r0, r5
   81f24:	f7ff fef6 	bl	81d14 <Lcd>
		while(*(char*)_str)
   81f28:	7821      	ldrb	r1, [r4, #0]
   81f2a:	2900      	cmp	r1, #0
   81f2c:	d1f7      	bne.n	81f1e <Lcd+0x20a>
	return 0;
   81f2e:	2400      	movs	r4, #0
   81f30:	e114      	b.n	8215c <Lcd+0x448>
		if(_onOff)
   81f32:	9c07      	ldr	r4, [sp, #28]
   81f34:	b124      	cbz	r4, 81f40 <Lcd+0x22c>
			gpio_set_pin_high(LCD_BACKLIGHT);
   81f36:	2007      	movs	r0, #7
   81f38:	4b5a      	ldr	r3, [pc, #360]	; (820a4 <Lcd+0x390>)
   81f3a:	4798      	blx	r3
	return 0;
   81f3c:	2400      	movs	r4, #0
   81f3e:	e10d      	b.n	8215c <Lcd+0x448>
			gpio_set_pin_low(LCD_BACKLIGHT);
   81f40:	2007      	movs	r0, #7
   81f42:	4b57      	ldr	r3, [pc, #348]	; (820a0 <Lcd+0x38c>)
   81f44:	4798      	blx	r3
   81f46:	e109      	b.n	8215c <Lcd+0x448>
		_LcdSetDataLineOut();
   81f48:	2009      	movs	r0, #9
   81f4a:	f7ff fee3 	bl	81d14 <Lcd>
		gpio_set_pin_low(LCD_RWB);
   81f4e:	2005      	movs	r0, #5
   81f50:	4b53      	ldr	r3, [pc, #332]	; (820a0 <Lcd+0x38c>)
   81f52:	4798      	blx	r3
		_LcdEup();
   81f54:	2005      	movs	r0, #5
   81f56:	f7ff fedd 	bl	81d14 <Lcd>
		(_byte&0x80)?gpio_set_pin_high(LCD_DB7):gpio_set_pin_low(LCD_DB7);
   81f5a:	9c07      	ldr	r4, [sp, #28]
   81f5c:	f014 0f80 	tst.w	r4, #128	; 0x80
   81f60:	f04f 0003 	mov.w	r0, #3
   81f64:	bf14      	ite	ne
   81f66:	4b4f      	ldrne	r3, [pc, #316]	; (820a4 <Lcd+0x390>)
   81f68:	4b4d      	ldreq	r3, [pc, #308]	; (820a0 <Lcd+0x38c>)
   81f6a:	4798      	blx	r3
		(_byte&0x40)?gpio_set_pin_high(LCD_DB6):gpio_set_pin_low(LCD_DB6);
   81f6c:	b2e4      	uxtb	r4, r4
   81f6e:	f014 0f40 	tst.w	r4, #64	; 0x40
   81f72:	f04f 0002 	mov.w	r0, #2
   81f76:	bf14      	ite	ne
   81f78:	4b4a      	ldrne	r3, [pc, #296]	; (820a4 <Lcd+0x390>)
   81f7a:	4b49      	ldreq	r3, [pc, #292]	; (820a0 <Lcd+0x38c>)
   81f7c:	4798      	blx	r3
		(_byte&0x20)?gpio_set_pin_high(LCD_DB5):gpio_set_pin_low(LCD_DB5);
   81f7e:	f014 0f20 	tst.w	r4, #32
   81f82:	f04f 0001 	mov.w	r0, #1
   81f86:	bf14      	ite	ne
   81f88:	4b46      	ldrne	r3, [pc, #280]	; (820a4 <Lcd+0x390>)
   81f8a:	4b45      	ldreq	r3, [pc, #276]	; (820a0 <Lcd+0x38c>)
   81f8c:	4798      	blx	r3
		(_byte&0x10)?gpio_set_pin_high(LCD_DB4):gpio_set_pin_low(LCD_DB4);
   81f8e:	f014 0f10 	tst.w	r4, #16
   81f92:	f04f 0000 	mov.w	r0, #0
   81f96:	bf14      	ite	ne
   81f98:	4b42      	ldrne	r3, [pc, #264]	; (820a4 <Lcd+0x390>)
   81f9a:	4b41      	ldreq	r3, [pc, #260]	; (820a0 <Lcd+0x38c>)
   81f9c:	4798      	blx	r3
		(_byte&0x08)?gpio_set_pin_high(LCD_DB3):gpio_set_pin_low(LCD_DB3);
   81f9e:	f014 0f08 	tst.w	r4, #8
   81fa2:	f04f 002b 	mov.w	r0, #43	; 0x2b
   81fa6:	bf14      	ite	ne
   81fa8:	4b3e      	ldrne	r3, [pc, #248]	; (820a4 <Lcd+0x390>)
   81faa:	4b3d      	ldreq	r3, [pc, #244]	; (820a0 <Lcd+0x38c>)
   81fac:	4798      	blx	r3
		(_byte&0x04)?gpio_set_pin_high(LCD_DB2):gpio_set_pin_low(LCD_DB2);
   81fae:	f014 0f04 	tst.w	r4, #4
   81fb2:	f04f 002a 	mov.w	r0, #42	; 0x2a
   81fb6:	bf14      	ite	ne
   81fb8:	4b3a      	ldrne	r3, [pc, #232]	; (820a4 <Lcd+0x390>)
   81fba:	4b39      	ldreq	r3, [pc, #228]	; (820a0 <Lcd+0x38c>)
   81fbc:	4798      	blx	r3
		(_byte&0x02)?gpio_set_pin_high(LCD_DB1):gpio_set_pin_low(LCD_DB1);
   81fbe:	f014 0f02 	tst.w	r4, #2
   81fc2:	f04f 0029 	mov.w	r0, #41	; 0x29
   81fc6:	bf14      	ite	ne
   81fc8:	4b36      	ldrne	r3, [pc, #216]	; (820a4 <Lcd+0x390>)
   81fca:	4b35      	ldreq	r3, [pc, #212]	; (820a0 <Lcd+0x38c>)
   81fcc:	4798      	blx	r3
		(_byte&0x01)?gpio_set_pin_high(LCD_DB0):gpio_set_pin_low(LCD_DB0);
   81fce:	f014 0f01 	tst.w	r4, #1
   81fd2:	f04f 0028 	mov.w	r0, #40	; 0x28
   81fd6:	bf14      	ite	ne
   81fd8:	4b32      	ldrne	r3, [pc, #200]	; (820a4 <Lcd+0x390>)
   81fda:	4b31      	ldreq	r3, [pc, #196]	; (820a0 <Lcd+0x38c>)
   81fdc:	4798      	blx	r3
		_LcdEdown();
   81fde:	2006      	movs	r0, #6
   81fe0:	f7ff fe98 	bl	81d14 <Lcd>
	return 0;
   81fe4:	2400      	movs	r4, #0
		break;
   81fe6:	e0b9      	b.n	8215c <Lcd+0x448>
		gpio_set_pin_low(LCD_RS);
   81fe8:	2006      	movs	r0, #6
   81fea:	4b2d      	ldr	r3, [pc, #180]	; (820a0 <Lcd+0x38c>)
   81fec:	4798      	blx	r3
		_LcdWriteByte(_inst);
   81fee:	f89d 101c 	ldrb.w	r1, [sp, #28]
   81ff2:	2001      	movs	r0, #1
   81ff4:	f7ff fe8e 	bl	81d14 <Lcd>
	return 0;
   81ff8:	2400      	movs	r4, #0
		break;
   81ffa:	e0af      	b.n	8215c <Lcd+0x448>
		gpio_set_pin_high(LCD_RS);
   81ffc:	2006      	movs	r0, #6
   81ffe:	4b29      	ldr	r3, [pc, #164]	; (820a4 <Lcd+0x390>)
   82000:	4798      	blx	r3
		_LcdWriteByte(_data);
   82002:	f89d 101c 	ldrb.w	r1, [sp, #28]
   82006:	2001      	movs	r0, #1
   82008:	f7ff fe84 	bl	81d14 <Lcd>
	return 0;
   8200c:	2400      	movs	r4, #0
		break;
   8200e:	e0a5      	b.n	8215c <Lcd+0x448>
			col = 20 - _len;
   82010:	9807      	ldr	r0, [sp, #28]
   82012:	f1c0 0014 	rsb	r0, r0, #20
   82016:	4b27      	ldr	r3, [pc, #156]	; (820b4 <Lcd+0x3a0>)
   82018:	4798      	blx	r3
			col = col/2;
   8201a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   8201e:	4b26      	ldr	r3, [pc, #152]	; (820b8 <Lcd+0x3a4>)
   82020:	4798      	blx	r3
			return col;
   82022:	4b26      	ldr	r3, [pc, #152]	; (820bc <Lcd+0x3a8>)
   82024:	4798      	blx	r3
   82026:	4604      	mov	r4, r0
   82028:	e098      	b.n	8215c <Lcd+0x448>
		delay_us(500);
   8202a:	f640 5065 	movw	r0, #3429	; 0xd65
   8202e:	4c1f      	ldr	r4, [pc, #124]	; (820ac <Lcd+0x398>)
   82030:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   82032:	2004      	movs	r0, #4
   82034:	4b1b      	ldr	r3, [pc, #108]	; (820a4 <Lcd+0x390>)
   82036:	4798      	blx	r3
		delay_us(100);
   82038:	f240 20ae 	movw	r0, #686	; 0x2ae
   8203c:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   8203e:	2004      	movs	r0, #4
   82040:	4b17      	ldr	r3, [pc, #92]	; (820a0 <Lcd+0x38c>)
   82042:	4798      	blx	r3
		delay_us(500);
   82044:	f640 5065 	movw	r0, #3429	; 0xd65
   82048:	47a0      	blx	r4
	return 0;
   8204a:	2400      	movs	r4, #0
		break;
   8204c:	e086      	b.n	8215c <Lcd+0x448>
		delay_us(500);
   8204e:	f640 5065 	movw	r0, #3429	; 0xd65
   82052:	4c16      	ldr	r4, [pc, #88]	; (820ac <Lcd+0x398>)
   82054:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   82056:	2004      	movs	r0, #4
   82058:	4b12      	ldr	r3, [pc, #72]	; (820a4 <Lcd+0x390>)
   8205a:	4798      	blx	r3
		delay_us(50);
   8205c:	f240 1057 	movw	r0, #343	; 0x157
   82060:	47a0      	blx	r4
	return 0;
   82062:	2400      	movs	r4, #0
		break;
   82064:	e07a      	b.n	8215c <Lcd+0x448>
		delay_us(50);
   82066:	f240 1057 	movw	r0, #343	; 0x157
   8206a:	4c10      	ldr	r4, [pc, #64]	; (820ac <Lcd+0x398>)
   8206c:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   8206e:	2004      	movs	r0, #4
   82070:	4b0b      	ldr	r3, [pc, #44]	; (820a0 <Lcd+0x38c>)
   82072:	4798      	blx	r3
		delay_us(500);
   82074:	f640 5065 	movw	r0, #3429	; 0xd65
   82078:	47a0      	blx	r4
	return 0;
   8207a:	2400      	movs	r4, #0
		break;
   8207c:	e06e      	b.n	8215c <Lcd+0x448>
		_LcdWriteInst((line2addr[_nLine&0x03]+_nCol)|0x80);
   8207e:	9b07      	ldr	r3, [sp, #28]
   82080:	f003 0303 	and.w	r3, r3, #3
   82084:	4a0e      	ldr	r2, [pc, #56]	; (820c0 <Lcd+0x3ac>)
   82086:	5cd1      	ldrb	r1, [r2, r3]
   82088:	9b08      	ldr	r3, [sp, #32]
   8208a:	4419      	add	r1, r3
   8208c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   82090:	2002      	movs	r0, #2
   82092:	f7ff fe3f 	bl	81d14 <Lcd>
	return 0;
   82096:	2400      	movs	r4, #0
		break;
   82098:	e060      	b.n	8215c <Lcd+0x448>
   8209a:	bf00      	nop
   8209c:	000808ed 	.word	0x000808ed
   820a0:	000808b3 	.word	0x000808b3
   820a4:	00080899 	.word	0x00080899
   820a8:	003450dc 	.word	0x003450dc
   820ac:	20000001 	.word	0x20000001
   820b0:	200010cc 	.word	0x200010cc
   820b4:	00083a75 	.word	0x00083a75
   820b8:	00083b25 	.word	0x00083b25
   820bc:	00083dc5 	.word	0x00083dc5
   820c0:	00088cc8 	.word	0x00088cc8
		gpio_configure_pin(LCD_DB4,			LCD_PIN_OUT_FLAGS);
   820c4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820c8:	2000      	movs	r0, #0
   820ca:	4c28      	ldr	r4, [pc, #160]	; (8216c <Lcd+0x458>)
   820cc:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB5,			LCD_PIN_OUT_FLAGS);
   820ce:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820d2:	2001      	movs	r0, #1
   820d4:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB6,			LCD_PIN_OUT_FLAGS);
   820d6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820da:	2002      	movs	r0, #2
   820dc:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB7,			LCD_PIN_OUT_FLAGS);
   820de:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820e2:	2003      	movs	r0, #3
   820e4:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB0,			LCD_PIN_OUT_FLAGS);
   820e6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820ea:	2028      	movs	r0, #40	; 0x28
   820ec:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB1,			LCD_PIN_OUT_FLAGS);
   820ee:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820f2:	2029      	movs	r0, #41	; 0x29
   820f4:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB2,			LCD_PIN_OUT_FLAGS);
   820f6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820fa:	202a      	movs	r0, #42	; 0x2a
   820fc:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB3,			LCD_PIN_OUT_FLAGS);
   820fe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82102:	202b      	movs	r0, #43	; 0x2b
   82104:	47a0      	blx	r4
	return 0;
   82106:	2400      	movs	r4, #0
		break;
   82108:	e028      	b.n	8215c <Lcd+0x448>
		gpio_configure_pin(LCD_DB4,			LCD_PIN_IN_FLAGS);
   8210a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8210e:	2000      	movs	r0, #0
   82110:	4c16      	ldr	r4, [pc, #88]	; (8216c <Lcd+0x458>)
   82112:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB5,			LCD_PIN_IN_FLAGS);
   82114:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82118:	2001      	movs	r0, #1
   8211a:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB6,			LCD_PIN_IN_FLAGS);
   8211c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82120:	2002      	movs	r0, #2
   82122:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB7,			LCD_PIN_IN_FLAGS);
   82124:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82128:	2003      	movs	r0, #3
   8212a:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB0,			LCD_PIN_IN_FLAGS);
   8212c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82130:	2028      	movs	r0, #40	; 0x28
   82132:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB1,			LCD_PIN_IN_FLAGS);
   82134:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82138:	2029      	movs	r0, #41	; 0x29
   8213a:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB2,			LCD_PIN_IN_FLAGS);
   8213c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82140:	202a      	movs	r0, #42	; 0x2a
   82142:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB3,			LCD_PIN_IN_FLAGS);
   82144:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82148:	202b      	movs	r0, #43	; 0x2b
   8214a:	47a0      	blx	r4
	return 0;
   8214c:	2400      	movs	r4, #0
		break;
   8214e:	e005      	b.n	8215c <Lcd+0x448>
		Error(ERROR_LCD_SWITCH_BAD_SC,sc);
   82150:	200f      	movs	r0, #15
   82152:	4b07      	ldr	r3, [pc, #28]	; (82170 <Lcd+0x45c>)
   82154:	4798      	blx	r3
	return 0;
   82156:	2400      	movs	r4, #0
   82158:	e000      	b.n	8215c <Lcd+0x448>
   8215a:	2400      	movs	r4, #0
   8215c:	4620      	mov	r0, r4
   8215e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   82162:	b004      	add	sp, #16
   82164:	4770      	bx	lr
	return 0;
   82166:	2400      	movs	r4, #0
   82168:	e7f8      	b.n	8215c <Lcd+0x448>
   8216a:	bf00      	nop
   8216c:	000808ed 	.word	0x000808ed
   82170:	000817f5 	.word	0x000817f5

00082174 <Shell>:

#define EnterEditMode()					mBitsSet(shell.status,ST_SHELL_PROMPT_DISABLED)
#define ExitEditMode()					mBitsClr(shell.status,ST_SHELL_PROMPT_DISABLED)

uint32_t Shell(uint32_t sc, ...)
{
   82174:	b40f      	push	{r0, r1, r2, r3}
   82176:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8217a:	b087      	sub	sp, #28
	uint32_t u1,u2;
	char*pSt;

	switch(sc)
   8217c:	990e      	ldr	r1, [sp, #56]	; 0x38
   8217e:	2904      	cmp	r1, #4
   82180:	f000 80b9 	beq.w	822f6 <Shell+0x182>
   82184:	d940      	bls.n	82208 <Shell+0x94>
   82186:	2906      	cmp	r1, #6
   82188:	d05f      	beq.n	8224a <Shell+0xd6>
   8218a:	d36d      	bcc.n	82268 <Shell+0xf4>
   8218c:	2907      	cmp	r1, #7
   8218e:	f000 85ff 	beq.w	82d90 <Shell+0xc1c>
   82192:	2964      	cmp	r1, #100	; 0x64
   82194:	f040 868c 	bne.w	82eb0 <Shell+0xd3c>
	{
	case SHELL_NEW:
		shell.editTimer=shell.escapeTimer=0;
   82198:	4b93      	ldr	r3, [pc, #588]	; (823e8 <Shell+0x274>)
   8219a:	2400      	movs	r4, #0
   8219c:	619c      	str	r4, [r3, #24]
   8219e:	615c      	str	r4, [r3, #20]
		shell.state=IDLE;
   821a0:	771c      	strb	r4, [r3, #28]
		shell.status=ST_SHELL_SHOW_UNKNOW_CRC;
   821a2:	2202      	movs	r2, #2
   821a4:	801a      	strh	r2, [r3, #0]
		Lcd(LCD_NEW);
   821a6:	2064      	movs	r0, #100	; 0x64
   821a8:	4b90      	ldr	r3, [pc, #576]	; (823ec <Shell+0x278>)
   821aa:	4798      	blx	r3
		gpio_configure_pin(HEART_LED, HEART_LED_FLAGS);
   821ac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   821b0:	2034      	movs	r0, #52	; 0x34
   821b2:	4d8f      	ldr	r5, [pc, #572]	; (823f0 <Shell+0x27c>)
   821b4:	47a8      	blx	r5
		gpio_configure_pin(POWER_LED, POWER_LED_FLAGS);
   821b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   821ba:	2033      	movs	r0, #51	; 0x33
   821bc:	47a8      	blx	r5

#if POWER_LED_ACTIVE_LEVEL
		gpio_set_pin_low(POWER_LED);
   821be:	2033      	movs	r0, #51	; 0x33
   821c0:	4b8c      	ldr	r3, [pc, #560]	; (823f4 <Shell+0x280>)
   821c2:	4798      	blx	r3
#else
		gpio_set_pin_high(POWER_LED);
#endif
		kRtc(KRTC_NEW);
   821c4:	2064      	movs	r0, #100	; 0x64
   821c6:	4b8c      	ldr	r3, [pc, #560]	; (823f8 <Shell+0x284>)
   821c8:	4798      	blx	r3
		Shellcom(SHELLCOM_NEW);
   821ca:	2064      	movs	r0, #100	; 0x64
   821cc:	4b8b      	ldr	r3, [pc, #556]	; (823fc <Shell+0x288>)
   821ce:	4798      	blx	r3
		//LcdPutstr("Hello World!",0,0);
		//LcdPutstr("Hello World!",1,1);
		//LcdPutstr("Hello World!",2,2);
		//LcdPutstr("Hello World!",3,3);
		PushTask(Shell,_SHELL_HEART_BEAT,-1,0);
   821d0:	4e8b      	ldr	r6, [pc, #556]	; (82400 <Shell+0x28c>)
   821d2:	9400      	str	r4, [sp, #0]
   821d4:	f04f 33ff 	mov.w	r3, #4294967295
   821d8:	2203      	movs	r2, #3
   821da:	4631      	mov	r1, r6
   821dc:	2066      	movs	r0, #102	; 0x66
   821de:	4d89      	ldr	r5, [pc, #548]	; (82404 <Shell+0x290>)
   821e0:	47a8      	blx	r5
		PushTask(Shell,_SHELL_PROMPT,0,0);
   821e2:	9400      	str	r4, [sp, #0]
   821e4:	4623      	mov	r3, r4
   821e6:	2204      	movs	r2, #4
   821e8:	4631      	mov	r1, r6
   821ea:	2066      	movs	r0, #102	; 0x66
   821ec:	47a8      	blx	r5
		PushTask(Menu,MENU_NEW,0,0);
   821ee:	9400      	str	r4, [sp, #0]
   821f0:	4623      	mov	r3, r4
   821f2:	2264      	movs	r2, #100	; 0x64
   821f4:	4984      	ldr	r1, [pc, #528]	; (82408 <Shell+0x294>)
   821f6:	2066      	movs	r0, #102	; 0x66
   821f8:	47a8      	blx	r5

	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_SHELL_SWITCH_BAD_SC,sc);
	}
	return 0;
   821fa:	46a0      	mov	r8, r4
}
   821fc:	4640      	mov	r0, r8
   821fe:	b007      	add	sp, #28
   82200:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82204:	b004      	add	sp, #16
   82206:	4770      	bx	lr
	switch(sc)
   82208:	2902      	cmp	r1, #2
   8220a:	f000 80bf 	beq.w	8238c <Shell+0x218>
   8220e:	d852      	bhi.n	822b6 <Shell+0x142>
   82210:	2901      	cmp	r1, #1
   82212:	f040 864d 	bne.w	82eb0 <Shell+0xd3c>
		if(shell.escapeTimer)
   82216:	4b74      	ldr	r3, [pc, #464]	; (823e8 <Shell+0x274>)
   82218:	699b      	ldr	r3, [r3, #24]
   8221a:	2b00      	cmp	r3, #0
   8221c:	f000 834d 	beq.w	828ba <Shell+0x746>
			if(--shell.escapeTimer==0)
   82220:	f103 38ff 	add.w	r8, r3, #4294967295
   82224:	4b70      	ldr	r3, [pc, #448]	; (823e8 <Shell+0x274>)
   82226:	f8c3 8018 	str.w	r8, [r3, #24]
   8222a:	f1b8 0f00 	cmp.w	r8, #0
   8222e:	f040 8344 	bne.w	828ba <Shell+0x746>
				switch(shell.state)
   82232:	7f19      	ldrb	r1, [r3, #28]
   82234:	2905      	cmp	r1, #5
   82236:	f200 8598 	bhi.w	82d6a <Shell+0xbf6>
   8223a:	e8df f011 	tbh	[pc, r1, lsl #1]
   8223e:	033e      	.short	0x033e
   82240:	0379033b 	.word	0x0379033b
   82244:	03c50596 	.word	0x03c50596
   82248:	03d1      	.short	0x03d1
	    while((*(char*)_pSep)&&(*(char*)_pSep!=_ch)) _pSep++;
   8224a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8224c:	781a      	ldrb	r2, [r3, #0]
   8224e:	b14a      	cbz	r2, 82264 <Shell+0xf0>
   82250:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   82254:	428a      	cmp	r2, r1
   82256:	d005      	beq.n	82264 <Shell+0xf0>
   82258:	3301      	adds	r3, #1
   8225a:	9310      	str	r3, [sp, #64]	; 0x40
   8225c:	781a      	ldrb	r2, [r3, #0]
   8225e:	b10a      	cbz	r2, 82264 <Shell+0xf0>
   82260:	428a      	cmp	r2, r1
   82262:	d1f9      	bne.n	82258 <Shell+0xe4>
	    return (uint32_t)*(char*)_pSep;
   82264:	4690      	mov	r8, r2
   82266:	e7c9      	b.n	821fc <Shell+0x88>
		while(len--)
   82268:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   8226c:	f108 33ff 	add.w	r3, r8, #4294967295
   82270:	9310      	str	r3, [sp, #64]	; 0x40
   82272:	f1b8 0f00 	cmp.w	r8, #0
   82276:	d0c1      	beq.n	821fc <Shell+0x88>
			Putc(hexDigits[*(char*)str>>4]);
   82278:	4e64      	ldr	r6, [pc, #400]	; (8240c <Shell+0x298>)
   8227a:	2566      	movs	r5, #102	; 0x66
   8227c:	4c5f      	ldr	r4, [pc, #380]	; (823fc <Shell+0x288>)
   8227e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82280:	781b      	ldrb	r3, [r3, #0]
   82282:	091b      	lsrs	r3, r3, #4
   82284:	5cf1      	ldrb	r1, [r6, r3]
   82286:	4628      	mov	r0, r5
   82288:	47a0      	blx	r4
			Putc(hexDigits[*(char*)str&0x0F]);
   8228a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8228c:	781b      	ldrb	r3, [r3, #0]
   8228e:	f003 030f 	and.w	r3, r3, #15
   82292:	5cf1      	ldrb	r1, [r6, r3]
   82294:	4628      	mov	r0, r5
   82296:	47a0      	blx	r4
			Putc(' ');
   82298:	2120      	movs	r1, #32
   8229a:	4628      	mov	r0, r5
   8229c:	47a0      	blx	r4
			str++;
   8229e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   822a0:	3301      	adds	r3, #1
   822a2:	930f      	str	r3, [sp, #60]	; 0x3c
		while(len--)
   822a4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   822a8:	f108 33ff 	add.w	r3, r8, #4294967295
   822ac:	9310      	str	r3, [sp, #64]	; 0x40
   822ae:	f1b8 0f00 	cmp.w	r8, #0
   822b2:	d1e4      	bne.n	8227e <Shell+0x10a>
   822b4:	e7a2      	b.n	821fc <Shell+0x88>
		if(heartBeatRhythm[++k]==0) k=0;
   822b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   822b8:	3301      	adds	r3, #1
   822ba:	930f      	str	r3, [sp, #60]	; 0x3c
   822bc:	4a54      	ldr	r2, [pc, #336]	; (82410 <Shell+0x29c>)
   822be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   822c2:	b92a      	cbnz	r2, 822d0 <Shell+0x15c>
   822c4:	2300      	movs	r3, #0
   822c6:	930f      	str	r3, [sp, #60]	; 0x3c
		else gpio_set_pin_low(HEART_LED);
   822c8:	2034      	movs	r0, #52	; 0x34
   822ca:	4b4a      	ldr	r3, [pc, #296]	; (823f4 <Shell+0x280>)
   822cc:	4798      	blx	r3
   822ce:	e005      	b.n	822dc <Shell+0x168>
		if((k%2==0)^(!HEART_LED_ACTIVE_LEVEL)) gpio_set_pin_high(HEART_LED);
   822d0:	f013 0f01 	tst.w	r3, #1
   822d4:	d0f8      	beq.n	822c8 <Shell+0x154>
   822d6:	2034      	movs	r0, #52	; 0x34
   822d8:	4b4e      	ldr	r3, [pc, #312]	; (82414 <Shell+0x2a0>)
   822da:	4798      	blx	r3
		PushTask(Shell,_SHELL_HEART_BEAT,k,heartBeatRhythm[k]);
   822dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   822de:	4a4c      	ldr	r2, [pc, #304]	; (82410 <Shell+0x29c>)
   822e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   822e4:	9200      	str	r2, [sp, #0]
   822e6:	2203      	movs	r2, #3
   822e8:	4945      	ldr	r1, [pc, #276]	; (82400 <Shell+0x28c>)
   822ea:	2066      	movs	r0, #102	; 0x66
   822ec:	4c45      	ldr	r4, [pc, #276]	; (82404 <Shell+0x290>)
   822ee:	47a0      	blx	r4
	return 0;
   822f0:	f04f 0800 	mov.w	r8, #0
		break;
   822f4:	e782      	b.n	821fc <Shell+0x88>
		rtc_get_time(RTC,&_hour,&_minute,&_second);
   822f6:	ab05      	add	r3, sp, #20
   822f8:	aa0f      	add	r2, sp, #60	; 0x3c
   822fa:	a90e      	add	r1, sp, #56	; 0x38
   822fc:	4846      	ldr	r0, [pc, #280]	; (82418 <Shell+0x2a4>)
   822fe:	4c47      	ldr	r4, [pc, #284]	; (8241c <Shell+0x2a8>)
   82300:	47a0      	blx	r4
		if(mIsBitsClr(shell.status,ST_SHELL_PROMPT_DISABLED))
   82302:	4b39      	ldr	r3, [pc, #228]	; (823e8 <Shell+0x274>)
   82304:	881b      	ldrh	r3, [r3, #0]
   82306:	f013 0f04 	tst.w	r3, #4
   8230a:	d031      	beq.n	82370 <Shell+0x1fc>
		if(IsLcdOn())
   8230c:	2068      	movs	r0, #104	; 0x68
   8230e:	4b37      	ldr	r3, [pc, #220]	; (823ec <Shell+0x278>)
   82310:	4798      	blx	r3
   82312:	4680      	mov	r8, r0
   82314:	2800      	cmp	r0, #0
   82316:	f43f af71 	beq.w	821fc <Shell+0x88>
			sprintf(shellTmpBuf,"%02d:%02d:%02d",(int)_hour,(int)_minute,(int)_second);
   8231a:	ad0e      	add	r5, sp, #56	; 0x38
   8231c:	f855 2b04 	ldr.w	r2, [r5], #4
   82320:	4c3f      	ldr	r4, [pc, #252]	; (82420 <Shell+0x2ac>)
   82322:	ae06      	add	r6, sp, #24
   82324:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   82328:	9300      	str	r3, [sp, #0]
   8232a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8232c:	493d      	ldr	r1, [pc, #244]	; (82424 <Shell+0x2b0>)
   8232e:	4620      	mov	r0, r4
   82330:	f8df 8100 	ldr.w	r8, [pc, #256]	; 82434 <Shell+0x2c0>
   82334:	47c0      	blx	r8
			LcdPutstr(shellTmpBuf,1,6);
   82336:	2306      	movs	r3, #6
   82338:	2201      	movs	r2, #1
   8233a:	4621      	mov	r1, r4
   8233c:	2067      	movs	r0, #103	; 0x67
   8233e:	4f2b      	ldr	r7, [pc, #172]	; (823ec <Shell+0x278>)
   82340:	47b8      	blx	r7
			rtc_get_date(RTC,&_year,&_month,&_date,&_day);
   82342:	ab04      	add	r3, sp, #16
   82344:	9300      	str	r3, [sp, #0]
   82346:	4633      	mov	r3, r6
   82348:	462a      	mov	r2, r5
   8234a:	a90e      	add	r1, sp, #56	; 0x38
   8234c:	4832      	ldr	r0, [pc, #200]	; (82418 <Shell+0x2a4>)
   8234e:	4d36      	ldr	r5, [pc, #216]	; (82428 <Shell+0x2b4>)
   82350:	47a8      	blx	r5
			sprintf(shellTmpBuf,"%02d/%02d/%04d",(int)_date,(int)_month,(int)_year);
   82352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82354:	9300      	str	r3, [sp, #0]
   82356:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82358:	9a05      	ldr	r2, [sp, #20]
   8235a:	4934      	ldr	r1, [pc, #208]	; (8242c <Shell+0x2b8>)
   8235c:	4620      	mov	r0, r4
   8235e:	47c0      	blx	r8
			LcdPutstr(shellTmpBuf,0,5);
   82360:	2305      	movs	r3, #5
   82362:	2200      	movs	r2, #0
   82364:	4621      	mov	r1, r4
   82366:	2067      	movs	r0, #103	; 0x67
   82368:	47b8      	blx	r7
	return 0;
   8236a:	f04f 0800 	mov.w	r8, #0
   8236e:	e745      	b.n	821fc <Shell+0x88>
			sprintf(shellTmpBuf,"\r%02d:%02d:%02d",(int)_hour,(int)_minute,(int)_second);
   82370:	4c2b      	ldr	r4, [pc, #172]	; (82420 <Shell+0x2ac>)
   82372:	9b05      	ldr	r3, [sp, #20]
   82374:	9300      	str	r3, [sp, #0]
   82376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82378:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8237a:	492d      	ldr	r1, [pc, #180]	; (82430 <Shell+0x2bc>)
   8237c:	4620      	mov	r0, r4
   8237e:	4d2d      	ldr	r5, [pc, #180]	; (82434 <Shell+0x2c0>)
   82380:	47a8      	blx	r5
			Putstr(shellTmpBuf);
   82382:	4621      	mov	r1, r4
   82384:	2067      	movs	r0, #103	; 0x67
   82386:	4b1d      	ldr	r3, [pc, #116]	; (823fc <Shell+0x288>)
   82388:	4798      	blx	r3
   8238a:	e7bf      	b.n	8230c <Shell+0x198>
		switch(shell.state)
   8238c:	4b16      	ldr	r3, [pc, #88]	; (823e8 <Shell+0x274>)
   8238e:	7f1b      	ldrb	r3, [r3, #28]
   82390:	2b06      	cmp	r3, #6
   82392:	f200 8281 	bhi.w	82898 <Shell+0x724>
   82396:	e8df f013 	tbh	[pc, r3, lsl #1]
   8239a:	0007      	.short	0x0007
   8239c:	007e007b 	.word	0x007e007b
   823a0:	02680092 	.word	0x02680092
   823a4:	01b8026b 	.word	0x01b8026b
			switch(_kbhitchar)
   823a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   823aa:	b2d3      	uxtb	r3, r2
   823ac:	3b08      	subs	r3, #8
   823ae:	2b18      	cmp	r3, #24
   823b0:	d855      	bhi.n	8245e <Shell+0x2ea>
   823b2:	e8df f013 	tbh	[pc, r3, lsl #1]
   823b6:	0584      	.short	0x0584
   823b8:	05840584 	.word	0x05840584
   823bc:	00540054 	.word	0x00540054
   823c0:	00540584 	.word	0x00540584
   823c4:	00540054 	.word	0x00540054
   823c8:	00540054 	.word	0x00540054
   823cc:	00540054 	.word	0x00540054
   823d0:	00540054 	.word	0x00540054
   823d4:	00540054 	.word	0x00540054
   823d8:	00540054 	.word	0x00540054
   823dc:	00540041 	.word	0x00540041
   823e0:	00540054 	.word	0x00540054
   823e4:	05840054 	.word	0x05840054
   823e8:	200011d4 	.word	0x200011d4
   823ec:	00081d15 	.word	0x00081d15
   823f0:	000808ed 	.word	0x000808ed
   823f4:	000808b3 	.word	0x000808b3
   823f8:	000819d5 	.word	0x000819d5
   823fc:	00083345 	.word	0x00083345
   82400:	00082175 	.word	0x00082175
   82404:	00083581 	.word	0x00083581
   82408:	000803f1 	.word	0x000803f1
   8240c:	00088d98 	.word	0x00088d98
   82410:	00088d84 	.word	0x00088d84
   82414:	00080899 	.word	0x00080899
   82418:	400e1260 	.word	0x400e1260
   8241c:	00080d31 	.word	0x00080d31
   82420:	20001274 	.word	0x20001274
   82424:	00088cdc 	.word	0x00088cdc
   82428:	00080e21 	.word	0x00080e21
   8242c:	00088cec 	.word	0x00088cec
   82430:	00088ccc 	.word	0x00088ccc
   82434:	00083ef9 	.word	0x00083ef9
				shell.escapeTimer=SHELL_ESCAPE_TIMEOUT;
   82438:	4c88      	ldr	r4, [pc, #544]	; (8265c <Shell+0x4e8>)
   8243a:	2364      	movs	r3, #100	; 0x64
   8243c:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++='\e';
   8243e:	4b88      	ldr	r3, [pc, #544]	; (82660 <Shell+0x4ec>)
   82440:	60a3      	str	r3, [r4, #8]
   82442:	201b      	movs	r0, #27
   82444:	f803 0c01 	strb.w	r0, [r3, #-1]
				shell.nEscChar=1;
   82448:	2501      	movs	r5, #1
   8244a:	81e5      	strh	r5, [r4, #14]
				shell.crc=CRC16MODBUS('\e',0xFFFF);
   8244c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   82450:	4b84      	ldr	r3, [pc, #528]	; (82664 <Shell+0x4f0>)
   82452:	4798      	blx	r3
   82454:	8220      	strh	r0, [r4, #16]
				shell.state=ESCAPE;
   82456:	7725      	strb	r5, [r4, #28]
	return 0;
   82458:	f04f 0800 	mov.w	r8, #0
				break;
   8245c:	e6ce      	b.n	821fc <Shell+0x88>
				EnterEditMode();
   8245e:	4c7f      	ldr	r4, [pc, #508]	; (8265c <Shell+0x4e8>)
   82460:	8823      	ldrh	r3, [r4, #0]
   82462:	f043 0304 	orr.w	r3, r3, #4
   82466:	8023      	strh	r3, [r4, #0]
				shell.editTimer=SHELL_EDIT_TIMEOUT;
   82468:	2500      	movs	r5, #0
   8246a:	6165      	str	r5, [r4, #20]
				*shell.pEdit++=_kbhitchar;
   8246c:	4b7e      	ldr	r3, [pc, #504]	; (82668 <Shell+0x4f4>)
   8246e:	6063      	str	r3, [r4, #4]
			switch(_kbhitchar)
   82470:	f803 2c01 	strb.w	r2, [r3, #-1]
				shell.nChar=1;
   82474:	2301      	movs	r3, #1
   82476:	81a3      	strh	r3, [r4, #12]
				Putstr("\r\n>"); Putc(_kbhitchar);
   82478:	497c      	ldr	r1, [pc, #496]	; (8266c <Shell+0x4f8>)
   8247a:	2067      	movs	r0, #103	; 0x67
   8247c:	4e7c      	ldr	r6, [pc, #496]	; (82670 <Shell+0x4fc>)
   8247e:	47b0      	blx	r6
   82480:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   82484:	2066      	movs	r0, #102	; 0x66
   82486:	47b0      	blx	r6
				shell.state=EDITION;
   82488:	2303      	movs	r3, #3
   8248a:	7723      	strb	r3, [r4, #28]
	return 0;
   8248c:	46a8      	mov	r8, r5
				break;
   8248e:	e6b5      	b.n	821fc <Shell+0x88>
				shell.state=ESCAPE_SEQ;
   82490:	2202      	movs	r2, #2
   82492:	4b72      	ldr	r3, [pc, #456]	; (8265c <Shell+0x4e8>)
   82494:	771a      	strb	r2, [r3, #28]
				shell.escapeTimer=SHELL_ESCAPE_TIMEOUT;
   82496:	4c71      	ldr	r4, [pc, #452]	; (8265c <Shell+0x4e8>)
   82498:	2364      	movs	r3, #100	; 0x64
   8249a:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++=_kbhitchar;
   8249c:	68a3      	ldr	r3, [r4, #8]
   8249e:	1c5a      	adds	r2, r3, #1
   824a0:	60a2      	str	r2, [r4, #8]
   824a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   824a4:	701a      	strb	r2, [r3, #0]
				shell.nEscChar++;
   824a6:	89e3      	ldrh	r3, [r4, #14]
   824a8:	3301      	adds	r3, #1
   824aa:	81e3      	strh	r3, [r4, #14]
				shell.crc=CRC16MODBUS(_kbhitchar,shell.crc);
   824ac:	8a21      	ldrh	r1, [r4, #16]
   824ae:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   824b2:	4b6c      	ldr	r3, [pc, #432]	; (82664 <Shell+0x4f0>)
   824b4:	4798      	blx	r3
   824b6:	8220      	strh	r0, [r4, #16]
	return 0;
   824b8:	f04f 0800 	mov.w	r8, #0
			break;
   824bc:	e69e      	b.n	821fc <Shell+0x88>
			shell.editTimer=SHELL_EDIT_TIMEOUT;
   824be:	2200      	movs	r2, #0
   824c0:	4b66      	ldr	r3, [pc, #408]	; (8265c <Shell+0x4e8>)
   824c2:	615a      	str	r2, [r3, #20]
			switch(_kbhitchar)
   824c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   824c6:	b2d1      	uxtb	r1, r2
   824c8:	f1a1 0308 	sub.w	r3, r1, #8
   824cc:	2b13      	cmp	r3, #19
   824ce:	f200 8094 	bhi.w	825fa <Shell+0x486>
   824d2:	e8df f003 	tbb	[pc, r3]
   824d6:	1e36      	.short	0x1e36
   824d8:	74929274 	.word	0x74929274
   824dc:	92929292 	.word	0x92929292
   824e0:	92929292 	.word	0x92929292
   824e4:	92929292 	.word	0x92929292
   824e8:	0a92      	.short	0x0a92
				shell.escapeTimer=SHELL_ESCAPE_TIMEOUT;
   824ea:	4c5c      	ldr	r4, [pc, #368]	; (8265c <Shell+0x4e8>)
   824ec:	2364      	movs	r3, #100	; 0x64
   824ee:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++='\e';
   824f0:	4b5b      	ldr	r3, [pc, #364]	; (82660 <Shell+0x4ec>)
   824f2:	60a3      	str	r3, [r4, #8]
   824f4:	201b      	movs	r0, #27
   824f6:	f803 0c01 	strb.w	r0, [r3, #-1]
				shell.nEscChar=1;
   824fa:	2301      	movs	r3, #1
   824fc:	81e3      	strh	r3, [r4, #14]
				shell.crc=CRC16MODBUS('\e',0xFFFF);
   824fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   82502:	4b58      	ldr	r3, [pc, #352]	; (82664 <Shell+0x4f0>)
   82504:	4798      	blx	r3
   82506:	8220      	strh	r0, [r4, #16]
				shell.state=ED_ESCAPE;
   82508:	2304      	movs	r3, #4
   8250a:	7723      	strb	r3, [r4, #28]
	return 0;
   8250c:	f04f 0800 	mov.w	r8, #0
				break;
   82510:	e674      	b.n	821fc <Shell+0x88>
				const char ctrl_right_arrow[]="\e[1;5C";
   82512:	4b58      	ldr	r3, [pc, #352]	; (82674 <Shell+0x500>)
   82514:	e893 0003 	ldmia.w	r3, {r0, r1}
   82518:	9002      	str	r0, [sp, #8]
   8251a:	f8ad 100c 	strh.w	r1, [sp, #12]
   8251e:	0c09      	lsrs	r1, r1, #16
   82520:	f88d 100e 	strb.w	r1, [sp, #14]
				memcpy(shellEscapeBuf,ctrl_right_arrow,6);
   82524:	4b54      	ldr	r3, [pc, #336]	; (82678 <Shell+0x504>)
   82526:	6018      	str	r0, [r3, #0]
   82528:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   8252c:	809a      	strh	r2, [r3, #4]
				shell.nEscChar=6;
   8252e:	4b4b      	ldr	r3, [pc, #300]	; (8265c <Shell+0x4e8>)
   82530:	2206      	movs	r2, #6
   82532:	81da      	strh	r2, [r3, #14]
				shell.state=ED_ESCAPE_SEQ;
   82534:	2205      	movs	r2, #5
   82536:	771a      	strb	r2, [r3, #28]
				shell.escapeTimer=1;	//Ask a ESC SEQUENCE timeout : treat as a "ctrl+right_arrow" key
   82538:	2201      	movs	r2, #1
   8253a:	619a      	str	r2, [r3, #24]
	return 0;
   8253c:	f04f 0800 	mov.w	r8, #0
				break;
   82540:	e65c      	b.n	821fc <Shell+0x88>
                if(shell.nChar)
   82542:	4b46      	ldr	r3, [pc, #280]	; (8265c <Shell+0x4e8>)
   82544:	899a      	ldrh	r2, [r3, #12]
   82546:	2a00      	cmp	r2, #0
   82548:	f000 84bd 	beq.w	82ec6 <Shell+0xd52>
	                pEnd = (uint32_t)shellEditBuf+shell.nChar;
   8254c:	4c4b      	ldr	r4, [pc, #300]	; (8267c <Shell+0x508>)
   8254e:	4422      	add	r2, r4
   82550:	920e      	str	r2, [sp, #56]	; 0x38
	                pSrc = (uint32_t)shell.pEdit;
   82552:	685b      	ldr	r3, [r3, #4]
   82554:	9305      	str	r3, [sp, #20]
	                while(pSrc<pEnd)
   82556:	429a      	cmp	r2, r3
   82558:	d908      	bls.n	8256c <Shell+0x3f8>
		                *(char*)(pSrc-1)=*(char*)pSrc; pSrc++;
   8255a:	781a      	ldrb	r2, [r3, #0]
   8255c:	f803 2c01 	strb.w	r2, [r3, #-1]
   82560:	9b05      	ldr	r3, [sp, #20]
   82562:	3301      	adds	r3, #1
   82564:	9305      	str	r3, [sp, #20]
	                while(pSrc<pEnd)
   82566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82568:	429a      	cmp	r2, r3
   8256a:	d8f6      	bhi.n	8255a <Shell+0x3e6>
	                *(char*)pSrc++=' ';
   8256c:	2220      	movs	r2, #32
   8256e:	f803 2c01 	strb.w	r2, [r3, #-1]
	                Putstr("\e[D");
   82572:	4d43      	ldr	r5, [pc, #268]	; (82680 <Shell+0x50c>)
   82574:	4629      	mov	r1, r5
   82576:	2067      	movs	r0, #103	; 0x67
   82578:	4e3d      	ldr	r6, [pc, #244]	; (82670 <Shell+0x4fc>)
   8257a:	47b0      	blx	r6
	                shell.pEdit--; shell.nChar--;
   8257c:	4a37      	ldr	r2, [pc, #220]	; (8265c <Shell+0x4e8>)
   8257e:	6851      	ldr	r1, [r2, #4]
   82580:	3901      	subs	r1, #1
   82582:	6051      	str	r1, [r2, #4]
   82584:	8993      	ldrh	r3, [r2, #12]
   82586:	3b01      	subs	r3, #1
   82588:	b29b      	uxth	r3, r3
   8258a:	8193      	strh	r3, [r2, #12]
	                k=Putstrlen(shell.pEdit,shell.nChar-(shell.pEdit-shellEditBuf)+1);
   8258c:	1c62      	adds	r2, r4, #1
   8258e:	441a      	add	r2, r3
   82590:	1a52      	subs	r2, r2, r1
   82592:	2068      	movs	r0, #104	; 0x68
   82594:	47b0      	blx	r6
   82596:	4680      	mov	r8, r0
	                while(k--) Putstr("\e[D");
   82598:	1e43      	subs	r3, r0, #1
   8259a:	9305      	str	r3, [sp, #20]
   8259c:	2800      	cmp	r0, #0
   8259e:	f43f ae2d 	beq.w	821fc <Shell+0x88>
   825a2:	2667      	movs	r6, #103	; 0x67
   825a4:	4c32      	ldr	r4, [pc, #200]	; (82670 <Shell+0x4fc>)
   825a6:	4629      	mov	r1, r5
   825a8:	4630      	mov	r0, r6
   825aa:	47a0      	blx	r4
   825ac:	f8dd 8014 	ldr.w	r8, [sp, #20]
   825b0:	f108 33ff 	add.w	r3, r8, #4294967295
   825b4:	9305      	str	r3, [sp, #20]
   825b6:	f1b8 0f00 	cmp.w	r8, #0
   825ba:	d1f4      	bne.n	825a6 <Shell+0x432>
   825bc:	e61e      	b.n	821fc <Shell+0x88>
				if(shell.nChar==0)
   825be:	4b27      	ldr	r3, [pc, #156]	; (8265c <Shell+0x4e8>)
   825c0:	899b      	ldrh	r3, [r3, #12]
   825c2:	b96b      	cbnz	r3, 825e0 <Shell+0x46c>
					ExitEditMode();
   825c4:	4b25      	ldr	r3, [pc, #148]	; (8265c <Shell+0x4e8>)
   825c6:	881a      	ldrh	r2, [r3, #0]
   825c8:	f022 0204 	bic.w	r2, r2, #4
   825cc:	801a      	strh	r2, [r3, #0]
					shell.state=IDLE;
   825ce:	f04f 0800 	mov.w	r8, #0
   825d2:	f883 801c 	strb.w	r8, [r3, #28]
					Putc('\r');
   825d6:	210d      	movs	r1, #13
   825d8:	2066      	movs	r0, #102	; 0x66
   825da:	4b25      	ldr	r3, [pc, #148]	; (82670 <Shell+0x4fc>)
   825dc:	4798      	blx	r3
   825de:	e60d      	b.n	821fc <Shell+0x88>
					shell.state=EXECUTION;
   825e0:	2206      	movs	r2, #6
   825e2:	4b1e      	ldr	r3, [pc, #120]	; (8265c <Shell+0x4e8>)
   825e4:	771a      	strb	r2, [r3, #28]
					PushTask(Shell,_SHELL_KBHIT,'\r',0);
   825e6:	2400      	movs	r4, #0
   825e8:	9400      	str	r4, [sp, #0]
   825ea:	230d      	movs	r3, #13
   825ec:	2202      	movs	r2, #2
   825ee:	4925      	ldr	r1, [pc, #148]	; (82684 <Shell+0x510>)
   825f0:	2066      	movs	r0, #102	; 0x66
   825f2:	4d25      	ldr	r5, [pc, #148]	; (82688 <Shell+0x514>)
   825f4:	47a8      	blx	r5
	return 0;
   825f6:	46a0      	mov	r8, r4
   825f8:	e600      	b.n	821fc <Shell+0x88>
			switch(_kbhitchar)
   825fa:	b2d2      	uxtb	r2, r2
				if(shell.nChar==0)
   825fc:	4b17      	ldr	r3, [pc, #92]	; (8265c <Shell+0x4e8>)
   825fe:	899b      	ldrh	r3, [r3, #12]
   82600:	b983      	cbnz	r3, 82624 <Shell+0x4b0>
					if(_kbhitchar!=0x20) //Excluding space char
   82602:	2a20      	cmp	r2, #32
   82604:	f000 8463 	beq.w	82ece <Shell+0xd5a>
						Putc((*shell.pEdit++=_kbhitchar)); shell.nChar++;
   82608:	4c14      	ldr	r4, [pc, #80]	; (8265c <Shell+0x4e8>)
   8260a:	6863      	ldr	r3, [r4, #4]
   8260c:	1c58      	adds	r0, r3, #1
   8260e:	6060      	str	r0, [r4, #4]
   82610:	701a      	strb	r2, [r3, #0]
   82612:	2066      	movs	r0, #102	; 0x66
   82614:	4b16      	ldr	r3, [pc, #88]	; (82670 <Shell+0x4fc>)
   82616:	4798      	blx	r3
   82618:	89a3      	ldrh	r3, [r4, #12]
   8261a:	3301      	adds	r3, #1
   8261c:	81a3      	strh	r3, [r4, #12]
	return 0;
   8261e:	f04f 0800 	mov.w	r8, #0
   82622:	e5eb      	b.n	821fc <Shell+0x88>
				else if(shell.nChar<(SHELL_EDITBUF_LEN))
   82624:	2bff      	cmp	r3, #255	; 0xff
   82626:	f200 8456 	bhi.w	82ed6 <Shell+0xd62>
					if(mIsBitsClr(shell.status,ST_SHELL_INSERT_MODE))
   8262a:	480c      	ldr	r0, [pc, #48]	; (8265c <Shell+0x4e8>)
   8262c:	8800      	ldrh	r0, [r0, #0]
   8262e:	f010 0f01 	tst.w	r0, #1
   82632:	d12b      	bne.n	8268c <Shell+0x518>
						if(shell.pEdit==shellEditBuf+shell.nChar)	shell.nChar++;
   82634:	4809      	ldr	r0, [pc, #36]	; (8265c <Shell+0x4e8>)
   82636:	6840      	ldr	r0, [r0, #4]
   82638:	4c10      	ldr	r4, [pc, #64]	; (8267c <Shell+0x508>)
   8263a:	441c      	add	r4, r3
   8263c:	42a0      	cmp	r0, r4
   8263e:	d102      	bne.n	82646 <Shell+0x4d2>
   82640:	3301      	adds	r3, #1
   82642:	4c06      	ldr	r4, [pc, #24]	; (8265c <Shell+0x4e8>)
   82644:	81a3      	strh	r3, [r4, #12]
						Putc((*shell.pEdit++=_kbhitchar));
   82646:	1c44      	adds	r4, r0, #1
   82648:	4b04      	ldr	r3, [pc, #16]	; (8265c <Shell+0x4e8>)
   8264a:	605c      	str	r4, [r3, #4]
   8264c:	7002      	strb	r2, [r0, #0]
   8264e:	2066      	movs	r0, #102	; 0x66
   82650:	4b07      	ldr	r3, [pc, #28]	; (82670 <Shell+0x4fc>)
   82652:	4798      	blx	r3
	return 0;
   82654:	f04f 0800 	mov.w	r8, #0
   82658:	e5d0      	b.n	821fc <Shell+0x88>
   8265a:	bf00      	nop
   8265c:	200011d4 	.word	0x200011d4
   82660:	200011f5 	.word	0x200011f5
   82664:	000817e1 	.word	0x000817e1
   82668:	200010d1 	.word	0x200010d1
   8266c:	00088cfc 	.word	0x00088cfc
   82670:	00083345 	.word	0x00083345
   82674:	00088d7c 	.word	0x00088d7c
   82678:	200011f4 	.word	0x200011f4
   8267c:	200010d0 	.word	0x200010d0
   82680:	00088d00 	.word	0x00088d00
   82684:	00082175 	.word	0x00082175
   82688:	00083581 	.word	0x00083581
						if(shell.pEdit!=shellEditBuf+shell.nChar)
   8268c:	4a94      	ldr	r2, [pc, #592]	; (828e0 <Shell+0x76c>)
   8268e:	6851      	ldr	r1, [r2, #4]
   82690:	4a94      	ldr	r2, [pc, #592]	; (828e4 <Shell+0x770>)
   82692:	441a      	add	r2, r3
   82694:	4291      	cmp	r1, r2
   82696:	d00f      	beq.n	826b8 <Shell+0x544>
							pDst=(uint32_t)shellEditBuf+shell.nChar;
   82698:	4a92      	ldr	r2, [pc, #584]	; (828e4 <Shell+0x770>)
   8269a:	4413      	add	r3, r2
   8269c:	930e      	str	r3, [sp, #56]	; 0x38
							while(pDst-1>=(uint32_t)shell.pEdit)
   8269e:	1e5a      	subs	r2, r3, #1
   826a0:	4291      	cmp	r1, r2
   826a2:	d809      	bhi.n	826b8 <Shell+0x544>
   826a4:	498e      	ldr	r1, [pc, #568]	; (828e0 <Shell+0x76c>)
								*(char*)pDst=*(char*)(pDst-1); pDst--;
   826a6:	7812      	ldrb	r2, [r2, #0]
   826a8:	701a      	strb	r2, [r3, #0]
   826aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   826ac:	1e53      	subs	r3, r2, #1
   826ae:	930e      	str	r3, [sp, #56]	; 0x38
							while(pDst-1>=(uint32_t)shell.pEdit)
   826b0:	3a02      	subs	r2, #2
   826b2:	6848      	ldr	r0, [r1, #4]
   826b4:	4290      	cmp	r0, r2
   826b6:	d9f6      	bls.n	826a6 <Shell+0x532>
						Putc((*shell.pEdit++=_kbhitchar)); shell.nChar++;
   826b8:	4c89      	ldr	r4, [pc, #548]	; (828e0 <Shell+0x76c>)
   826ba:	6863      	ldr	r3, [r4, #4]
   826bc:	1c5a      	adds	r2, r3, #1
   826be:	6062      	str	r2, [r4, #4]
   826c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   826c2:	7019      	strb	r1, [r3, #0]
   826c4:	b2c9      	uxtb	r1, r1
   826c6:	2066      	movs	r0, #102	; 0x66
   826c8:	4d87      	ldr	r5, [pc, #540]	; (828e8 <Shell+0x774>)
   826ca:	47a8      	blx	r5
   826cc:	89a3      	ldrh	r3, [r4, #12]
   826ce:	3301      	adds	r3, #1
   826d0:	b29b      	uxth	r3, r3
   826d2:	81a3      	strh	r3, [r4, #12]
						k=Putstrlen(shell.pEdit,(shellEditBuf+shell.nChar-shell.pEdit));
   826d4:	6861      	ldr	r1, [r4, #4]
   826d6:	4a83      	ldr	r2, [pc, #524]	; (828e4 <Shell+0x770>)
   826d8:	441a      	add	r2, r3
   826da:	1a52      	subs	r2, r2, r1
   826dc:	2068      	movs	r0, #104	; 0x68
   826de:	47a8      	blx	r5
   826e0:	4680      	mov	r8, r0
						while(k--) Putstr("\e[D");
   826e2:	1e43      	subs	r3, r0, #1
   826e4:	930e      	str	r3, [sp, #56]	; 0x38
   826e6:	2800      	cmp	r0, #0
   826e8:	f43f ad88 	beq.w	821fc <Shell+0x88>
   826ec:	4e7f      	ldr	r6, [pc, #508]	; (828ec <Shell+0x778>)
   826ee:	2567      	movs	r5, #103	; 0x67
   826f0:	4c7d      	ldr	r4, [pc, #500]	; (828e8 <Shell+0x774>)
   826f2:	4631      	mov	r1, r6
   826f4:	4628      	mov	r0, r5
   826f6:	47a0      	blx	r4
   826f8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   826fc:	f108 33ff 	add.w	r3, r8, #4294967295
   82700:	930e      	str	r3, [sp, #56]	; 0x38
   82702:	f1b8 0f00 	cmp.w	r8, #0
   82706:	d1f4      	bne.n	826f2 <Shell+0x57e>
   82708:	e578      	b.n	821fc <Shell+0x88>
			k=shell.nChar-(shell.pEdit-shellEditBuf);
   8270a:	4a75      	ldr	r2, [pc, #468]	; (828e0 <Shell+0x76c>)
   8270c:	8993      	ldrh	r3, [r2, #12]
   8270e:	6852      	ldr	r2, [r2, #4]
   82710:	4974      	ldr	r1, [pc, #464]	; (828e4 <Shell+0x770>)
   82712:	1a52      	subs	r2, r2, r1
   82714:	1a9b      	subs	r3, r3, r2
			while(k--) Putstr("\e[C");
   82716:	1e5a      	subs	r2, r3, #1
   82718:	9205      	str	r2, [sp, #20]
   8271a:	b153      	cbz	r3, 82732 <Shell+0x5be>
   8271c:	4e74      	ldr	r6, [pc, #464]	; (828f0 <Shell+0x77c>)
   8271e:	2567      	movs	r5, #103	; 0x67
   82720:	4c71      	ldr	r4, [pc, #452]	; (828e8 <Shell+0x774>)
   82722:	4631      	mov	r1, r6
   82724:	4628      	mov	r0, r5
   82726:	47a0      	blx	r4
   82728:	9b05      	ldr	r3, [sp, #20]
   8272a:	1e5a      	subs	r2, r3, #1
   8272c:	9205      	str	r2, [sp, #20]
   8272e:	2b00      	cmp	r3, #0
   82730:	d1f7      	bne.n	82722 <Shell+0x5ae>
			shell.pEdit=shellEditBuf+shell.nChar;
   82732:	4d6b      	ldr	r5, [pc, #428]	; (828e0 <Shell+0x76c>)
   82734:	89aa      	ldrh	r2, [r5, #12]
   82736:	4c6b      	ldr	r4, [pc, #428]	; (828e4 <Shell+0x770>)
   82738:	1913      	adds	r3, r2, r4
			*shell.pEdit++='\0';
   8273a:	3301      	adds	r3, #1
   8273c:	606b      	str	r3, [r5, #4]
   8273e:	2600      	movs	r6, #0
   82740:	5516      	strb	r6, [r2, r4]
			_CleanUp_cmd_Line();
   82742:	2007      	movs	r0, #7
   82744:	f7ff fd16 	bl	82174 <Shell>
			shell.pEdit=shellEditBuf+shell.nChar;
   82748:	89aa      	ldrh	r2, [r5, #12]
   8274a:	1913      	adds	r3, r2, r4
			*shell.pEdit++='\0';
   8274c:	3301      	adds	r3, #1
   8274e:	606b      	str	r3, [r5, #4]
   82750:	5516      	strb	r6, [r2, r4]
			Putstr("\r\n/>");
   82752:	4968      	ldr	r1, [pc, #416]	; (828f4 <Shell+0x780>)
   82754:	2067      	movs	r0, #103	; 0x67
   82756:	4d64      	ldr	r5, [pc, #400]	; (828e8 <Shell+0x774>)
   82758:	47a8      	blx	r5
			Putstr(shellEditBuf);
   8275a:	4621      	mov	r1, r4
   8275c:	2067      	movs	r0, #103	; 0x67
   8275e:	47a8      	blx	r5
			mstrtokReset();
   82760:	4b65      	ldr	r3, [pc, #404]	; (828f8 <Shell+0x784>)
   82762:	4798      	blx	r3
			pToken=mstrtok(shellEditBuf,(char*)" \r\n");
   82764:	4965      	ldr	r1, [pc, #404]	; (828fc <Shell+0x788>)
   82766:	4620      	mov	r0, r4
   82768:	4b65      	ldr	r3, [pc, #404]	; (82900 <Shell+0x78c>)
   8276a:	4798      	blx	r3
   8276c:	4604      	mov	r4, r0
   8276e:	900e      	str	r0, [sp, #56]	; 0x38
			if(pToken)
   82770:	b968      	cbnz	r0, 8278e <Shell+0x61a>
			Putstr("\r\n");
   82772:	4964      	ldr	r1, [pc, #400]	; (82904 <Shell+0x790>)
   82774:	2067      	movs	r0, #103	; 0x67
   82776:	4b5c      	ldr	r3, [pc, #368]	; (828e8 <Shell+0x774>)
   82778:	4798      	blx	r3
			shell.state=IDLE;
   8277a:	4b59      	ldr	r3, [pc, #356]	; (828e0 <Shell+0x76c>)
   8277c:	f04f 0800 	mov.w	r8, #0
   82780:	f883 801c 	strb.w	r8, [r3, #28]
			ExitEditMode();
   82784:	881a      	ldrh	r2, [r3, #0]
   82786:	f022 0204 	bic.w	r2, r2, #4
   8278a:	801a      	strh	r2, [r3, #0]
			break;
   8278c:	e536      	b.n	821fc <Shell+0x88>
				shell.crc=CRC16MODBUSFRAME((unsigned char*)pToken,strlen((char*)pToken));
   8278e:	4b5e      	ldr	r3, [pc, #376]	; (82908 <Shell+0x794>)
   82790:	4798      	blx	r3
   82792:	4601      	mov	r1, r0
   82794:	4620      	mov	r0, r4
   82796:	4b5d      	ldr	r3, [pc, #372]	; (8290c <Shell+0x798>)
   82798:	4798      	blx	r3
   8279a:	b281      	uxth	r1, r0
   8279c:	4b50      	ldr	r3, [pc, #320]	; (828e0 <Shell+0x76c>)
   8279e:	8219      	strh	r1, [r3, #16]
				k=0;
   827a0:	9605      	str	r6, [sp, #20]
				while((commands[k].cmdCode)&&(commands[k].cmdCode!=shell.crc)) k++;
   827a2:	4b5b      	ldr	r3, [pc, #364]	; (82910 <Shell+0x79c>)
   827a4:	881b      	ldrh	r3, [r3, #0]
   827a6:	b1f3      	cbz	r3, 827e6 <Shell+0x672>
   827a8:	4299      	cmp	r1, r3
   827aa:	d01e      	beq.n	827ea <Shell+0x676>
   827ac:	2301      	movs	r3, #1
   827ae:	4a58      	ldr	r2, [pc, #352]	; (82910 <Shell+0x79c>)
   827b0:	e000      	b.n	827b4 <Shell+0x640>
   827b2:	462b      	mov	r3, r5
   827b4:	f832 4033 	ldrh.w	r4, [r2, r3, lsl #3]
   827b8:	b124      	cbz	r4, 827c4 <Shell+0x650>
   827ba:	1c5d      	adds	r5, r3, #1
   827bc:	42a1      	cmp	r1, r4
   827be:	d1f8      	bne.n	827b2 <Shell+0x63e>
   827c0:	9305      	str	r3, [sp, #20]
   827c2:	e000      	b.n	827c6 <Shell+0x652>
   827c4:	9305      	str	r3, [sp, #20]
				if(commands[k].pCmdFunc)
   827c6:	4c52      	ldr	r4, [pc, #328]	; (82910 <Shell+0x79c>)
   827c8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   827cc:	685d      	ldr	r5, [r3, #4]
   827ce:	b175      	cbz	r5, 827ee <Shell+0x67a>
					commands[k].pCmdFunc((uint32_t)&shell,(void*)(pToken+strlen((char*)pToken)+1));
   827d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   827d2:	4620      	mov	r0, r4
   827d4:	4b4c      	ldr	r3, [pc, #304]	; (82908 <Shell+0x794>)
   827d6:	4798      	blx	r3
   827d8:	1c61      	adds	r1, r4, #1
   827da:	4401      	add	r1, r0
   827dc:	4840      	ldr	r0, [pc, #256]	; (828e0 <Shell+0x76c>)
   827de:	47a8      	blx	r5
					mstrtokRestore();
   827e0:	4b4c      	ldr	r3, [pc, #304]	; (82914 <Shell+0x7a0>)
   827e2:	4798      	blx	r3
   827e4:	e7c5      	b.n	82772 <Shell+0x5fe>
				while((commands[k].cmdCode)&&(commands[k].cmdCode!=shell.crc)) k++;
   827e6:	2300      	movs	r3, #0
   827e8:	e7ed      	b.n	827c6 <Shell+0x652>
   827ea:	2300      	movs	r3, #0
   827ec:	e7eb      	b.n	827c6 <Shell+0x652>
					k=0;
   827ee:	2300      	movs	r3, #0
   827f0:	9305      	str	r3, [sp, #20]
                    while((cmdEntries[k].cmdCode)&&(cmdEntries[k].cmdCode!=shell.crc)) k++;
   827f2:	4b49      	ldr	r3, [pc, #292]	; (82918 <Shell+0x7a4>)
   827f4:	881b      	ldrh	r3, [r3, #0]
   827f6:	b313      	cbz	r3, 8283e <Shell+0x6ca>
   827f8:	4299      	cmp	r1, r3
   827fa:	d022      	beq.n	82842 <Shell+0x6ce>
   827fc:	2301      	movs	r3, #1
   827fe:	4c46      	ldr	r4, [pc, #280]	; (82918 <Shell+0x7a4>)
   82800:	e000      	b.n	82804 <Shell+0x690>
   82802:	462b      	mov	r3, r5
   82804:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
   82808:	b122      	cbz	r2, 82814 <Shell+0x6a0>
   8280a:	1c5d      	adds	r5, r3, #1
   8280c:	4291      	cmp	r1, r2
   8280e:	d1f8      	bne.n	82802 <Shell+0x68e>
   82810:	9305      	str	r3, [sp, #20]
   82812:	e000      	b.n	82816 <Shell+0x6a2>
   82814:	9305      	str	r3, [sp, #20]
                    if(cmdEntries[k].pCmdFunc)
   82816:	4940      	ldr	r1, [pc, #256]	; (82918 <Shell+0x7a4>)
   82818:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   8281c:	685d      	ldr	r5, [r3, #4]
   8281e:	b195      	cbz	r5, 82846 <Shell+0x6d2>
	                    cmdEntries[k].pCmdFunc((uint32_t)&shell,(void*)(pToken+strlen((char*)pToken)+1));
   82820:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   82822:	4620      	mov	r0, r4
   82824:	4b38      	ldr	r3, [pc, #224]	; (82908 <Shell+0x794>)
   82826:	4798      	blx	r3
   82828:	1c61      	adds	r1, r4, #1
   8282a:	4401      	add	r1, r0
   8282c:	482c      	ldr	r0, [pc, #176]	; (828e0 <Shell+0x76c>)
   8282e:	47a8      	blx	r5
						mstrtokRestore();
   82830:	4b38      	ldr	r3, [pc, #224]	; (82914 <Shell+0x7a0>)
   82832:	4798      	blx	r3
						Putstr("\r\n");
   82834:	4933      	ldr	r1, [pc, #204]	; (82904 <Shell+0x790>)
   82836:	2067      	movs	r0, #103	; 0x67
   82838:	4b2b      	ldr	r3, [pc, #172]	; (828e8 <Shell+0x774>)
   8283a:	4798      	blx	r3
   8283c:	e799      	b.n	82772 <Shell+0x5fe>
                    while((cmdEntries[k].cmdCode)&&(cmdEntries[k].cmdCode!=shell.crc)) k++;
   8283e:	2300      	movs	r3, #0
   82840:	e7e9      	b.n	82816 <Shell+0x6a2>
   82842:	2300      	movs	r3, #0
   82844:	e7e7      	b.n	82816 <Shell+0x6a2>
                    else if(mIsBitsSet(shell.status,ST_SHELL_SHOW_UNKNOW_CRC))
   82846:	4b26      	ldr	r3, [pc, #152]	; (828e0 <Shell+0x76c>)
   82848:	881b      	ldrh	r3, [r3, #0]
   8284a:	f013 0f02 	tst.w	r3, #2
   8284e:	d090      	beq.n	82772 <Shell+0x5fe>
	                    sprintf(shellTmpBuf,"\tunknown cmd: %04X\r\n",shell.crc);
   82850:	4c32      	ldr	r4, [pc, #200]	; (8291c <Shell+0x7a8>)
   82852:	b282      	uxth	r2, r0
   82854:	4932      	ldr	r1, [pc, #200]	; (82920 <Shell+0x7ac>)
   82856:	4620      	mov	r0, r4
   82858:	4b32      	ldr	r3, [pc, #200]	; (82924 <Shell+0x7b0>)
   8285a:	4798      	blx	r3
	                    Putstr(shellTmpBuf);
   8285c:	4621      	mov	r1, r4
   8285e:	2067      	movs	r0, #103	; 0x67
   82860:	4b21      	ldr	r3, [pc, #132]	; (828e8 <Shell+0x774>)
   82862:	4798      	blx	r3
						mstrtokRestore();
   82864:	4b2b      	ldr	r3, [pc, #172]	; (82914 <Shell+0x7a0>)
   82866:	4798      	blx	r3
   82868:	e783      	b.n	82772 <Shell+0x5fe>
			shell.state=ED_ESCAPE_SEQ;
   8286a:	2205      	movs	r2, #5
   8286c:	4b1c      	ldr	r3, [pc, #112]	; (828e0 <Shell+0x76c>)
   8286e:	771a      	strb	r2, [r3, #28]
			shell.escapeTimer=SHELL_ESCAPE_TIMEOUT;
   82870:	4c1b      	ldr	r4, [pc, #108]	; (828e0 <Shell+0x76c>)
   82872:	2364      	movs	r3, #100	; 0x64
   82874:	61a3      	str	r3, [r4, #24]
			*shell.pEscbuf++=_kbhitchar;
   82876:	68a3      	ldr	r3, [r4, #8]
   82878:	1c5a      	adds	r2, r3, #1
   8287a:	60a2      	str	r2, [r4, #8]
   8287c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8287e:	701a      	strb	r2, [r3, #0]
			shell.nEscChar++;
   82880:	89e3      	ldrh	r3, [r4, #14]
   82882:	3301      	adds	r3, #1
   82884:	81e3      	strh	r3, [r4, #14]
			shell.crc=CRC16MODBUS(_kbhitchar,shell.crc);
   82886:	8a21      	ldrh	r1, [r4, #16]
   82888:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   8288c:	4b26      	ldr	r3, [pc, #152]	; (82928 <Shell+0x7b4>)
   8288e:	4798      	blx	r3
   82890:	8220      	strh	r0, [r4, #16]
	return 0;
   82892:	f04f 0800 	mov.w	r8, #0
			break;
   82896:	e4b1      	b.n	821fc <Shell+0x88>
			Putstr("\r\n\t***** case _SHELL_KBHIT: BAD case! ******\r\n");
   82898:	4924      	ldr	r1, [pc, #144]	; (8292c <Shell+0x7b8>)
   8289a:	2067      	movs	r0, #103	; 0x67
   8289c:	4b12      	ldr	r3, [pc, #72]	; (828e8 <Shell+0x774>)
   8289e:	4798      	blx	r3
			shell.state=IDLE;
   828a0:	4b0f      	ldr	r3, [pc, #60]	; (828e0 <Shell+0x76c>)
   828a2:	f04f 0800 	mov.w	r8, #0
   828a6:	f883 801c 	strb.w	r8, [r3, #28]
			ExitEditMode();
   828aa:	881a      	ldrh	r2, [r3, #0]
   828ac:	f022 0204 	bic.w	r2, r2, #4
   828b0:	801a      	strh	r2, [r3, #0]
			break;
   828b2:	e4a3      	b.n	821fc <Shell+0x88>
					shell.state=IDLE;
   828b4:	2200      	movs	r2, #0
   828b6:	4b0a      	ldr	r3, [pc, #40]	; (828e0 <Shell+0x76c>)
   828b8:	771a      	strb	r2, [r3, #28]
        if(shell.editTimer)
   828ba:	4b09      	ldr	r3, [pc, #36]	; (828e0 <Shell+0x76c>)
   828bc:	f8d3 8014 	ldr.w	r8, [r3, #20]
   828c0:	f1b8 0f00 	cmp.w	r8, #0
   828c4:	f43f ac9a 	beq.w	821fc <Shell+0x88>
	        if(--shell.editTimer==0)
   828c8:	f108 38ff 	add.w	r8, r8, #4294967295
   828cc:	f8c3 8014 	str.w	r8, [r3, #20]
   828d0:	f1b8 0f00 	cmp.w	r8, #0
   828d4:	f000 824d 	beq.w	82d72 <Shell+0xbfe>
	return 0;
   828d8:	f04f 0800 	mov.w	r8, #0
   828dc:	e48e      	b.n	821fc <Shell+0x88>
   828de:	bf00      	nop
   828e0:	200011d4 	.word	0x200011d4
   828e4:	200010d0 	.word	0x200010d0
   828e8:	00083345 	.word	0x00083345
   828ec:	00088d00 	.word	0x00088d00
   828f0:	00088d04 	.word	0x00088d04
   828f4:	00088d08 	.word	0x00088d08
   828f8:	000837e1 	.word	0x000837e1
   828fc:	00088bf8 	.word	0x00088bf8
   82900:	0008380d 	.word	0x0008380d
   82904:	00088d54 	.word	0x00088d54
   82908:	00083f45 	.word	0x00083f45
   8290c:	000817ad 	.word	0x000817ad
   82910:	00088b9c 	.word	0x00088b9c
   82914:	000837c9 	.word	0x000837c9
   82918:	000890a4 	.word	0x000890a4
   8291c:	20001274 	.word	0x20001274
   82920:	00088d10 	.word	0x00088d10
   82924:	00083ef9 	.word	0x00083ef9
   82928:	000817e1 	.word	0x000817e1
   8292c:	00088d28 	.word	0x00088d28
					shell.crc=CRC16MODBUSFRAME((unsigned char*)shellEscapeBuf,shell.nEscChar);
   82930:	4c8b      	ldr	r4, [pc, #556]	; (82b60 <Shell+0x9ec>)
   82932:	89e1      	ldrh	r1, [r4, #14]
   82934:	488b      	ldr	r0, [pc, #556]	; (82b64 <Shell+0x9f0>)
   82936:	4b8c      	ldr	r3, [pc, #560]	; (82b68 <Shell+0x9f4>)
   82938:	4798      	blx	r3
   8293a:	b280      	uxth	r0, r0
   8293c:	8220      	strh	r0, [r4, #16]
					switch(shell.crc)
   8293e:	f24c 73f5 	movw	r3, #51189	; 0xc7f5
   82942:	4298      	cmp	r0, r3
   82944:	d00c      	beq.n	82960 <Shell+0x7ec>
   82946:	f24c 73fa 	movw	r3, #51194	; 0xc7fa
   8294a:	4298      	cmp	r0, r3
   8294c:	d00c      	beq.n	82968 <Shell+0x7f4>
						if(mIsBitsSet(shell.status,ST_SHELL_SHOW_UNKNOW_CRC))
   8294e:	4b84      	ldr	r3, [pc, #528]	; (82b60 <Shell+0x9ec>)
   82950:	881b      	ldrh	r3, [r3, #0]
   82952:	f013 0f02 	tst.w	r3, #2
   82956:	d123      	bne.n	829a0 <Shell+0x82c>
						shell.state=IDLE;
   82958:	2200      	movs	r2, #0
   8295a:	4b81      	ldr	r3, [pc, #516]	; (82b60 <Shell+0x9ec>)
   8295c:	771a      	strb	r2, [r3, #28]
						break;
   8295e:	e7ac      	b.n	828ba <Shell+0x746>
						shell.state=IDLE;
   82960:	2200      	movs	r2, #0
   82962:	4b7f      	ldr	r3, [pc, #508]	; (82b60 <Shell+0x9ec>)
   82964:	771a      	strb	r2, [r3, #28]
						break;
   82966:	e7a8      	b.n	828ba <Shell+0x746>
						if(shell.nChar)
   82968:	4b7d      	ldr	r3, [pc, #500]	; (82b60 <Shell+0x9ec>)
   8296a:	899b      	ldrh	r3, [r3, #12]
   8296c:	b91b      	cbnz	r3, 82976 <Shell+0x802>
							shell.state=IDLE;
   8296e:	2200      	movs	r2, #0
   82970:	4b7b      	ldr	r3, [pc, #492]	; (82b60 <Shell+0x9ec>)
   82972:	771a      	strb	r2, [r3, #28]
   82974:	e7a1      	b.n	828ba <Shell+0x746>
							EnterEditMode();
   82976:	4c7a      	ldr	r4, [pc, #488]	; (82b60 <Shell+0x9ec>)
   82978:	8822      	ldrh	r2, [r4, #0]
   8297a:	f042 0204 	orr.w	r2, r2, #4
   8297e:	8022      	strh	r2, [r4, #0]
							shell.editTimer=SHELL_EDIT_TIMEOUT;
   82980:	2200      	movs	r2, #0
   82982:	6162      	str	r2, [r4, #20]
							shell.pEdit=shellEditBuf+shell.nChar;
   82984:	4e79      	ldr	r6, [pc, #484]	; (82b6c <Shell+0x9f8>)
   82986:	4433      	add	r3, r6
   82988:	6063      	str	r3, [r4, #4]
							Putstr("\r\n>");
   8298a:	4979      	ldr	r1, [pc, #484]	; (82b70 <Shell+0x9fc>)
   8298c:	2067      	movs	r0, #103	; 0x67
   8298e:	4d79      	ldr	r5, [pc, #484]	; (82b74 <Shell+0xa00>)
   82990:	47a8      	blx	r5
							Putstrlen(shellEditBuf,shell.nChar);
   82992:	89a2      	ldrh	r2, [r4, #12]
   82994:	4631      	mov	r1, r6
   82996:	2068      	movs	r0, #104	; 0x68
   82998:	47a8      	blx	r5
							shell.state=EDITION;
   8299a:	2303      	movs	r3, #3
   8299c:	7723      	strb	r3, [r4, #28]
   8299e:	e78c      	b.n	828ba <Shell+0x746>
							Putstr("\r\n   ESC_SEQ: ");
   829a0:	4975      	ldr	r1, [pc, #468]	; (82b78 <Shell+0xa04>)
   829a2:	2067      	movs	r0, #103	; 0x67
   829a4:	4c73      	ldr	r4, [pc, #460]	; (82b74 <Shell+0xa00>)
   829a6:	47a0      	blx	r4
							_PutAscii2Hex(shellEscapeBuf,shell.nEscChar);
   829a8:	4e6d      	ldr	r6, [pc, #436]	; (82b60 <Shell+0x9ec>)
   829aa:	89f2      	ldrh	r2, [r6, #14]
   829ac:	496d      	ldr	r1, [pc, #436]	; (82b64 <Shell+0x9f0>)
   829ae:	2005      	movs	r0, #5
   829b0:	f7ff fbe0 	bl	82174 <Shell>
							sprintf(shellTmpBuf," <%04X>\r\n",shell.crc);
   829b4:	4d71      	ldr	r5, [pc, #452]	; (82b7c <Shell+0xa08>)
   829b6:	8a32      	ldrh	r2, [r6, #16]
   829b8:	4971      	ldr	r1, [pc, #452]	; (82b80 <Shell+0xa0c>)
   829ba:	4628      	mov	r0, r5
   829bc:	4b71      	ldr	r3, [pc, #452]	; (82b84 <Shell+0xa10>)
   829be:	4798      	blx	r3
							Putstr(shellTmpBuf);
   829c0:	4629      	mov	r1, r5
   829c2:	2067      	movs	r0, #103	; 0x67
   829c4:	47a0      	blx	r4
   829c6:	e7c7      	b.n	82958 <Shell+0x7e4>
					Putstr("\e[2K\r");
   829c8:	496f      	ldr	r1, [pc, #444]	; (82b88 <Shell+0xa14>)
   829ca:	2067      	movs	r0, #103	; 0x67
   829cc:	4b69      	ldr	r3, [pc, #420]	; (82b74 <Shell+0xa00>)
   829ce:	4798      	blx	r3
					shell.state=IDLE;
   829d0:	4b63      	ldr	r3, [pc, #396]	; (82b60 <Shell+0x9ec>)
   829d2:	2200      	movs	r2, #0
   829d4:	771a      	strb	r2, [r3, #28]
					ExitEditMode();
   829d6:	881a      	ldrh	r2, [r3, #0]
   829d8:	f022 0204 	bic.w	r2, r2, #4
   829dc:	801a      	strh	r2, [r3, #0]
					break;
   829de:	e76c      	b.n	828ba <Shell+0x746>
					shell.crc=CRC16MODBUSFRAME((unsigned char*)shellEscapeBuf,shell.nEscChar);
   829e0:	4c5f      	ldr	r4, [pc, #380]	; (82b60 <Shell+0x9ec>)
   829e2:	89e1      	ldrh	r1, [r4, #14]
   829e4:	485f      	ldr	r0, [pc, #380]	; (82b64 <Shell+0x9f0>)
   829e6:	4b60      	ldr	r3, [pc, #384]	; (82b68 <Shell+0x9f4>)
   829e8:	4798      	blx	r3
   829ea:	b280      	uxth	r0, r0
   829ec:	8220      	strh	r0, [r4, #16]
					switch(shell.crc)
   829ee:	f24c 133a 	movw	r3, #49466	; 0xc13a
   829f2:	4298      	cmp	r0, r3
   829f4:	f000 8111 	beq.w	82c1a <Shell+0xaa6>
   829f8:	d834      	bhi.n	82a64 <Shell+0x8f0>
   829fa:	f245 33e2 	movw	r3, #21474	; 0x53e2
   829fe:	4298      	cmp	r0, r3
   82a00:	f000 8100 	beq.w	82c04 <Shell+0xa90>
   82a04:	d81e      	bhi.n	82a44 <Shell+0x8d0>
   82a06:	f240 53bb 	movw	r3, #1467	; 0x5bb
   82a0a:	4298      	cmp	r0, r3
   82a0c:	f000 8120 	beq.w	82c50 <Shell+0xadc>
   82a10:	f240 637b 	movw	r3, #1659	; 0x67b
   82a14:	4298      	cmp	r0, r3
   82a16:	d11e      	bne.n	82a56 <Shell+0x8e2>
						if(shell.pEdit<(shellEditBuf+shell.nChar))
   82a18:	4a51      	ldr	r2, [pc, #324]	; (82b60 <Shell+0x9ec>)
   82a1a:	8993      	ldrh	r3, [r2, #12]
   82a1c:	4953      	ldr	r1, [pc, #332]	; (82b6c <Shell+0x9f8>)
   82a1e:	440b      	add	r3, r1
   82a20:	6852      	ldr	r2, [r2, #4]
   82a22:	429a      	cmp	r2, r3
   82a24:	d207      	bcs.n	82a36 <Shell+0x8c2>
							Putstr("\e[C");
   82a26:	4959      	ldr	r1, [pc, #356]	; (82b8c <Shell+0xa18>)
   82a28:	2067      	movs	r0, #103	; 0x67
   82a2a:	4b52      	ldr	r3, [pc, #328]	; (82b74 <Shell+0xa00>)
   82a2c:	4798      	blx	r3
							shell.pEdit++;
   82a2e:	4a4c      	ldr	r2, [pc, #304]	; (82b60 <Shell+0x9ec>)
   82a30:	6853      	ldr	r3, [r2, #4]
   82a32:	3301      	adds	r3, #1
   82a34:	6053      	str	r3, [r2, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82a36:	4b4a      	ldr	r3, [pc, #296]	; (82b60 <Shell+0x9ec>)
   82a38:	2200      	movs	r2, #0
   82a3a:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82a3c:	2203      	movs	r2, #3
   82a3e:	771a      	strb	r2, [r3, #28]
						break;
   82a40:	f7ff bbdc 	b.w	821fc <Shell+0x88>
					switch(shell.crc)
   82a44:	f646 730e 	movw	r3, #28430	; 0x6f0e
   82a48:	4298      	cmp	r0, r3
   82a4a:	d035      	beq.n	82ab8 <Shell+0x944>
   82a4c:	f64a 534f 	movw	r3, #44367	; 0xad4f
   82a50:	4298      	cmp	r0, r3
   82a52:	f000 814c 	beq.w	82cee <Shell+0xb7a>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82a56:	4b42      	ldr	r3, [pc, #264]	; (82b60 <Shell+0x9ec>)
   82a58:	2200      	movs	r2, #0
   82a5a:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82a5c:	2203      	movs	r2, #3
   82a5e:	771a      	strb	r2, [r3, #28]
						break;
   82a60:	f7ff bbcc 	b.w	821fc <Shell+0x88>
					switch(shell.crc)
   82a64:	f24c 63ba 	movw	r3, #50874	; 0xc6ba
   82a68:	4298      	cmp	r0, r3
   82a6a:	d065      	beq.n	82b38 <Shell+0x9c4>
   82a6c:	d81c      	bhi.n	82aa8 <Shell+0x934>
   82a6e:	f24c 33e3 	movw	r3, #50147	; 0xc3e3
   82a72:	4298      	cmp	r0, r3
   82a74:	f000 8090 	beq.w	82b98 <Shell+0xa24>
   82a78:	f24c 433a 	movw	r3, #50234	; 0xc43a
   82a7c:	4298      	cmp	r0, r3
   82a7e:	d1ea      	bne.n	82a56 <Shell+0x8e2>
						if(shell.pEdit>shellEditBuf)
   82a80:	4b37      	ldr	r3, [pc, #220]	; (82b60 <Shell+0x9ec>)
   82a82:	685a      	ldr	r2, [r3, #4]
   82a84:	4b39      	ldr	r3, [pc, #228]	; (82b6c <Shell+0x9f8>)
   82a86:	429a      	cmp	r2, r3
   82a88:	d907      	bls.n	82a9a <Shell+0x926>
							Putstr("\e[D");
   82a8a:	4941      	ldr	r1, [pc, #260]	; (82b90 <Shell+0xa1c>)
   82a8c:	2067      	movs	r0, #103	; 0x67
   82a8e:	4b39      	ldr	r3, [pc, #228]	; (82b74 <Shell+0xa00>)
   82a90:	4798      	blx	r3
							shell.pEdit--;
   82a92:	4a33      	ldr	r2, [pc, #204]	; (82b60 <Shell+0x9ec>)
   82a94:	6853      	ldr	r3, [r2, #4]
   82a96:	3b01      	subs	r3, #1
   82a98:	6053      	str	r3, [r2, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82a9a:	4b31      	ldr	r3, [pc, #196]	; (82b60 <Shell+0x9ec>)
   82a9c:	2200      	movs	r2, #0
   82a9e:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82aa0:	2203      	movs	r2, #3
   82aa2:	771a      	strb	r2, [r3, #28]
						break;
   82aa4:	f7ff bbaa 	b.w	821fc <Shell+0x88>
					switch(shell.crc)
   82aa8:	f24c 73f5 	movw	r3, #51189	; 0xc7f5
   82aac:	4298      	cmp	r0, r3
   82aae:	d04f      	beq.n	82b50 <Shell+0x9dc>
   82ab0:	f64c 43ba 	movw	r3, #52410	; 0xccba
   82ab4:	4298      	cmp	r0, r3
   82ab6:	d1ce      	bne.n	82a56 <Shell+0x8e2>
						if((shell.nChar&&(shell.pEdit==shellEditBuf+shell.nChar)) ||
   82ab8:	4b29      	ldr	r3, [pc, #164]	; (82b60 <Shell+0x9ec>)
   82aba:	899b      	ldrh	r3, [r3, #12]
   82abc:	b12b      	cbz	r3, 82aca <Shell+0x956>
   82abe:	4a2b      	ldr	r2, [pc, #172]	; (82b6c <Shell+0x9f8>)
   82ac0:	4413      	add	r3, r2
   82ac2:	4a27      	ldr	r2, [pc, #156]	; (82b60 <Shell+0x9ec>)
   82ac4:	6852      	ldr	r2, [r2, #4]
   82ac6:	429a      	cmp	r2, r3
   82ac8:	d015      	beq.n	82af6 <Shell+0x982>
						(((shell.pEdit-1)>=shellEditBuf)&&(_IsSeparator(*(shell.pEdit-1),separators))&&(!_IsSeparator(*shell.pEdit,separators))))
   82aca:	4b25      	ldr	r3, [pc, #148]	; (82b60 <Shell+0x9ec>)
   82acc:	685b      	ldr	r3, [r3, #4]
   82ace:	1e59      	subs	r1, r3, #1
						if((shell.nChar&&(shell.pEdit==shellEditBuf+shell.nChar)) ||
   82ad0:	4a26      	ldr	r2, [pc, #152]	; (82b6c <Shell+0x9f8>)
   82ad2:	4291      	cmp	r1, r2
   82ad4:	d317      	bcc.n	82b06 <Shell+0x992>
						(((shell.pEdit-1)>=shellEditBuf)&&(_IsSeparator(*(shell.pEdit-1),separators))&&(!_IsSeparator(*shell.pEdit,separators))))
   82ad6:	4c2f      	ldr	r4, [pc, #188]	; (82b94 <Shell+0xa20>)
   82ad8:	4622      	mov	r2, r4
   82ada:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   82ade:	2006      	movs	r0, #6
   82ae0:	f7ff fb48 	bl	82174 <Shell>
   82ae4:	b178      	cbz	r0, 82b06 <Shell+0x992>
   82ae6:	4b1e      	ldr	r3, [pc, #120]	; (82b60 <Shell+0x9ec>)
   82ae8:	685b      	ldr	r3, [r3, #4]
   82aea:	4622      	mov	r2, r4
   82aec:	7819      	ldrb	r1, [r3, #0]
   82aee:	2006      	movs	r0, #6
   82af0:	f7ff fb40 	bl	82174 <Shell>
   82af4:	b938      	cbnz	r0, 82b06 <Shell+0x992>
							shell.pEdit--; Putstr("\e[D");
   82af6:	4a1a      	ldr	r2, [pc, #104]	; (82b60 <Shell+0x9ec>)
   82af8:	6853      	ldr	r3, [r2, #4]
   82afa:	3b01      	subs	r3, #1
   82afc:	6053      	str	r3, [r2, #4]
   82afe:	4924      	ldr	r1, [pc, #144]	; (82b90 <Shell+0xa1c>)
   82b00:	2067      	movs	r0, #103	; 0x67
   82b02:	4b1c      	ldr	r3, [pc, #112]	; (82b74 <Shell+0xa00>)
   82b04:	4798      	blx	r3
						if(_IsSeparator(*shell.pEdit,separators))
   82b06:	4d23      	ldr	r5, [pc, #140]	; (82b94 <Shell+0xa20>)
   82b08:	4b15      	ldr	r3, [pc, #84]	; (82b60 <Shell+0x9ec>)
   82b0a:	685b      	ldr	r3, [r3, #4]
   82b0c:	462a      	mov	r2, r5
   82b0e:	7819      	ldrb	r1, [r3, #0]
   82b10:	2006      	movs	r0, #6
   82b12:	f7ff fb2f 	bl	82174 <Shell>
   82b16:	2800      	cmp	r0, #0
   82b18:	f040 80cc 	bne.w	82cb4 <Shell+0xb40>
						while(((shell.pEdit-1)>=shellEditBuf)&&(!_IsSeparator(*(shell.pEdit-1),separators)))
   82b1c:	4b10      	ldr	r3, [pc, #64]	; (82b60 <Shell+0x9ec>)
   82b1e:	685b      	ldr	r3, [r3, #4]
   82b20:	1e59      	subs	r1, r3, #1
   82b22:	4a12      	ldr	r2, [pc, #72]	; (82b6c <Shell+0x9f8>)
   82b24:	4291      	cmp	r1, r2
   82b26:	f080 80de 	bcs.w	82ce6 <Shell+0xb72>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82b2a:	4b0d      	ldr	r3, [pc, #52]	; (82b60 <Shell+0x9ec>)
   82b2c:	2200      	movs	r2, #0
   82b2e:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82b30:	2203      	movs	r2, #3
   82b32:	771a      	strb	r2, [r3, #28]
						break;
   82b34:	f7ff bb62 	b.w	821fc <Shell+0x88>
						Putstr("\e[2K\r");
   82b38:	4913      	ldr	r1, [pc, #76]	; (82b88 <Shell+0xa14>)
   82b3a:	2067      	movs	r0, #103	; 0x67
   82b3c:	4b0d      	ldr	r3, [pc, #52]	; (82b74 <Shell+0xa00>)
   82b3e:	4798      	blx	r3
						ExitEditMode();
   82b40:	4b07      	ldr	r3, [pc, #28]	; (82b60 <Shell+0x9ec>)
   82b42:	881a      	ldrh	r2, [r3, #0]
   82b44:	f022 0204 	bic.w	r2, r2, #4
   82b48:	801a      	strh	r2, [r3, #0]
						shell.state=IDLE;
   82b4a:	2200      	movs	r2, #0
   82b4c:	771a      	strb	r2, [r3, #28]
						break;
   82b4e:	e6b4      	b.n	828ba <Shell+0x746>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82b50:	4b03      	ldr	r3, [pc, #12]	; (82b60 <Shell+0x9ec>)
   82b52:	2200      	movs	r2, #0
   82b54:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82b56:	2203      	movs	r2, #3
   82b58:	771a      	strb	r2, [r3, #28]
						break;
   82b5a:	f7ff bb4f 	b.w	821fc <Shell+0x88>
   82b5e:	bf00      	nop
   82b60:	200011d4 	.word	0x200011d4
   82b64:	200011f4 	.word	0x200011f4
   82b68:	000817ad 	.word	0x000817ad
   82b6c:	200010d0 	.word	0x200010d0
   82b70:	00088cfc 	.word	0x00088cfc
   82b74:	00083345 	.word	0x00083345
   82b78:	00088d58 	.word	0x00088d58
   82b7c:	20001274 	.word	0x20001274
   82b80:	00088d68 	.word	0x00088d68
   82b84:	00083ef9 	.word	0x00083ef9
   82b88:	00088d74 	.word	0x00088d74
   82b8c:	00088d04 	.word	0x00088d04
   82b90:	00088d00 	.word	0x00088d00
   82b94:	00088dac 	.word	0x00088dac
						pSrc=(uint32_t)shell.pEdit+1;
   82b98:	4a96      	ldr	r2, [pc, #600]	; (82df4 <Shell+0xc80>)
   82b9a:	6853      	ldr	r3, [r2, #4]
   82b9c:	3301      	adds	r3, #1
   82b9e:	930e      	str	r3, [sp, #56]	; 0x38
						while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82ba0:	4995      	ldr	r1, [pc, #596]	; (82df8 <Shell+0xc84>)
   82ba2:	8992      	ldrh	r2, [r2, #12]
   82ba4:	440a      	add	r2, r1
   82ba6:	4293      	cmp	r3, r2
   82ba8:	d20a      	bcs.n	82bc0 <Shell+0xa4c>
   82baa:	4892      	ldr	r0, [pc, #584]	; (82df4 <Shell+0xc80>)
							*(char*)(pSrc-1)=*(char*)pSrc; pSrc++;
   82bac:	781a      	ldrb	r2, [r3, #0]
   82bae:	f803 2c01 	strb.w	r2, [r3, #-1]
   82bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82bb4:	3301      	adds	r3, #1
   82bb6:	930e      	str	r3, [sp, #56]	; 0x38
						while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82bb8:	8982      	ldrh	r2, [r0, #12]
   82bba:	440a      	add	r2, r1
   82bbc:	429a      	cmp	r2, r3
   82bbe:	d8f5      	bhi.n	82bac <Shell+0xa38>
						*(char*)(pSrc-1)=' ';
   82bc0:	2220      	movs	r2, #32
   82bc2:	f803 2c01 	strb.w	r2, [r3, #-1]
	                    k=Putstrlen(shell.pEdit,pSrc-(uint32_t)shell.pEdit);
   82bc6:	4b8b      	ldr	r3, [pc, #556]	; (82df4 <Shell+0xc80>)
   82bc8:	6859      	ldr	r1, [r3, #4]
   82bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82bcc:	1a52      	subs	r2, r2, r1
   82bce:	2068      	movs	r0, #104	; 0x68
   82bd0:	4b8a      	ldr	r3, [pc, #552]	; (82dfc <Shell+0xc88>)
   82bd2:	4798      	blx	r3
		                while(k--) Putstr("\e[D");
   82bd4:	1e43      	subs	r3, r0, #1
   82bd6:	930e      	str	r3, [sp, #56]	; 0x38
   82bd8:	b150      	cbz	r0, 82bf0 <Shell+0xa7c>
   82bda:	4e89      	ldr	r6, [pc, #548]	; (82e00 <Shell+0xc8c>)
   82bdc:	2567      	movs	r5, #103	; 0x67
   82bde:	4c87      	ldr	r4, [pc, #540]	; (82dfc <Shell+0xc88>)
   82be0:	4631      	mov	r1, r6
   82be2:	4628      	mov	r0, r5
   82be4:	47a0      	blx	r4
   82be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82be8:	1e5a      	subs	r2, r3, #1
   82bea:	920e      	str	r2, [sp, #56]	; 0x38
   82bec:	2b00      	cmp	r3, #0
   82bee:	d1f7      	bne.n	82be0 <Shell+0xa6c>
			            shell.nChar--;
   82bf0:	4b80      	ldr	r3, [pc, #512]	; (82df4 <Shell+0xc80>)
   82bf2:	899a      	ldrh	r2, [r3, #12]
   82bf4:	3a01      	subs	r2, #1
   82bf6:	819a      	strh	r2, [r3, #12]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82bf8:	2200      	movs	r2, #0
   82bfa:	615a      	str	r2, [r3, #20]
				        shell.state=EDITION;
   82bfc:	2203      	movs	r2, #3
   82bfe:	771a      	strb	r2, [r3, #28]
					    break;
   82c00:	f7ff bafc 	b.w	821fc <Shell+0x88>
						mBitsTgl(shell.status,ST_SHELL_INSERT_MODE);
   82c04:	4b7b      	ldr	r3, [pc, #492]	; (82df4 <Shell+0xc80>)
   82c06:	881a      	ldrh	r2, [r3, #0]
   82c08:	f082 0201 	eor.w	r2, r2, #1
   82c0c:	801a      	strh	r2, [r3, #0]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82c0e:	2200      	movs	r2, #0
   82c10:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82c12:	2203      	movs	r2, #3
   82c14:	771a      	strb	r2, [r3, #28]
						break;
   82c16:	f7ff baf1 	b.w	821fc <Shell+0x88>
						k=(shell.pEdit-shellEditBuf);
   82c1a:	4b76      	ldr	r3, [pc, #472]	; (82df4 <Shell+0xc80>)
   82c1c:	685b      	ldr	r3, [r3, #4]
   82c1e:	4a76      	ldr	r2, [pc, #472]	; (82df8 <Shell+0xc84>)
   82c20:	1a9b      	subs	r3, r3, r2
						while(k--) Putstr("\e[D");
   82c22:	1e5a      	subs	r2, r3, #1
   82c24:	920e      	str	r2, [sp, #56]	; 0x38
   82c26:	b153      	cbz	r3, 82c3e <Shell+0xaca>
   82c28:	4e75      	ldr	r6, [pc, #468]	; (82e00 <Shell+0xc8c>)
   82c2a:	2567      	movs	r5, #103	; 0x67
   82c2c:	4c73      	ldr	r4, [pc, #460]	; (82dfc <Shell+0xc88>)
   82c2e:	4631      	mov	r1, r6
   82c30:	4628      	mov	r0, r5
   82c32:	47a0      	blx	r4
   82c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82c36:	1e5a      	subs	r2, r3, #1
   82c38:	920e      	str	r2, [sp, #56]	; 0x38
   82c3a:	2b00      	cmp	r3, #0
   82c3c:	d1f7      	bne.n	82c2e <Shell+0xaba>
						shell.pEdit=shellEditBuf;
   82c3e:	4b6d      	ldr	r3, [pc, #436]	; (82df4 <Shell+0xc80>)
   82c40:	4a6d      	ldr	r2, [pc, #436]	; (82df8 <Shell+0xc84>)
   82c42:	605a      	str	r2, [r3, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82c44:	2200      	movs	r2, #0
   82c46:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82c48:	2203      	movs	r2, #3
   82c4a:	771a      	strb	r2, [r3, #28]
						break;
   82c4c:	f7ff bad6 	b.w	821fc <Shell+0x88>
						k=((shellEditBuf+shell.nChar)-shell.pEdit);
   82c50:	4a68      	ldr	r2, [pc, #416]	; (82df4 <Shell+0xc80>)
   82c52:	8993      	ldrh	r3, [r2, #12]
   82c54:	4968      	ldr	r1, [pc, #416]	; (82df8 <Shell+0xc84>)
   82c56:	440b      	add	r3, r1
   82c58:	6852      	ldr	r2, [r2, #4]
   82c5a:	1a9b      	subs	r3, r3, r2
						while(k--) Putstr("\e[C");
   82c5c:	1e5a      	subs	r2, r3, #1
   82c5e:	920e      	str	r2, [sp, #56]	; 0x38
   82c60:	b153      	cbz	r3, 82c78 <Shell+0xb04>
   82c62:	4e68      	ldr	r6, [pc, #416]	; (82e04 <Shell+0xc90>)
   82c64:	2567      	movs	r5, #103	; 0x67
   82c66:	4c65      	ldr	r4, [pc, #404]	; (82dfc <Shell+0xc88>)
   82c68:	4631      	mov	r1, r6
   82c6a:	4628      	mov	r0, r5
   82c6c:	47a0      	blx	r4
   82c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82c70:	1e5a      	subs	r2, r3, #1
   82c72:	920e      	str	r2, [sp, #56]	; 0x38
   82c74:	2b00      	cmp	r3, #0
   82c76:	d1f7      	bne.n	82c68 <Shell+0xaf4>
						shell.pEdit=shellEditBuf+shell.nChar;
   82c78:	4b5e      	ldr	r3, [pc, #376]	; (82df4 <Shell+0xc80>)
   82c7a:	899a      	ldrh	r2, [r3, #12]
   82c7c:	495e      	ldr	r1, [pc, #376]	; (82df8 <Shell+0xc84>)
   82c7e:	440a      	add	r2, r1
   82c80:	605a      	str	r2, [r3, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82c82:	2200      	movs	r2, #0
   82c84:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82c86:	2203      	movs	r2, #3
   82c88:	771a      	strb	r2, [r3, #28]
						break;
   82c8a:	f7ff bab7 	b.w	821fc <Shell+0x88>
								shell.pEdit--;
   82c8e:	3b01      	subs	r3, #1
   82c90:	6063      	str	r3, [r4, #4]
								Putstr("\e[D");
   82c92:	4631      	mov	r1, r6
   82c94:	2067      	movs	r0, #103	; 0x67
   82c96:	4b59      	ldr	r3, [pc, #356]	; (82dfc <Shell+0xc88>)
   82c98:	4798      	blx	r3
							while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit>shellEditBuf))
   82c9a:	6863      	ldr	r3, [r4, #4]
   82c9c:	462a      	mov	r2, r5
   82c9e:	7819      	ldrb	r1, [r3, #0]
   82ca0:	2006      	movs	r0, #6
   82ca2:	f7ff fa67 	bl	82174 <Shell>
   82ca6:	2800      	cmp	r0, #0
   82ca8:	f43f af38 	beq.w	82b1c <Shell+0x9a8>
   82cac:	6863      	ldr	r3, [r4, #4]
   82cae:	42bb      	cmp	r3, r7
   82cb0:	d8ed      	bhi.n	82c8e <Shell+0xb1a>
   82cb2:	e733      	b.n	82b1c <Shell+0x9a8>
   82cb4:	4c4f      	ldr	r4, [pc, #316]	; (82df4 <Shell+0xc80>)
   82cb6:	4f50      	ldr	r7, [pc, #320]	; (82df8 <Shell+0xc84>)
								Putstr("\e[D");
   82cb8:	4e51      	ldr	r6, [pc, #324]	; (82e00 <Shell+0xc8c>)
   82cba:	e7ee      	b.n	82c9a <Shell+0xb26>
							shell.pEdit--;
   82cbc:	6863      	ldr	r3, [r4, #4]
   82cbe:	3b01      	subs	r3, #1
   82cc0:	6063      	str	r3, [r4, #4]
							Putstr("\e[D");
   82cc2:	4639      	mov	r1, r7
   82cc4:	2067      	movs	r0, #103	; 0x67
   82cc6:	47b0      	blx	r6
						while(((shell.pEdit-1)>=shellEditBuf)&&(!_IsSeparator(*(shell.pEdit-1),separators)))
   82cc8:	6863      	ldr	r3, [r4, #4]
   82cca:	1e59      	subs	r1, r3, #1
   82ccc:	4a4a      	ldr	r2, [pc, #296]	; (82df8 <Shell+0xc84>)
   82cce:	4291      	cmp	r1, r2
   82cd0:	f4ff af2b 	bcc.w	82b2a <Shell+0x9b6>
   82cd4:	462a      	mov	r2, r5
   82cd6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   82cda:	2006      	movs	r0, #6
   82cdc:	f7ff fa4a 	bl	82174 <Shell>
   82ce0:	2800      	cmp	r0, #0
   82ce2:	d0eb      	beq.n	82cbc <Shell+0xb48>
   82ce4:	e721      	b.n	82b2a <Shell+0x9b6>
							shell.pEdit--;
   82ce6:	4c43      	ldr	r4, [pc, #268]	; (82df4 <Shell+0xc80>)
							Putstr("\e[D");
   82ce8:	4f45      	ldr	r7, [pc, #276]	; (82e00 <Shell+0xc8c>)
   82cea:	4e44      	ldr	r6, [pc, #272]	; (82dfc <Shell+0xc88>)
   82cec:	e7f2      	b.n	82cd4 <Shell+0xb60>
						if(!_IsSeparator(*shell.pEdit,separators))
   82cee:	4d46      	ldr	r5, [pc, #280]	; (82e08 <Shell+0xc94>)
   82cf0:	4b40      	ldr	r3, [pc, #256]	; (82df4 <Shell+0xc80>)
   82cf2:	685b      	ldr	r3, [r3, #4]
   82cf4:	462a      	mov	r2, r5
   82cf6:	7819      	ldrb	r1, [r3, #0]
   82cf8:	2006      	movs	r0, #6
   82cfa:	f7ff fa3b 	bl	82174 <Shell>
   82cfe:	b1b8      	cbz	r0, 82d30 <Shell+0xbbc>
						while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   82d00:	4c3c      	ldr	r4, [pc, #240]	; (82df4 <Shell+0xc80>)
   82d02:	4f3d      	ldr	r7, [pc, #244]	; (82df8 <Shell+0xc84>)
							Putstr("\e[C");
   82d04:	4e3f      	ldr	r6, [pc, #252]	; (82e04 <Shell+0xc90>)
   82d06:	e01d      	b.n	82d44 <Shell+0xbd0>
								shell.pEdit++;
   82d08:	3301      	adds	r3, #1
   82d0a:	6063      	str	r3, [r4, #4]
								Putstr("\e[C");
   82d0c:	4631      	mov	r1, r6
   82d0e:	2067      	movs	r0, #103	; 0x67
   82d10:	4b3a      	ldr	r3, [pc, #232]	; (82dfc <Shell+0xc88>)
   82d12:	4798      	blx	r3
							while((!_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   82d14:	6863      	ldr	r3, [r4, #4]
   82d16:	462a      	mov	r2, r5
   82d18:	7819      	ldrb	r1, [r3, #0]
   82d1a:	2006      	movs	r0, #6
   82d1c:	f7ff fa2a 	bl	82174 <Shell>
   82d20:	2800      	cmp	r0, #0
   82d22:	d1ed      	bne.n	82d00 <Shell+0xb8c>
   82d24:	6863      	ldr	r3, [r4, #4]
   82d26:	89a2      	ldrh	r2, [r4, #12]
   82d28:	443a      	add	r2, r7
   82d2a:	4293      	cmp	r3, r2
   82d2c:	d3ec      	bcc.n	82d08 <Shell+0xb94>
   82d2e:	e7e7      	b.n	82d00 <Shell+0xb8c>
   82d30:	4c30      	ldr	r4, [pc, #192]	; (82df4 <Shell+0xc80>)
   82d32:	4f31      	ldr	r7, [pc, #196]	; (82df8 <Shell+0xc84>)
								Putstr("\e[C");
   82d34:	4e33      	ldr	r6, [pc, #204]	; (82e04 <Shell+0xc90>)
   82d36:	e7ed      	b.n	82d14 <Shell+0xba0>
							shell.pEdit++;
   82d38:	3301      	adds	r3, #1
   82d3a:	6063      	str	r3, [r4, #4]
							Putstr("\e[C");
   82d3c:	4631      	mov	r1, r6
   82d3e:	2067      	movs	r0, #103	; 0x67
   82d40:	4b2e      	ldr	r3, [pc, #184]	; (82dfc <Shell+0xc88>)
   82d42:	4798      	blx	r3
						while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   82d44:	6863      	ldr	r3, [r4, #4]
   82d46:	462a      	mov	r2, r5
   82d48:	7819      	ldrb	r1, [r3, #0]
   82d4a:	2006      	movs	r0, #6
   82d4c:	f7ff fa12 	bl	82174 <Shell>
   82d50:	b120      	cbz	r0, 82d5c <Shell+0xbe8>
   82d52:	6863      	ldr	r3, [r4, #4]
   82d54:	89a2      	ldrh	r2, [r4, #12]
   82d56:	443a      	add	r2, r7
   82d58:	4293      	cmp	r3, r2
   82d5a:	d3ed      	bcc.n	82d38 <Shell+0xbc4>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82d5c:	4b25      	ldr	r3, [pc, #148]	; (82df4 <Shell+0xc80>)
   82d5e:	2200      	movs	r2, #0
   82d60:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82d62:	2203      	movs	r2, #3
   82d64:	771a      	strb	r2, [r3, #28]
						break;
   82d66:	f7ff ba49 	b.w	821fc <Shell+0x88>
					Error(SHELL_ESCAPE_TIMEOUT,shell.state); //ERROR_SHELL_TIMER_ESC_BAD_SATE
   82d6a:	2064      	movs	r0, #100	; 0x64
   82d6c:	4b27      	ldr	r3, [pc, #156]	; (82e0c <Shell+0xc98>)
   82d6e:	4798      	blx	r3
   82d70:	e5a3      	b.n	828ba <Shell+0x746>
			 shell.editTimer = shell.escapeTimer = 0;
   82d72:	461c      	mov	r4, r3
   82d74:	2500      	movs	r5, #0
   82d76:	619d      	str	r5, [r3, #24]
   82d78:	615d      	str	r5, [r3, #20]
			 Putstr("\r\n\n");
   82d7a:	4925      	ldr	r1, [pc, #148]	; (82e10 <Shell+0xc9c>)
   82d7c:	2067      	movs	r0, #103	; 0x67
   82d7e:	4b1f      	ldr	r3, [pc, #124]	; (82dfc <Shell+0xc88>)
   82d80:	4798      	blx	r3
			 shell.state = IDLE;
   82d82:	7725      	strb	r5, [r4, #28]
			 ExitEditMode();
   82d84:	8823      	ldrh	r3, [r4, #0]
   82d86:	f023 0304 	bic.w	r3, r3, #4
   82d8a:	8023      	strh	r3, [r4, #0]
   82d8c:	f7ff ba36 	b.w	821fc <Shell+0x88>
		pSrc=(uint32_t)shellEditBuf;
   82d90:	4d19      	ldr	r5, [pc, #100]	; (82df8 <Shell+0xc84>)
   82d92:	950e      	str	r5, [sp, #56]	; 0x38
		while(_IsSeparator(*(char*)pSrc,separators)) pSrc++;
   82d94:	4e1c      	ldr	r6, [pc, #112]	; (82e08 <Shell+0xc94>)
   82d96:	2406      	movs	r4, #6
   82d98:	4632      	mov	r2, r6
   82d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82d9c:	7819      	ldrb	r1, [r3, #0]
   82d9e:	4620      	mov	r0, r4
   82da0:	f7ff f9e8 	bl	82174 <Shell>
   82da4:	4680      	mov	r8, r0
   82da6:	b118      	cbz	r0, 82db0 <Shell+0xc3c>
   82da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82daa:	3301      	adds	r3, #1
   82dac:	930e      	str	r3, [sp, #56]	; 0x38
   82dae:	e7f3      	b.n	82d98 <Shell+0xc24>
		k=pSrc-(uint32_t)shellEditBuf;
   82db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82db2:	1b5a      	subs	r2, r3, r5
   82db4:	9205      	str	r2, [sp, #20]
		if(k)
   82db6:	b19a      	cbz	r2, 82de0 <Shell+0xc6c>
			shell.pEdit=shellEditBuf;
   82db8:	4a0e      	ldr	r2, [pc, #56]	; (82df4 <Shell+0xc80>)
   82dba:	490f      	ldr	r1, [pc, #60]	; (82df8 <Shell+0xc84>)
   82dbc:	6051      	str	r1, [r2, #4]
			while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82dbe:	8992      	ldrh	r2, [r2, #12]
   82dc0:	442a      	add	r2, r5
   82dc2:	4293      	cmp	r3, r2
   82dc4:	d20c      	bcs.n	82de0 <Shell+0xc6c>
				*shell.pEdit++=*(char*)pSrc++;
   82dc6:	490b      	ldr	r1, [pc, #44]	; (82df4 <Shell+0xc80>)
   82dc8:	684a      	ldr	r2, [r1, #4]
   82dca:	1c50      	adds	r0, r2, #1
   82dcc:	6048      	str	r0, [r1, #4]
   82dce:	1c58      	adds	r0, r3, #1
   82dd0:	900e      	str	r0, [sp, #56]	; 0x38
   82dd2:	781b      	ldrb	r3, [r3, #0]
   82dd4:	7013      	strb	r3, [r2, #0]
			while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82dd8:	898a      	ldrh	r2, [r1, #12]
   82dda:	442a      	add	r2, r5
   82ddc:	429a      	cmp	r2, r3
   82dde:	d8f3      	bhi.n	82dc8 <Shell+0xc54>
		pSrc=(uint32_t)shellEditBuf+k;
   82de0:	9905      	ldr	r1, [sp, #20]
   82de2:	186b      	adds	r3, r5, r1
   82de4:	930e      	str	r3, [sp, #56]	; 0x38
		shell.nChar-=k;
   82de6:	4a03      	ldr	r2, [pc, #12]	; (82df4 <Shell+0xc80>)
   82de8:	8993      	ldrh	r3, [r2, #12]
   82dea:	1a5b      	subs	r3, r3, r1
   82dec:	8193      	strh	r3, [r2, #12]
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82dee:	4614      	mov	r4, r2
			while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(!_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   82df0:	2706      	movs	r7, #6
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82df2:	e014      	b.n	82e1e <Shell+0xcaa>
   82df4:	200011d4 	.word	0x200011d4
   82df8:	200010d0 	.word	0x200010d0
   82dfc:	00083345 	.word	0x00083345
   82e00:	00088d00 	.word	0x00088d00
   82e04:	00088d04 	.word	0x00088d04
   82e08:	00088dac 	.word	0x00088dac
   82e0c:	000817f5 	.word	0x000817f5
   82e10:	00088df8 	.word	0x00088df8
			if(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82e14:	89a3      	ldrh	r3, [r4, #12]
   82e16:	442b      	add	r3, r5
   82e18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82e1a:	4293      	cmp	r3, r2
   82e1c:	d814      	bhi.n	82e48 <Shell+0xcd4>
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82e20:	89a2      	ldrh	r2, [r4, #12]
   82e22:	442a      	add	r2, r5
   82e24:	429a      	cmp	r2, r3
   82e26:	f67f a9e9 	bls.w	821fc <Shell+0x88>
			while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(!_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   82e2a:	4632      	mov	r2, r6
   82e2c:	7819      	ldrb	r1, [r3, #0]
   82e2e:	4638      	mov	r0, r7
   82e30:	f7ff f9a0 	bl	82174 <Shell>
   82e34:	2800      	cmp	r0, #0
   82e36:	d1ed      	bne.n	82e14 <Shell+0xca0>
   82e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82e3a:	3301      	adds	r3, #1
   82e3c:	930e      	str	r3, [sp, #56]	; 0x38
   82e3e:	89a2      	ldrh	r2, [r4, #12]
   82e40:	442a      	add	r2, r5
   82e42:	429a      	cmp	r2, r3
   82e44:	d8f1      	bhi.n	82e2a <Shell+0xcb6>
   82e46:	e7ea      	b.n	82e1e <Shell+0xcaa>
				pSrc++; pSt=shell.pEdit=(char*)pSrc;
   82e48:	f102 0901 	add.w	r9, r2, #1
   82e4c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   82e50:	f8c4 9004 	str.w	r9, [r4, #4]
				while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   82e54:	454b      	cmp	r3, r9
   82e56:	bf88      	it	hi
   82e58:	464b      	movhi	r3, r9
   82e5a:	d90c      	bls.n	82e76 <Shell+0xd02>
   82e5c:	4632      	mov	r2, r6
   82e5e:	7819      	ldrb	r1, [r3, #0]
   82e60:	4638      	mov	r0, r7
   82e62:	f7ff f987 	bl	82174 <Shell>
   82e66:	b130      	cbz	r0, 82e76 <Shell+0xd02>
   82e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82e6a:	3301      	adds	r3, #1
   82e6c:	930e      	str	r3, [sp, #56]	; 0x38
   82e6e:	89a2      	ldrh	r2, [r4, #12]
   82e70:	442a      	add	r2, r5
   82e72:	429a      	cmp	r2, r3
   82e74:	d8f2      	bhi.n	82e5c <Shell+0xce8>
				k=pSrc-(uint32_t)shell.pEdit;
   82e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82e78:	6861      	ldr	r1, [r4, #4]
   82e7a:	1a59      	subs	r1, r3, r1
   82e7c:	9105      	str	r1, [sp, #20]
				while(k && pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82e7e:	b189      	cbz	r1, 82ea4 <Shell+0xd30>
   82e80:	89a2      	ldrh	r2, [r4, #12]
   82e82:	442a      	add	r2, r5
   82e84:	4293      	cmp	r3, r2
   82e86:	d20d      	bcs.n	82ea4 <Shell+0xd30>
					*shell.pEdit++=*(char*)pSrc++;
   82e88:	6862      	ldr	r2, [r4, #4]
   82e8a:	1c51      	adds	r1, r2, #1
   82e8c:	6061      	str	r1, [r4, #4]
   82e8e:	1c59      	adds	r1, r3, #1
   82e90:	910e      	str	r1, [sp, #56]	; 0x38
   82e92:	781b      	ldrb	r3, [r3, #0]
   82e94:	7013      	strb	r3, [r2, #0]
				while(k && pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82e96:	9905      	ldr	r1, [sp, #20]
   82e98:	b121      	cbz	r1, 82ea4 <Shell+0xd30>
   82e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82e9c:	89a2      	ldrh	r2, [r4, #12]
   82e9e:	442a      	add	r2, r5
   82ea0:	429a      	cmp	r2, r3
   82ea2:	d8f1      	bhi.n	82e88 <Shell+0xd14>
				shell.nChar-=k;
   82ea4:	89a3      	ldrh	r3, [r4, #12]
   82ea6:	1a59      	subs	r1, r3, r1
   82ea8:	81a1      	strh	r1, [r4, #12]
				pSrc=(uint32_t)pSt;
   82eaa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   82eae:	e7b6      	b.n	82e1e <Shell+0xcaa>
		Error(ERROR_SHELL_SWITCH_BAD_SC,sc);
   82eb0:	200d      	movs	r0, #13
   82eb2:	4b0b      	ldr	r3, [pc, #44]	; (82ee0 <Shell+0xd6c>)
   82eb4:	4798      	blx	r3
	return 0;
   82eb6:	f04f 0800 	mov.w	r8, #0
   82eba:	f7ff b99f 	b.w	821fc <Shell+0x88>
   82ebe:	f04f 0800 	mov.w	r8, #0
   82ec2:	f7ff b99b 	b.w	821fc <Shell+0x88>
   82ec6:	f04f 0800 	mov.w	r8, #0
   82eca:	f7ff b997 	b.w	821fc <Shell+0x88>
   82ece:	f04f 0800 	mov.w	r8, #0
   82ed2:	f7ff b993 	b.w	821fc <Shell+0x88>
   82ed6:	f04f 0800 	mov.w	r8, #0
   82eda:	f7ff b98f 	b.w	821fc <Shell+0x88>
   82ede:	bf00      	nop
   82ee0:	000817f5 	.word	0x000817f5

00082ee4 <setShellStatus>:
	return shell.status;
}

void setShellStatus(uint16_t sstatus)
{
	shell.status = sstatus;
   82ee4:	4b01      	ldr	r3, [pc, #4]	; (82eec <setShellStatus+0x8>)
   82ee6:	8018      	strh	r0, [r3, #0]
   82ee8:	4770      	bx	lr
   82eea:	bf00      	nop
   82eec:	200011d4 	.word	0x200011d4

00082ef0 <_cmd_show>:
#define ST_SHELL_PROMPT_DISABLED        0x000004

char buf[256];

void _cmd_show(uint32_t sc, void*pParam)
{
   82ef0:	b538      	push	{r3, r4, r5, lr}
   82ef2:	4605      	mov	r5, r0
   82ef4:	4608      	mov	r0, r1
	char *pToken;
	pToken = strtok(pParam," \r\n");
   82ef6:	490a      	ldr	r1, [pc, #40]	; (82f20 <_cmd_show+0x30>)
   82ef8:	4b0a      	ldr	r3, [pc, #40]	; (82f24 <_cmd_show+0x34>)
   82efa:	4798      	blx	r3
	if(pToken)
   82efc:	b170      	cbz	r0, 82f1c <_cmd_show+0x2c>
   82efe:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   82f00:	4b09      	ldr	r3, [pc, #36]	; (82f28 <_cmd_show+0x38>)
   82f02:	4798      	blx	r3
   82f04:	4601      	mov	r1, r0
   82f06:	4620      	mov	r0, r4
   82f08:	4b08      	ldr	r3, [pc, #32]	; (82f2c <_cmd_show+0x3c>)
   82f0a:	4798      	blx	r3
   82f0c:	f245 73e5 	movw	r3, #22501	; 0x57e5
   82f10:	4298      	cmp	r0, r3
   82f12:	d103      	bne.n	82f1c <_cmd_show+0x2c>
		{
		case 0x57E5:    //crc
			mBitsSet(*(uint16_t*)sc,ST_SHELL_SHOW_UNKNOW_CRC);
   82f14:	882b      	ldrh	r3, [r5, #0]
   82f16:	f043 0302 	orr.w	r3, r3, #2
   82f1a:	802b      	strh	r3, [r5, #0]
   82f1c:	bd38      	pop	{r3, r4, r5, pc}
   82f1e:	bf00      	nop
   82f20:	00088bf8 	.word	0x00088bf8
   82f24:	00083fa1 	.word	0x00083fa1
   82f28:	00083f45 	.word	0x00083f45
   82f2c:	000817ad 	.word	0x000817ad

00082f30 <_cmd_hide>:
		}
	}
}

void _cmd_hide(uint32_t sc, void*pParam)
{
   82f30:	b538      	push	{r3, r4, r5, lr}
   82f32:	4605      	mov	r5, r0
   82f34:	4608      	mov	r0, r1
	char *pToken;
	pToken = strtok(pParam," \r\n");
   82f36:	490a      	ldr	r1, [pc, #40]	; (82f60 <_cmd_hide+0x30>)
   82f38:	4b0a      	ldr	r3, [pc, #40]	; (82f64 <_cmd_hide+0x34>)
   82f3a:	4798      	blx	r3
	if(pToken)
   82f3c:	b170      	cbz	r0, 82f5c <_cmd_hide+0x2c>
   82f3e:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   82f40:	4b09      	ldr	r3, [pc, #36]	; (82f68 <_cmd_hide+0x38>)
   82f42:	4798      	blx	r3
   82f44:	4601      	mov	r1, r0
   82f46:	4620      	mov	r0, r4
   82f48:	4b08      	ldr	r3, [pc, #32]	; (82f6c <_cmd_hide+0x3c>)
   82f4a:	4798      	blx	r3
   82f4c:	f245 73e5 	movw	r3, #22501	; 0x57e5
   82f50:	4298      	cmp	r0, r3
   82f52:	d103      	bne.n	82f5c <_cmd_hide+0x2c>
		{
		case 0x57E5:    //crc
			mBitsClr(*(uint16_t*)sc,ST_SHELL_SHOW_UNKNOW_CRC);
   82f54:	882b      	ldrh	r3, [r5, #0]
   82f56:	f023 0302 	bic.w	r3, r3, #2
   82f5a:	802b      	strh	r3, [r5, #0]
   82f5c:	bd38      	pop	{r3, r4, r5, pc}
   82f5e:	bf00      	nop
   82f60:	00088bf8 	.word	0x00088bf8
   82f64:	00083fa1 	.word	0x00083fa1
   82f68:	00083f45 	.word	0x00083f45
   82f6c:	000817ad 	.word	0x000817ad

00082f70 <_cmd_start>:
		}
	}
}

void _cmd_start(uint32_t sc, void*pParam)
{
   82f70:	b538      	push	{r3, r4, r5, lr}
   82f72:	460d      	mov	r5, r1
	Putstr(" cmd start : ");
   82f74:	4903      	ldr	r1, [pc, #12]	; (82f84 <_cmd_start+0x14>)
   82f76:	2067      	movs	r0, #103	; 0x67
   82f78:	4c03      	ldr	r4, [pc, #12]	; (82f88 <_cmd_start+0x18>)
   82f7a:	47a0      	blx	r4
	Putstr(pParam);
   82f7c:	4629      	mov	r1, r5
   82f7e:	2067      	movs	r0, #103	; 0x67
   82f80:	47a0      	blx	r4
   82f82:	bd38      	pop	{r3, r4, r5, pc}
   82f84:	00088ee4 	.word	0x00088ee4
   82f88:	00083345 	.word	0x00083345

00082f8c <_cmd_cls>:
	pParam=atoi((char*)pParam);
	PushTask(_cmd_restart_proc,sc,pParam,0);
}

void _cmd_cls(uint32_t sc, void*pParam)
{
   82f8c:	b508      	push	{r3, lr}
	Putstr("\e[2J");
   82f8e:	4902      	ldr	r1, [pc, #8]	; (82f98 <_cmd_cls+0xc>)
   82f90:	2067      	movs	r0, #103	; 0x67
   82f92:	4b02      	ldr	r3, [pc, #8]	; (82f9c <_cmd_cls+0x10>)
   82f94:	4798      	blx	r3
   82f96:	bd08      	pop	{r3, pc}
   82f98:	00088db8 	.word	0x00088db8
   82f9c:	00083345 	.word	0x00083345

00082fa0 <_cmd_set>:
{
   82fa0:	b570      	push	{r4, r5, r6, lr}
	pToken = mstrtok(NULL," \r\n");
   82fa2:	493a      	ldr	r1, [pc, #232]	; (8308c <_cmd_set+0xec>)
   82fa4:	2000      	movs	r0, #0
   82fa6:	4b3a      	ldr	r3, [pc, #232]	; (83090 <_cmd_set+0xf0>)
   82fa8:	4798      	blx	r3
	if(pToken)
   82faa:	2800      	cmp	r0, #0
   82fac:	d056      	beq.n	8305c <_cmd_set+0xbc>
   82fae:	4604      	mov	r4, r0
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   82fb0:	4b38      	ldr	r3, [pc, #224]	; (83094 <_cmd_set+0xf4>)
   82fb2:	4798      	blx	r3
   82fb4:	4601      	mov	r1, r0
   82fb6:	4620      	mov	r0, r4
   82fb8:	4b37      	ldr	r3, [pc, #220]	; (83098 <_cmd_set+0xf8>)
   82fba:	4798      	blx	r3
   82fbc:	f247 3327 	movw	r3, #29479	; 0x7327
   82fc0:	4298      	cmp	r0, r3
   82fc2:	d004      	beq.n	82fce <_cmd_set+0x2e>
   82fc4:	f24e 13a9 	movw	r3, #57769	; 0xe1a9
   82fc8:	4298      	cmp	r0, r3
   82fca:	d024      	beq.n	83016 <_cmd_set+0x76>
   82fcc:	bd70      	pop	{r4, r5, r6, pc}
			pToken=mstrtok(NULL," :./\r\n");
   82fce:	4933      	ldr	r1, [pc, #204]	; (8309c <_cmd_set+0xfc>)
   82fd0:	2000      	movs	r0, #0
   82fd2:	4b2f      	ldr	r3, [pc, #188]	; (83090 <_cmd_set+0xf0>)
   82fd4:	4798      	blx	r3
			if(pToken) hour=atoi((char*)pToken);
   82fd6:	b1c0      	cbz	r0, 8300a <_cmd_set+0x6a>
   82fd8:	4b31      	ldr	r3, [pc, #196]	; (830a0 <_cmd_set+0x100>)
   82fda:	4798      	blx	r3
   82fdc:	b2c4      	uxtb	r4, r0
			pToken=mstrtok(NULL," :./\r\n");
   82fde:	492f      	ldr	r1, [pc, #188]	; (8309c <_cmd_set+0xfc>)
   82fe0:	2000      	movs	r0, #0
   82fe2:	4b2b      	ldr	r3, [pc, #172]	; (83090 <_cmd_set+0xf0>)
   82fe4:	4798      	blx	r3
			if(pToken) minute=atoi((char*)pToken);
   82fe6:	b190      	cbz	r0, 8300e <_cmd_set+0x6e>
   82fe8:	4b2d      	ldr	r3, [pc, #180]	; (830a0 <_cmd_set+0x100>)
   82fea:	4798      	blx	r3
   82fec:	b2c5      	uxtb	r5, r0
			pToken=mstrtok(NULL," :./\r\n");
   82fee:	492b      	ldr	r1, [pc, #172]	; (8309c <_cmd_set+0xfc>)
   82ff0:	2000      	movs	r0, #0
   82ff2:	4b27      	ldr	r3, [pc, #156]	; (83090 <_cmd_set+0xf0>)
   82ff4:	4798      	blx	r3
			if(pToken) second=atoi((char*)pToken);
   82ff6:	b160      	cbz	r0, 83012 <_cmd_set+0x72>
   82ff8:	4b29      	ldr	r3, [pc, #164]	; (830a0 <_cmd_set+0x100>)
   82ffa:	4798      	blx	r3
   82ffc:	b2c3      	uxtb	r3, r0
			kRtc(KRTC_SET_TIME,(uint32_t)hour,(uint32_t)minute,(uint32_t)second);
   82ffe:	462a      	mov	r2, r5
   83000:	4621      	mov	r1, r4
   83002:	2066      	movs	r0, #102	; 0x66
   83004:	4c27      	ldr	r4, [pc, #156]	; (830a4 <_cmd_set+0x104>)
   83006:	47a0      	blx	r4
			break;
   83008:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t u1=0,u2=0,u3=0;
   8300a:	2400      	movs	r4, #0
   8300c:	e7e7      	b.n	82fde <_cmd_set+0x3e>
   8300e:	2500      	movs	r5, #0
   83010:	e7ed      	b.n	82fee <_cmd_set+0x4e>
   83012:	2300      	movs	r3, #0
   83014:	e7f3      	b.n	82ffe <_cmd_set+0x5e>
			pToken=mstrtok(NULL," :./\r\n");
   83016:	4921      	ldr	r1, [pc, #132]	; (8309c <_cmd_set+0xfc>)
   83018:	2000      	movs	r0, #0
   8301a:	4b1d      	ldr	r3, [pc, #116]	; (83090 <_cmd_set+0xf0>)
   8301c:	4798      	blx	r3
			if(pToken) date=atoi((char*)pToken);
   8301e:	b1f0      	cbz	r0, 8305e <_cmd_set+0xbe>
   83020:	4b1f      	ldr	r3, [pc, #124]	; (830a0 <_cmd_set+0x100>)
   83022:	4798      	blx	r3
   83024:	b2c4      	uxtb	r4, r0
			pToken=mstrtok(NULL," :./\r\n");
   83026:	491d      	ldr	r1, [pc, #116]	; (8309c <_cmd_set+0xfc>)
   83028:	2000      	movs	r0, #0
   8302a:	4b19      	ldr	r3, [pc, #100]	; (83090 <_cmd_set+0xf0>)
   8302c:	4798      	blx	r3
			if(pToken) month=atoi((char*)pToken);
   8302e:	b1c0      	cbz	r0, 83062 <_cmd_set+0xc2>
   83030:	4b1b      	ldr	r3, [pc, #108]	; (830a0 <_cmd_set+0x100>)
   83032:	4798      	blx	r3
   83034:	b2c5      	uxtb	r5, r0
			pToken=mstrtok(NULL," :./\r\n");
   83036:	4919      	ldr	r1, [pc, #100]	; (8309c <_cmd_set+0xfc>)
   83038:	2000      	movs	r0, #0
   8303a:	4b15      	ldr	r3, [pc, #84]	; (83090 <_cmd_set+0xf0>)
   8303c:	4798      	blx	r3
			if(pToken) centYear=atoi((char*)pToken);
   8303e:	b190      	cbz	r0, 83066 <_cmd_set+0xc6>
   83040:	4b17      	ldr	r3, [pc, #92]	; (830a0 <_cmd_set+0x100>)
   83042:	4798      	blx	r3
   83044:	b286      	uxth	r6, r0
			Putstr("\e[2K"); //Erase current line on terminal screen
   83046:	4918      	ldr	r1, [pc, #96]	; (830a8 <_cmd_set+0x108>)
   83048:	2067      	movs	r0, #103	; 0x67
   8304a:	4b18      	ldr	r3, [pc, #96]	; (830ac <_cmd_set+0x10c>)
   8304c:	4798      	blx	r3
			if(kRtc(KRTC_SET_DATE,(uint32_t)date,(uint32_t)month,(uint32_t)centYear)==0)
   8304e:	4633      	mov	r3, r6
   83050:	462a      	mov	r2, r5
   83052:	4621      	mov	r1, r4
   83054:	2067      	movs	r0, #103	; 0x67
   83056:	4c13      	ldr	r4, [pc, #76]	; (830a4 <_cmd_set+0x104>)
   83058:	47a0      	blx	r4
   8305a:	b130      	cbz	r0, 8306a <_cmd_set+0xca>
   8305c:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t u1=0,u2=0,u3=0;
   8305e:	2400      	movs	r4, #0
   83060:	e7e1      	b.n	83026 <_cmd_set+0x86>
   83062:	2500      	movs	r5, #0
   83064:	e7e7      	b.n	83036 <_cmd_set+0x96>
	uint16_t u4=0;
   83066:	2600      	movs	r6, #0
   83068:	e7ed      	b.n	83046 <_cmd_set+0xa6>
				Putstr("\r\n");
   8306a:	4d11      	ldr	r5, [pc, #68]	; (830b0 <_cmd_set+0x110>)
   8306c:	4629      	mov	r1, r5
   8306e:	2067      	movs	r0, #103	; 0x67
   83070:	4c0e      	ldr	r4, [pc, #56]	; (830ac <_cmd_set+0x10c>)
   83072:	47a0      	blx	r4
				kRtc(KRTC_GETF_DATE,(uint32_t)buf);
   83074:	4e0f      	ldr	r6, [pc, #60]	; (830b4 <_cmd_set+0x114>)
   83076:	4631      	mov	r1, r6
   83078:	2068      	movs	r0, #104	; 0x68
   8307a:	4b0a      	ldr	r3, [pc, #40]	; (830a4 <_cmd_set+0x104>)
   8307c:	4798      	blx	r3
				Putstr(buf);
   8307e:	4631      	mov	r1, r6
   83080:	2067      	movs	r0, #103	; 0x67
   83082:	47a0      	blx	r4
				Putstr("\r\n");
   83084:	4629      	mov	r1, r5
   83086:	2067      	movs	r0, #103	; 0x67
   83088:	47a0      	blx	r4
}
   8308a:	e7e7      	b.n	8305c <_cmd_set+0xbc>
   8308c:	00088bf8 	.word	0x00088bf8
   83090:	0008380d 	.word	0x0008380d
   83094:	00083f45 	.word	0x00083f45
   83098:	000817ad 	.word	0x000817ad
   8309c:	00088ed4 	.word	0x00088ed4
   830a0:	00083e05 	.word	0x00083e05
   830a4:	000819d5 	.word	0x000819d5
   830a8:	00088edc 	.word	0x00088edc
   830ac:	00083345 	.word	0x00083345
   830b0:	00088d54 	.word	0x00088d54
   830b4:	200012b4 	.word	0x200012b4

000830b8 <_cmd_menu>:
{
   830b8:	b510      	push	{r4, lr}
   830ba:	4608      	mov	r0, r1
	pToken = (uint32_t)strtok(pParam, " \r\n");
   830bc:	4915      	ldr	r1, [pc, #84]	; (83114 <_cmd_menu+0x5c>)
   830be:	4b16      	ldr	r3, [pc, #88]	; (83118 <_cmd_menu+0x60>)
   830c0:	4798      	blx	r3
	if(pToken)
   830c2:	b900      	cbnz	r0, 830c6 <_cmd_menu+0xe>
   830c4:	bd10      	pop	{r4, pc}
   830c6:	4604      	mov	r4, r0
		crc = CRC16MODBUSFRAME((unsigned char*)pToken, strlen((char*)pToken));
   830c8:	4b14      	ldr	r3, [pc, #80]	; (8311c <_cmd_menu+0x64>)
   830ca:	4798      	blx	r3
   830cc:	4601      	mov	r1, r0
   830ce:	4620      	mov	r0, r4
   830d0:	4b13      	ldr	r3, [pc, #76]	; (83120 <_cmd_menu+0x68>)
   830d2:	4798      	blx	r3
		switch(crc)
   830d4:	b280      	uxth	r0, r0
   830d6:	f648 0362 	movw	r3, #34914	; 0x8862
   830da:	4298      	cmp	r0, r3
   830dc:	d012      	beq.n	83104 <_cmd_menu+0x4c>
   830de:	f648 338b 	movw	r3, #35723	; 0x8b8b
   830e2:	4298      	cmp	r0, r3
   830e4:	d008      	beq.n	830f8 <_cmd_menu+0x40>
   830e6:	f241 2352 	movw	r3, #4690	; 0x1252
   830ea:	4298      	cmp	r0, r3
   830ec:	d00e      	beq.n	8310c <_cmd_menu+0x54>
			Error(ERROR_SHELL_CMD_MENU_SWITCH_BAD_SC, sc);
   830ee:	4621      	mov	r1, r4
   830f0:	2013      	movs	r0, #19
   830f2:	4b0c      	ldr	r3, [pc, #48]	; (83124 <_cmd_menu+0x6c>)
   830f4:	4798      	blx	r3
}
   830f6:	e7e5      	b.n	830c4 <_cmd_menu+0xc>
			Menu(MENU_SWITCH_BUTTON);
   830f8:	2065      	movs	r0, #101	; 0x65
   830fa:	4c0b      	ldr	r4, [pc, #44]	; (83128 <_cmd_menu+0x70>)
   830fc:	47a0      	blx	r4
			Menu(MENU_PROMPT);
   830fe:	2069      	movs	r0, #105	; 0x69
   83100:	47a0      	blx	r4
			break;
   83102:	bd10      	pop	{r4, pc}
			Menu(MENU_SELECT_BUTTON);
   83104:	2066      	movs	r0, #102	; 0x66
   83106:	4b08      	ldr	r3, [pc, #32]	; (83128 <_cmd_menu+0x70>)
   83108:	4798      	blx	r3
			break;
   8310a:	bd10      	pop	{r4, pc}
			Menu(MENU_INIT);
   8310c:	206b      	movs	r0, #107	; 0x6b
   8310e:	4b06      	ldr	r3, [pc, #24]	; (83128 <_cmd_menu+0x70>)
   83110:	4798      	blx	r3
			break;
   83112:	bd10      	pop	{r4, pc}
   83114:	00088bf8 	.word	0x00088bf8
   83118:	00083fa1 	.word	0x00083fa1
   8311c:	00083f45 	.word	0x00083f45
   83120:	000817ad 	.word	0x000817ad
   83124:	000817f5 	.word	0x000817f5
   83128:	000803f1 	.word	0x000803f1

0008312c <_cmd_restart_proc>:
{
   8312c:	b570      	push	{r4, r5, r6, lr}
   8312e:	b082      	sub	sp, #8
   83130:	4604      	mov	r4, r0
   83132:	460d      	mov	r5, r1
	mBitsSet(*(uint16_t*)sc,ST_SHELL_PROMPT_DISABLED);
   83134:	8803      	ldrh	r3, [r0, #0]
   83136:	f043 0304 	orr.w	r3, r3, #4
   8313a:	8003      	strh	r3, [r0, #0]
	sprintf(buf,"\rSystem will restart in %i second...",(int)timeout); Putstr(buf);
   8313c:	4e0e      	ldr	r6, [pc, #56]	; (83178 <_cmd_restart_proc+0x4c>)
   8313e:	460a      	mov	r2, r1
   83140:	490e      	ldr	r1, [pc, #56]	; (8317c <_cmd_restart_proc+0x50>)
   83142:	4630      	mov	r0, r6
   83144:	4b0e      	ldr	r3, [pc, #56]	; (83180 <_cmd_restart_proc+0x54>)
   83146:	4798      	blx	r3
   83148:	4631      	mov	r1, r6
   8314a:	2067      	movs	r0, #103	; 0x67
   8314c:	4b0d      	ldr	r3, [pc, #52]	; (83184 <_cmd_restart_proc+0x58>)
   8314e:	4798      	blx	r3
	if(timeout==0)
   83150:	b935      	cbnz	r5, 83160 <_cmd_restart_proc+0x34>
   83152:	4b0d      	ldr	r3, [pc, #52]	; (83188 <_cmd_restart_proc+0x5c>)
		for(sc=100000;sc;sc--);
   83154:	3b01      	subs	r3, #1
   83156:	d1fd      	bne.n	83154 <_cmd_restart_proc+0x28>
		rstc_start_software_reset(RSTC);
   83158:	480c      	ldr	r0, [pc, #48]	; (8318c <_cmd_restart_proc+0x60>)
   8315a:	4b0d      	ldr	r3, [pc, #52]	; (83190 <_cmd_restart_proc+0x64>)
   8315c:	4798      	blx	r3
   8315e:	e7fe      	b.n	8315e <_cmd_restart_proc+0x32>
		PushTask(_cmd_restart_proc,sc,--timeout,1000);	
   83160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   83164:	9300      	str	r3, [sp, #0]
   83166:	1e6b      	subs	r3, r5, #1
   83168:	4622      	mov	r2, r4
   8316a:	490a      	ldr	r1, [pc, #40]	; (83194 <_cmd_restart_proc+0x68>)
   8316c:	2066      	movs	r0, #102	; 0x66
   8316e:	4c0a      	ldr	r4, [pc, #40]	; (83198 <_cmd_restart_proc+0x6c>)
   83170:	47a0      	blx	r4
}
   83172:	b002      	add	sp, #8
   83174:	bd70      	pop	{r4, r5, r6, pc}
   83176:	bf00      	nop
   83178:	200012b4 	.word	0x200012b4
   8317c:	00088eac 	.word	0x00088eac
   83180:	00083ef9 	.word	0x00083ef9
   83184:	00083345 	.word	0x00083345
   83188:	000186a0 	.word	0x000186a0
   8318c:	400e1200 	.word	0x400e1200
   83190:	00080d21 	.word	0x00080d21
   83194:	0008312d 	.word	0x0008312d
   83198:	00083581 	.word	0x00083581

0008319c <_cmd_restart>:
{
   8319c:	b510      	push	{r4, lr}
   8319e:	b082      	sub	sp, #8
   831a0:	4604      	mov	r4, r0
	mBitsSet(*(uint16_t*)sc,ST_SHELL_PROMPT_DISABLED);
   831a2:	8803      	ldrh	r3, [r0, #0]
   831a4:	f043 0304 	orr.w	r3, r3, #4
   831a8:	8003      	strh	r3, [r0, #0]
	pParam=atoi((char*)pParam);
   831aa:	4608      	mov	r0, r1
   831ac:	4b05      	ldr	r3, [pc, #20]	; (831c4 <_cmd_restart+0x28>)
   831ae:	4798      	blx	r3
	PushTask(_cmd_restart_proc,sc,pParam,0);
   831b0:	2300      	movs	r3, #0
   831b2:	9300      	str	r3, [sp, #0]
   831b4:	4603      	mov	r3, r0
   831b6:	4622      	mov	r2, r4
   831b8:	4903      	ldr	r1, [pc, #12]	; (831c8 <_cmd_restart+0x2c>)
   831ba:	2066      	movs	r0, #102	; 0x66
   831bc:	4c03      	ldr	r4, [pc, #12]	; (831cc <_cmd_restart+0x30>)
   831be:	47a0      	blx	r4
}
   831c0:	b002      	add	sp, #8
   831c2:	bd10      	pop	{r4, pc}
   831c4:	00083e05 	.word	0x00083e05
   831c8:	0008312d 	.word	0x0008312d
   831cc:	00083581 	.word	0x00083581

000831d0 <_cmd_infos>:
	"ROM_FLASH --- ROM and Embedded Flash Memory [NVPSIZ is ROM size / NVPSIZ2 is Flash size]",
	"SRAM --- SRAM emulating ROM"
};

void _cmd_infos(uint32_t sc, void*pParam)
{
   831d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   831d4:	b08b      	sub	sp, #44	; 0x2c
	chipid_data_t chipData;

	chipid_read(CHIPID,&chipData);
   831d6:	a901      	add	r1, sp, #4
   831d8:	4844      	ldr	r0, [pc, #272]	; (832ec <_cmd_infos+0x11c>)
   831da:	4b45      	ldr	r3, [pc, #276]	; (832f0 <_cmd_infos+0x120>)
   831dc:	4798      	blx	r3
	Putstr("\r\n\t=============== CHIP IDENTIFIER INFOS ===============\r\n\n");
   831de:	4945      	ldr	r1, [pc, #276]	; (832f4 <_cmd_infos+0x124>)
   831e0:	2067      	movs	r0, #103	; 0x67
   831e2:	4c45      	ldr	r4, [pc, #276]	; (832f8 <_cmd_infos+0x128>)
   831e4:	47a0      	blx	r4
	sprintf(buf,"\tVERSION: %c\r\n",(char)(chipData.ul_version-1)+'A');	Putstr(buf);
   831e6:	9a01      	ldr	r2, [sp, #4]
   831e8:	3a01      	subs	r2, #1
   831ea:	b2d2      	uxtb	r2, r2
   831ec:	4f43      	ldr	r7, [pc, #268]	; (832fc <_cmd_infos+0x12c>)
   831ee:	3241      	adds	r2, #65	; 0x41
   831f0:	4943      	ldr	r1, [pc, #268]	; (83300 <_cmd_infos+0x130>)
   831f2:	4638      	mov	r0, r7
   831f4:	4b43      	ldr	r3, [pc, #268]	; (83304 <_cmd_infos+0x134>)
   831f6:	4798      	blx	r3
   831f8:	4639      	mov	r1, r7
   831fa:	2067      	movs	r0, #103	; 0x67
   831fc:	47a0      	blx	r4
		Putstr("\t  EPROC: "),Putstr(eprocs[chipData.ul_eproc]);	Putstr("\r\n");
   831fe:	4942      	ldr	r1, [pc, #264]	; (83308 <_cmd_infos+0x138>)
   83200:	2067      	movs	r0, #103	; 0x67
   83202:	47a0      	blx	r4
   83204:	9a02      	ldr	r2, [sp, #8]
   83206:	4b41      	ldr	r3, [pc, #260]	; (8330c <_cmd_infos+0x13c>)
   83208:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8320c:	2067      	movs	r0, #103	; 0x67
   8320e:	47a0      	blx	r4
   83210:	4e3f      	ldr	r6, [pc, #252]	; (83310 <_cmd_infos+0x140>)
   83212:	4631      	mov	r1, r6
   83214:	2067      	movs	r0, #103	; 0x67
   83216:	47a0      	blx	r4
		Putstr("\t NVPSIZ: "),Putstr(nvpsiz[chipData.ul_nvpsiz]);	Putstr("\r\n");
   83218:	493e      	ldr	r1, [pc, #248]	; (83314 <_cmd_infos+0x144>)
   8321a:	2067      	movs	r0, #103	; 0x67
   8321c:	47a0      	blx	r4
   8321e:	4d3e      	ldr	r5, [pc, #248]	; (83318 <_cmd_infos+0x148>)
   83220:	9b03      	ldr	r3, [sp, #12]
   83222:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   83226:	2067      	movs	r0, #103	; 0x67
   83228:	47a0      	blx	r4
   8322a:	4631      	mov	r1, r6
   8322c:	2067      	movs	r0, #103	; 0x67
   8322e:	47a0      	blx	r4
		Putstr("\tNVPSIZ2: "),Putstr(nvpsiz[chipData.ul_nvpsiz2]);	Putstr("\r\n");
   83230:	493a      	ldr	r1, [pc, #232]	; (8331c <_cmd_infos+0x14c>)
   83232:	2067      	movs	r0, #103	; 0x67
   83234:	47a0      	blx	r4
   83236:	9b04      	ldr	r3, [sp, #16]
   83238:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   8323c:	2067      	movs	r0, #103	; 0x67
   8323e:	47a0      	blx	r4
   83240:	4631      	mov	r1, r6
   83242:	2067      	movs	r0, #103	; 0x67
   83244:	47a0      	blx	r4
		Putstr("\tSRAMSIZ: "),Putstr(sramsiz[chipData.ul_sramsiz]);	Putstr("\r\n");
   83246:	4936      	ldr	r1, [pc, #216]	; (83320 <_cmd_infos+0x150>)
   83248:	2067      	movs	r0, #103	; 0x67
   8324a:	47a0      	blx	r4
   8324c:	9a05      	ldr	r2, [sp, #20]
   8324e:	4b35      	ldr	r3, [pc, #212]	; (83324 <_cmd_infos+0x154>)
   83250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   83254:	2067      	movs	r0, #103	; 0x67
   83256:	47a0      	blx	r4
   83258:	4631      	mov	r1, r6
   8325a:	2067      	movs	r0, #103	; 0x67
   8325c:	47a0      	blx	r4
#define k sc
		k=0;
		while(arch[k].value && (arch[k].value!=chipData.ul_arch)) k++;
   8325e:	9906      	ldr	r1, [sp, #24]
   83260:	2919      	cmp	r1, #25
   83262:	d038      	beq.n	832d6 <_cmd_infos+0x106>
   83264:	4b30      	ldr	r3, [pc, #192]	; (83328 <_cmd_infos+0x158>)
   83266:	2400      	movs	r4, #0
   83268:	3401      	adds	r4, #1
   8326a:	7b1a      	ldrb	r2, [r3, #12]
   8326c:	b112      	cbz	r2, 83274 <_cmd_infos+0xa4>
   8326e:	330c      	adds	r3, #12
   83270:	428a      	cmp	r2, r1
   83272:	d1f9      	bne.n	83268 <_cmd_infos+0x98>
		Putstr("\t   ARCH: "),Putstr(arch[k].name); Putstr(" --- "); Putstr(arch[k].description); Putstr("\r\n");
   83274:	492d      	ldr	r1, [pc, #180]	; (8332c <_cmd_infos+0x15c>)
   83276:	2067      	movs	r0, #103	; 0x67
   83278:	4d1f      	ldr	r5, [pc, #124]	; (832f8 <_cmd_infos+0x128>)
   8327a:	47a8      	blx	r5
   8327c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 83328 <_cmd_infos+0x158>
   83280:	ea4f 0944 	mov.w	r9, r4, lsl #1
   83284:	eb09 0304 	add.w	r3, r9, r4
   83288:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8328c:	6859      	ldr	r1, [r3, #4]
   8328e:	2067      	movs	r0, #103	; 0x67
   83290:	47a8      	blx	r5
   83292:	4927      	ldr	r1, [pc, #156]	; (83330 <_cmd_infos+0x160>)
   83294:	2067      	movs	r0, #103	; 0x67
   83296:	47a8      	blx	r5
   83298:	444c      	add	r4, r9
   8329a:	eb08 0884 	add.w	r8, r8, r4, lsl #2
   8329e:	f8d8 1008 	ldr.w	r1, [r8, #8]
   832a2:	2067      	movs	r0, #103	; 0x67
   832a4:	47a8      	blx	r5
   832a6:	4631      	mov	r1, r6
   832a8:	2067      	movs	r0, #103	; 0x67
   832aa:	47a8      	blx	r5
#undef k
		Putstr("\t NVPTYP: "),Putstr(nvptyp[chipData.ul_nvptyp]);	Putstr("\r\n");
   832ac:	4921      	ldr	r1, [pc, #132]	; (83334 <_cmd_infos+0x164>)
   832ae:	2067      	movs	r0, #103	; 0x67
   832b0:	47a8      	blx	r5
   832b2:	9a07      	ldr	r2, [sp, #28]
   832b4:	4b20      	ldr	r3, [pc, #128]	; (83338 <_cmd_infos+0x168>)
   832b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   832ba:	2067      	movs	r0, #103	; 0x67
   832bc:	47a8      	blx	r5
   832be:	4631      	mov	r1, r6
   832c0:	2067      	movs	r0, #103	; 0x67
   832c2:	47a8      	blx	r5
	if(chipData.ul_extflag)
   832c4:	9b08      	ldr	r3, [sp, #32]
   832c6:	b943      	cbnz	r3, 832da <_cmd_infos+0x10a>
	{
		sprintf(buf,"\t   EXID: %08X\r\n",(unsigned int)chipData.ul_extid); Putstr(buf);
	}
	Putstr("\r\n\t=====================================================\r\n\n");
   832c8:	491c      	ldr	r1, [pc, #112]	; (8333c <_cmd_infos+0x16c>)
   832ca:	2067      	movs	r0, #103	; 0x67
   832cc:	4b0a      	ldr	r3, [pc, #40]	; (832f8 <_cmd_infos+0x128>)
   832ce:	4798      	blx	r3
}
   832d0:	b00b      	add	sp, #44	; 0x2c
   832d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		k=0;
   832d6:	2400      	movs	r4, #0
   832d8:	e7cc      	b.n	83274 <_cmd_infos+0xa4>
		sprintf(buf,"\t   EXID: %08X\r\n",(unsigned int)chipData.ul_extid); Putstr(buf);
   832da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   832dc:	4918      	ldr	r1, [pc, #96]	; (83340 <_cmd_infos+0x170>)
   832de:	4807      	ldr	r0, [pc, #28]	; (832fc <_cmd_infos+0x12c>)
   832e0:	4b08      	ldr	r3, [pc, #32]	; (83304 <_cmd_infos+0x134>)
   832e2:	4798      	blx	r3
   832e4:	4639      	mov	r1, r7
   832e6:	2067      	movs	r0, #103	; 0x67
   832e8:	47a8      	blx	r5
   832ea:	e7ed      	b.n	832c8 <_cmd_infos+0xf8>
   832ec:	400e0740 	.word	0x400e0740
   832f0:	0008024d 	.word	0x0008024d
   832f4:	00088dc0 	.word	0x00088dc0
   832f8:	00083345 	.word	0x00083345
   832fc:	200012b4 	.word	0x200012b4
   83300:	00088dfc 	.word	0x00088dfc
   83304:	00083ef9 	.word	0x00083ef9
   83308:	00088e0c 	.word	0x00088e0c
   8330c:	20000580 	.word	0x20000580
   83310:	00088d54 	.word	0x00088d54
   83314:	00088e18 	.word	0x00088e18
   83318:	200005a0 	.word	0x200005a0
   8331c:	00088e24 	.word	0x00088e24
   83320:	00088e30 	.word	0x00088e30
   83324:	200005f4 	.word	0x200005f4
   83328:	00088ef4 	.word	0x00088ef4
   8332c:	00088e3c 	.word	0x00088e3c
   83330:	00088e48 	.word	0x00088e48
   83334:	00088e50 	.word	0x00088e50
   83338:	200005e0 	.word	0x200005e0
   8333c:	00088e70 	.word	0x00088e70
   83340:	00088e5c 	.word	0x00088e5c

00083344 <Shellcom>:
	char	*pTxRead;
}shellcom;


uint32_t Shellcom(uint32_t sc, ...)
{
   83344:	b40f      	push	{r0, r1, r2, r3}
   83346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	switch(sc)
   83348:	9906      	ldr	r1, [sp, #24]
   8334a:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   8334e:	2b04      	cmp	r3, #4
   83350:	f200 80b5 	bhi.w	834be <Shellcom+0x17a>
   83354:	e8df f013 	tbh	[pc, r3, lsl #1]
   83358:	00b30005 	.word	0x00b30005
   8335c:	0059003a 	.word	0x0059003a
   83360:	0086      	.short	0x0086
	{
	case SHELLCOM_NEW:
		shellcom.pTxRead=shellcom.pTxWrite=shellcomTxBuf;
   83362:	4b59      	ldr	r3, [pc, #356]	; (834c8 <Shellcom+0x184>)
   83364:	4a59      	ldr	r2, [pc, #356]	; (834cc <Shellcom+0x188>)
   83366:	601a      	str	r2, [r3, #0]
   83368:	605a      	str	r2, [r3, #4]
		pmc_enable_periph_clk(ID_UART);
   8336a:	2008      	movs	r0, #8
   8336c:	4b58      	ldr	r3, [pc, #352]	; (834d0 <Shellcom+0x18c>)
   8336e:	4798      	blx	r3
		pio_configure_pin(UART_TX_PIN,UART_TX_PIN_FLAGS);
   83370:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83374:	200c      	movs	r0, #12
   83376:	4c57      	ldr	r4, [pc, #348]	; (834d4 <Shellcom+0x190>)
   83378:	47a0      	blx	r4
		pio_configure_pin(UART_RX_PIN,UART_RX_PIN_FLAGS);
   8337a:	4957      	ldr	r1, [pc, #348]	; (834d8 <Shellcom+0x194>)
   8337c:	200b      	movs	r0, #11
   8337e:	47a0      	blx	r4
		if(uart_init(UART,&uart_opt)) Error(ERROR_SHELLCOM_UART_INIT_FAILED);
   83380:	4956      	ldr	r1, [pc, #344]	; (834dc <Shellcom+0x198>)
   83382:	4857      	ldr	r0, [pc, #348]	; (834e0 <Shellcom+0x19c>)
   83384:	4b57      	ldr	r3, [pc, #348]	; (834e4 <Shellcom+0x1a0>)
   83386:	4798      	blx	r3
   83388:	b938      	cbnz	r0, 8339a <Shellcom+0x56>
   8338a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8338e:	4b56      	ldr	r3, [pc, #344]	; (834e8 <Shellcom+0x1a4>)
   83390:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(ID_UART);
		while(uart_is_rx_ready(UART)) uart_read(UART,(uint8_t*)&sc);
   83392:	4c53      	ldr	r4, [pc, #332]	; (834e0 <Shellcom+0x19c>)
   83394:	4e55      	ldr	r6, [pc, #340]	; (834ec <Shellcom+0x1a8>)
   83396:	4f56      	ldr	r7, [pc, #344]	; (834f0 <Shellcom+0x1ac>)
   83398:	e006      	b.n	833a8 <Shellcom+0x64>
		if(uart_init(UART,&uart_opt)) Error(ERROR_SHELLCOM_UART_INIT_FAILED);
   8339a:	2018      	movs	r0, #24
   8339c:	4b55      	ldr	r3, [pc, #340]	; (834f4 <Shellcom+0x1b0>)
   8339e:	4798      	blx	r3
   833a0:	e7f3      	b.n	8338a <Shellcom+0x46>
		while(uart_is_rx_ready(UART)) uart_read(UART,(uint8_t*)&sc);
   833a2:	a906      	add	r1, sp, #24
   833a4:	4620      	mov	r0, r4
   833a6:	47b8      	blx	r7
   833a8:	4620      	mov	r0, r4
   833aa:	47b0      	blx	r6
   833ac:	4605      	mov	r5, r0
   833ae:	2800      	cmp	r0, #0
   833b0:	d1f7      	bne.n	833a2 <Shellcom+0x5e>
		uart_get_status(UART);	
   833b2:	4c4b      	ldr	r4, [pc, #300]	; (834e0 <Shellcom+0x19c>)
   833b4:	4620      	mov	r0, r4
   833b6:	4b50      	ldr	r3, [pc, #320]	; (834f8 <Shellcom+0x1b4>)
   833b8:	4798      	blx	r3
		uart_enable_interrupt(UART,US_IER_RXRDY);
   833ba:	2101      	movs	r1, #1
   833bc:	4620      	mov	r0, r4
   833be:	4b4f      	ldr	r3, [pc, #316]	; (834fc <Shellcom+0x1b8>)
   833c0:	4798      	blx	r3
	default:
		Error(ERROR_SHELLCOM_SWITCH_BAD_SC, (uint32_t)sc);
	}

	return 0;
}
   833c2:	4628      	mov	r0, r5
   833c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   833c8:	b004      	add	sp, #16
   833ca:	4770      	bx	lr
		*shellcom.pTxWrite++=_charData;
   833cc:	4b3e      	ldr	r3, [pc, #248]	; (834c8 <Shellcom+0x184>)
   833ce:	681a      	ldr	r2, [r3, #0]
   833d0:	1c51      	adds	r1, r2, #1
   833d2:	6019      	str	r1, [r3, #0]
   833d4:	9907      	ldr	r1, [sp, #28]
   833d6:	7011      	strb	r1, [r2, #0]
		if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   833d8:	681a      	ldr	r2, [r3, #0]
   833da:	4b49      	ldr	r3, [pc, #292]	; (83500 <Shellcom+0x1bc>)
   833dc:	429a      	cmp	r2, r3
   833de:	d303      	bcc.n	833e8 <Shellcom+0xa4>
   833e0:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
   833e4:	4b38      	ldr	r3, [pc, #224]	; (834c8 <Shellcom+0x184>)
   833e6:	601a      	str	r2, [r3, #0]
		if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   833e8:	4b37      	ldr	r3, [pc, #220]	; (834c8 <Shellcom+0x184>)
   833ea:	681a      	ldr	r2, [r3, #0]
   833ec:	685b      	ldr	r3, [r3, #4]
   833ee:	429a      	cmp	r2, r3
   833f0:	d006      	beq.n	83400 <Shellcom+0xbc>
		uart_enable_interrupt(UART,US_IER_TXEMPTY);
   833f2:	f44f 7100 	mov.w	r1, #512	; 0x200
   833f6:	483a      	ldr	r0, [pc, #232]	; (834e0 <Shellcom+0x19c>)
   833f8:	4b40      	ldr	r3, [pc, #256]	; (834fc <Shellcom+0x1b8>)
   833fa:	4798      	blx	r3
		return 1;
   833fc:	2501      	movs	r5, #1
   833fe:	e7e0      	b.n	833c2 <Shellcom+0x7e>
		if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   83400:	2100      	movs	r1, #0
   83402:	2017      	movs	r0, #23
   83404:	4b3b      	ldr	r3, [pc, #236]	; (834f4 <Shellcom+0x1b0>)
   83406:	4798      	blx	r3
   83408:	e7f3      	b.n	833f2 <Shellcom+0xae>
		_nChar=0;
   8340a:	2300      	movs	r3, #0
   8340c:	9306      	str	r3, [sp, #24]
		while(*(char*)_pStr)
   8340e:	9b07      	ldr	r3, [sp, #28]
   83410:	4619      	mov	r1, r3
   83412:	781a      	ldrb	r2, [r3, #0]
   83414:	b1fa      	cbz	r2, 83456 <Shellcom+0x112>
			*shellcom.pTxWrite++=*(char*)_pStr++; _nChar++;
   83416:	4c2c      	ldr	r4, [pc, #176]	; (834c8 <Shellcom+0x184>)
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   83418:	4e39      	ldr	r6, [pc, #228]	; (83500 <Shellcom+0x1bc>)
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   8341a:	4d31      	ldr	r5, [pc, #196]	; (834e0 <Shellcom+0x19c>)
			*shellcom.pTxWrite++=*(char*)_pStr++; _nChar++;
   8341c:	6822      	ldr	r2, [r4, #0]
   8341e:	1c50      	adds	r0, r2, #1
   83420:	6020      	str	r0, [r4, #0]
   83422:	3301      	adds	r3, #1
   83424:	9307      	str	r3, [sp, #28]
   83426:	780b      	ldrb	r3, [r1, #0]
   83428:	7013      	strb	r3, [r2, #0]
   8342a:	9b06      	ldr	r3, [sp, #24]
   8342c:	3301      	adds	r3, #1
   8342e:	9306      	str	r3, [sp, #24]
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   83430:	6823      	ldr	r3, [r4, #0]
   83432:	42b3      	cmp	r3, r6
   83434:	bf24      	itt	cs
   83436:	4b25      	ldrcs	r3, [pc, #148]	; (834cc <Shellcom+0x188>)
   83438:	6023      	strcs	r3, [r4, #0]
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   8343a:	6822      	ldr	r2, [r4, #0]
   8343c:	6863      	ldr	r3, [r4, #4]
   8343e:	429a      	cmp	r2, r3
   83440:	d00b      	beq.n	8345a <Shellcom+0x116>
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   83442:	f44f 7100 	mov.w	r1, #512	; 0x200
   83446:	4628      	mov	r0, r5
   83448:	4b2c      	ldr	r3, [pc, #176]	; (834fc <Shellcom+0x1b8>)
   8344a:	4798      	blx	r3
		while(*(char*)_pStr)
   8344c:	9b07      	ldr	r3, [sp, #28]
   8344e:	4619      	mov	r1, r3
   83450:	781a      	ldrb	r2, [r3, #0]
   83452:	2a00      	cmp	r2, #0
   83454:	d1e2      	bne.n	8341c <Shellcom+0xd8>
		return _nChar;
   83456:	9d06      	ldr	r5, [sp, #24]
   83458:	e7b3      	b.n	833c2 <Shellcom+0x7e>
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   8345a:	2100      	movs	r1, #0
   8345c:	2017      	movs	r0, #23
   8345e:	4b25      	ldr	r3, [pc, #148]	; (834f4 <Shellcom+0x1b0>)
   83460:	4798      	blx	r3
   83462:	e7ee      	b.n	83442 <Shellcom+0xfe>
		_nChar=0;
   83464:	2300      	movs	r3, #0
   83466:	9306      	str	r3, [sp, #24]
		while(_strLen)
   83468:	9b08      	ldr	r3, [sp, #32]
   8346a:	b30b      	cbz	r3, 834b0 <Shellcom+0x16c>
			*shellcom.pTxWrite++=*(char*)_pStr++; _strLen--; _nChar++;
   8346c:	4c16      	ldr	r4, [pc, #88]	; (834c8 <Shellcom+0x184>)
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   8346e:	4e24      	ldr	r6, [pc, #144]	; (83500 <Shellcom+0x1bc>)
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   83470:	4d1b      	ldr	r5, [pc, #108]	; (834e0 <Shellcom+0x19c>)
			*shellcom.pTxWrite++=*(char*)_pStr++; _strLen--; _nChar++;
   83472:	6823      	ldr	r3, [r4, #0]
   83474:	1c5a      	adds	r2, r3, #1
   83476:	6022      	str	r2, [r4, #0]
   83478:	9a07      	ldr	r2, [sp, #28]
   8347a:	1c51      	adds	r1, r2, #1
   8347c:	9107      	str	r1, [sp, #28]
   8347e:	7812      	ldrb	r2, [r2, #0]
   83480:	701a      	strb	r2, [r3, #0]
   83482:	9b08      	ldr	r3, [sp, #32]
   83484:	3b01      	subs	r3, #1
   83486:	9308      	str	r3, [sp, #32]
   83488:	9b06      	ldr	r3, [sp, #24]
   8348a:	3301      	adds	r3, #1
   8348c:	9306      	str	r3, [sp, #24]
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   8348e:	6823      	ldr	r3, [r4, #0]
   83490:	42b3      	cmp	r3, r6
   83492:	bf24      	itt	cs
   83494:	4b0d      	ldrcs	r3, [pc, #52]	; (834cc <Shellcom+0x188>)
   83496:	6023      	strcs	r3, [r4, #0]
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   83498:	6822      	ldr	r2, [r4, #0]
   8349a:	6863      	ldr	r3, [r4, #4]
   8349c:	429a      	cmp	r2, r3
   8349e:	d009      	beq.n	834b4 <Shellcom+0x170>
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   834a0:	f44f 7100 	mov.w	r1, #512	; 0x200
   834a4:	4628      	mov	r0, r5
   834a6:	4b15      	ldr	r3, [pc, #84]	; (834fc <Shellcom+0x1b8>)
   834a8:	4798      	blx	r3
		while(_strLen)
   834aa:	9b08      	ldr	r3, [sp, #32]
   834ac:	2b00      	cmp	r3, #0
   834ae:	d1e0      	bne.n	83472 <Shellcom+0x12e>
		return _nChar;
   834b0:	9d06      	ldr	r5, [sp, #24]
   834b2:	e786      	b.n	833c2 <Shellcom+0x7e>
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   834b4:	2100      	movs	r1, #0
   834b6:	2017      	movs	r0, #23
   834b8:	4b0e      	ldr	r3, [pc, #56]	; (834f4 <Shellcom+0x1b0>)
   834ba:	4798      	blx	r3
   834bc:	e7f0      	b.n	834a0 <Shellcom+0x15c>
		Error(ERROR_SHELLCOM_SWITCH_BAD_SC, (uint32_t)sc);
   834be:	200c      	movs	r0, #12
   834c0:	4b0c      	ldr	r3, [pc, #48]	; (834f4 <Shellcom+0x1b0>)
   834c2:	4798      	blx	r3
	return 0;
   834c4:	2500      	movs	r5, #0
   834c6:	e77c      	b.n	833c2 <Shellcom+0x7e>
   834c8:	200013b4 	.word	0x200013b4
   834cc:	200013bc 	.word	0x200013bc
   834d0:	00080aed 	.word	0x00080aed
   834d4:	000808ed 	.word	0x000808ed
   834d8:	08000001 	.word	0x08000001
   834dc:	0008981c 	.word	0x0008981c
   834e0:	400e0600 	.word	0x400e0600
   834e4:	00080f91 	.word	0x00080f91
   834e8:	e000e100 	.word	0xe000e100
   834ec:	00080fd3 	.word	0x00080fd3
   834f0:	00080fdb 	.word	0x00080fdb
   834f4:	000817f5 	.word	0x000817f5
   834f8:	00080fcf 	.word	0x00080fcf
   834fc:	00080fc7 	.word	0x00080fc7
   83500:	200015bc 	.word	0x200015bc

00083504 <UART_Handler>:
enum{
	_SHELL_KBHIT = 2
};

void UART_Handler()
{
   83504:	b510      	push	{r4, lr}
   83506:	b082      	sub	sp, #8
	uint32_t dw_status = uart_get_status(UART);
   83508:	4816      	ldr	r0, [pc, #88]	; (83564 <UART_Handler+0x60>)
   8350a:	4b17      	ldr	r3, [pc, #92]	; (83568 <UART_Handler+0x64>)
   8350c:	4798      	blx	r3
   8350e:	4604      	mov	r4, r0
	//TX section //////////////////////////////////////////////////////////////////////////////////
	if(mIsBitsSet(dw_status,US_CSR_TXEMPTY))
   83510:	f410 7f00 	tst.w	r0, #512	; 0x200
   83514:	d011      	beq.n	8353a <UART_Handler+0x36>
	{
		if(shellcom.pTxRead!=shellcom.pTxWrite)
   83516:	4a15      	ldr	r2, [pc, #84]	; (8356c <UART_Handler+0x68>)
   83518:	6853      	ldr	r3, [r2, #4]
   8351a:	6812      	ldr	r2, [r2, #0]
   8351c:	4293      	cmp	r3, r2
   8351e:	d011      	beq.n	83544 <UART_Handler+0x40>
		{
			UART->UART_THR = *shellcom.pTxRead++;
   83520:	1c5a      	adds	r2, r3, #1
   83522:	4912      	ldr	r1, [pc, #72]	; (8356c <UART_Handler+0x68>)
   83524:	604a      	str	r2, [r1, #4]
   83526:	7819      	ldrb	r1, [r3, #0]
   83528:	4b0e      	ldr	r3, [pc, #56]	; (83564 <UART_Handler+0x60>)
   8352a:	61d9      	str	r1, [r3, #28]
			if(shellcom.pTxRead>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxRead=shellcomTxBuf;
   8352c:	4b10      	ldr	r3, [pc, #64]	; (83570 <UART_Handler+0x6c>)
   8352e:	429a      	cmp	r2, r3
   83530:	d303      	bcc.n	8353a <UART_Handler+0x36>
   83532:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
   83536:	4b0d      	ldr	r3, [pc, #52]	; (8356c <UART_Handler+0x68>)
   83538:	605a      	str	r2, [r3, #4]
			uart_disable_interrupt(UART,US_IER_TXEMPTY);
		}
	}

	//RX section //////////////////////////////////////////////////////////////////////////////////
	if(mIsBitsSet(dw_status,US_CSR_RXRDY))
   8353a:	f014 0f01 	tst.w	r4, #1
   8353e:	d107      	bne.n	83550 <UART_Handler+0x4c>
	{
		PushTask(Shell,_SHELL_KBHIT,UART->UART_RHR,0);
	}
}
   83540:	b002      	add	sp, #8
   83542:	bd10      	pop	{r4, pc}
			uart_disable_interrupt(UART,US_IER_TXEMPTY);
   83544:	f44f 7100 	mov.w	r1, #512	; 0x200
   83548:	4806      	ldr	r0, [pc, #24]	; (83564 <UART_Handler+0x60>)
   8354a:	4b0a      	ldr	r3, [pc, #40]	; (83574 <UART_Handler+0x70>)
   8354c:	4798      	blx	r3
   8354e:	e7f4      	b.n	8353a <UART_Handler+0x36>
		PushTask(Shell,_SHELL_KBHIT,UART->UART_RHR,0);
   83550:	4b04      	ldr	r3, [pc, #16]	; (83564 <UART_Handler+0x60>)
   83552:	699b      	ldr	r3, [r3, #24]
   83554:	2200      	movs	r2, #0
   83556:	9200      	str	r2, [sp, #0]
   83558:	2202      	movs	r2, #2
   8355a:	4907      	ldr	r1, [pc, #28]	; (83578 <UART_Handler+0x74>)
   8355c:	2066      	movs	r0, #102	; 0x66
   8355e:	4c07      	ldr	r4, [pc, #28]	; (8357c <UART_Handler+0x78>)
   83560:	47a0      	blx	r4
}
   83562:	e7ed      	b.n	83540 <UART_Handler+0x3c>
   83564:	400e0600 	.word	0x400e0600
   83568:	00080fcf 	.word	0x00080fcf
   8356c:	200013b4 	.word	0x200013b4
   83570:	200015bc 	.word	0x200015bc
   83574:	00080fcb 	.word	0x00080fcb
   83578:	00082175 	.word	0x00082175
   8357c:	00083581 	.word	0x00083581

00083580 <Taskman>:
	_TASKMAN_DELAYED_TASK_PROC	= 1
};


uint32_t Taskman(uint32_t sc, ...)
{
   83580:	b40f      	push	{r0, r1, r2, r3}
   83582:	b5f0      	push	{r4, r5, r6, r7, lr}
   83584:	b083      	sub	sp, #12
	switch(sc)
   83586:	9908      	ldr	r1, [sp, #32]
   83588:	2964      	cmp	r1, #100	; 0x64
   8358a:	d028      	beq.n	835de <Taskman+0x5e>
   8358c:	d91e      	bls.n	835cc <Taskman+0x4c>
   8358e:	2966      	cmp	r1, #102	; 0x66
   83590:	d06b      	beq.n	8366a <Taskman+0xea>
   83592:	2967      	cmp	r1, #103	; 0x67
   83594:	f040 80cd 	bne.w	83732 <Taskman+0x1b2>
#undef _delay
#undef k
		break;

	case TASKMAN_POP:
		cpu_irq_enter_critical();
   83598:	4b68      	ldr	r3, [pc, #416]	; (8373c <Taskman+0x1bc>)
   8359a:	4798      	blx	r3
		if(taskman.pPop!=taskman.pPush)
   8359c:	4a68      	ldr	r2, [pc, #416]	; (83740 <Taskman+0x1c0>)
   8359e:	6853      	ldr	r3, [r2, #4]
   835a0:	6812      	ldr	r2, [r2, #0]
   835a2:	4293      	cmp	r3, r2
   835a4:	f000 80ae 	beq.w	83704 <Taskman+0x184>
		{
			t_pTaskFunc	 func;
			uint32_t pa;
			func = taskman.pPop->pFunc;
   835a8:	681d      	ldr	r5, [r3, #0]
			sc = taskman.pPop->sc;
   835aa:	685c      	ldr	r4, [r3, #4]
   835ac:	9408      	str	r4, [sp, #32]
			pa = taskman.pPop->param;
   835ae:	689e      	ldr	r6, [r3, #8]
			taskman.pPop++;
   835b0:	3310      	adds	r3, #16
			if(taskman.pPop>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPop=tasks;
   835b2:	4a64      	ldr	r2, [pc, #400]	; (83744 <Taskman+0x1c4>)
   835b4:	4293      	cmp	r3, r2
   835b6:	f0c0 80a2 	bcc.w	836fe <Taskman+0x17e>
   835ba:	4a63      	ldr	r2, [pc, #396]	; (83748 <Taskman+0x1c8>)
   835bc:	4b60      	ldr	r3, [pc, #384]	; (83740 <Taskman+0x1c0>)
   835be:	605a      	str	r2, [r3, #4]
			cpu_irq_leave_critical();
   835c0:	4b62      	ldr	r3, [pc, #392]	; (8374c <Taskman+0x1cc>)
   835c2:	4798      	blx	r3
			func(sc,pa);
   835c4:	4631      	mov	r1, r6
   835c6:	4620      	mov	r0, r4
   835c8:	47a8      	blx	r5
			return 0; //Must return here because of "cpu_irq_leave_critical()"
   835ca:	e048      	b.n	8365e <Taskman+0xde>
	switch(sc)
   835cc:	2901      	cmp	r1, #1
   835ce:	f040 80b0 	bne.w	83732 <Taskman+0x1b2>


	////////// PRIVATE SERVICES IMPLEMENTATION ///////////////////////////////////////////
	case _TASKMAN_DELAYED_TASK_PROC:
#define k sc
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   835d2:	2500      	movs	r5, #0
   835d4:	9508      	str	r5, [sp, #32]
   835d6:	4c5e      	ldr	r4, [pc, #376]	; (83750 <Taskman+0x1d0>)
		{
			if(dTasks[k].delay)
			{
				if(--dTasks[k].delay==0)
				{
					PushTask(
   835d8:	462f      	mov	r7, r5
   835da:	2666      	movs	r6, #102	; 0x66
   835dc:	e09a      	b.n	83714 <Taskman+0x194>
		taskman.pPop=taskman.pPush=tasks;
   835de:	4b58      	ldr	r3, [pc, #352]	; (83740 <Taskman+0x1c0>)
   835e0:	4a59      	ldr	r2, [pc, #356]	; (83748 <Taskman+0x1c8>)
   835e2:	601a      	str	r2, [r3, #0]
   835e4:	605a      	str	r2, [r3, #4]
   835e6:	4b5a      	ldr	r3, [pc, #360]	; (83750 <Taskman+0x1d0>)
   835e8:	f503 71a0 	add.w	r1, r3, #320	; 0x140
			dTasks[k].delay=0;
   835ec:	2200      	movs	r2, #0
   835ee:	60da      	str	r2, [r3, #12]
   835f0:	3310      	adds	r3, #16
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   835f2:	428b      	cmp	r3, r1
   835f4:	d1fb      	bne.n	835ee <Taskman+0x6e>
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   835f6:	4b57      	ldr	r3, [pc, #348]	; (83754 <Taskman+0x1d4>)
   835f8:	2202      	movs	r2, #2
   835fa:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   835fc:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   835fe:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   83600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   83604:	6f19      	ldr	r1, [r3, #112]	; 0x70
   83606:	f021 0102 	bic.w	r1, r1, #2
   8360a:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   8360c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8360e:	2016      	movs	r0, #22
   83610:	4b51      	ldr	r3, [pc, #324]	; (83758 <Taskman+0x1d8>)
   83612:	4798      	blx	r3

	//Configure the PMC to enable the TC module.
	sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);

	//Init TC to waveform mode.
	tc_init(
   83614:	4c51      	ldr	r4, [pc, #324]	; (8375c <Taskman+0x1dc>)
   83616:	4a52      	ldr	r2, [pc, #328]	; (83760 <Taskman+0x1e0>)
   83618:	2100      	movs	r1, #0
   8361a:	4620      	mov	r0, r4
   8361c:	4b51      	ldr	r3, [pc, #324]	; (83764 <Taskman+0x1e4>)
   8361e:	4798      	blx	r3

	//Configure waveform frequency and duty cycle.
	rc =	(sysclk_get_peripheral_bus_hz(TC) /
	TC_WAVEFORM_DIVISOR) /
	TC_WAVEFORM_FREQUENCY;
	tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
   83620:	f240 22ee 	movw	r2, #750	; 0x2ee
   83624:	2100      	movs	r1, #0
   83626:	4620      	mov	r0, r4
   83628:	4b4f      	ldr	r3, [pc, #316]	; (83768 <Taskman+0x1e8>)
   8362a:	4798      	blx	r3

	ra = (100 - TC_WAVEFORM_DUTY_CYCLE) * rc / 100;
	tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
   8362c:	f240 220d 	movw	r2, #525	; 0x20d
   83630:	2100      	movs	r1, #0
   83632:	4620      	mov	r0, r4
   83634:	4b4d      	ldr	r3, [pc, #308]	; (8376c <Taskman+0x1ec>)
   83636:	4798      	blx	r3

	//Enable TC TC_CHANNEL_WAVEFORM
	tc_start(TC, TC_CHANNEL_WAVEFORM);
   83638:	2100      	movs	r1, #0
   8363a:	4620      	mov	r0, r4
   8363c:	4b4c      	ldr	r3, [pc, #304]	; (83770 <Taskman+0x1f0>)
   8363e:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   83640:	4b4c      	ldr	r3, [pc, #304]	; (83774 <Taskman+0x1f4>)
   83642:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   83646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8364a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8364e:	2100      	movs	r1, #0
   83650:	f883 1316 	strb.w	r1, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83654:	601a      	str	r2, [r3, #0]
		tc_enable_interrupt(TC, TC_CHANNEL_WAVEFORM, TC_IER_CPAS);
   83656:	2204      	movs	r2, #4
   83658:	4620      	mov	r0, r4
   8365a:	4b47      	ldr	r3, [pc, #284]	; (83778 <Taskman+0x1f8>)
   8365c:	4798      	blx	r3
}
   8365e:	2000      	movs	r0, #0
   83660:	b003      	add	sp, #12
   83662:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   83666:	b004      	add	sp, #16
   83668:	4770      	bx	lr
		cpu_irq_enter_critical();
   8366a:	4b34      	ldr	r3, [pc, #208]	; (8373c <Taskman+0x1bc>)
   8366c:	4798      	blx	r3
		if(_delay)
   8366e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   83670:	b345      	cbz	r5, 836c4 <Taskman+0x144>
			for(k=0;(k<TASKMAN_DELAYED_TASK_LIST_LEN)&&(dTasks[k].delay);k++);
   83672:	2300      	movs	r3, #0
   83674:	9308      	str	r3, [sp, #32]
   83676:	4b36      	ldr	r3, [pc, #216]	; (83750 <Taskman+0x1d0>)
   83678:	68db      	ldr	r3, [r3, #12]
   8367a:	b1a3      	cbz	r3, 836a6 <Taskman+0x126>
   8367c:	2301      	movs	r3, #1
   8367e:	9308      	str	r3, [sp, #32]
   83680:	4a33      	ldr	r2, [pc, #204]	; (83750 <Taskman+0x1d0>)
   83682:	2000      	movs	r0, #0
   83684:	461c      	mov	r4, r3
   83686:	69d1      	ldr	r1, [r2, #28]
   83688:	b151      	cbz	r1, 836a0 <Taskman+0x120>
   8368a:	3301      	adds	r3, #1
   8368c:	3210      	adds	r2, #16
   8368e:	4620      	mov	r0, r4
   83690:	2b14      	cmp	r3, #20
   83692:	d1f8      	bne.n	83686 <Taskman+0x106>
			if(k==TASKMAN_DELAYED_TASK_LIST_LEN) Error(ERROR_TASKMAN_DELAYED_TASKLIST_FULL, (uint32_t)0);
   83694:	2100      	movs	r1, #0
   83696:	2016      	movs	r0, #22
   83698:	4b38      	ldr	r3, [pc, #224]	; (8377c <Taskman+0x1fc>)
   8369a:	4798      	blx	r3
   8369c:	2314      	movs	r3, #20
   8369e:	e002      	b.n	836a6 <Taskman+0x126>
   836a0:	b970      	cbnz	r0, 836c0 <Taskman+0x140>
   836a2:	2b14      	cmp	r3, #20
   836a4:	d0f6      	beq.n	83694 <Taskman+0x114>
			dTasks[k].pFunc=_func;
   836a6:	492a      	ldr	r1, [pc, #168]	; (83750 <Taskman+0x1d0>)
   836a8:	011b      	lsls	r3, r3, #4
   836aa:	18ca      	adds	r2, r1, r3
   836ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   836ae:	50c8      	str	r0, [r1, r3]
			dTasks[k].sc=_sc;
   836b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   836b2:	6053      	str	r3, [r2, #4]
			dTasks[k].param=_param;
   836b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   836b6:	6093      	str	r3, [r2, #8]
			dTasks[k].delay=_delay;
   836b8:	60d5      	str	r5, [r2, #12]
		cpu_irq_leave_critical();
   836ba:	4b24      	ldr	r3, [pc, #144]	; (8374c <Taskman+0x1cc>)
   836bc:	4798      	blx	r3
		break;
   836be:	e7ce      	b.n	8365e <Taskman+0xde>
   836c0:	9308      	str	r3, [sp, #32]
   836c2:	e7ee      	b.n	836a2 <Taskman+0x122>
			taskman.pPush->pFunc=_func;
   836c4:	4b1e      	ldr	r3, [pc, #120]	; (83740 <Taskman+0x1c0>)
   836c6:	681a      	ldr	r2, [r3, #0]
   836c8:	9909      	ldr	r1, [sp, #36]	; 0x24
   836ca:	6011      	str	r1, [r2, #0]
			taskman.pPush->sc=_sc;
   836cc:	681b      	ldr	r3, [r3, #0]
   836ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   836d0:	605a      	str	r2, [r3, #4]
			taskman.pPush->param=_param;
   836d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   836d4:	609a      	str	r2, [r3, #8]
			taskman.pPush++;
   836d6:	3310      	adds	r3, #16
			if(taskman.pPush>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPush=tasks;
   836d8:	4a1a      	ldr	r2, [pc, #104]	; (83744 <Taskman+0x1c4>)
   836da:	4293      	cmp	r3, r2
   836dc:	d20b      	bcs.n	836f6 <Taskman+0x176>
			taskman.pPush++;
   836de:	4a18      	ldr	r2, [pc, #96]	; (83740 <Taskman+0x1c0>)
   836e0:	6013      	str	r3, [r2, #0]
			if(taskman.pPush==taskman.pPop) Error(ERROR_TASKMAN_TASKLIST_FULL, (uint32_t)0);
   836e2:	4b17      	ldr	r3, [pc, #92]	; (83740 <Taskman+0x1c0>)
   836e4:	681a      	ldr	r2, [r3, #0]
   836e6:	685b      	ldr	r3, [r3, #4]
   836e8:	429a      	cmp	r2, r3
   836ea:	d1e6      	bne.n	836ba <Taskman+0x13a>
   836ec:	2100      	movs	r1, #0
   836ee:	2015      	movs	r0, #21
   836f0:	4b22      	ldr	r3, [pc, #136]	; (8377c <Taskman+0x1fc>)
   836f2:	4798      	blx	r3
   836f4:	e7e1      	b.n	836ba <Taskman+0x13a>
			if(taskman.pPush>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPush=tasks;
   836f6:	4a14      	ldr	r2, [pc, #80]	; (83748 <Taskman+0x1c8>)
   836f8:	4b11      	ldr	r3, [pc, #68]	; (83740 <Taskman+0x1c0>)
   836fa:	601a      	str	r2, [r3, #0]
   836fc:	e7f1      	b.n	836e2 <Taskman+0x162>
			taskman.pPop++;
   836fe:	4a10      	ldr	r2, [pc, #64]	; (83740 <Taskman+0x1c0>)
   83700:	6053      	str	r3, [r2, #4]
   83702:	e75d      	b.n	835c0 <Taskman+0x40>
		cpu_irq_leave_critical();
   83704:	4b11      	ldr	r3, [pc, #68]	; (8374c <Taskman+0x1cc>)
   83706:	4798      	blx	r3
		break;
   83708:	e7a9      	b.n	8365e <Taskman+0xde>
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   8370a:	3501      	adds	r5, #1
   8370c:	9508      	str	r5, [sp, #32]
   8370e:	3410      	adds	r4, #16
   83710:	2d14      	cmp	r5, #20
   83712:	d0a4      	beq.n	8365e <Taskman+0xde>
			if(dTasks[k].delay)
   83714:	68e3      	ldr	r3, [r4, #12]
   83716:	2b00      	cmp	r3, #0
   83718:	d0f7      	beq.n	8370a <Taskman+0x18a>
				if(--dTasks[k].delay==0)
   8371a:	3b01      	subs	r3, #1
   8371c:	60e3      	str	r3, [r4, #12]
   8371e:	2b00      	cmp	r3, #0
   83720:	d1f3      	bne.n	8370a <Taskman+0x18a>
					PushTask(
   83722:	68a3      	ldr	r3, [r4, #8]
   83724:	6862      	ldr	r2, [r4, #4]
   83726:	6821      	ldr	r1, [r4, #0]
   83728:	9700      	str	r7, [sp, #0]
   8372a:	4630      	mov	r0, r6
   8372c:	f7ff ff28 	bl	83580 <Taskman>
   83730:	e7eb      	b.n	8370a <Taskman+0x18a>
		Error(ERROR_TASKMAN_SWITCH_BAD_SC,  (uint32_t)sc);
   83732:	200b      	movs	r0, #11
   83734:	4b11      	ldr	r3, [pc, #68]	; (8377c <Taskman+0x1fc>)
   83736:	4798      	blx	r3
   83738:	e791      	b.n	8365e <Taskman+0xde>
   8373a:	bf00      	nop
   8373c:	00080b25 	.word	0x00080b25
   83740:	200016fc 	.word	0x200016fc
   83744:	200016fc 	.word	0x200016fc
   83748:	200015bc 	.word	0x200015bc
   8374c:	00080b61 	.word	0x00080b61
   83750:	20001704 	.word	0x20001704
   83754:	400e0c00 	.word	0x400e0c00
   83758:	00080aed 	.word	0x00080aed
   8375c:	40080000 	.word	0x40080000
   83760:	0009c003 	.word	0x0009c003
   83764:	00080f51 	.word	0x00080f51
   83768:	00080f79 	.word	0x00080f79
   8376c:	00080f71 	.word	0x00080f71
   83770:	00080f69 	.word	0x00080f69
   83774:	e000e100 	.word	0xe000e100
   83778:	00080f81 	.word	0x00080f81
   8377c:	000817f5 	.word	0x000817f5

00083780 <TC0_Handler>:
{
   83780:	b570      	push	{r4, r5, r6, lr}
	tc_get_status(TC, TC_CHANNEL_WAVEFORM);
   83782:	2100      	movs	r1, #0
   83784:	480b      	ldr	r0, [pc, #44]	; (837b4 <TC0_Handler+0x34>)
   83786:	4b0c      	ldr	r3, [pc, #48]	; (837b8 <TC0_Handler+0x38>)
   83788:	4798      	blx	r3
	Taskman(_TASKMAN_DELAYED_TASK_PROC);
   8378a:	2001      	movs	r0, #1
   8378c:	4b0b      	ldr	r3, [pc, #44]	; (837bc <TC0_Handler+0x3c>)
   8378e:	4798      	blx	r3
	Shell(__TIMER_CALL_SERVICE);
   83790:	2001      	movs	r0, #1
   83792:	4b0b      	ldr	r3, [pc, #44]	; (837c0 <TC0_Handler+0x40>)
   83794:	4798      	blx	r3
	while(timerCallMap[k])
   83796:	4b0b      	ldr	r3, [pc, #44]	; (837c4 <TC0_Handler+0x44>)
   83798:	681b      	ldr	r3, [r3, #0]
   8379a:	b153      	cbz	r3, 837b2 <TC0_Handler+0x32>
   8379c:	2400      	movs	r4, #0
		timerCallMap[k](__TIMER_CALL_SERVICE);
   8379e:	2601      	movs	r6, #1
	while(timerCallMap[k])
   837a0:	4d08      	ldr	r5, [pc, #32]	; (837c4 <TC0_Handler+0x44>)
		timerCallMap[k](__TIMER_CALL_SERVICE);
   837a2:	4630      	mov	r0, r6
   837a4:	4798      	blx	r3
		k++;
   837a6:	3401      	adds	r4, #1
   837a8:	b2e4      	uxtb	r4, r4
	while(timerCallMap[k])
   837aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   837ae:	2b00      	cmp	r3, #0
   837b0:	d1f7      	bne.n	837a2 <TC0_Handler+0x22>
   837b2:	bd70      	pop	{r4, r5, r6, pc}
   837b4:	40080000 	.word	0x40080000
   837b8:	00080f89 	.word	0x00080f89
   837bc:	00083581 	.word	0x00083581
   837c0:	00082175 	.word	0x00082175
   837c4:	20000124 	.word	0x20000124

000837c8 <mstrtokRestore>:
    return pToken;
}

void  mstrtokRestore(void)
{
    if(_pEndToken) *_pEndToken=_chEndToken;
   837c8:	4b03      	ldr	r3, [pc, #12]	; (837d8 <mstrtokRestore+0x10>)
   837ca:	681b      	ldr	r3, [r3, #0]
   837cc:	b113      	cbz	r3, 837d4 <mstrtokRestore+0xc>
   837ce:	4a03      	ldr	r2, [pc, #12]	; (837dc <mstrtokRestore+0x14>)
   837d0:	7812      	ldrb	r2, [r2, #0]
   837d2:	701a      	strb	r2, [r3, #0]
   837d4:	4770      	bx	lr
   837d6:	bf00      	nop
   837d8:	2000107c 	.word	0x2000107c
   837dc:	20001078 	.word	0x20001078

000837e0 <mstrtokReset>:
}

void  mstrtokReset(void)
{
    _chEndToken  = '\0';
   837e0:	2300      	movs	r3, #0
   837e2:	4a02      	ldr	r2, [pc, #8]	; (837ec <mstrtokReset+0xc>)
   837e4:	7013      	strb	r3, [r2, #0]
    _pEndToken = NULL;
   837e6:	4a02      	ldr	r2, [pc, #8]	; (837f0 <mstrtokReset+0x10>)
   837e8:	6013      	str	r3, [r2, #0]
   837ea:	4770      	bx	lr
   837ec:	20001078 	.word	0x20001078
   837f0:	2000107c 	.word	0x2000107c

000837f4 <_IsSeparator>:
}


char _IsSeparator(char ch, const char*pSep)
{
    while(*pSep && (*pSep!=ch)) pSep++;
   837f4:	780b      	ldrb	r3, [r1, #0]
   837f6:	b13b      	cbz	r3, 83808 <_IsSeparator+0x14>
   837f8:	4298      	cmp	r0, r3
   837fa:	d005      	beq.n	83808 <_IsSeparator+0x14>
   837fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   83800:	b113      	cbz	r3, 83808 <_IsSeparator+0x14>
   83802:	4283      	cmp	r3, r0
   83804:	d1fa      	bne.n	837fc <_IsSeparator+0x8>
   83806:	4603      	mov	r3, r0
    return *pSep;
}
   83808:	4618      	mov	r0, r3
   8380a:	4770      	bx	lr

0008380c <mstrtok>:
{
   8380c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(pStr) 
   83810:	2800      	cmp	r0, #0
   83812:	d02b      	beq.n	8386c <mstrtok+0x60>
        pToken=pStr;
   83814:	4a1d      	ldr	r2, [pc, #116]	; (8388c <mstrtok+0x80>)
   83816:	6010      	str	r0, [r2, #0]
    while(*pToken && _IsSeparator(*pToken,pSep)) { pToken++; }
   83818:	4b1c      	ldr	r3, [pc, #112]	; (8388c <mstrtok+0x80>)
   8381a:	681d      	ldr	r5, [r3, #0]
   8381c:	782c      	ldrb	r4, [r5, #0]
   8381e:	2c00      	cmp	r4, #0
   83820:	d030      	beq.n	83884 <mstrtok+0x78>
   83822:	4688      	mov	r8, r1
   83824:	4e1a      	ldr	r6, [pc, #104]	; (83890 <mstrtok+0x84>)
   83826:	4f19      	ldr	r7, [pc, #100]	; (8388c <mstrtok+0x80>)
   83828:	4641      	mov	r1, r8
   8382a:	4620      	mov	r0, r4
   8382c:	47b0      	blx	r6
   8382e:	b120      	cbz	r0, 8383a <mstrtok+0x2e>
   83830:	3501      	adds	r5, #1
   83832:	603d      	str	r5, [r7, #0]
   83834:	782c      	ldrb	r4, [r5, #0]
   83836:	2c00      	cmp	r4, #0
   83838:	d1f6      	bne.n	83828 <mstrtok+0x1c>
    _pEndToken=pToken;
   8383a:	4b16      	ldr	r3, [pc, #88]	; (83894 <mstrtok+0x88>)
   8383c:	601d      	str	r5, [r3, #0]
    while(*_pEndToken && !_IsSeparator(*_pEndToken,pSep)) { _pEndToken++; }
   8383e:	782c      	ldrb	r4, [r5, #0]
   83840:	b1f4      	cbz	r4, 83880 <mstrtok+0x74>
   83842:	462e      	mov	r6, r5
   83844:	4f12      	ldr	r7, [pc, #72]	; (83890 <mstrtok+0x84>)
   83846:	f8df 904c 	ldr.w	r9, [pc, #76]	; 83894 <mstrtok+0x88>
   8384a:	4641      	mov	r1, r8
   8384c:	4620      	mov	r0, r4
   8384e:	47b8      	blx	r7
   83850:	b928      	cbnz	r0, 8385e <mstrtok+0x52>
   83852:	3601      	adds	r6, #1
   83854:	f8c9 6000 	str.w	r6, [r9]
   83858:	7834      	ldrb	r4, [r6, #0]
   8385a:	2c00      	cmp	r4, #0
   8385c:	d1f5      	bne.n	8384a <mstrtok+0x3e>
    _chEndToken=*_pEndToken;
   8385e:	4b0e      	ldr	r3, [pc, #56]	; (83898 <mstrtok+0x8c>)
   83860:	701c      	strb	r4, [r3, #0]
    *_pEndToken='\0';
   83862:	2300      	movs	r3, #0
   83864:	7033      	strb	r3, [r6, #0]
}
   83866:	4628      	mov	r0, r5
   83868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if(_pEndToken)
   8386c:	4b09      	ldr	r3, [pc, #36]	; (83894 <mstrtok+0x88>)
   8386e:	681d      	ldr	r5, [r3, #0]
   83870:	2d00      	cmp	r5, #0
   83872:	d0f8      	beq.n	83866 <mstrtok+0x5a>
        *_pEndToken=_chEndToken;
   83874:	4b08      	ldr	r3, [pc, #32]	; (83898 <mstrtok+0x8c>)
   83876:	781b      	ldrb	r3, [r3, #0]
   83878:	702b      	strb	r3, [r5, #0]
        pToken=_pEndToken;
   8387a:	4b04      	ldr	r3, [pc, #16]	; (8388c <mstrtok+0x80>)
   8387c:	601d      	str	r5, [r3, #0]
   8387e:	e7cb      	b.n	83818 <mstrtok+0xc>
    while(*_pEndToken && !_IsSeparator(*_pEndToken,pSep)) { _pEndToken++; }
   83880:	462e      	mov	r6, r5
   83882:	e7ec      	b.n	8385e <mstrtok+0x52>
    _pEndToken=pToken;
   83884:	4b03      	ldr	r3, [pc, #12]	; (83894 <mstrtok+0x88>)
   83886:	601d      	str	r5, [r3, #0]
    while(*pToken && _IsSeparator(*pToken,pSep)) { pToken++; }
   83888:	462e      	mov	r6, r5
   8388a:	e7e8      	b.n	8385e <mstrtok+0x52>
   8388c:	20001080 	.word	0x20001080
   83890:	000837f5 	.word	0x000837f5
   83894:	2000107c 	.word	0x2000107c
   83898:	20001078 	.word	0x20001078

0008389c <main>:
#define SABLIER_NEW			100



int main (void)
{
   8389c:	b500      	push	{lr}
   8389e:	b083      	sub	sp, #12
   838a0:	b672      	cpsid	i
   838a2:	f3bf 8f5f 	dmb	sy
	//osc_enable(OSC_MAINCK_XTAL);
	/* Insert system clock initialization code here (sysclk_init()). */
	cpu_irq_disable();
   838a6:	4e10      	ldr	r6, [pc, #64]	; (838e8 <main+0x4c>)
   838a8:	2400      	movs	r4, #0
   838aa:	7034      	strb	r4, [r6, #0]
	//rstc_enable_user_reset(RSTC);
	wdt_disable(WDT);
   838ac:	480f      	ldr	r0, [pc, #60]	; (838ec <main+0x50>)
   838ae:	4b10      	ldr	r3, [pc, #64]	; (838f0 <main+0x54>)
   838b0:	4798      	blx	r3
	sysclk_init();
   838b2:	4b10      	ldr	r3, [pc, #64]	; (838f4 <main+0x58>)
   838b4:	4798      	blx	r3
	board_init();
   838b6:	4b10      	ldr	r3, [pc, #64]	; (838f8 <main+0x5c>)
   838b8:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	/* Insert application code here, after the board has been initialized. */
	KernelNew();
   838ba:	2064      	movs	r0, #100	; 0x64
   838bc:	4d0f      	ldr	r5, [pc, #60]	; (838fc <main+0x60>)
   838be:	47a8      	blx	r5
   838c0:	2064      	movs	r0, #100	; 0x64
   838c2:	4b0f      	ldr	r3, [pc, #60]	; (83900 <main+0x64>)
   838c4:	4798      	blx	r3
	cpu_irq_enable();
   838c6:	2301      	movs	r3, #1
   838c8:	7033      	strb	r3, [r6, #0]
   838ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   838ce:	b662      	cpsie	i
	PushTask(Appli,APPLI_NEW,0,0);
   838d0:	9400      	str	r4, [sp, #0]
   838d2:	4623      	mov	r3, r4
   838d4:	2264      	movs	r2, #100	; 0x64
   838d6:	490b      	ldr	r1, [pc, #44]	; (83904 <main+0x68>)
   838d8:	2066      	movs	r0, #102	; 0x66
   838da:	47a8      	blx	r5
	KernelRun();
   838dc:	2567      	movs	r5, #103	; 0x67
   838de:	4c07      	ldr	r4, [pc, #28]	; (838fc <main+0x60>)
   838e0:	4628      	mov	r0, r5
   838e2:	47a0      	blx	r4
   838e4:	e7fc      	b.n	838e0 <main+0x44>
   838e6:	bf00      	nop
   838e8:	2000012c 	.word	0x2000012c
   838ec:	400e1250 	.word	0x400e1250
   838f0:	00080fed 	.word	0x00080fed
   838f4:	00080731 	.word	0x00080731
   838f8:	00080b21 	.word	0x00080b21
   838fc:	00083581 	.word	0x00083581
   83900:	00082175 	.word	0x00082175
   83904:	00080129 	.word	0x00080129

00083908 <__aeabi_frsub>:
   83908:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   8390c:	e002      	b.n	83914 <__addsf3>
   8390e:	bf00      	nop

00083910 <__aeabi_fsub>:
   83910:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00083914 <__addsf3>:
   83914:	0042      	lsls	r2, r0, #1
   83916:	bf1f      	itttt	ne
   83918:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   8391c:	ea92 0f03 	teqne	r2, r3
   83920:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   83924:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   83928:	d06a      	beq.n	83a00 <__addsf3+0xec>
   8392a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8392e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   83932:	bfc1      	itttt	gt
   83934:	18d2      	addgt	r2, r2, r3
   83936:	4041      	eorgt	r1, r0
   83938:	4048      	eorgt	r0, r1
   8393a:	4041      	eorgt	r1, r0
   8393c:	bfb8      	it	lt
   8393e:	425b      	neglt	r3, r3
   83940:	2b19      	cmp	r3, #25
   83942:	bf88      	it	hi
   83944:	4770      	bxhi	lr
   83946:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8394a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8394e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   83952:	bf18      	it	ne
   83954:	4240      	negne	r0, r0
   83956:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8395a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8395e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   83962:	bf18      	it	ne
   83964:	4249      	negne	r1, r1
   83966:	ea92 0f03 	teq	r2, r3
   8396a:	d03f      	beq.n	839ec <__addsf3+0xd8>
   8396c:	f1a2 0201 	sub.w	r2, r2, #1
   83970:	fa41 fc03 	asr.w	ip, r1, r3
   83974:	eb10 000c 	adds.w	r0, r0, ip
   83978:	f1c3 0320 	rsb	r3, r3, #32
   8397c:	fa01 f103 	lsl.w	r1, r1, r3
   83980:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   83984:	d502      	bpl.n	8398c <__addsf3+0x78>
   83986:	4249      	negs	r1, r1
   83988:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   8398c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   83990:	d313      	bcc.n	839ba <__addsf3+0xa6>
   83992:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   83996:	d306      	bcc.n	839a6 <__addsf3+0x92>
   83998:	0840      	lsrs	r0, r0, #1
   8399a:	ea4f 0131 	mov.w	r1, r1, rrx
   8399e:	f102 0201 	add.w	r2, r2, #1
   839a2:	2afe      	cmp	r2, #254	; 0xfe
   839a4:	d251      	bcs.n	83a4a <__addsf3+0x136>
   839a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   839aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   839ae:	bf08      	it	eq
   839b0:	f020 0001 	biceq.w	r0, r0, #1
   839b4:	ea40 0003 	orr.w	r0, r0, r3
   839b8:	4770      	bx	lr
   839ba:	0049      	lsls	r1, r1, #1
   839bc:	eb40 0000 	adc.w	r0, r0, r0
   839c0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   839c4:	f1a2 0201 	sub.w	r2, r2, #1
   839c8:	d1ed      	bne.n	839a6 <__addsf3+0x92>
   839ca:	fab0 fc80 	clz	ip, r0
   839ce:	f1ac 0c08 	sub.w	ip, ip, #8
   839d2:	ebb2 020c 	subs.w	r2, r2, ip
   839d6:	fa00 f00c 	lsl.w	r0, r0, ip
   839da:	bfaa      	itet	ge
   839dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   839e0:	4252      	neglt	r2, r2
   839e2:	4318      	orrge	r0, r3
   839e4:	bfbc      	itt	lt
   839e6:	40d0      	lsrlt	r0, r2
   839e8:	4318      	orrlt	r0, r3
   839ea:	4770      	bx	lr
   839ec:	f092 0f00 	teq	r2, #0
   839f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   839f4:	bf06      	itte	eq
   839f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   839fa:	3201      	addeq	r2, #1
   839fc:	3b01      	subne	r3, #1
   839fe:	e7b5      	b.n	8396c <__addsf3+0x58>
   83a00:	ea4f 0341 	mov.w	r3, r1, lsl #1
   83a04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   83a08:	bf18      	it	ne
   83a0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   83a0e:	d021      	beq.n	83a54 <__addsf3+0x140>
   83a10:	ea92 0f03 	teq	r2, r3
   83a14:	d004      	beq.n	83a20 <__addsf3+0x10c>
   83a16:	f092 0f00 	teq	r2, #0
   83a1a:	bf08      	it	eq
   83a1c:	4608      	moveq	r0, r1
   83a1e:	4770      	bx	lr
   83a20:	ea90 0f01 	teq	r0, r1
   83a24:	bf1c      	itt	ne
   83a26:	2000      	movne	r0, #0
   83a28:	4770      	bxne	lr
   83a2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   83a2e:	d104      	bne.n	83a3a <__addsf3+0x126>
   83a30:	0040      	lsls	r0, r0, #1
   83a32:	bf28      	it	cs
   83a34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   83a38:	4770      	bx	lr
   83a3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   83a3e:	bf3c      	itt	cc
   83a40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   83a44:	4770      	bxcc	lr
   83a46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   83a4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   83a4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83a52:	4770      	bx	lr
   83a54:	ea7f 6222 	mvns.w	r2, r2, asr #24
   83a58:	bf16      	itet	ne
   83a5a:	4608      	movne	r0, r1
   83a5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   83a60:	4601      	movne	r1, r0
   83a62:	0242      	lsls	r2, r0, #9
   83a64:	bf06      	itte	eq
   83a66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   83a6a:	ea90 0f01 	teqeq	r0, r1
   83a6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   83a72:	4770      	bx	lr

00083a74 <__aeabi_ui2f>:
   83a74:	f04f 0300 	mov.w	r3, #0
   83a78:	e004      	b.n	83a84 <__aeabi_i2f+0x8>
   83a7a:	bf00      	nop

00083a7c <__aeabi_i2f>:
   83a7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   83a80:	bf48      	it	mi
   83a82:	4240      	negmi	r0, r0
   83a84:	ea5f 0c00 	movs.w	ip, r0
   83a88:	bf08      	it	eq
   83a8a:	4770      	bxeq	lr
   83a8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   83a90:	4601      	mov	r1, r0
   83a92:	f04f 0000 	mov.w	r0, #0
   83a96:	e01c      	b.n	83ad2 <__aeabi_l2f+0x2a>

00083a98 <__aeabi_ul2f>:
   83a98:	ea50 0201 	orrs.w	r2, r0, r1
   83a9c:	bf08      	it	eq
   83a9e:	4770      	bxeq	lr
   83aa0:	f04f 0300 	mov.w	r3, #0
   83aa4:	e00a      	b.n	83abc <__aeabi_l2f+0x14>
   83aa6:	bf00      	nop

00083aa8 <__aeabi_l2f>:
   83aa8:	ea50 0201 	orrs.w	r2, r0, r1
   83aac:	bf08      	it	eq
   83aae:	4770      	bxeq	lr
   83ab0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   83ab4:	d502      	bpl.n	83abc <__aeabi_l2f+0x14>
   83ab6:	4240      	negs	r0, r0
   83ab8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83abc:	ea5f 0c01 	movs.w	ip, r1
   83ac0:	bf02      	ittt	eq
   83ac2:	4684      	moveq	ip, r0
   83ac4:	4601      	moveq	r1, r0
   83ac6:	2000      	moveq	r0, #0
   83ac8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   83acc:	bf08      	it	eq
   83ace:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   83ad2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   83ad6:	fabc f28c 	clz	r2, ip
   83ada:	3a08      	subs	r2, #8
   83adc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   83ae0:	db10      	blt.n	83b04 <__aeabi_l2f+0x5c>
   83ae2:	fa01 fc02 	lsl.w	ip, r1, r2
   83ae6:	4463      	add	r3, ip
   83ae8:	fa00 fc02 	lsl.w	ip, r0, r2
   83aec:	f1c2 0220 	rsb	r2, r2, #32
   83af0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83af4:	fa20 f202 	lsr.w	r2, r0, r2
   83af8:	eb43 0002 	adc.w	r0, r3, r2
   83afc:	bf08      	it	eq
   83afe:	f020 0001 	biceq.w	r0, r0, #1
   83b02:	4770      	bx	lr
   83b04:	f102 0220 	add.w	r2, r2, #32
   83b08:	fa01 fc02 	lsl.w	ip, r1, r2
   83b0c:	f1c2 0220 	rsb	r2, r2, #32
   83b10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   83b14:	fa21 f202 	lsr.w	r2, r1, r2
   83b18:	eb43 0002 	adc.w	r0, r3, r2
   83b1c:	bf08      	it	eq
   83b1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   83b22:	4770      	bx	lr

00083b24 <__aeabi_fmul>:
   83b24:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83b28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   83b2c:	bf1e      	ittt	ne
   83b2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   83b32:	ea92 0f0c 	teqne	r2, ip
   83b36:	ea93 0f0c 	teqne	r3, ip
   83b3a:	d06f      	beq.n	83c1c <__aeabi_fmul+0xf8>
   83b3c:	441a      	add	r2, r3
   83b3e:	ea80 0c01 	eor.w	ip, r0, r1
   83b42:	0240      	lsls	r0, r0, #9
   83b44:	bf18      	it	ne
   83b46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   83b4a:	d01e      	beq.n	83b8a <__aeabi_fmul+0x66>
   83b4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   83b50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   83b54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   83b58:	fba0 3101 	umull	r3, r1, r0, r1
   83b5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   83b60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   83b64:	bf3e      	ittt	cc
   83b66:	0049      	lslcc	r1, r1, #1
   83b68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   83b6c:	005b      	lslcc	r3, r3, #1
   83b6e:	ea40 0001 	orr.w	r0, r0, r1
   83b72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   83b76:	2afd      	cmp	r2, #253	; 0xfd
   83b78:	d81d      	bhi.n	83bb6 <__aeabi_fmul+0x92>
   83b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   83b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   83b82:	bf08      	it	eq
   83b84:	f020 0001 	biceq.w	r0, r0, #1
   83b88:	4770      	bx	lr
   83b8a:	f090 0f00 	teq	r0, #0
   83b8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   83b92:	bf08      	it	eq
   83b94:	0249      	lsleq	r1, r1, #9
   83b96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   83b9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   83b9e:	3a7f      	subs	r2, #127	; 0x7f
   83ba0:	bfc2      	ittt	gt
   83ba2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   83ba6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   83baa:	4770      	bxgt	lr
   83bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83bb0:	f04f 0300 	mov.w	r3, #0
   83bb4:	3a01      	subs	r2, #1
   83bb6:	dc5d      	bgt.n	83c74 <__aeabi_fmul+0x150>
   83bb8:	f112 0f19 	cmn.w	r2, #25
   83bbc:	bfdc      	itt	le
   83bbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   83bc2:	4770      	bxle	lr
   83bc4:	f1c2 0200 	rsb	r2, r2, #0
   83bc8:	0041      	lsls	r1, r0, #1
   83bca:	fa21 f102 	lsr.w	r1, r1, r2
   83bce:	f1c2 0220 	rsb	r2, r2, #32
   83bd2:	fa00 fc02 	lsl.w	ip, r0, r2
   83bd6:	ea5f 0031 	movs.w	r0, r1, rrx
   83bda:	f140 0000 	adc.w	r0, r0, #0
   83bde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   83be2:	bf08      	it	eq
   83be4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   83be8:	4770      	bx	lr
   83bea:	f092 0f00 	teq	r2, #0
   83bee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   83bf2:	bf02      	ittt	eq
   83bf4:	0040      	lsleq	r0, r0, #1
   83bf6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   83bfa:	3a01      	subeq	r2, #1
   83bfc:	d0f9      	beq.n	83bf2 <__aeabi_fmul+0xce>
   83bfe:	ea40 000c 	orr.w	r0, r0, ip
   83c02:	f093 0f00 	teq	r3, #0
   83c06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   83c0a:	bf02      	ittt	eq
   83c0c:	0049      	lsleq	r1, r1, #1
   83c0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   83c12:	3b01      	subeq	r3, #1
   83c14:	d0f9      	beq.n	83c0a <__aeabi_fmul+0xe6>
   83c16:	ea41 010c 	orr.w	r1, r1, ip
   83c1a:	e78f      	b.n	83b3c <__aeabi_fmul+0x18>
   83c1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   83c20:	ea92 0f0c 	teq	r2, ip
   83c24:	bf18      	it	ne
   83c26:	ea93 0f0c 	teqne	r3, ip
   83c2a:	d00a      	beq.n	83c42 <__aeabi_fmul+0x11e>
   83c2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   83c30:	bf18      	it	ne
   83c32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   83c36:	d1d8      	bne.n	83bea <__aeabi_fmul+0xc6>
   83c38:	ea80 0001 	eor.w	r0, r0, r1
   83c3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   83c40:	4770      	bx	lr
   83c42:	f090 0f00 	teq	r0, #0
   83c46:	bf17      	itett	ne
   83c48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   83c4c:	4608      	moveq	r0, r1
   83c4e:	f091 0f00 	teqne	r1, #0
   83c52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   83c56:	d014      	beq.n	83c82 <__aeabi_fmul+0x15e>
   83c58:	ea92 0f0c 	teq	r2, ip
   83c5c:	d101      	bne.n	83c62 <__aeabi_fmul+0x13e>
   83c5e:	0242      	lsls	r2, r0, #9
   83c60:	d10f      	bne.n	83c82 <__aeabi_fmul+0x15e>
   83c62:	ea93 0f0c 	teq	r3, ip
   83c66:	d103      	bne.n	83c70 <__aeabi_fmul+0x14c>
   83c68:	024b      	lsls	r3, r1, #9
   83c6a:	bf18      	it	ne
   83c6c:	4608      	movne	r0, r1
   83c6e:	d108      	bne.n	83c82 <__aeabi_fmul+0x15e>
   83c70:	ea80 0001 	eor.w	r0, r0, r1
   83c74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   83c78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   83c7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83c80:	4770      	bx	lr
   83c82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   83c86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   83c8a:	4770      	bx	lr

00083c8c <__aeabi_fdiv>:
   83c8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83c90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   83c94:	bf1e      	ittt	ne
   83c96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   83c9a:	ea92 0f0c 	teqne	r2, ip
   83c9e:	ea93 0f0c 	teqne	r3, ip
   83ca2:	d069      	beq.n	83d78 <__aeabi_fdiv+0xec>
   83ca4:	eba2 0203 	sub.w	r2, r2, r3
   83ca8:	ea80 0c01 	eor.w	ip, r0, r1
   83cac:	0249      	lsls	r1, r1, #9
   83cae:	ea4f 2040 	mov.w	r0, r0, lsl #9
   83cb2:	d037      	beq.n	83d24 <__aeabi_fdiv+0x98>
   83cb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   83cb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   83cbc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   83cc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   83cc4:	428b      	cmp	r3, r1
   83cc6:	bf38      	it	cc
   83cc8:	005b      	lslcc	r3, r3, #1
   83cca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   83cce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   83cd2:	428b      	cmp	r3, r1
   83cd4:	bf24      	itt	cs
   83cd6:	1a5b      	subcs	r3, r3, r1
   83cd8:	ea40 000c 	orrcs.w	r0, r0, ip
   83cdc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   83ce0:	bf24      	itt	cs
   83ce2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   83ce6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83cea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   83cee:	bf24      	itt	cs
   83cf0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   83cf4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83cf8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   83cfc:	bf24      	itt	cs
   83cfe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   83d02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83d06:	011b      	lsls	r3, r3, #4
   83d08:	bf18      	it	ne
   83d0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   83d0e:	d1e0      	bne.n	83cd2 <__aeabi_fdiv+0x46>
   83d10:	2afd      	cmp	r2, #253	; 0xfd
   83d12:	f63f af50 	bhi.w	83bb6 <__aeabi_fmul+0x92>
   83d16:	428b      	cmp	r3, r1
   83d18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   83d1c:	bf08      	it	eq
   83d1e:	f020 0001 	biceq.w	r0, r0, #1
   83d22:	4770      	bx	lr
   83d24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   83d28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   83d2c:	327f      	adds	r2, #127	; 0x7f
   83d2e:	bfc2      	ittt	gt
   83d30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   83d34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   83d38:	4770      	bxgt	lr
   83d3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83d3e:	f04f 0300 	mov.w	r3, #0
   83d42:	3a01      	subs	r2, #1
   83d44:	e737      	b.n	83bb6 <__aeabi_fmul+0x92>
   83d46:	f092 0f00 	teq	r2, #0
   83d4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   83d4e:	bf02      	ittt	eq
   83d50:	0040      	lsleq	r0, r0, #1
   83d52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   83d56:	3a01      	subeq	r2, #1
   83d58:	d0f9      	beq.n	83d4e <__aeabi_fdiv+0xc2>
   83d5a:	ea40 000c 	orr.w	r0, r0, ip
   83d5e:	f093 0f00 	teq	r3, #0
   83d62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   83d66:	bf02      	ittt	eq
   83d68:	0049      	lsleq	r1, r1, #1
   83d6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   83d6e:	3b01      	subeq	r3, #1
   83d70:	d0f9      	beq.n	83d66 <__aeabi_fdiv+0xda>
   83d72:	ea41 010c 	orr.w	r1, r1, ip
   83d76:	e795      	b.n	83ca4 <__aeabi_fdiv+0x18>
   83d78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   83d7c:	ea92 0f0c 	teq	r2, ip
   83d80:	d108      	bne.n	83d94 <__aeabi_fdiv+0x108>
   83d82:	0242      	lsls	r2, r0, #9
   83d84:	f47f af7d 	bne.w	83c82 <__aeabi_fmul+0x15e>
   83d88:	ea93 0f0c 	teq	r3, ip
   83d8c:	f47f af70 	bne.w	83c70 <__aeabi_fmul+0x14c>
   83d90:	4608      	mov	r0, r1
   83d92:	e776      	b.n	83c82 <__aeabi_fmul+0x15e>
   83d94:	ea93 0f0c 	teq	r3, ip
   83d98:	d104      	bne.n	83da4 <__aeabi_fdiv+0x118>
   83d9a:	024b      	lsls	r3, r1, #9
   83d9c:	f43f af4c 	beq.w	83c38 <__aeabi_fmul+0x114>
   83da0:	4608      	mov	r0, r1
   83da2:	e76e      	b.n	83c82 <__aeabi_fmul+0x15e>
   83da4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   83da8:	bf18      	it	ne
   83daa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   83dae:	d1ca      	bne.n	83d46 <__aeabi_fdiv+0xba>
   83db0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   83db4:	f47f af5c 	bne.w	83c70 <__aeabi_fmul+0x14c>
   83db8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   83dbc:	f47f af3c 	bne.w	83c38 <__aeabi_fmul+0x114>
   83dc0:	e75f      	b.n	83c82 <__aeabi_fmul+0x15e>
   83dc2:	bf00      	nop

00083dc4 <__aeabi_f2uiz>:
   83dc4:	0042      	lsls	r2, r0, #1
   83dc6:	d20e      	bcs.n	83de6 <__aeabi_f2uiz+0x22>
   83dc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   83dcc:	d30b      	bcc.n	83de6 <__aeabi_f2uiz+0x22>
   83dce:	f04f 039e 	mov.w	r3, #158	; 0x9e
   83dd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   83dd6:	d409      	bmi.n	83dec <__aeabi_f2uiz+0x28>
   83dd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   83ddc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83de0:	fa23 f002 	lsr.w	r0, r3, r2
   83de4:	4770      	bx	lr
   83de6:	f04f 0000 	mov.w	r0, #0
   83dea:	4770      	bx	lr
   83dec:	f112 0f61 	cmn.w	r2, #97	; 0x61
   83df0:	d101      	bne.n	83df6 <__aeabi_f2uiz+0x32>
   83df2:	0242      	lsls	r2, r0, #9
   83df4:	d102      	bne.n	83dfc <__aeabi_f2uiz+0x38>
   83df6:	f04f 30ff 	mov.w	r0, #4294967295
   83dfa:	4770      	bx	lr
   83dfc:	f04f 0000 	mov.w	r0, #0
   83e00:	4770      	bx	lr
   83e02:	bf00      	nop

00083e04 <atoi>:
   83e04:	220a      	movs	r2, #10
   83e06:	2100      	movs	r1, #0
   83e08:	f000 b998 	b.w	8413c <strtol>

00083e0c <__libc_init_array>:
   83e0c:	b570      	push	{r4, r5, r6, lr}
   83e0e:	4e0f      	ldr	r6, [pc, #60]	; (83e4c <__libc_init_array+0x40>)
   83e10:	4d0f      	ldr	r5, [pc, #60]	; (83e50 <__libc_init_array+0x44>)
   83e12:	1b76      	subs	r6, r6, r5
   83e14:	10b6      	asrs	r6, r6, #2
   83e16:	bf18      	it	ne
   83e18:	2400      	movne	r4, #0
   83e1a:	d005      	beq.n	83e28 <__libc_init_array+0x1c>
   83e1c:	3401      	adds	r4, #1
   83e1e:	f855 3b04 	ldr.w	r3, [r5], #4
   83e22:	4798      	blx	r3
   83e24:	42a6      	cmp	r6, r4
   83e26:	d1f9      	bne.n	83e1c <__libc_init_array+0x10>
   83e28:	4e0a      	ldr	r6, [pc, #40]	; (83e54 <__libc_init_array+0x48>)
   83e2a:	4d0b      	ldr	r5, [pc, #44]	; (83e58 <__libc_init_array+0x4c>)
   83e2c:	f005 fe40 	bl	89ab0 <_init>
   83e30:	1b76      	subs	r6, r6, r5
   83e32:	10b6      	asrs	r6, r6, #2
   83e34:	bf18      	it	ne
   83e36:	2400      	movne	r4, #0
   83e38:	d006      	beq.n	83e48 <__libc_init_array+0x3c>
   83e3a:	3401      	adds	r4, #1
   83e3c:	f855 3b04 	ldr.w	r3, [r5], #4
   83e40:	4798      	blx	r3
   83e42:	42a6      	cmp	r6, r4
   83e44:	d1f9      	bne.n	83e3a <__libc_init_array+0x2e>
   83e46:	bd70      	pop	{r4, r5, r6, pc}
   83e48:	bd70      	pop	{r4, r5, r6, pc}
   83e4a:	bf00      	nop
   83e4c:	00089abc 	.word	0x00089abc
   83e50:	00089abc 	.word	0x00089abc
   83e54:	00089ac4 	.word	0x00089ac4
   83e58:	00089abc 	.word	0x00089abc

00083e5c <memset>:
   83e5c:	b470      	push	{r4, r5, r6}
   83e5e:	0786      	lsls	r6, r0, #30
   83e60:	d046      	beq.n	83ef0 <memset+0x94>
   83e62:	1e54      	subs	r4, r2, #1
   83e64:	2a00      	cmp	r2, #0
   83e66:	d041      	beq.n	83eec <memset+0x90>
   83e68:	b2ca      	uxtb	r2, r1
   83e6a:	4603      	mov	r3, r0
   83e6c:	e002      	b.n	83e74 <memset+0x18>
   83e6e:	f114 34ff 	adds.w	r4, r4, #4294967295
   83e72:	d33b      	bcc.n	83eec <memset+0x90>
   83e74:	f803 2b01 	strb.w	r2, [r3], #1
   83e78:	079d      	lsls	r5, r3, #30
   83e7a:	d1f8      	bne.n	83e6e <memset+0x12>
   83e7c:	2c03      	cmp	r4, #3
   83e7e:	d92e      	bls.n	83ede <memset+0x82>
   83e80:	b2cd      	uxtb	r5, r1
   83e82:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83e86:	2c0f      	cmp	r4, #15
   83e88:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83e8c:	d919      	bls.n	83ec2 <memset+0x66>
   83e8e:	4626      	mov	r6, r4
   83e90:	f103 0210 	add.w	r2, r3, #16
   83e94:	3e10      	subs	r6, #16
   83e96:	2e0f      	cmp	r6, #15
   83e98:	f842 5c10 	str.w	r5, [r2, #-16]
   83e9c:	f842 5c0c 	str.w	r5, [r2, #-12]
   83ea0:	f842 5c08 	str.w	r5, [r2, #-8]
   83ea4:	f842 5c04 	str.w	r5, [r2, #-4]
   83ea8:	f102 0210 	add.w	r2, r2, #16
   83eac:	d8f2      	bhi.n	83e94 <memset+0x38>
   83eae:	f1a4 0210 	sub.w	r2, r4, #16
   83eb2:	f022 020f 	bic.w	r2, r2, #15
   83eb6:	f004 040f 	and.w	r4, r4, #15
   83eba:	3210      	adds	r2, #16
   83ebc:	2c03      	cmp	r4, #3
   83ebe:	4413      	add	r3, r2
   83ec0:	d90d      	bls.n	83ede <memset+0x82>
   83ec2:	461e      	mov	r6, r3
   83ec4:	4622      	mov	r2, r4
   83ec6:	3a04      	subs	r2, #4
   83ec8:	2a03      	cmp	r2, #3
   83eca:	f846 5b04 	str.w	r5, [r6], #4
   83ece:	d8fa      	bhi.n	83ec6 <memset+0x6a>
   83ed0:	1f22      	subs	r2, r4, #4
   83ed2:	f022 0203 	bic.w	r2, r2, #3
   83ed6:	3204      	adds	r2, #4
   83ed8:	4413      	add	r3, r2
   83eda:	f004 0403 	and.w	r4, r4, #3
   83ede:	b12c      	cbz	r4, 83eec <memset+0x90>
   83ee0:	b2c9      	uxtb	r1, r1
   83ee2:	441c      	add	r4, r3
   83ee4:	f803 1b01 	strb.w	r1, [r3], #1
   83ee8:	429c      	cmp	r4, r3
   83eea:	d1fb      	bne.n	83ee4 <memset+0x88>
   83eec:	bc70      	pop	{r4, r5, r6}
   83eee:	4770      	bx	lr
   83ef0:	4614      	mov	r4, r2
   83ef2:	4603      	mov	r3, r0
   83ef4:	e7c2      	b.n	83e7c <memset+0x20>
   83ef6:	bf00      	nop

00083ef8 <sprintf>:
   83ef8:	b40e      	push	{r1, r2, r3}
   83efa:	4601      	mov	r1, r0
   83efc:	b5f0      	push	{r4, r5, r6, r7, lr}
   83efe:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   83f02:	f44f 7702 	mov.w	r7, #520	; 0x208
   83f06:	f64f 76ff 	movw	r6, #65535	; 0xffff
   83f0a:	b09c      	sub	sp, #112	; 0x70
   83f0c:	ac21      	add	r4, sp, #132	; 0x84
   83f0e:	f854 2b04 	ldr.w	r2, [r4], #4
   83f12:	4b0b      	ldr	r3, [pc, #44]	; (83f40 <sprintf+0x48>)
   83f14:	9102      	str	r1, [sp, #8]
   83f16:	9106      	str	r1, [sp, #24]
   83f18:	6818      	ldr	r0, [r3, #0]
   83f1a:	a902      	add	r1, sp, #8
   83f1c:	4623      	mov	r3, r4
   83f1e:	9401      	str	r4, [sp, #4]
   83f20:	f8ad 7014 	strh.w	r7, [sp, #20]
   83f24:	9504      	str	r5, [sp, #16]
   83f26:	9507      	str	r5, [sp, #28]
   83f28:	f8ad 6016 	strh.w	r6, [sp, #22]
   83f2c:	f000 f91c 	bl	84168 <_svfprintf_r>
   83f30:	2200      	movs	r2, #0
   83f32:	9b02      	ldr	r3, [sp, #8]
   83f34:	701a      	strb	r2, [r3, #0]
   83f36:	b01c      	add	sp, #112	; 0x70
   83f38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   83f3c:	b003      	add	sp, #12
   83f3e:	4770      	bx	lr
   83f40:	20000634 	.word	0x20000634

00083f44 <strlen>:
   83f44:	f020 0103 	bic.w	r1, r0, #3
   83f48:	f010 0003 	ands.w	r0, r0, #3
   83f4c:	f1c0 0000 	rsb	r0, r0, #0
   83f50:	f851 3b04 	ldr.w	r3, [r1], #4
   83f54:	f100 0c04 	add.w	ip, r0, #4
   83f58:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83f5c:	f06f 0200 	mvn.w	r2, #0
   83f60:	bf1c      	itt	ne
   83f62:	fa22 f20c 	lsrne.w	r2, r2, ip
   83f66:	4313      	orrne	r3, r2
   83f68:	f04f 0c01 	mov.w	ip, #1
   83f6c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83f70:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83f74:	eba3 020c 	sub.w	r2, r3, ip
   83f78:	ea22 0203 	bic.w	r2, r2, r3
   83f7c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83f80:	bf04      	itt	eq
   83f82:	f851 3b04 	ldreq.w	r3, [r1], #4
   83f86:	3004      	addeq	r0, #4
   83f88:	d0f4      	beq.n	83f74 <strlen+0x30>
   83f8a:	f1c2 0100 	rsb	r1, r2, #0
   83f8e:	ea02 0201 	and.w	r2, r2, r1
   83f92:	fab2 f282 	clz	r2, r2
   83f96:	f1c2 021f 	rsb	r2, r2, #31
   83f9a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83f9e:	4770      	bx	lr

00083fa0 <strtok>:
   83fa0:	4a02      	ldr	r2, [pc, #8]	; (83fac <strtok+0xc>)
   83fa2:	2301      	movs	r3, #1
   83fa4:	6812      	ldr	r2, [r2, #0]
   83fa6:	325c      	adds	r2, #92	; 0x5c
   83fa8:	f000 b802 	b.w	83fb0 <__strtok_r>
   83fac:	20000634 	.word	0x20000634

00083fb0 <__strtok_r>:
   83fb0:	b4f0      	push	{r4, r5, r6, r7}
   83fb2:	b318      	cbz	r0, 83ffc <__strtok_r+0x4c>
   83fb4:	4607      	mov	r7, r0
   83fb6:	460d      	mov	r5, r1
   83fb8:	f817 6b01 	ldrb.w	r6, [r7], #1
   83fbc:	e001      	b.n	83fc2 <__strtok_r+0x12>
   83fbe:	42a6      	cmp	r6, r4
   83fc0:	d017      	beq.n	83ff2 <__strtok_r+0x42>
   83fc2:	f815 4b01 	ldrb.w	r4, [r5], #1
   83fc6:	2c00      	cmp	r4, #0
   83fc8:	d1f9      	bne.n	83fbe <__strtok_r+0xe>
   83fca:	b1e6      	cbz	r6, 84006 <__strtok_r+0x56>
   83fcc:	460c      	mov	r4, r1
   83fce:	f817 5b01 	ldrb.w	r5, [r7], #1
   83fd2:	e001      	b.n	83fd8 <__strtok_r+0x28>
   83fd4:	2b00      	cmp	r3, #0
   83fd6:	d0f9      	beq.n	83fcc <__strtok_r+0x1c>
   83fd8:	f814 3b01 	ldrb.w	r3, [r4], #1
   83fdc:	429d      	cmp	r5, r3
   83fde:	d1f9      	bne.n	83fd4 <__strtok_r+0x24>
   83fe0:	b155      	cbz	r5, 83ff8 <__strtok_r+0x48>
   83fe2:	2300      	movs	r3, #0
   83fe4:	f807 3c01 	strb.w	r3, [r7, #-1]
   83fe8:	4606      	mov	r6, r0
   83fea:	6017      	str	r7, [r2, #0]
   83fec:	4630      	mov	r0, r6
   83fee:	bcf0      	pop	{r4, r5, r6, r7}
   83ff0:	4770      	bx	lr
   83ff2:	b153      	cbz	r3, 8400a <__strtok_r+0x5a>
   83ff4:	4638      	mov	r0, r7
   83ff6:	e7dd      	b.n	83fb4 <__strtok_r+0x4>
   83ff8:	462f      	mov	r7, r5
   83ffa:	e7f5      	b.n	83fe8 <__strtok_r+0x38>
   83ffc:	6810      	ldr	r0, [r2, #0]
   83ffe:	2800      	cmp	r0, #0
   84000:	d1d8      	bne.n	83fb4 <__strtok_r+0x4>
   84002:	4606      	mov	r6, r0
   84004:	e7f2      	b.n	83fec <__strtok_r+0x3c>
   84006:	6016      	str	r6, [r2, #0]
   84008:	e7f0      	b.n	83fec <__strtok_r+0x3c>
   8400a:	6017      	str	r7, [r2, #0]
   8400c:	4606      	mov	r6, r0
   8400e:	7003      	strb	r3, [r0, #0]
   84010:	e7ec      	b.n	83fec <__strtok_r+0x3c>
   84012:	bf00      	nop

00084014 <_strtol_l.isra.0>:
   84014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84018:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8401c:	460f      	mov	r7, r1
   8401e:	4680      	mov	r8, r0
   84020:	4616      	mov	r6, r2
   84022:	461d      	mov	r5, r3
   84024:	468a      	mov	sl, r1
   84026:	e000      	b.n	8402a <_strtol_l.isra.0+0x16>
   84028:	46a2      	mov	sl, r4
   8402a:	4654      	mov	r4, sl
   8402c:	4648      	mov	r0, r9
   8402e:	f814 bb01 	ldrb.w	fp, [r4], #1
   84032:	f002 faf5 	bl	86620 <__locale_ctype_ptr_l>
   84036:	4458      	add	r0, fp
   84038:	7842      	ldrb	r2, [r0, #1]
   8403a:	f012 0208 	ands.w	r2, r2, #8
   8403e:	d1f3      	bne.n	84028 <_strtol_l.isra.0+0x14>
   84040:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   84044:	d04f      	beq.n	840e6 <_strtol_l.isra.0+0xd2>
   84046:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   8404a:	bf04      	itt	eq
   8404c:	f894 b000 	ldrbeq.w	fp, [r4]
   84050:	f10a 0402 	addeq.w	r4, sl, #2
   84054:	b11d      	cbz	r5, 8405e <_strtol_l.isra.0+0x4a>
   84056:	2d10      	cmp	r5, #16
   84058:	d056      	beq.n	84108 <_strtol_l.isra.0+0xf4>
   8405a:	46ac      	mov	ip, r5
   8405c:	e004      	b.n	84068 <_strtol_l.isra.0+0x54>
   8405e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   84062:	d060      	beq.n	84126 <_strtol_l.isra.0+0x112>
   84064:	250a      	movs	r5, #10
   84066:	46ac      	mov	ip, r5
   84068:	2a00      	cmp	r2, #0
   8406a:	bf0c      	ite	eq
   8406c:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   84070:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   84074:	2100      	movs	r1, #0
   84076:	fbb9 fefc 	udiv	lr, r9, ip
   8407a:	4608      	mov	r0, r1
   8407c:	fb0c 9a1e 	mls	sl, ip, lr, r9
   84080:	e005      	b.n	8408e <_strtol_l.isra.0+0x7a>
   84082:	d029      	beq.n	840d8 <_strtol_l.isra.0+0xc4>
   84084:	2101      	movs	r1, #1
   84086:	fb0c 3000 	mla	r0, ip, r0, r3
   8408a:	f814 bb01 	ldrb.w	fp, [r4], #1
   8408e:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   84092:	2b09      	cmp	r3, #9
   84094:	d905      	bls.n	840a2 <_strtol_l.isra.0+0x8e>
   84096:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   8409a:	2b19      	cmp	r3, #25
   8409c:	d80b      	bhi.n	840b6 <_strtol_l.isra.0+0xa2>
   8409e:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   840a2:	429d      	cmp	r5, r3
   840a4:	dd0f      	ble.n	840c6 <_strtol_l.isra.0+0xb2>
   840a6:	f1b1 3fff 	cmp.w	r1, #4294967295
   840aa:	d0ee      	beq.n	8408a <_strtol_l.isra.0+0x76>
   840ac:	4586      	cmp	lr, r0
   840ae:	d2e8      	bcs.n	84082 <_strtol_l.isra.0+0x6e>
   840b0:	f04f 31ff 	mov.w	r1, #4294967295
   840b4:	e7e9      	b.n	8408a <_strtol_l.isra.0+0x76>
   840b6:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   840ba:	2b19      	cmp	r3, #25
   840bc:	d803      	bhi.n	840c6 <_strtol_l.isra.0+0xb2>
   840be:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   840c2:	429d      	cmp	r5, r3
   840c4:	dcef      	bgt.n	840a6 <_strtol_l.isra.0+0x92>
   840c6:	1c4b      	adds	r3, r1, #1
   840c8:	d013      	beq.n	840f2 <_strtol_l.isra.0+0xde>
   840ca:	b102      	cbz	r2, 840ce <_strtol_l.isra.0+0xba>
   840cc:	4240      	negs	r0, r0
   840ce:	b146      	cbz	r6, 840e2 <_strtol_l.isra.0+0xce>
   840d0:	b9c1      	cbnz	r1, 84104 <_strtol_l.isra.0+0xf0>
   840d2:	6037      	str	r7, [r6, #0]
   840d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   840d8:	459a      	cmp	sl, r3
   840da:	dad3      	bge.n	84084 <_strtol_l.isra.0+0x70>
   840dc:	f04f 31ff 	mov.w	r1, #4294967295
   840e0:	e7d3      	b.n	8408a <_strtol_l.isra.0+0x76>
   840e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   840e6:	f894 b000 	ldrb.w	fp, [r4]
   840ea:	2201      	movs	r2, #1
   840ec:	f10a 0402 	add.w	r4, sl, #2
   840f0:	e7b0      	b.n	84054 <_strtol_l.isra.0+0x40>
   840f2:	2322      	movs	r3, #34	; 0x22
   840f4:	f8c8 3000 	str.w	r3, [r8]
   840f8:	b1ee      	cbz	r6, 84136 <_strtol_l.isra.0+0x122>
   840fa:	1e67      	subs	r7, r4, #1
   840fc:	4648      	mov	r0, r9
   840fe:	6037      	str	r7, [r6, #0]
   84100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84104:	4681      	mov	r9, r0
   84106:	e7f8      	b.n	840fa <_strtol_l.isra.0+0xe6>
   84108:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   8410c:	d1a5      	bne.n	8405a <_strtol_l.isra.0+0x46>
   8410e:	7823      	ldrb	r3, [r4, #0]
   84110:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   84114:	2b58      	cmp	r3, #88	; 0x58
   84116:	d1a0      	bne.n	8405a <_strtol_l.isra.0+0x46>
   84118:	f04f 0c10 	mov.w	ip, #16
   8411c:	f894 b001 	ldrb.w	fp, [r4, #1]
   84120:	4665      	mov	r5, ip
   84122:	3402      	adds	r4, #2
   84124:	e7a0      	b.n	84068 <_strtol_l.isra.0+0x54>
   84126:	7823      	ldrb	r3, [r4, #0]
   84128:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   8412c:	2b58      	cmp	r3, #88	; 0x58
   8412e:	d0f3      	beq.n	84118 <_strtol_l.isra.0+0x104>
   84130:	2508      	movs	r5, #8
   84132:	46ac      	mov	ip, r5
   84134:	e798      	b.n	84068 <_strtol_l.isra.0+0x54>
   84136:	4648      	mov	r0, r9
   84138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008413c <strtol>:
   8413c:	4b08      	ldr	r3, [pc, #32]	; (84160 <strtol+0x24>)
   8413e:	b570      	push	{r4, r5, r6, lr}
   84140:	681d      	ldr	r5, [r3, #0]
   84142:	4e08      	ldr	r6, [pc, #32]	; (84164 <strtol+0x28>)
   84144:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   84146:	b082      	sub	sp, #8
   84148:	2c00      	cmp	r4, #0
   8414a:	bf08      	it	eq
   8414c:	4634      	moveq	r4, r6
   8414e:	4613      	mov	r3, r2
   84150:	9400      	str	r4, [sp, #0]
   84152:	460a      	mov	r2, r1
   84154:	4601      	mov	r1, r0
   84156:	4628      	mov	r0, r5
   84158:	f7ff ff5c 	bl	84014 <_strtol_l.isra.0>
   8415c:	b002      	add	sp, #8
   8415e:	bd70      	pop	{r4, r5, r6, pc}
   84160:	20000634 	.word	0x20000634
   84164:	20000a60 	.word	0x20000a60

00084168 <_svfprintf_r>:
   84168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8416c:	b0c3      	sub	sp, #268	; 0x10c
   8416e:	460c      	mov	r4, r1
   84170:	910b      	str	r1, [sp, #44]	; 0x2c
   84172:	4692      	mov	sl, r2
   84174:	930f      	str	r3, [sp, #60]	; 0x3c
   84176:	900c      	str	r0, [sp, #48]	; 0x30
   84178:	f002 fa56 	bl	86628 <_localeconv_r>
   8417c:	6803      	ldr	r3, [r0, #0]
   8417e:	4618      	mov	r0, r3
   84180:	931a      	str	r3, [sp, #104]	; 0x68
   84182:	f7ff fedf 	bl	83f44 <strlen>
   84186:	89a3      	ldrh	r3, [r4, #12]
   84188:	9019      	str	r0, [sp, #100]	; 0x64
   8418a:	0619      	lsls	r1, r3, #24
   8418c:	d503      	bpl.n	84196 <_svfprintf_r+0x2e>
   8418e:	6923      	ldr	r3, [r4, #16]
   84190:	2b00      	cmp	r3, #0
   84192:	f001 8031 	beq.w	851f8 <_svfprintf_r+0x1090>
   84196:	2300      	movs	r3, #0
   84198:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   8419c:	46c8      	mov	r8, r9
   8419e:	9314      	str	r3, [sp, #80]	; 0x50
   841a0:	9313      	str	r3, [sp, #76]	; 0x4c
   841a2:	9315      	str	r3, [sp, #84]	; 0x54
   841a4:	9318      	str	r3, [sp, #96]	; 0x60
   841a6:	931b      	str	r3, [sp, #108]	; 0x6c
   841a8:	9309      	str	r3, [sp, #36]	; 0x24
   841aa:	9316      	str	r3, [sp, #88]	; 0x58
   841ac:	9317      	str	r3, [sp, #92]	; 0x5c
   841ae:	9327      	str	r3, [sp, #156]	; 0x9c
   841b0:	9326      	str	r3, [sp, #152]	; 0x98
   841b2:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   841b6:	f89a 3000 	ldrb.w	r3, [sl]
   841ba:	4654      	mov	r4, sl
   841bc:	b1eb      	cbz	r3, 841fa <_svfprintf_r+0x92>
   841be:	2b25      	cmp	r3, #37	; 0x25
   841c0:	d102      	bne.n	841c8 <_svfprintf_r+0x60>
   841c2:	e01a      	b.n	841fa <_svfprintf_r+0x92>
   841c4:	2b25      	cmp	r3, #37	; 0x25
   841c6:	d003      	beq.n	841d0 <_svfprintf_r+0x68>
   841c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   841cc:	2b00      	cmp	r3, #0
   841ce:	d1f9      	bne.n	841c4 <_svfprintf_r+0x5c>
   841d0:	eba4 050a 	sub.w	r5, r4, sl
   841d4:	b18d      	cbz	r5, 841fa <_svfprintf_r+0x92>
   841d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   841d8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   841da:	3301      	adds	r3, #1
   841dc:	442a      	add	r2, r5
   841de:	2b07      	cmp	r3, #7
   841e0:	f8c8 a000 	str.w	sl, [r8]
   841e4:	f8c8 5004 	str.w	r5, [r8, #4]
   841e8:	9227      	str	r2, [sp, #156]	; 0x9c
   841ea:	9326      	str	r3, [sp, #152]	; 0x98
   841ec:	f300 808a 	bgt.w	84304 <_svfprintf_r+0x19c>
   841f0:	f108 0808 	add.w	r8, r8, #8
   841f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   841f6:	442b      	add	r3, r5
   841f8:	9309      	str	r3, [sp, #36]	; 0x24
   841fa:	7823      	ldrb	r3, [r4, #0]
   841fc:	2b00      	cmp	r3, #0
   841fe:	f000 8089 	beq.w	84314 <_svfprintf_r+0x1ac>
   84202:	2300      	movs	r3, #0
   84204:	f04f 30ff 	mov.w	r0, #4294967295
   84208:	461a      	mov	r2, r3
   8420a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8420e:	4619      	mov	r1, r3
   84210:	930d      	str	r3, [sp, #52]	; 0x34
   84212:	469b      	mov	fp, r3
   84214:	7863      	ldrb	r3, [r4, #1]
   84216:	f104 0a01 	add.w	sl, r4, #1
   8421a:	900a      	str	r0, [sp, #40]	; 0x28
   8421c:	f10a 0a01 	add.w	sl, sl, #1
   84220:	f1a3 0020 	sub.w	r0, r3, #32
   84224:	2858      	cmp	r0, #88	; 0x58
   84226:	f200 83b6 	bhi.w	84996 <_svfprintf_r+0x82e>
   8422a:	e8df f010 	tbh	[pc, r0, lsl #1]
   8422e:	034b      	.short	0x034b
   84230:	03b403b4 	.word	0x03b403b4
   84234:	03b40353 	.word	0x03b40353
   84238:	03b403b4 	.word	0x03b403b4
   8423c:	03b403b4 	.word	0x03b403b4
   84240:	005903b4 	.word	0x005903b4
   84244:	03b40358 	.word	0x03b40358
   84248:	02140066 	.word	0x02140066
   8424c:	022f03b4 	.word	0x022f03b4
   84250:	03a403a4 	.word	0x03a403a4
   84254:	03a403a4 	.word	0x03a403a4
   84258:	03a403a4 	.word	0x03a403a4
   8425c:	03a403a4 	.word	0x03a403a4
   84260:	03b403a4 	.word	0x03b403a4
   84264:	03b403b4 	.word	0x03b403b4
   84268:	03b403b4 	.word	0x03b403b4
   8426c:	03b403b4 	.word	0x03b403b4
   84270:	03b403b4 	.word	0x03b403b4
   84274:	028b03b4 	.word	0x028b03b4
   84278:	03b402d3 	.word	0x03b402d3
   8427c:	03b402d3 	.word	0x03b402d3
   84280:	03b403b4 	.word	0x03b403b4
   84284:	031a03b4 	.word	0x031a03b4
   84288:	03b403b4 	.word	0x03b403b4
   8428c:	03b4031f 	.word	0x03b4031f
   84290:	03b403b4 	.word	0x03b403b4
   84294:	03b403b4 	.word	0x03b403b4
   84298:	03b40234 	.word	0x03b40234
   8429c:	024b03b4 	.word	0x024b03b4
   842a0:	03b403b4 	.word	0x03b403b4
   842a4:	03b403b4 	.word	0x03b403b4
   842a8:	03b403b4 	.word	0x03b403b4
   842ac:	03b403b4 	.word	0x03b403b4
   842b0:	03b403b4 	.word	0x03b403b4
   842b4:	039d0276 	.word	0x039d0276
   842b8:	02d302d3 	.word	0x02d302d3
   842bc:	036202d3 	.word	0x036202d3
   842c0:	03b4039d 	.word	0x03b4039d
   842c4:	036703b4 	.word	0x036703b4
   842c8:	037403b4 	.word	0x037403b4
   842cc:	038b01dd 	.word	0x038b01dd
   842d0:	03b4035d 	.word	0x03b4035d
   842d4:	03b401f2 	.word	0x03b401f2
   842d8:	03b40087 	.word	0x03b40087
   842dc:	033103b4 	.word	0x033103b4
   842e0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   842e2:	6823      	ldr	r3, [r4, #0]
   842e4:	4618      	mov	r0, r3
   842e6:	930d      	str	r3, [sp, #52]	; 0x34
   842e8:	4623      	mov	r3, r4
   842ea:	2800      	cmp	r0, #0
   842ec:	f103 0304 	add.w	r3, r3, #4
   842f0:	930f      	str	r3, [sp, #60]	; 0x3c
   842f2:	da04      	bge.n	842fe <_svfprintf_r+0x196>
   842f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   842f6:	425b      	negs	r3, r3
   842f8:	930d      	str	r3, [sp, #52]	; 0x34
   842fa:	f04b 0b04 	orr.w	fp, fp, #4
   842fe:	f89a 3000 	ldrb.w	r3, [sl]
   84302:	e78b      	b.n	8421c <_svfprintf_r+0xb4>
   84304:	aa25      	add	r2, sp, #148	; 0x94
   84306:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84308:	980c      	ldr	r0, [sp, #48]	; 0x30
   8430a:	f003 f821 	bl	87350 <__ssprint_r>
   8430e:	b940      	cbnz	r0, 84322 <_svfprintf_r+0x1ba>
   84310:	46c8      	mov	r8, r9
   84312:	e76f      	b.n	841f4 <_svfprintf_r+0x8c>
   84314:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   84316:	b123      	cbz	r3, 84322 <_svfprintf_r+0x1ba>
   84318:	980c      	ldr	r0, [sp, #48]	; 0x30
   8431a:	aa25      	add	r2, sp, #148	; 0x94
   8431c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8431e:	f003 f817 	bl	87350 <__ssprint_r>
   84322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84324:	899b      	ldrh	r3, [r3, #12]
   84326:	f013 0f40 	tst.w	r3, #64	; 0x40
   8432a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8432c:	bf18      	it	ne
   8432e:	f04f 33ff 	movne.w	r3, #4294967295
   84332:	9309      	str	r3, [sp, #36]	; 0x24
   84334:	9809      	ldr	r0, [sp, #36]	; 0x24
   84336:	b043      	add	sp, #268	; 0x10c
   84338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8433c:	f01b 0f20 	tst.w	fp, #32
   84340:	9311      	str	r3, [sp, #68]	; 0x44
   84342:	f040 81af 	bne.w	846a4 <_svfprintf_r+0x53c>
   84346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84348:	f01b 0f10 	tst.w	fp, #16
   8434c:	4613      	mov	r3, r2
   8434e:	f040 8596 	bne.w	84e7e <_svfprintf_r+0xd16>
   84352:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84356:	f000 8592 	beq.w	84e7e <_svfprintf_r+0xd16>
   8435a:	2500      	movs	r5, #0
   8435c:	2301      	movs	r3, #1
   8435e:	8814      	ldrh	r4, [r2, #0]
   84360:	3204      	adds	r2, #4
   84362:	920f      	str	r2, [sp, #60]	; 0x3c
   84364:	2200      	movs	r2, #0
   84366:	4617      	mov	r7, r2
   84368:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   8436c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8436e:	1c4a      	adds	r2, r1, #1
   84370:	f000 8210 	beq.w	84794 <_svfprintf_r+0x62c>
   84374:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   84378:	9207      	str	r2, [sp, #28]
   8437a:	ea54 0205 	orrs.w	r2, r4, r5
   8437e:	f040 820f 	bne.w	847a0 <_svfprintf_r+0x638>
   84382:	2900      	cmp	r1, #0
   84384:	f040 842d 	bne.w	84be2 <_svfprintf_r+0xa7a>
   84388:	2b00      	cmp	r3, #0
   8438a:	f040 8535 	bne.w	84df8 <_svfprintf_r+0xc90>
   8438e:	f01b 0301 	ands.w	r3, fp, #1
   84392:	930e      	str	r3, [sp, #56]	; 0x38
   84394:	f000 865e 	beq.w	85054 <_svfprintf_r+0xeec>
   84398:	2330      	movs	r3, #48	; 0x30
   8439a:	ae42      	add	r6, sp, #264	; 0x108
   8439c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   843a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   843a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   843a4:	4293      	cmp	r3, r2
   843a6:	bfb8      	it	lt
   843a8:	4613      	movlt	r3, r2
   843aa:	9308      	str	r3, [sp, #32]
   843ac:	2300      	movs	r3, #0
   843ae:	9312      	str	r3, [sp, #72]	; 0x48
   843b0:	b117      	cbz	r7, 843b8 <_svfprintf_r+0x250>
   843b2:	9b08      	ldr	r3, [sp, #32]
   843b4:	3301      	adds	r3, #1
   843b6:	9308      	str	r3, [sp, #32]
   843b8:	9b07      	ldr	r3, [sp, #28]
   843ba:	f013 0302 	ands.w	r3, r3, #2
   843be:	9310      	str	r3, [sp, #64]	; 0x40
   843c0:	d002      	beq.n	843c8 <_svfprintf_r+0x260>
   843c2:	9b08      	ldr	r3, [sp, #32]
   843c4:	3302      	adds	r3, #2
   843c6:	9308      	str	r3, [sp, #32]
   843c8:	9b07      	ldr	r3, [sp, #28]
   843ca:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   843ce:	f040 830e 	bne.w	849ee <_svfprintf_r+0x886>
   843d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   843d4:	9a08      	ldr	r2, [sp, #32]
   843d6:	eba3 0b02 	sub.w	fp, r3, r2
   843da:	f1bb 0f00 	cmp.w	fp, #0
   843de:	f340 8306 	ble.w	849ee <_svfprintf_r+0x886>
   843e2:	f1bb 0f10 	cmp.w	fp, #16
   843e6:	f340 87ae 	ble.w	85346 <_svfprintf_r+0x11de>
   843ea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   843ec:	4643      	mov	r3, r8
   843ee:	4621      	mov	r1, r4
   843f0:	46a8      	mov	r8, r5
   843f2:	2710      	movs	r7, #16
   843f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   843f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   843f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   843fa:	e006      	b.n	8440a <_svfprintf_r+0x2a2>
   843fc:	f1ab 0b10 	sub.w	fp, fp, #16
   84400:	f1bb 0f10 	cmp.w	fp, #16
   84404:	f103 0308 	add.w	r3, r3, #8
   84408:	dd18      	ble.n	8443c <_svfprintf_r+0x2d4>
   8440a:	3201      	adds	r2, #1
   8440c:	48ab      	ldr	r0, [pc, #684]	; (846bc <_svfprintf_r+0x554>)
   8440e:	3110      	adds	r1, #16
   84410:	2a07      	cmp	r2, #7
   84412:	9127      	str	r1, [sp, #156]	; 0x9c
   84414:	9226      	str	r2, [sp, #152]	; 0x98
   84416:	e883 0081 	stmia.w	r3, {r0, r7}
   8441a:	ddef      	ble.n	843fc <_svfprintf_r+0x294>
   8441c:	aa25      	add	r2, sp, #148	; 0x94
   8441e:	4629      	mov	r1, r5
   84420:	4620      	mov	r0, r4
   84422:	f002 ff95 	bl	87350 <__ssprint_r>
   84426:	2800      	cmp	r0, #0
   84428:	f47f af7b 	bne.w	84322 <_svfprintf_r+0x1ba>
   8442c:	f1ab 0b10 	sub.w	fp, fp, #16
   84430:	f1bb 0f10 	cmp.w	fp, #16
   84434:	464b      	mov	r3, r9
   84436:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84438:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8443a:	dce6      	bgt.n	8440a <_svfprintf_r+0x2a2>
   8443c:	4645      	mov	r5, r8
   8443e:	460c      	mov	r4, r1
   84440:	4698      	mov	r8, r3
   84442:	3201      	adds	r2, #1
   84444:	4b9d      	ldr	r3, [pc, #628]	; (846bc <_svfprintf_r+0x554>)
   84446:	445c      	add	r4, fp
   84448:	2a07      	cmp	r2, #7
   8444a:	9427      	str	r4, [sp, #156]	; 0x9c
   8444c:	9226      	str	r2, [sp, #152]	; 0x98
   8444e:	e888 0808 	stmia.w	r8, {r3, fp}
   84452:	f300 82c1 	bgt.w	849d8 <_svfprintf_r+0x870>
   84456:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8445a:	f108 0808 	add.w	r8, r8, #8
   8445e:	b187      	cbz	r7, 84482 <_svfprintf_r+0x31a>
   84460:	2101      	movs	r1, #1
   84462:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84464:	440c      	add	r4, r1
   84466:	440b      	add	r3, r1
   84468:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   8446c:	2b07      	cmp	r3, #7
   8446e:	9427      	str	r4, [sp, #156]	; 0x9c
   84470:	9326      	str	r3, [sp, #152]	; 0x98
   84472:	f8c8 1004 	str.w	r1, [r8, #4]
   84476:	f8c8 2000 	str.w	r2, [r8]
   8447a:	f300 83c9 	bgt.w	84c10 <_svfprintf_r+0xaa8>
   8447e:	f108 0808 	add.w	r8, r8, #8
   84482:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84484:	b17b      	cbz	r3, 844a6 <_svfprintf_r+0x33e>
   84486:	2102      	movs	r1, #2
   84488:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8448a:	440c      	add	r4, r1
   8448c:	3301      	adds	r3, #1
   8448e:	aa1e      	add	r2, sp, #120	; 0x78
   84490:	2b07      	cmp	r3, #7
   84492:	9427      	str	r4, [sp, #156]	; 0x9c
   84494:	9326      	str	r3, [sp, #152]	; 0x98
   84496:	f8c8 1004 	str.w	r1, [r8, #4]
   8449a:	f8c8 2000 	str.w	r2, [r8]
   8449e:	f300 840d 	bgt.w	84cbc <_svfprintf_r+0xb54>
   844a2:	f108 0808 	add.w	r8, r8, #8
   844a6:	2d80      	cmp	r5, #128	; 0x80
   844a8:	f000 8301 	beq.w	84aae <_svfprintf_r+0x946>
   844ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   844ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   844b0:	1a9f      	subs	r7, r3, r2
   844b2:	2f00      	cmp	r7, #0
   844b4:	dd37      	ble.n	84526 <_svfprintf_r+0x3be>
   844b6:	2f10      	cmp	r7, #16
   844b8:	f340 8675 	ble.w	851a6 <_svfprintf_r+0x103e>
   844bc:	4d80      	ldr	r5, [pc, #512]	; (846c0 <_svfprintf_r+0x558>)
   844be:	4642      	mov	r2, r8
   844c0:	4621      	mov	r1, r4
   844c2:	46b0      	mov	r8, r6
   844c4:	f04f 0b10 	mov.w	fp, #16
   844c8:	462e      	mov	r6, r5
   844ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   844cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   844ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   844d0:	e004      	b.n	844dc <_svfprintf_r+0x374>
   844d2:	3f10      	subs	r7, #16
   844d4:	2f10      	cmp	r7, #16
   844d6:	f102 0208 	add.w	r2, r2, #8
   844da:	dd15      	ble.n	84508 <_svfprintf_r+0x3a0>
   844dc:	3301      	adds	r3, #1
   844de:	3110      	adds	r1, #16
   844e0:	2b07      	cmp	r3, #7
   844e2:	9127      	str	r1, [sp, #156]	; 0x9c
   844e4:	9326      	str	r3, [sp, #152]	; 0x98
   844e6:	e882 0840 	stmia.w	r2, {r6, fp}
   844ea:	ddf2      	ble.n	844d2 <_svfprintf_r+0x36a>
   844ec:	aa25      	add	r2, sp, #148	; 0x94
   844ee:	4629      	mov	r1, r5
   844f0:	4620      	mov	r0, r4
   844f2:	f002 ff2d 	bl	87350 <__ssprint_r>
   844f6:	2800      	cmp	r0, #0
   844f8:	f47f af13 	bne.w	84322 <_svfprintf_r+0x1ba>
   844fc:	3f10      	subs	r7, #16
   844fe:	2f10      	cmp	r7, #16
   84500:	464a      	mov	r2, r9
   84502:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84504:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84506:	dce9      	bgt.n	844dc <_svfprintf_r+0x374>
   84508:	4635      	mov	r5, r6
   8450a:	460c      	mov	r4, r1
   8450c:	4646      	mov	r6, r8
   8450e:	4690      	mov	r8, r2
   84510:	3301      	adds	r3, #1
   84512:	443c      	add	r4, r7
   84514:	2b07      	cmp	r3, #7
   84516:	9427      	str	r4, [sp, #156]	; 0x9c
   84518:	9326      	str	r3, [sp, #152]	; 0x98
   8451a:	e888 00a0 	stmia.w	r8, {r5, r7}
   8451e:	f300 836c 	bgt.w	84bfa <_svfprintf_r+0xa92>
   84522:	f108 0808 	add.w	r8, r8, #8
   84526:	9b07      	ldr	r3, [sp, #28]
   84528:	05df      	lsls	r7, r3, #23
   8452a:	f100 8262 	bmi.w	849f2 <_svfprintf_r+0x88a>
   8452e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84530:	990e      	ldr	r1, [sp, #56]	; 0x38
   84532:	3301      	adds	r3, #1
   84534:	440c      	add	r4, r1
   84536:	2b07      	cmp	r3, #7
   84538:	9427      	str	r4, [sp, #156]	; 0x9c
   8453a:	f8c8 6000 	str.w	r6, [r8]
   8453e:	f8c8 1004 	str.w	r1, [r8, #4]
   84542:	9326      	str	r3, [sp, #152]	; 0x98
   84544:	f300 83af 	bgt.w	84ca6 <_svfprintf_r+0xb3e>
   84548:	f108 0808 	add.w	r8, r8, #8
   8454c:	9b07      	ldr	r3, [sp, #28]
   8454e:	075b      	lsls	r3, r3, #29
   84550:	d53b      	bpl.n	845ca <_svfprintf_r+0x462>
   84552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84554:	9a08      	ldr	r2, [sp, #32]
   84556:	1a9d      	subs	r5, r3, r2
   84558:	2d00      	cmp	r5, #0
   8455a:	dd36      	ble.n	845ca <_svfprintf_r+0x462>
   8455c:	2d10      	cmp	r5, #16
   8455e:	f340 871d 	ble.w	8539c <_svfprintf_r+0x1234>
   84562:	2610      	movs	r6, #16
   84564:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84566:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   84568:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   8456c:	e004      	b.n	84578 <_svfprintf_r+0x410>
   8456e:	3d10      	subs	r5, #16
   84570:	2d10      	cmp	r5, #16
   84572:	f108 0808 	add.w	r8, r8, #8
   84576:	dd16      	ble.n	845a6 <_svfprintf_r+0x43e>
   84578:	3301      	adds	r3, #1
   8457a:	4a50      	ldr	r2, [pc, #320]	; (846bc <_svfprintf_r+0x554>)
   8457c:	3410      	adds	r4, #16
   8457e:	2b07      	cmp	r3, #7
   84580:	9427      	str	r4, [sp, #156]	; 0x9c
   84582:	9326      	str	r3, [sp, #152]	; 0x98
   84584:	e888 0044 	stmia.w	r8, {r2, r6}
   84588:	ddf1      	ble.n	8456e <_svfprintf_r+0x406>
   8458a:	aa25      	add	r2, sp, #148	; 0x94
   8458c:	4659      	mov	r1, fp
   8458e:	4638      	mov	r0, r7
   84590:	f002 fede 	bl	87350 <__ssprint_r>
   84594:	2800      	cmp	r0, #0
   84596:	f47f aec4 	bne.w	84322 <_svfprintf_r+0x1ba>
   8459a:	3d10      	subs	r5, #16
   8459c:	2d10      	cmp	r5, #16
   8459e:	46c8      	mov	r8, r9
   845a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   845a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   845a4:	dce8      	bgt.n	84578 <_svfprintf_r+0x410>
   845a6:	3301      	adds	r3, #1
   845a8:	4a44      	ldr	r2, [pc, #272]	; (846bc <_svfprintf_r+0x554>)
   845aa:	442c      	add	r4, r5
   845ac:	2b07      	cmp	r3, #7
   845ae:	9427      	str	r4, [sp, #156]	; 0x9c
   845b0:	9326      	str	r3, [sp, #152]	; 0x98
   845b2:	e888 0024 	stmia.w	r8, {r2, r5}
   845b6:	dd08      	ble.n	845ca <_svfprintf_r+0x462>
   845b8:	aa25      	add	r2, sp, #148	; 0x94
   845ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   845bc:	980c      	ldr	r0, [sp, #48]	; 0x30
   845be:	f002 fec7 	bl	87350 <__ssprint_r>
   845c2:	2800      	cmp	r0, #0
   845c4:	f47f aead 	bne.w	84322 <_svfprintf_r+0x1ba>
   845c8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   845ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   845cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   845ce:	9908      	ldr	r1, [sp, #32]
   845d0:	428a      	cmp	r2, r1
   845d2:	bfac      	ite	ge
   845d4:	189b      	addge	r3, r3, r2
   845d6:	185b      	addlt	r3, r3, r1
   845d8:	9309      	str	r3, [sp, #36]	; 0x24
   845da:	2c00      	cmp	r4, #0
   845dc:	f040 82f7 	bne.w	84bce <_svfprintf_r+0xa66>
   845e0:	2300      	movs	r3, #0
   845e2:	46c8      	mov	r8, r9
   845e4:	9326      	str	r3, [sp, #152]	; 0x98
   845e6:	e5e6      	b.n	841b6 <_svfprintf_r+0x4e>
   845e8:	9311      	str	r3, [sp, #68]	; 0x44
   845ea:	f01b 0320 	ands.w	r3, fp, #32
   845ee:	f040 8144 	bne.w	8487a <_svfprintf_r+0x712>
   845f2:	f01b 0210 	ands.w	r2, fp, #16
   845f6:	f040 8462 	bne.w	84ebe <_svfprintf_r+0xd56>
   845fa:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   845fe:	f000 845e 	beq.w	84ebe <_svfprintf_r+0xd56>
   84602:	990f      	ldr	r1, [sp, #60]	; 0x3c
   84604:	4613      	mov	r3, r2
   84606:	460a      	mov	r2, r1
   84608:	3204      	adds	r2, #4
   8460a:	880c      	ldrh	r4, [r1, #0]
   8460c:	2500      	movs	r5, #0
   8460e:	920f      	str	r2, [sp, #60]	; 0x3c
   84610:	e6a8      	b.n	84364 <_svfprintf_r+0x1fc>
   84612:	2500      	movs	r5, #0
   84614:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84616:	9311      	str	r3, [sp, #68]	; 0x44
   84618:	6816      	ldr	r6, [r2, #0]
   8461a:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   8461e:	1d14      	adds	r4, r2, #4
   84620:	2e00      	cmp	r6, #0
   84622:	f000 86c9 	beq.w	853b8 <_svfprintf_r+0x1250>
   84626:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84628:	1c53      	adds	r3, r2, #1
   8462a:	f000 8617 	beq.w	8525c <_svfprintf_r+0x10f4>
   8462e:	4629      	mov	r1, r5
   84630:	4630      	mov	r0, r6
   84632:	f002 fabf 	bl	86bb4 <memchr>
   84636:	2800      	cmp	r0, #0
   84638:	f000 8709 	beq.w	8544e <_svfprintf_r+0x12e6>
   8463c:	1b83      	subs	r3, r0, r6
   8463e:	950a      	str	r5, [sp, #40]	; 0x28
   84640:	930e      	str	r3, [sp, #56]	; 0x38
   84642:	940f      	str	r4, [sp, #60]	; 0x3c
   84644:	f8cd b01c 	str.w	fp, [sp, #28]
   84648:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8464c:	9308      	str	r3, [sp, #32]
   8464e:	9512      	str	r5, [sp, #72]	; 0x48
   84650:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84654:	e6ac      	b.n	843b0 <_svfprintf_r+0x248>
   84656:	f89a 3000 	ldrb.w	r3, [sl]
   8465a:	f10a 0401 	add.w	r4, sl, #1
   8465e:	2b2a      	cmp	r3, #42	; 0x2a
   84660:	f000 87bd 	beq.w	855de <_svfprintf_r+0x1476>
   84664:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84668:	2809      	cmp	r0, #9
   8466a:	46a2      	mov	sl, r4
   8466c:	f200 8714 	bhi.w	85498 <_svfprintf_r+0x1330>
   84670:	2300      	movs	r3, #0
   84672:	461c      	mov	r4, r3
   84674:	f81a 3b01 	ldrb.w	r3, [sl], #1
   84678:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8467c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   84680:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84684:	2809      	cmp	r0, #9
   84686:	d9f5      	bls.n	84674 <_svfprintf_r+0x50c>
   84688:	940a      	str	r4, [sp, #40]	; 0x28
   8468a:	e5c9      	b.n	84220 <_svfprintf_r+0xb8>
   8468c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   84690:	f89a 3000 	ldrb.w	r3, [sl]
   84694:	e5c2      	b.n	8421c <_svfprintf_r+0xb4>
   84696:	f04b 0b10 	orr.w	fp, fp, #16
   8469a:	f01b 0f20 	tst.w	fp, #32
   8469e:	9311      	str	r3, [sp, #68]	; 0x44
   846a0:	f43f ae51 	beq.w	84346 <_svfprintf_r+0x1de>
   846a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   846a6:	3407      	adds	r4, #7
   846a8:	f024 0307 	bic.w	r3, r4, #7
   846ac:	f103 0208 	add.w	r2, r3, #8
   846b0:	e9d3 4500 	ldrd	r4, r5, [r3]
   846b4:	920f      	str	r2, [sp, #60]	; 0x3c
   846b6:	2301      	movs	r3, #1
   846b8:	e654      	b.n	84364 <_svfprintf_r+0x1fc>
   846ba:	bf00      	nop
   846bc:	00089870 	.word	0x00089870
   846c0:	00089880 	.word	0x00089880
   846c4:	9311      	str	r3, [sp, #68]	; 0x44
   846c6:	2a00      	cmp	r2, #0
   846c8:	f040 87a8 	bne.w	8561c <_svfprintf_r+0x14b4>
   846cc:	4bbd      	ldr	r3, [pc, #756]	; (849c4 <_svfprintf_r+0x85c>)
   846ce:	f01b 0f20 	tst.w	fp, #32
   846d2:	9318      	str	r3, [sp, #96]	; 0x60
   846d4:	f040 80e6 	bne.w	848a4 <_svfprintf_r+0x73c>
   846d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   846da:	f01b 0f10 	tst.w	fp, #16
   846de:	4613      	mov	r3, r2
   846e0:	f040 83d4 	bne.w	84e8c <_svfprintf_r+0xd24>
   846e4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   846e8:	f000 83d0 	beq.w	84e8c <_svfprintf_r+0xd24>
   846ec:	2500      	movs	r5, #0
   846ee:	3304      	adds	r3, #4
   846f0:	8814      	ldrh	r4, [r2, #0]
   846f2:	930f      	str	r3, [sp, #60]	; 0x3c
   846f4:	f01b 0f01 	tst.w	fp, #1
   846f8:	f000 80e2 	beq.w	848c0 <_svfprintf_r+0x758>
   846fc:	ea54 0305 	orrs.w	r3, r4, r5
   84700:	f000 80de 	beq.w	848c0 <_svfprintf_r+0x758>
   84704:	2330      	movs	r3, #48	; 0x30
   84706:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   8470a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   8470e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   84712:	f04b 0b02 	orr.w	fp, fp, #2
   84716:	2302      	movs	r3, #2
   84718:	e624      	b.n	84364 <_svfprintf_r+0x1fc>
   8471a:	2201      	movs	r2, #1
   8471c:	9311      	str	r3, [sp, #68]	; 0x44
   8471e:	2300      	movs	r3, #0
   84720:	4611      	mov	r1, r2
   84722:	980f      	ldr	r0, [sp, #60]	; 0x3c
   84724:	9208      	str	r2, [sp, #32]
   84726:	6802      	ldr	r2, [r0, #0]
   84728:	461f      	mov	r7, r3
   8472a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8472e:	930a      	str	r3, [sp, #40]	; 0x28
   84730:	9312      	str	r3, [sp, #72]	; 0x48
   84732:	1d03      	adds	r3, r0, #4
   84734:	f8cd b01c 	str.w	fp, [sp, #28]
   84738:	910e      	str	r1, [sp, #56]	; 0x38
   8473a:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   8473e:	930f      	str	r3, [sp, #60]	; 0x3c
   84740:	ae28      	add	r6, sp, #160	; 0xa0
   84742:	e639      	b.n	843b8 <_svfprintf_r+0x250>
   84744:	9311      	str	r3, [sp, #68]	; 0x44
   84746:	2a00      	cmp	r2, #0
   84748:	f040 877f 	bne.w	8564a <_svfprintf_r+0x14e2>
   8474c:	f04b 0b10 	orr.w	fp, fp, #16
   84750:	f01b 0f20 	tst.w	fp, #32
   84754:	f040 8471 	bne.w	8503a <_svfprintf_r+0xed2>
   84758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8475a:	f01b 0f10 	tst.w	fp, #16
   8475e:	4613      	mov	r3, r2
   84760:	f040 8399 	bne.w	84e96 <_svfprintf_r+0xd2e>
   84764:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84768:	f000 8395 	beq.w	84e96 <_svfprintf_r+0xd2e>
   8476c:	f9b2 4000 	ldrsh.w	r4, [r2]
   84770:	3304      	adds	r3, #4
   84772:	17e5      	asrs	r5, r4, #31
   84774:	930f      	str	r3, [sp, #60]	; 0x3c
   84776:	4622      	mov	r2, r4
   84778:	462b      	mov	r3, r5
   8477a:	2a00      	cmp	r2, #0
   8477c:	f173 0300 	sbcs.w	r3, r3, #0
   84780:	f2c0 8394 	blt.w	84eac <_svfprintf_r+0xd44>
   84784:	990a      	ldr	r1, [sp, #40]	; 0x28
   84786:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8478a:	1c4a      	adds	r2, r1, #1
   8478c:	f04f 0301 	mov.w	r3, #1
   84790:	f47f adf0 	bne.w	84374 <_svfprintf_r+0x20c>
   84794:	ea54 0205 	orrs.w	r2, r4, r5
   84798:	f000 8225 	beq.w	84be6 <_svfprintf_r+0xa7e>
   8479c:	f8cd b01c 	str.w	fp, [sp, #28]
   847a0:	2b01      	cmp	r3, #1
   847a2:	f000 830a 	beq.w	84dba <_svfprintf_r+0xc52>
   847a6:	2b02      	cmp	r3, #2
   847a8:	f040 8298 	bne.w	84cdc <_svfprintf_r+0xb74>
   847ac:	464e      	mov	r6, r9
   847ae:	9818      	ldr	r0, [sp, #96]	; 0x60
   847b0:	0923      	lsrs	r3, r4, #4
   847b2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   847b6:	0929      	lsrs	r1, r5, #4
   847b8:	f004 020f 	and.w	r2, r4, #15
   847bc:	460d      	mov	r5, r1
   847be:	461c      	mov	r4, r3
   847c0:	5c83      	ldrb	r3, [r0, r2]
   847c2:	f806 3d01 	strb.w	r3, [r6, #-1]!
   847c6:	ea54 0305 	orrs.w	r3, r4, r5
   847ca:	d1f1      	bne.n	847b0 <_svfprintf_r+0x648>
   847cc:	eba9 0306 	sub.w	r3, r9, r6
   847d0:	930e      	str	r3, [sp, #56]	; 0x38
   847d2:	e5e5      	b.n	843a0 <_svfprintf_r+0x238>
   847d4:	9311      	str	r3, [sp, #68]	; 0x44
   847d6:	2a00      	cmp	r2, #0
   847d8:	f040 8733 	bne.w	85642 <_svfprintf_r+0x14da>
   847dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   847de:	f01b 0f08 	tst.w	fp, #8
   847e2:	f104 0407 	add.w	r4, r4, #7
   847e6:	f000 84cb 	beq.w	85180 <_svfprintf_r+0x1018>
   847ea:	f024 0307 	bic.w	r3, r4, #7
   847ee:	f103 0208 	add.w	r2, r3, #8
   847f2:	920f      	str	r2, [sp, #60]	; 0x3c
   847f4:	681a      	ldr	r2, [r3, #0]
   847f6:	685b      	ldr	r3, [r3, #4]
   847f8:	9214      	str	r2, [sp, #80]	; 0x50
   847fa:	9315      	str	r3, [sp, #84]	; 0x54
   847fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   847fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
   84800:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   84804:	4628      	mov	r0, r5
   84806:	4621      	mov	r1, r4
   84808:	f04f 32ff 	mov.w	r2, #4294967295
   8480c:	4b6e      	ldr	r3, [pc, #440]	; (849c8 <_svfprintf_r+0x860>)
   8480e:	f003 fe51 	bl	884b4 <__aeabi_dcmpun>
   84812:	2800      	cmp	r0, #0
   84814:	f040 8430 	bne.w	85078 <_svfprintf_r+0xf10>
   84818:	4628      	mov	r0, r5
   8481a:	4621      	mov	r1, r4
   8481c:	f04f 32ff 	mov.w	r2, #4294967295
   84820:	4b69      	ldr	r3, [pc, #420]	; (849c8 <_svfprintf_r+0x860>)
   84822:	f003 fe29 	bl	88478 <__aeabi_dcmple>
   84826:	2800      	cmp	r0, #0
   84828:	f040 8426 	bne.w	85078 <_svfprintf_r+0xf10>
   8482c:	a814      	add	r0, sp, #80	; 0x50
   8482e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   84830:	f003 fe18 	bl	88464 <__aeabi_dcmplt>
   84834:	2800      	cmp	r0, #0
   84836:	f040 85d1 	bne.w	853dc <_svfprintf_r+0x1274>
   8483a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8483e:	2303      	movs	r3, #3
   84840:	461a      	mov	r2, r3
   84842:	9308      	str	r3, [sp, #32]
   84844:	2300      	movs	r3, #0
   84846:	4619      	mov	r1, r3
   84848:	930a      	str	r3, [sp, #40]	; 0x28
   8484a:	4e60      	ldr	r6, [pc, #384]	; (849cc <_svfprintf_r+0x864>)
   8484c:	4b60      	ldr	r3, [pc, #384]	; (849d0 <_svfprintf_r+0x868>)
   8484e:	920e      	str	r2, [sp, #56]	; 0x38
   84850:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84852:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   84856:	9007      	str	r0, [sp, #28]
   84858:	9112      	str	r1, [sp, #72]	; 0x48
   8485a:	2a47      	cmp	r2, #71	; 0x47
   8485c:	bfd8      	it	le
   8485e:	461e      	movle	r6, r3
   84860:	e5a6      	b.n	843b0 <_svfprintf_r+0x248>
   84862:	f04b 0b08 	orr.w	fp, fp, #8
   84866:	f89a 3000 	ldrb.w	r3, [sl]
   8486a:	e4d7      	b.n	8421c <_svfprintf_r+0xb4>
   8486c:	f04b 0b10 	orr.w	fp, fp, #16
   84870:	9311      	str	r3, [sp, #68]	; 0x44
   84872:	f01b 0320 	ands.w	r3, fp, #32
   84876:	f43f aebc 	beq.w	845f2 <_svfprintf_r+0x48a>
   8487a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8487c:	3407      	adds	r4, #7
   8487e:	f024 0307 	bic.w	r3, r4, #7
   84882:	f103 0208 	add.w	r2, r3, #8
   84886:	e9d3 4500 	ldrd	r4, r5, [r3]
   8488a:	920f      	str	r2, [sp, #60]	; 0x3c
   8488c:	2300      	movs	r3, #0
   8488e:	e569      	b.n	84364 <_svfprintf_r+0x1fc>
   84890:	9311      	str	r3, [sp, #68]	; 0x44
   84892:	2a00      	cmp	r2, #0
   84894:	f040 86be 	bne.w	85614 <_svfprintf_r+0x14ac>
   84898:	4b4e      	ldr	r3, [pc, #312]	; (849d4 <_svfprintf_r+0x86c>)
   8489a:	f01b 0f20 	tst.w	fp, #32
   8489e:	9318      	str	r3, [sp, #96]	; 0x60
   848a0:	f43f af1a 	beq.w	846d8 <_svfprintf_r+0x570>
   848a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   848a6:	f01b 0f01 	tst.w	fp, #1
   848aa:	f104 0407 	add.w	r4, r4, #7
   848ae:	f024 0307 	bic.w	r3, r4, #7
   848b2:	f103 0208 	add.w	r2, r3, #8
   848b6:	920f      	str	r2, [sp, #60]	; 0x3c
   848b8:	e9d3 4500 	ldrd	r4, r5, [r3]
   848bc:	f47f af1e 	bne.w	846fc <_svfprintf_r+0x594>
   848c0:	2302      	movs	r3, #2
   848c2:	e54f      	b.n	84364 <_svfprintf_r+0x1fc>
   848c4:	f89a 3000 	ldrb.w	r3, [sl]
   848c8:	2900      	cmp	r1, #0
   848ca:	f47f aca7 	bne.w	8421c <_svfprintf_r+0xb4>
   848ce:	2201      	movs	r2, #1
   848d0:	2120      	movs	r1, #32
   848d2:	e4a3      	b.n	8421c <_svfprintf_r+0xb4>
   848d4:	f04b 0b01 	orr.w	fp, fp, #1
   848d8:	f89a 3000 	ldrb.w	r3, [sl]
   848dc:	e49e      	b.n	8421c <_svfprintf_r+0xb4>
   848de:	f89a 3000 	ldrb.w	r3, [sl]
   848e2:	2201      	movs	r2, #1
   848e4:	212b      	movs	r1, #43	; 0x2b
   848e6:	e499      	b.n	8421c <_svfprintf_r+0xb4>
   848e8:	f04b 0b20 	orr.w	fp, fp, #32
   848ec:	f89a 3000 	ldrb.w	r3, [sl]
   848f0:	e494      	b.n	8421c <_svfprintf_r+0xb4>
   848f2:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   848f6:	f89a 3000 	ldrb.w	r3, [sl]
   848fa:	e48f      	b.n	8421c <_svfprintf_r+0xb4>
   848fc:	f89a 3000 	ldrb.w	r3, [sl]
   84900:	2b6c      	cmp	r3, #108	; 0x6c
   84902:	bf03      	ittte	eq
   84904:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   84908:	f04b 0b20 	orreq.w	fp, fp, #32
   8490c:	f10a 0a01 	addeq.w	sl, sl, #1
   84910:	f04b 0b10 	orrne.w	fp, fp, #16
   84914:	e482      	b.n	8421c <_svfprintf_r+0xb4>
   84916:	2a00      	cmp	r2, #0
   84918:	f040 8678 	bne.w	8560c <_svfprintf_r+0x14a4>
   8491c:	f01b 0f20 	tst.w	fp, #32
   84920:	f040 844f 	bne.w	851c2 <_svfprintf_r+0x105a>
   84924:	f01b 0f10 	tst.w	fp, #16
   84928:	f040 8435 	bne.w	85196 <_svfprintf_r+0x102e>
   8492c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84930:	f000 8431 	beq.w	85196 <_svfprintf_r+0x102e>
   84934:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84936:	6813      	ldr	r3, [r2, #0]
   84938:	3204      	adds	r2, #4
   8493a:	920f      	str	r2, [sp, #60]	; 0x3c
   8493c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   84940:	801a      	strh	r2, [r3, #0]
   84942:	e438      	b.n	841b6 <_svfprintf_r+0x4e>
   84944:	2378      	movs	r3, #120	; 0x78
   84946:	2230      	movs	r2, #48	; 0x30
   84948:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8494a:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   8494e:	9311      	str	r3, [sp, #68]	; 0x44
   84950:	1d03      	adds	r3, r0, #4
   84952:	930f      	str	r3, [sp, #60]	; 0x3c
   84954:	4b1f      	ldr	r3, [pc, #124]	; (849d4 <_svfprintf_r+0x86c>)
   84956:	6804      	ldr	r4, [r0, #0]
   84958:	9318      	str	r3, [sp, #96]	; 0x60
   8495a:	f04b 0b02 	orr.w	fp, fp, #2
   8495e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   84962:	2500      	movs	r5, #0
   84964:	2302      	movs	r3, #2
   84966:	e4fd      	b.n	84364 <_svfprintf_r+0x1fc>
   84968:	9311      	str	r3, [sp, #68]	; 0x44
   8496a:	2a00      	cmp	r2, #0
   8496c:	f43f aef0 	beq.w	84750 <_svfprintf_r+0x5e8>
   84970:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84974:	e6ec      	b.n	84750 <_svfprintf_r+0x5e8>
   84976:	2000      	movs	r0, #0
   84978:	4604      	mov	r4, r0
   8497a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8497e:	f81a 3b01 	ldrb.w	r3, [sl], #1
   84982:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84986:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   8498a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8498e:	2809      	cmp	r0, #9
   84990:	d9f5      	bls.n	8497e <_svfprintf_r+0x816>
   84992:	940d      	str	r4, [sp, #52]	; 0x34
   84994:	e444      	b.n	84220 <_svfprintf_r+0xb8>
   84996:	9311      	str	r3, [sp, #68]	; 0x44
   84998:	2a00      	cmp	r2, #0
   8499a:	f040 8646 	bne.w	8562a <_svfprintf_r+0x14c2>
   8499e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   849a0:	2a00      	cmp	r2, #0
   849a2:	f43f acb7 	beq.w	84314 <_svfprintf_r+0x1ac>
   849a6:	2300      	movs	r3, #0
   849a8:	2101      	movs	r1, #1
   849aa:	461f      	mov	r7, r3
   849ac:	9108      	str	r1, [sp, #32]
   849ae:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   849b2:	f8cd b01c 	str.w	fp, [sp, #28]
   849b6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   849ba:	930a      	str	r3, [sp, #40]	; 0x28
   849bc:	9312      	str	r3, [sp, #72]	; 0x48
   849be:	910e      	str	r1, [sp, #56]	; 0x38
   849c0:	ae28      	add	r6, sp, #160	; 0xa0
   849c2:	e4f9      	b.n	843b8 <_svfprintf_r+0x250>
   849c4:	0008983c 	.word	0x0008983c
   849c8:	7fefffff 	.word	0x7fefffff
   849cc:	00089830 	.word	0x00089830
   849d0:	0008982c 	.word	0x0008982c
   849d4:	00089850 	.word	0x00089850
   849d8:	aa25      	add	r2, sp, #148	; 0x94
   849da:	990b      	ldr	r1, [sp, #44]	; 0x2c
   849dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   849de:	f002 fcb7 	bl	87350 <__ssprint_r>
   849e2:	2800      	cmp	r0, #0
   849e4:	f47f ac9d 	bne.w	84322 <_svfprintf_r+0x1ba>
   849e8:	46c8      	mov	r8, r9
   849ea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   849ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   849f0:	e535      	b.n	8445e <_svfprintf_r+0x2f6>
   849f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   849f4:	2b65      	cmp	r3, #101	; 0x65
   849f6:	f340 8099 	ble.w	84b2c <_svfprintf_r+0x9c4>
   849fa:	a814      	add	r0, sp, #80	; 0x50
   849fc:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   849fe:	f003 fd27 	bl	88450 <__aeabi_dcmpeq>
   84a02:	2800      	cmp	r0, #0
   84a04:	f000 8192 	beq.w	84d2c <_svfprintf_r+0xbc4>
   84a08:	2101      	movs	r1, #1
   84a0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a0c:	4ab4      	ldr	r2, [pc, #720]	; (84ce0 <_svfprintf_r+0xb78>)
   84a0e:	440b      	add	r3, r1
   84a10:	440c      	add	r4, r1
   84a12:	2b07      	cmp	r3, #7
   84a14:	9427      	str	r4, [sp, #156]	; 0x9c
   84a16:	9326      	str	r3, [sp, #152]	; 0x98
   84a18:	f8c8 1004 	str.w	r1, [r8, #4]
   84a1c:	f8c8 2000 	str.w	r2, [r8]
   84a20:	f300 83c5 	bgt.w	851ae <_svfprintf_r+0x1046>
   84a24:	f108 0808 	add.w	r8, r8, #8
   84a28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   84a2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   84a2c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84a2e:	4293      	cmp	r3, r2
   84a30:	db03      	blt.n	84a3a <_svfprintf_r+0x8d2>
   84a32:	9b07      	ldr	r3, [sp, #28]
   84a34:	07dd      	lsls	r5, r3, #31
   84a36:	f57f ad89 	bpl.w	8454c <_svfprintf_r+0x3e4>
   84a3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a3c:	9919      	ldr	r1, [sp, #100]	; 0x64
   84a3e:	3301      	adds	r3, #1
   84a40:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   84a42:	440c      	add	r4, r1
   84a44:	2b07      	cmp	r3, #7
   84a46:	f8c8 2000 	str.w	r2, [r8]
   84a4a:	f8c8 1004 	str.w	r1, [r8, #4]
   84a4e:	9427      	str	r4, [sp, #156]	; 0x9c
   84a50:	9326      	str	r3, [sp, #152]	; 0x98
   84a52:	f300 83c3 	bgt.w	851dc <_svfprintf_r+0x1074>
   84a56:	f108 0808 	add.w	r8, r8, #8
   84a5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84a5c:	1e5e      	subs	r6, r3, #1
   84a5e:	2e00      	cmp	r6, #0
   84a60:	f77f ad74 	ble.w	8454c <_svfprintf_r+0x3e4>
   84a64:	2e10      	cmp	r6, #16
   84a66:	f340 8574 	ble.w	85552 <_svfprintf_r+0x13ea>
   84a6a:	4622      	mov	r2, r4
   84a6c:	2710      	movs	r7, #16
   84a6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a70:	4d9c      	ldr	r5, [pc, #624]	; (84ce4 <_svfprintf_r+0xb7c>)
   84a72:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   84a76:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84a78:	e005      	b.n	84a86 <_svfprintf_r+0x91e>
   84a7a:	f108 0808 	add.w	r8, r8, #8
   84a7e:	3e10      	subs	r6, #16
   84a80:	2e10      	cmp	r6, #16
   84a82:	f340 8224 	ble.w	84ece <_svfprintf_r+0xd66>
   84a86:	3301      	adds	r3, #1
   84a88:	3210      	adds	r2, #16
   84a8a:	2b07      	cmp	r3, #7
   84a8c:	9227      	str	r2, [sp, #156]	; 0x9c
   84a8e:	9326      	str	r3, [sp, #152]	; 0x98
   84a90:	e888 00a0 	stmia.w	r8, {r5, r7}
   84a94:	ddf1      	ble.n	84a7a <_svfprintf_r+0x912>
   84a96:	aa25      	add	r2, sp, #148	; 0x94
   84a98:	4621      	mov	r1, r4
   84a9a:	4658      	mov	r0, fp
   84a9c:	f002 fc58 	bl	87350 <__ssprint_r>
   84aa0:	2800      	cmp	r0, #0
   84aa2:	f47f ac3e 	bne.w	84322 <_svfprintf_r+0x1ba>
   84aa6:	46c8      	mov	r8, r9
   84aa8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84aaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84aac:	e7e7      	b.n	84a7e <_svfprintf_r+0x916>
   84aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84ab0:	9a08      	ldr	r2, [sp, #32]
   84ab2:	1a9f      	subs	r7, r3, r2
   84ab4:	2f00      	cmp	r7, #0
   84ab6:	f77f acf9 	ble.w	844ac <_svfprintf_r+0x344>
   84aba:	2f10      	cmp	r7, #16
   84abc:	f340 84a7 	ble.w	8540e <_svfprintf_r+0x12a6>
   84ac0:	4d88      	ldr	r5, [pc, #544]	; (84ce4 <_svfprintf_r+0xb7c>)
   84ac2:	4642      	mov	r2, r8
   84ac4:	4621      	mov	r1, r4
   84ac6:	46b0      	mov	r8, r6
   84ac8:	f04f 0b10 	mov.w	fp, #16
   84acc:	462e      	mov	r6, r5
   84ace:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84ad0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84ad2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84ad4:	e004      	b.n	84ae0 <_svfprintf_r+0x978>
   84ad6:	3f10      	subs	r7, #16
   84ad8:	2f10      	cmp	r7, #16
   84ada:	f102 0208 	add.w	r2, r2, #8
   84ade:	dd15      	ble.n	84b0c <_svfprintf_r+0x9a4>
   84ae0:	3301      	adds	r3, #1
   84ae2:	3110      	adds	r1, #16
   84ae4:	2b07      	cmp	r3, #7
   84ae6:	9127      	str	r1, [sp, #156]	; 0x9c
   84ae8:	9326      	str	r3, [sp, #152]	; 0x98
   84aea:	e882 0840 	stmia.w	r2, {r6, fp}
   84aee:	ddf2      	ble.n	84ad6 <_svfprintf_r+0x96e>
   84af0:	aa25      	add	r2, sp, #148	; 0x94
   84af2:	4629      	mov	r1, r5
   84af4:	4620      	mov	r0, r4
   84af6:	f002 fc2b 	bl	87350 <__ssprint_r>
   84afa:	2800      	cmp	r0, #0
   84afc:	f47f ac11 	bne.w	84322 <_svfprintf_r+0x1ba>
   84b00:	3f10      	subs	r7, #16
   84b02:	2f10      	cmp	r7, #16
   84b04:	464a      	mov	r2, r9
   84b06:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84b08:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84b0a:	dce9      	bgt.n	84ae0 <_svfprintf_r+0x978>
   84b0c:	4635      	mov	r5, r6
   84b0e:	460c      	mov	r4, r1
   84b10:	4646      	mov	r6, r8
   84b12:	4690      	mov	r8, r2
   84b14:	3301      	adds	r3, #1
   84b16:	443c      	add	r4, r7
   84b18:	2b07      	cmp	r3, #7
   84b1a:	9427      	str	r4, [sp, #156]	; 0x9c
   84b1c:	9326      	str	r3, [sp, #152]	; 0x98
   84b1e:	e888 00a0 	stmia.w	r8, {r5, r7}
   84b22:	f300 829d 	bgt.w	85060 <_svfprintf_r+0xef8>
   84b26:	f108 0808 	add.w	r8, r8, #8
   84b2a:	e4bf      	b.n	844ac <_svfprintf_r+0x344>
   84b2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84b2e:	2b01      	cmp	r3, #1
   84b30:	f340 824e 	ble.w	84fd0 <_svfprintf_r+0xe68>
   84b34:	2301      	movs	r3, #1
   84b36:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84b38:	441c      	add	r4, r3
   84b3a:	441f      	add	r7, r3
   84b3c:	2f07      	cmp	r7, #7
   84b3e:	9427      	str	r4, [sp, #156]	; 0x9c
   84b40:	f8c8 6000 	str.w	r6, [r8]
   84b44:	9726      	str	r7, [sp, #152]	; 0x98
   84b46:	f8c8 3004 	str.w	r3, [r8, #4]
   84b4a:	f300 825e 	bgt.w	8500a <_svfprintf_r+0xea2>
   84b4e:	f108 0808 	add.w	r8, r8, #8
   84b52:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84b54:	3701      	adds	r7, #1
   84b56:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   84b58:	4414      	add	r4, r2
   84b5a:	2f07      	cmp	r7, #7
   84b5c:	9427      	str	r4, [sp, #156]	; 0x9c
   84b5e:	9726      	str	r7, [sp, #152]	; 0x98
   84b60:	f8c8 3000 	str.w	r3, [r8]
   84b64:	f8c8 2004 	str.w	r2, [r8, #4]
   84b68:	f300 825b 	bgt.w	85022 <_svfprintf_r+0xeba>
   84b6c:	f108 0808 	add.w	r8, r8, #8
   84b70:	a814      	add	r0, sp, #80	; 0x50
   84b72:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   84b74:	f003 fc6c 	bl	88450 <__aeabi_dcmpeq>
   84b78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84b7a:	2800      	cmp	r0, #0
   84b7c:	f040 8141 	bne.w	84e02 <_svfprintf_r+0xc9a>
   84b80:	3b01      	subs	r3, #1
   84b82:	3701      	adds	r7, #1
   84b84:	3601      	adds	r6, #1
   84b86:	441c      	add	r4, r3
   84b88:	2f07      	cmp	r7, #7
   84b8a:	f8c8 6000 	str.w	r6, [r8]
   84b8e:	9726      	str	r7, [sp, #152]	; 0x98
   84b90:	9427      	str	r4, [sp, #156]	; 0x9c
   84b92:	f8c8 3004 	str.w	r3, [r8, #4]
   84b96:	f300 8166 	bgt.w	84e66 <_svfprintf_r+0xcfe>
   84b9a:	f108 0808 	add.w	r8, r8, #8
   84b9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   84ba0:	3701      	adds	r7, #1
   84ba2:	4414      	add	r4, r2
   84ba4:	ab21      	add	r3, sp, #132	; 0x84
   84ba6:	2f07      	cmp	r7, #7
   84ba8:	9427      	str	r4, [sp, #156]	; 0x9c
   84baa:	9726      	str	r7, [sp, #152]	; 0x98
   84bac:	f8c8 2004 	str.w	r2, [r8, #4]
   84bb0:	f8c8 3000 	str.w	r3, [r8]
   84bb4:	f77f acc8 	ble.w	84548 <_svfprintf_r+0x3e0>
   84bb8:	aa25      	add	r2, sp, #148	; 0x94
   84bba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84bbc:	980c      	ldr	r0, [sp, #48]	; 0x30
   84bbe:	f002 fbc7 	bl	87350 <__ssprint_r>
   84bc2:	2800      	cmp	r0, #0
   84bc4:	f47f abad 	bne.w	84322 <_svfprintf_r+0x1ba>
   84bc8:	46c8      	mov	r8, r9
   84bca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84bcc:	e4be      	b.n	8454c <_svfprintf_r+0x3e4>
   84bce:	aa25      	add	r2, sp, #148	; 0x94
   84bd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84bd2:	980c      	ldr	r0, [sp, #48]	; 0x30
   84bd4:	f002 fbbc 	bl	87350 <__ssprint_r>
   84bd8:	2800      	cmp	r0, #0
   84bda:	f43f ad01 	beq.w	845e0 <_svfprintf_r+0x478>
   84bde:	f7ff bba0 	b.w	84322 <_svfprintf_r+0x1ba>
   84be2:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84be6:	2b01      	cmp	r3, #1
   84be8:	f000 817e 	beq.w	84ee8 <_svfprintf_r+0xd80>
   84bec:	2b02      	cmp	r3, #2
   84bee:	d171      	bne.n	84cd4 <_svfprintf_r+0xb6c>
   84bf0:	f8cd b01c 	str.w	fp, [sp, #28]
   84bf4:	2400      	movs	r4, #0
   84bf6:	2500      	movs	r5, #0
   84bf8:	e5d8      	b.n	847ac <_svfprintf_r+0x644>
   84bfa:	aa25      	add	r2, sp, #148	; 0x94
   84bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84bfe:	980c      	ldr	r0, [sp, #48]	; 0x30
   84c00:	f002 fba6 	bl	87350 <__ssprint_r>
   84c04:	2800      	cmp	r0, #0
   84c06:	f47f ab8c 	bne.w	84322 <_svfprintf_r+0x1ba>
   84c0a:	46c8      	mov	r8, r9
   84c0c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84c0e:	e48a      	b.n	84526 <_svfprintf_r+0x3be>
   84c10:	aa25      	add	r2, sp, #148	; 0x94
   84c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84c14:	980c      	ldr	r0, [sp, #48]	; 0x30
   84c16:	f002 fb9b 	bl	87350 <__ssprint_r>
   84c1a:	2800      	cmp	r0, #0
   84c1c:	f47f ab81 	bne.w	84322 <_svfprintf_r+0x1ba>
   84c20:	46c8      	mov	r8, r9
   84c22:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84c24:	e42d      	b.n	84482 <_svfprintf_r+0x31a>
   84c26:	2001      	movs	r0, #1
   84c28:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84c2a:	4a2d      	ldr	r2, [pc, #180]	; (84ce0 <_svfprintf_r+0xb78>)
   84c2c:	4403      	add	r3, r0
   84c2e:	4404      	add	r4, r0
   84c30:	2b07      	cmp	r3, #7
   84c32:	9427      	str	r4, [sp, #156]	; 0x9c
   84c34:	9326      	str	r3, [sp, #152]	; 0x98
   84c36:	f8c8 0004 	str.w	r0, [r8, #4]
   84c3a:	f8c8 2000 	str.w	r2, [r8]
   84c3e:	f340 82d8 	ble.w	851f2 <_svfprintf_r+0x108a>
   84c42:	aa25      	add	r2, sp, #148	; 0x94
   84c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84c46:	980c      	ldr	r0, [sp, #48]	; 0x30
   84c48:	f002 fb82 	bl	87350 <__ssprint_r>
   84c4c:	2800      	cmp	r0, #0
   84c4e:	f47f ab68 	bne.w	84322 <_svfprintf_r+0x1ba>
   84c52:	46c8      	mov	r8, r9
   84c54:	991f      	ldr	r1, [sp, #124]	; 0x7c
   84c56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84c58:	b929      	cbnz	r1, 84c66 <_svfprintf_r+0xafe>
   84c5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84c5c:	b91b      	cbnz	r3, 84c66 <_svfprintf_r+0xafe>
   84c5e:	9b07      	ldr	r3, [sp, #28]
   84c60:	07d8      	lsls	r0, r3, #31
   84c62:	f57f ac73 	bpl.w	8454c <_svfprintf_r+0x3e4>
   84c66:	9819      	ldr	r0, [sp, #100]	; 0x64
   84c68:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84c6a:	4602      	mov	r2, r0
   84c6c:	3301      	adds	r3, #1
   84c6e:	4422      	add	r2, r4
   84c70:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   84c72:	2b07      	cmp	r3, #7
   84c74:	9227      	str	r2, [sp, #156]	; 0x9c
   84c76:	f8c8 4000 	str.w	r4, [r8]
   84c7a:	f8c8 0004 	str.w	r0, [r8, #4]
   84c7e:	9326      	str	r3, [sp, #152]	; 0x98
   84c80:	f300 8431 	bgt.w	854e6 <_svfprintf_r+0x137e>
   84c84:	f108 0808 	add.w	r8, r8, #8
   84c88:	2900      	cmp	r1, #0
   84c8a:	f2c0 8409 	blt.w	854a0 <_svfprintf_r+0x1338>
   84c8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   84c90:	3301      	adds	r3, #1
   84c92:	188c      	adds	r4, r1, r2
   84c94:	2b07      	cmp	r3, #7
   84c96:	9427      	str	r4, [sp, #156]	; 0x9c
   84c98:	9326      	str	r3, [sp, #152]	; 0x98
   84c9a:	f8c8 6000 	str.w	r6, [r8]
   84c9e:	f8c8 1004 	str.w	r1, [r8, #4]
   84ca2:	f77f ac51 	ble.w	84548 <_svfprintf_r+0x3e0>
   84ca6:	aa25      	add	r2, sp, #148	; 0x94
   84ca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84caa:	980c      	ldr	r0, [sp, #48]	; 0x30
   84cac:	f002 fb50 	bl	87350 <__ssprint_r>
   84cb0:	2800      	cmp	r0, #0
   84cb2:	f47f ab36 	bne.w	84322 <_svfprintf_r+0x1ba>
   84cb6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84cb8:	46c8      	mov	r8, r9
   84cba:	e447      	b.n	8454c <_svfprintf_r+0x3e4>
   84cbc:	aa25      	add	r2, sp, #148	; 0x94
   84cbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84cc0:	980c      	ldr	r0, [sp, #48]	; 0x30
   84cc2:	f002 fb45 	bl	87350 <__ssprint_r>
   84cc6:	2800      	cmp	r0, #0
   84cc8:	f47f ab2b 	bne.w	84322 <_svfprintf_r+0x1ba>
   84ccc:	46c8      	mov	r8, r9
   84cce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84cd0:	f7ff bbe9 	b.w	844a6 <_svfprintf_r+0x33e>
   84cd4:	2400      	movs	r4, #0
   84cd6:	2500      	movs	r5, #0
   84cd8:	f8cd b01c 	str.w	fp, [sp, #28]
   84cdc:	4649      	mov	r1, r9
   84cde:	e004      	b.n	84cea <_svfprintf_r+0xb82>
   84ce0:	0008986c 	.word	0x0008986c
   84ce4:	00089880 	.word	0x00089880
   84ce8:	4631      	mov	r1, r6
   84cea:	08e2      	lsrs	r2, r4, #3
   84cec:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   84cf0:	08e8      	lsrs	r0, r5, #3
   84cf2:	f004 0307 	and.w	r3, r4, #7
   84cf6:	4605      	mov	r5, r0
   84cf8:	4614      	mov	r4, r2
   84cfa:	3330      	adds	r3, #48	; 0x30
   84cfc:	ea54 0205 	orrs.w	r2, r4, r5
   84d00:	f801 3c01 	strb.w	r3, [r1, #-1]
   84d04:	f101 36ff 	add.w	r6, r1, #4294967295
   84d08:	d1ee      	bne.n	84ce8 <_svfprintf_r+0xb80>
   84d0a:	9a07      	ldr	r2, [sp, #28]
   84d0c:	07d2      	lsls	r2, r2, #31
   84d0e:	f57f ad5d 	bpl.w	847cc <_svfprintf_r+0x664>
   84d12:	2b30      	cmp	r3, #48	; 0x30
   84d14:	f43f ad5a 	beq.w	847cc <_svfprintf_r+0x664>
   84d18:	2330      	movs	r3, #48	; 0x30
   84d1a:	3902      	subs	r1, #2
   84d1c:	f806 3c01 	strb.w	r3, [r6, #-1]
   84d20:	eba9 0301 	sub.w	r3, r9, r1
   84d24:	930e      	str	r3, [sp, #56]	; 0x38
   84d26:	460e      	mov	r6, r1
   84d28:	f7ff bb3a 	b.w	843a0 <_svfprintf_r+0x238>
   84d2c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   84d2e:	2900      	cmp	r1, #0
   84d30:	f77f af79 	ble.w	84c26 <_svfprintf_r+0xabe>
   84d34:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84d36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   84d38:	4293      	cmp	r3, r2
   84d3a:	bfa8      	it	ge
   84d3c:	4613      	movge	r3, r2
   84d3e:	2b00      	cmp	r3, #0
   84d40:	461f      	mov	r7, r3
   84d42:	dd0b      	ble.n	84d5c <_svfprintf_r+0xbf4>
   84d44:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84d46:	443c      	add	r4, r7
   84d48:	3301      	adds	r3, #1
   84d4a:	2b07      	cmp	r3, #7
   84d4c:	9427      	str	r4, [sp, #156]	; 0x9c
   84d4e:	e888 00c0 	stmia.w	r8, {r6, r7}
   84d52:	9326      	str	r3, [sp, #152]	; 0x98
   84d54:	f300 82fb 	bgt.w	8534e <_svfprintf_r+0x11e6>
   84d58:	f108 0808 	add.w	r8, r8, #8
   84d5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84d5e:	2f00      	cmp	r7, #0
   84d60:	bfa8      	it	ge
   84d62:	1bdb      	subge	r3, r3, r7
   84d64:	2b00      	cmp	r3, #0
   84d66:	461f      	mov	r7, r3
   84d68:	f340 80d7 	ble.w	84f1a <_svfprintf_r+0xdb2>
   84d6c:	2b10      	cmp	r3, #16
   84d6e:	f340 8433 	ble.w	855d8 <_svfprintf_r+0x1470>
   84d72:	4dba      	ldr	r5, [pc, #744]	; (8505c <_svfprintf_r+0xef4>)
   84d74:	4642      	mov	r2, r8
   84d76:	4621      	mov	r1, r4
   84d78:	46b0      	mov	r8, r6
   84d7a:	f04f 0b10 	mov.w	fp, #16
   84d7e:	462e      	mov	r6, r5
   84d80:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84d82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84d84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84d86:	e004      	b.n	84d92 <_svfprintf_r+0xc2a>
   84d88:	3208      	adds	r2, #8
   84d8a:	3f10      	subs	r7, #16
   84d8c:	2f10      	cmp	r7, #16
   84d8e:	f340 80b5 	ble.w	84efc <_svfprintf_r+0xd94>
   84d92:	3301      	adds	r3, #1
   84d94:	3110      	adds	r1, #16
   84d96:	2b07      	cmp	r3, #7
   84d98:	9127      	str	r1, [sp, #156]	; 0x9c
   84d9a:	9326      	str	r3, [sp, #152]	; 0x98
   84d9c:	e882 0840 	stmia.w	r2, {r6, fp}
   84da0:	ddf2      	ble.n	84d88 <_svfprintf_r+0xc20>
   84da2:	aa25      	add	r2, sp, #148	; 0x94
   84da4:	4629      	mov	r1, r5
   84da6:	4620      	mov	r0, r4
   84da8:	f002 fad2 	bl	87350 <__ssprint_r>
   84dac:	2800      	cmp	r0, #0
   84dae:	f47f aab8 	bne.w	84322 <_svfprintf_r+0x1ba>
   84db2:	464a      	mov	r2, r9
   84db4:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84db6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84db8:	e7e7      	b.n	84d8a <_svfprintf_r+0xc22>
   84dba:	2d00      	cmp	r5, #0
   84dbc:	bf08      	it	eq
   84dbe:	2c0a      	cmpeq	r4, #10
   84dc0:	f0c0 8090 	bcc.w	84ee4 <_svfprintf_r+0xd7c>
   84dc4:	464e      	mov	r6, r9
   84dc6:	4620      	mov	r0, r4
   84dc8:	4629      	mov	r1, r5
   84dca:	220a      	movs	r2, #10
   84dcc:	2300      	movs	r3, #0
   84dce:	f003 fbaf 	bl	88530 <__aeabi_uldivmod>
   84dd2:	3230      	adds	r2, #48	; 0x30
   84dd4:	f806 2d01 	strb.w	r2, [r6, #-1]!
   84dd8:	4620      	mov	r0, r4
   84dda:	4629      	mov	r1, r5
   84ddc:	2300      	movs	r3, #0
   84dde:	220a      	movs	r2, #10
   84de0:	f003 fba6 	bl	88530 <__aeabi_uldivmod>
   84de4:	4604      	mov	r4, r0
   84de6:	460d      	mov	r5, r1
   84de8:	ea54 0305 	orrs.w	r3, r4, r5
   84dec:	d1eb      	bne.n	84dc6 <_svfprintf_r+0xc5e>
   84dee:	eba9 0306 	sub.w	r3, r9, r6
   84df2:	930e      	str	r3, [sp, #56]	; 0x38
   84df4:	f7ff bad4 	b.w	843a0 <_svfprintf_r+0x238>
   84df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84dfa:	464e      	mov	r6, r9
   84dfc:	930e      	str	r3, [sp, #56]	; 0x38
   84dfe:	f7ff bacf 	b.w	843a0 <_svfprintf_r+0x238>
   84e02:	1e5e      	subs	r6, r3, #1
   84e04:	2e00      	cmp	r6, #0
   84e06:	f77f aeca 	ble.w	84b9e <_svfprintf_r+0xa36>
   84e0a:	2e10      	cmp	r6, #16
   84e0c:	f340 83e2 	ble.w	855d4 <_svfprintf_r+0x146c>
   84e10:	4622      	mov	r2, r4
   84e12:	f04f 0b10 	mov.w	fp, #16
   84e16:	4d91      	ldr	r5, [pc, #580]	; (8505c <_svfprintf_r+0xef4>)
   84e18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84e1a:	e004      	b.n	84e26 <_svfprintf_r+0xcbe>
   84e1c:	3e10      	subs	r6, #16
   84e1e:	2e10      	cmp	r6, #16
   84e20:	f108 0808 	add.w	r8, r8, #8
   84e24:	dd15      	ble.n	84e52 <_svfprintf_r+0xcea>
   84e26:	3701      	adds	r7, #1
   84e28:	3210      	adds	r2, #16
   84e2a:	2f07      	cmp	r7, #7
   84e2c:	9227      	str	r2, [sp, #156]	; 0x9c
   84e2e:	9726      	str	r7, [sp, #152]	; 0x98
   84e30:	e888 0820 	stmia.w	r8, {r5, fp}
   84e34:	ddf2      	ble.n	84e1c <_svfprintf_r+0xcb4>
   84e36:	aa25      	add	r2, sp, #148	; 0x94
   84e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84e3a:	4620      	mov	r0, r4
   84e3c:	f002 fa88 	bl	87350 <__ssprint_r>
   84e40:	2800      	cmp	r0, #0
   84e42:	f47f aa6e 	bne.w	84322 <_svfprintf_r+0x1ba>
   84e46:	3e10      	subs	r6, #16
   84e48:	2e10      	cmp	r6, #16
   84e4a:	46c8      	mov	r8, r9
   84e4c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84e4e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84e50:	dce9      	bgt.n	84e26 <_svfprintf_r+0xcbe>
   84e52:	4614      	mov	r4, r2
   84e54:	3701      	adds	r7, #1
   84e56:	4434      	add	r4, r6
   84e58:	2f07      	cmp	r7, #7
   84e5a:	9427      	str	r4, [sp, #156]	; 0x9c
   84e5c:	9726      	str	r7, [sp, #152]	; 0x98
   84e5e:	e888 0060 	stmia.w	r8, {r5, r6}
   84e62:	f77f ae9a 	ble.w	84b9a <_svfprintf_r+0xa32>
   84e66:	aa25      	add	r2, sp, #148	; 0x94
   84e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84e6a:	980c      	ldr	r0, [sp, #48]	; 0x30
   84e6c:	f002 fa70 	bl	87350 <__ssprint_r>
   84e70:	2800      	cmp	r0, #0
   84e72:	f47f aa56 	bne.w	84322 <_svfprintf_r+0x1ba>
   84e76:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84e78:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84e7a:	46c8      	mov	r8, r9
   84e7c:	e68f      	b.n	84b9e <_svfprintf_r+0xa36>
   84e7e:	3204      	adds	r2, #4
   84e80:	681c      	ldr	r4, [r3, #0]
   84e82:	2500      	movs	r5, #0
   84e84:	2301      	movs	r3, #1
   84e86:	920f      	str	r2, [sp, #60]	; 0x3c
   84e88:	f7ff ba6c 	b.w	84364 <_svfprintf_r+0x1fc>
   84e8c:	681c      	ldr	r4, [r3, #0]
   84e8e:	3304      	adds	r3, #4
   84e90:	930f      	str	r3, [sp, #60]	; 0x3c
   84e92:	2500      	movs	r5, #0
   84e94:	e42e      	b.n	846f4 <_svfprintf_r+0x58c>
   84e96:	681c      	ldr	r4, [r3, #0]
   84e98:	3304      	adds	r3, #4
   84e9a:	17e5      	asrs	r5, r4, #31
   84e9c:	4622      	mov	r2, r4
   84e9e:	930f      	str	r3, [sp, #60]	; 0x3c
   84ea0:	462b      	mov	r3, r5
   84ea2:	2a00      	cmp	r2, #0
   84ea4:	f173 0300 	sbcs.w	r3, r3, #0
   84ea8:	f6bf ac6c 	bge.w	84784 <_svfprintf_r+0x61c>
   84eac:	272d      	movs	r7, #45	; 0x2d
   84eae:	4264      	negs	r4, r4
   84eb0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84eb4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   84eb8:	2301      	movs	r3, #1
   84eba:	f7ff ba57 	b.w	8436c <_svfprintf_r+0x204>
   84ebe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   84ec0:	2500      	movs	r5, #0
   84ec2:	460a      	mov	r2, r1
   84ec4:	3204      	adds	r2, #4
   84ec6:	680c      	ldr	r4, [r1, #0]
   84ec8:	920f      	str	r2, [sp, #60]	; 0x3c
   84eca:	f7ff ba4b 	b.w	84364 <_svfprintf_r+0x1fc>
   84ece:	4614      	mov	r4, r2
   84ed0:	3301      	adds	r3, #1
   84ed2:	4434      	add	r4, r6
   84ed4:	2b07      	cmp	r3, #7
   84ed6:	9427      	str	r4, [sp, #156]	; 0x9c
   84ed8:	9326      	str	r3, [sp, #152]	; 0x98
   84eda:	e888 0060 	stmia.w	r8, {r5, r6}
   84ede:	f77f ab33 	ble.w	84548 <_svfprintf_r+0x3e0>
   84ee2:	e6e0      	b.n	84ca6 <_svfprintf_r+0xb3e>
   84ee4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84ee8:	2301      	movs	r3, #1
   84eea:	ae42      	add	r6, sp, #264	; 0x108
   84eec:	3430      	adds	r4, #48	; 0x30
   84eee:	f8cd b01c 	str.w	fp, [sp, #28]
   84ef2:	f806 4d41 	strb.w	r4, [r6, #-65]!
   84ef6:	930e      	str	r3, [sp, #56]	; 0x38
   84ef8:	f7ff ba52 	b.w	843a0 <_svfprintf_r+0x238>
   84efc:	4635      	mov	r5, r6
   84efe:	460c      	mov	r4, r1
   84f00:	4646      	mov	r6, r8
   84f02:	4690      	mov	r8, r2
   84f04:	3301      	adds	r3, #1
   84f06:	443c      	add	r4, r7
   84f08:	2b07      	cmp	r3, #7
   84f0a:	9427      	str	r4, [sp, #156]	; 0x9c
   84f0c:	9326      	str	r3, [sp, #152]	; 0x98
   84f0e:	e888 00a0 	stmia.w	r8, {r5, r7}
   84f12:	f300 8246 	bgt.w	853a2 <_svfprintf_r+0x123a>
   84f16:	f108 0808 	add.w	r8, r8, #8
   84f1a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84f1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84f1e:	429a      	cmp	r2, r3
   84f20:	db45      	blt.n	84fae <_svfprintf_r+0xe46>
   84f22:	9b07      	ldr	r3, [sp, #28]
   84f24:	07d9      	lsls	r1, r3, #31
   84f26:	d442      	bmi.n	84fae <_svfprintf_r+0xe46>
   84f28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84f2a:	9812      	ldr	r0, [sp, #72]	; 0x48
   84f2c:	1a9a      	subs	r2, r3, r2
   84f2e:	1a1d      	subs	r5, r3, r0
   84f30:	4295      	cmp	r5, r2
   84f32:	bfa8      	it	ge
   84f34:	4615      	movge	r5, r2
   84f36:	2d00      	cmp	r5, #0
   84f38:	dd0e      	ble.n	84f58 <_svfprintf_r+0xdf0>
   84f3a:	9926      	ldr	r1, [sp, #152]	; 0x98
   84f3c:	4406      	add	r6, r0
   84f3e:	3101      	adds	r1, #1
   84f40:	442c      	add	r4, r5
   84f42:	2907      	cmp	r1, #7
   84f44:	f8c8 6000 	str.w	r6, [r8]
   84f48:	9427      	str	r4, [sp, #156]	; 0x9c
   84f4a:	f8c8 5004 	str.w	r5, [r8, #4]
   84f4e:	9126      	str	r1, [sp, #152]	; 0x98
   84f50:	f300 8216 	bgt.w	85380 <_svfprintf_r+0x1218>
   84f54:	f108 0808 	add.w	r8, r8, #8
   84f58:	2d00      	cmp	r5, #0
   84f5a:	bfb4      	ite	lt
   84f5c:	4616      	movlt	r6, r2
   84f5e:	1b56      	subge	r6, r2, r5
   84f60:	2e00      	cmp	r6, #0
   84f62:	f77f aaf3 	ble.w	8454c <_svfprintf_r+0x3e4>
   84f66:	2e10      	cmp	r6, #16
   84f68:	f340 82f3 	ble.w	85552 <_svfprintf_r+0x13ea>
   84f6c:	4622      	mov	r2, r4
   84f6e:	2710      	movs	r7, #16
   84f70:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84f72:	4d3a      	ldr	r5, [pc, #232]	; (8505c <_svfprintf_r+0xef4>)
   84f74:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   84f78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84f7a:	e004      	b.n	84f86 <_svfprintf_r+0xe1e>
   84f7c:	f108 0808 	add.w	r8, r8, #8
   84f80:	3e10      	subs	r6, #16
   84f82:	2e10      	cmp	r6, #16
   84f84:	dda3      	ble.n	84ece <_svfprintf_r+0xd66>
   84f86:	3301      	adds	r3, #1
   84f88:	3210      	adds	r2, #16
   84f8a:	2b07      	cmp	r3, #7
   84f8c:	9227      	str	r2, [sp, #156]	; 0x9c
   84f8e:	9326      	str	r3, [sp, #152]	; 0x98
   84f90:	e888 00a0 	stmia.w	r8, {r5, r7}
   84f94:	ddf2      	ble.n	84f7c <_svfprintf_r+0xe14>
   84f96:	aa25      	add	r2, sp, #148	; 0x94
   84f98:	4621      	mov	r1, r4
   84f9a:	4658      	mov	r0, fp
   84f9c:	f002 f9d8 	bl	87350 <__ssprint_r>
   84fa0:	2800      	cmp	r0, #0
   84fa2:	f47f a9be 	bne.w	84322 <_svfprintf_r+0x1ba>
   84fa6:	46c8      	mov	r8, r9
   84fa8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84faa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84fac:	e7e8      	b.n	84f80 <_svfprintf_r+0xe18>
   84fae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84fb0:	9819      	ldr	r0, [sp, #100]	; 0x64
   84fb2:	3301      	adds	r3, #1
   84fb4:	991a      	ldr	r1, [sp, #104]	; 0x68
   84fb6:	4404      	add	r4, r0
   84fb8:	2b07      	cmp	r3, #7
   84fba:	9427      	str	r4, [sp, #156]	; 0x9c
   84fbc:	f8c8 1000 	str.w	r1, [r8]
   84fc0:	f8c8 0004 	str.w	r0, [r8, #4]
   84fc4:	9326      	str	r3, [sp, #152]	; 0x98
   84fc6:	f300 81cf 	bgt.w	85368 <_svfprintf_r+0x1200>
   84fca:	f108 0808 	add.w	r8, r8, #8
   84fce:	e7ab      	b.n	84f28 <_svfprintf_r+0xdc0>
   84fd0:	9b07      	ldr	r3, [sp, #28]
   84fd2:	07da      	lsls	r2, r3, #31
   84fd4:	f53f adae 	bmi.w	84b34 <_svfprintf_r+0x9cc>
   84fd8:	2301      	movs	r3, #1
   84fda:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84fdc:	441c      	add	r4, r3
   84fde:	441f      	add	r7, r3
   84fe0:	2f07      	cmp	r7, #7
   84fe2:	9427      	str	r4, [sp, #156]	; 0x9c
   84fe4:	f8c8 6000 	str.w	r6, [r8]
   84fe8:	9726      	str	r7, [sp, #152]	; 0x98
   84fea:	f8c8 3004 	str.w	r3, [r8, #4]
   84fee:	f77f add4 	ble.w	84b9a <_svfprintf_r+0xa32>
   84ff2:	aa25      	add	r2, sp, #148	; 0x94
   84ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84ff6:	980c      	ldr	r0, [sp, #48]	; 0x30
   84ff8:	f002 f9aa 	bl	87350 <__ssprint_r>
   84ffc:	2800      	cmp	r0, #0
   84ffe:	f47f a990 	bne.w	84322 <_svfprintf_r+0x1ba>
   85002:	46c8      	mov	r8, r9
   85004:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85006:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85008:	e5c9      	b.n	84b9e <_svfprintf_r+0xa36>
   8500a:	aa25      	add	r2, sp, #148	; 0x94
   8500c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8500e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85010:	f002 f99e 	bl	87350 <__ssprint_r>
   85014:	2800      	cmp	r0, #0
   85016:	f47f a984 	bne.w	84322 <_svfprintf_r+0x1ba>
   8501a:	46c8      	mov	r8, r9
   8501c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8501e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85020:	e597      	b.n	84b52 <_svfprintf_r+0x9ea>
   85022:	aa25      	add	r2, sp, #148	; 0x94
   85024:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85026:	980c      	ldr	r0, [sp, #48]	; 0x30
   85028:	f002 f992 	bl	87350 <__ssprint_r>
   8502c:	2800      	cmp	r0, #0
   8502e:	f47f a978 	bne.w	84322 <_svfprintf_r+0x1ba>
   85032:	46c8      	mov	r8, r9
   85034:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85036:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85038:	e59a      	b.n	84b70 <_svfprintf_r+0xa08>
   8503a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8503c:	3407      	adds	r4, #7
   8503e:	f024 0407 	bic.w	r4, r4, #7
   85042:	f104 0108 	add.w	r1, r4, #8
   85046:	e9d4 2300 	ldrd	r2, r3, [r4]
   8504a:	910f      	str	r1, [sp, #60]	; 0x3c
   8504c:	4614      	mov	r4, r2
   8504e:	461d      	mov	r5, r3
   85050:	f7ff bb93 	b.w	8477a <_svfprintf_r+0x612>
   85054:	464e      	mov	r6, r9
   85056:	f7ff b9a3 	b.w	843a0 <_svfprintf_r+0x238>
   8505a:	bf00      	nop
   8505c:	00089880 	.word	0x00089880
   85060:	aa25      	add	r2, sp, #148	; 0x94
   85062:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85064:	980c      	ldr	r0, [sp, #48]	; 0x30
   85066:	f002 f973 	bl	87350 <__ssprint_r>
   8506a:	2800      	cmp	r0, #0
   8506c:	f47f a959 	bne.w	84322 <_svfprintf_r+0x1ba>
   85070:	46c8      	mov	r8, r9
   85072:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85074:	f7ff ba1a 	b.w	844ac <_svfprintf_r+0x344>
   85078:	9c14      	ldr	r4, [sp, #80]	; 0x50
   8507a:	4622      	mov	r2, r4
   8507c:	4620      	mov	r0, r4
   8507e:	9c15      	ldr	r4, [sp, #84]	; 0x54
   85080:	4623      	mov	r3, r4
   85082:	4621      	mov	r1, r4
   85084:	f003 fa16 	bl	884b4 <__aeabi_dcmpun>
   85088:	2800      	cmp	r0, #0
   8508a:	f040 8273 	bne.w	85574 <_svfprintf_r+0x140c>
   8508e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85090:	3301      	adds	r3, #1
   85092:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85094:	f023 0320 	bic.w	r3, r3, #32
   85098:	930e      	str	r3, [sp, #56]	; 0x38
   8509a:	f000 819c 	beq.w	853d6 <_svfprintf_r+0x126e>
   8509e:	2b47      	cmp	r3, #71	; 0x47
   850a0:	f000 80d6 	beq.w	85250 <_svfprintf_r+0x10e8>
   850a4:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   850a8:	9307      	str	r3, [sp, #28]
   850aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   850ac:	1e1f      	subs	r7, r3, #0
   850ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
   850b0:	9308      	str	r3, [sp, #32]
   850b2:	bfb7      	itett	lt
   850b4:	463b      	movlt	r3, r7
   850b6:	2300      	movge	r3, #0
   850b8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   850bc:	232d      	movlt	r3, #45	; 0x2d
   850be:	9310      	str	r3, [sp, #64]	; 0x40
   850c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   850c2:	2b66      	cmp	r3, #102	; 0x66
   850c4:	f000 8190 	beq.w	853e8 <_svfprintf_r+0x1280>
   850c8:	2b46      	cmp	r3, #70	; 0x46
   850ca:	f000 80a4 	beq.w	85216 <_svfprintf_r+0x10ae>
   850ce:	2002      	movs	r0, #2
   850d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   850d2:	a923      	add	r1, sp, #140	; 0x8c
   850d4:	2b45      	cmp	r3, #69	; 0x45
   850d6:	bf0a      	itet	eq
   850d8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   850da:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   850dc:	1c5d      	addeq	r5, r3, #1
   850de:	e88d 0021 	stmia.w	sp, {r0, r5}
   850e2:	9104      	str	r1, [sp, #16]
   850e4:	a820      	add	r0, sp, #128	; 0x80
   850e6:	a91f      	add	r1, sp, #124	; 0x7c
   850e8:	463b      	mov	r3, r7
   850ea:	9003      	str	r0, [sp, #12]
   850ec:	9a08      	ldr	r2, [sp, #32]
   850ee:	9102      	str	r1, [sp, #8]
   850f0:	980c      	ldr	r0, [sp, #48]	; 0x30
   850f2:	f000 fb59 	bl	857a8 <_dtoa_r>
   850f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   850f8:	4606      	mov	r6, r0
   850fa:	2b67      	cmp	r3, #103	; 0x67
   850fc:	f040 81ba 	bne.w	85474 <_svfprintf_r+0x130c>
   85100:	f01b 0f01 	tst.w	fp, #1
   85104:	f000 8223 	beq.w	8554e <_svfprintf_r+0x13e6>
   85108:	1974      	adds	r4, r6, r5
   8510a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8510c:	9808      	ldr	r0, [sp, #32]
   8510e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   85110:	4639      	mov	r1, r7
   85112:	f003 f99d 	bl	88450 <__aeabi_dcmpeq>
   85116:	2800      	cmp	r0, #0
   85118:	f040 8124 	bne.w	85364 <_svfprintf_r+0x11fc>
   8511c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8511e:	42a3      	cmp	r3, r4
   85120:	d206      	bcs.n	85130 <_svfprintf_r+0xfc8>
   85122:	2130      	movs	r1, #48	; 0x30
   85124:	1c5a      	adds	r2, r3, #1
   85126:	9223      	str	r2, [sp, #140]	; 0x8c
   85128:	7019      	strb	r1, [r3, #0]
   8512a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8512c:	429c      	cmp	r4, r3
   8512e:	d8f9      	bhi.n	85124 <_svfprintf_r+0xfbc>
   85130:	1b9b      	subs	r3, r3, r6
   85132:	9313      	str	r3, [sp, #76]	; 0x4c
   85134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85136:	2b47      	cmp	r3, #71	; 0x47
   85138:	f000 80a2 	beq.w	85280 <_svfprintf_r+0x1118>
   8513c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8513e:	2b65      	cmp	r3, #101	; 0x65
   85140:	f340 81a7 	ble.w	85492 <_svfprintf_r+0x132a>
   85144:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85146:	2b66      	cmp	r3, #102	; 0x66
   85148:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8514a:	9312      	str	r3, [sp, #72]	; 0x48
   8514c:	f000 8171 	beq.w	85432 <_svfprintf_r+0x12ca>
   85150:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85152:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85154:	4619      	mov	r1, r3
   85156:	4291      	cmp	r1, r2
   85158:	f300 815d 	bgt.w	85416 <_svfprintf_r+0x12ae>
   8515c:	f01b 0f01 	tst.w	fp, #1
   85160:	f040 81f0 	bne.w	85544 <_svfprintf_r+0x13dc>
   85164:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   85168:	9308      	str	r3, [sp, #32]
   8516a:	2367      	movs	r3, #103	; 0x67
   8516c:	920e      	str	r2, [sp, #56]	; 0x38
   8516e:	9311      	str	r3, [sp, #68]	; 0x44
   85170:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85172:	2b00      	cmp	r3, #0
   85174:	d17d      	bne.n	85272 <_svfprintf_r+0x110a>
   85176:	930a      	str	r3, [sp, #40]	; 0x28
   85178:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8517c:	f7ff b918 	b.w	843b0 <_svfprintf_r+0x248>
   85180:	f024 0407 	bic.w	r4, r4, #7
   85184:	6823      	ldr	r3, [r4, #0]
   85186:	9314      	str	r3, [sp, #80]	; 0x50
   85188:	6863      	ldr	r3, [r4, #4]
   8518a:	9315      	str	r3, [sp, #84]	; 0x54
   8518c:	f104 0308 	add.w	r3, r4, #8
   85190:	930f      	str	r3, [sp, #60]	; 0x3c
   85192:	f7ff bb33 	b.w	847fc <_svfprintf_r+0x694>
   85196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85198:	6813      	ldr	r3, [r2, #0]
   8519a:	3204      	adds	r2, #4
   8519c:	920f      	str	r2, [sp, #60]	; 0x3c
   8519e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   851a0:	601a      	str	r2, [r3, #0]
   851a2:	f7ff b808 	b.w	841b6 <_svfprintf_r+0x4e>
   851a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   851a8:	4daf      	ldr	r5, [pc, #700]	; (85468 <_svfprintf_r+0x1300>)
   851aa:	f7ff b9b1 	b.w	84510 <_svfprintf_r+0x3a8>
   851ae:	aa25      	add	r2, sp, #148	; 0x94
   851b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   851b2:	980c      	ldr	r0, [sp, #48]	; 0x30
   851b4:	f002 f8cc 	bl	87350 <__ssprint_r>
   851b8:	2800      	cmp	r0, #0
   851ba:	f47f a8b2 	bne.w	84322 <_svfprintf_r+0x1ba>
   851be:	46c8      	mov	r8, r9
   851c0:	e432      	b.n	84a28 <_svfprintf_r+0x8c0>
   851c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   851c4:	4613      	mov	r3, r2
   851c6:	3304      	adds	r3, #4
   851c8:	930f      	str	r3, [sp, #60]	; 0x3c
   851ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   851cc:	6811      	ldr	r1, [r2, #0]
   851ce:	17dd      	asrs	r5, r3, #31
   851d0:	461a      	mov	r2, r3
   851d2:	462b      	mov	r3, r5
   851d4:	e9c1 2300 	strd	r2, r3, [r1]
   851d8:	f7fe bfed 	b.w	841b6 <_svfprintf_r+0x4e>
   851dc:	aa25      	add	r2, sp, #148	; 0x94
   851de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   851e0:	980c      	ldr	r0, [sp, #48]	; 0x30
   851e2:	f002 f8b5 	bl	87350 <__ssprint_r>
   851e6:	2800      	cmp	r0, #0
   851e8:	f47f a89b 	bne.w	84322 <_svfprintf_r+0x1ba>
   851ec:	46c8      	mov	r8, r9
   851ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   851f0:	e433      	b.n	84a5a <_svfprintf_r+0x8f2>
   851f2:	f108 0808 	add.w	r8, r8, #8
   851f6:	e52f      	b.n	84c58 <_svfprintf_r+0xaf0>
   851f8:	2140      	movs	r1, #64	; 0x40
   851fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   851fc:	f001 fa22 	bl	86644 <_malloc_r>
   85200:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85202:	6010      	str	r0, [r2, #0]
   85204:	6110      	str	r0, [r2, #16]
   85206:	2800      	cmp	r0, #0
   85208:	f000 8213 	beq.w	85632 <_svfprintf_r+0x14ca>
   8520c:	2340      	movs	r3, #64	; 0x40
   8520e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85210:	6153      	str	r3, [r2, #20]
   85212:	f7fe bfc0 	b.w	84196 <_svfprintf_r+0x2e>
   85216:	2003      	movs	r0, #3
   85218:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8521a:	a923      	add	r1, sp, #140	; 0x8c
   8521c:	e88d 0011 	stmia.w	sp, {r0, r4}
   85220:	9104      	str	r1, [sp, #16]
   85222:	a820      	add	r0, sp, #128	; 0x80
   85224:	a91f      	add	r1, sp, #124	; 0x7c
   85226:	9003      	str	r0, [sp, #12]
   85228:	9a08      	ldr	r2, [sp, #32]
   8522a:	463b      	mov	r3, r7
   8522c:	9102      	str	r1, [sp, #8]
   8522e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85230:	f000 faba 	bl	857a8 <_dtoa_r>
   85234:	4625      	mov	r5, r4
   85236:	4606      	mov	r6, r0
   85238:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8523a:	1974      	adds	r4, r6, r5
   8523c:	2b46      	cmp	r3, #70	; 0x46
   8523e:	f47f af64 	bne.w	8510a <_svfprintf_r+0xfa2>
   85242:	7833      	ldrb	r3, [r6, #0]
   85244:	2b30      	cmp	r3, #48	; 0x30
   85246:	f000 8187 	beq.w	85558 <_svfprintf_r+0x13f0>
   8524a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   8524c:	442c      	add	r4, r5
   8524e:	e75c      	b.n	8510a <_svfprintf_r+0xfa2>
   85250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85252:	2b00      	cmp	r3, #0
   85254:	bf08      	it	eq
   85256:	2301      	moveq	r3, #1
   85258:	930a      	str	r3, [sp, #40]	; 0x28
   8525a:	e723      	b.n	850a4 <_svfprintf_r+0xf3c>
   8525c:	4630      	mov	r0, r6
   8525e:	950a      	str	r5, [sp, #40]	; 0x28
   85260:	f7fe fe70 	bl	83f44 <strlen>
   85264:	940f      	str	r4, [sp, #60]	; 0x3c
   85266:	900e      	str	r0, [sp, #56]	; 0x38
   85268:	f8cd b01c 	str.w	fp, [sp, #28]
   8526c:	4603      	mov	r3, r0
   8526e:	f7ff b9eb 	b.w	84648 <_svfprintf_r+0x4e0>
   85272:	272d      	movs	r7, #45	; 0x2d
   85274:	2300      	movs	r3, #0
   85276:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   8527a:	930a      	str	r3, [sp, #40]	; 0x28
   8527c:	f7ff b899 	b.w	843b2 <_svfprintf_r+0x24a>
   85280:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85282:	461a      	mov	r2, r3
   85284:	9312      	str	r3, [sp, #72]	; 0x48
   85286:	3303      	adds	r3, #3
   85288:	db04      	blt.n	85294 <_svfprintf_r+0x112c>
   8528a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8528c:	4619      	mov	r1, r3
   8528e:	4291      	cmp	r1, r2
   85290:	f6bf af5e 	bge.w	85150 <_svfprintf_r+0xfe8>
   85294:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85296:	3b02      	subs	r3, #2
   85298:	9311      	str	r3, [sp, #68]	; 0x44
   8529a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8529c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   852a0:	3b01      	subs	r3, #1
   852a2:	2b00      	cmp	r3, #0
   852a4:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   852a8:	bfb4      	ite	lt
   852aa:	222d      	movlt	r2, #45	; 0x2d
   852ac:	222b      	movge	r2, #43	; 0x2b
   852ae:	931f      	str	r3, [sp, #124]	; 0x7c
   852b0:	bfb8      	it	lt
   852b2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   852b4:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   852b8:	bfb8      	it	lt
   852ba:	f1c3 0301 	rsblt	r3, r3, #1
   852be:	2b09      	cmp	r3, #9
   852c0:	f340 811f 	ble.w	85502 <_svfprintf_r+0x139a>
   852c4:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   852c8:	4601      	mov	r1, r0
   852ca:	4c68      	ldr	r4, [pc, #416]	; (8546c <_svfprintf_r+0x1304>)
   852cc:	e000      	b.n	852d0 <_svfprintf_r+0x1168>
   852ce:	4611      	mov	r1, r2
   852d0:	fb84 5203 	smull	r5, r2, r4, r3
   852d4:	17dd      	asrs	r5, r3, #31
   852d6:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   852da:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   852de:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   852e2:	3230      	adds	r2, #48	; 0x30
   852e4:	2d09      	cmp	r5, #9
   852e6:	f801 2c01 	strb.w	r2, [r1, #-1]
   852ea:	462b      	mov	r3, r5
   852ec:	f101 32ff 	add.w	r2, r1, #4294967295
   852f0:	dced      	bgt.n	852ce <_svfprintf_r+0x1166>
   852f2:	3330      	adds	r3, #48	; 0x30
   852f4:	3902      	subs	r1, #2
   852f6:	b2dc      	uxtb	r4, r3
   852f8:	4288      	cmp	r0, r1
   852fa:	f802 4c01 	strb.w	r4, [r2, #-1]
   852fe:	f240 8191 	bls.w	85624 <_svfprintf_r+0x14bc>
   85302:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   85306:	4613      	mov	r3, r2
   85308:	e001      	b.n	8530e <_svfprintf_r+0x11a6>
   8530a:	f813 4b01 	ldrb.w	r4, [r3], #1
   8530e:	4283      	cmp	r3, r0
   85310:	f801 4b01 	strb.w	r4, [r1], #1
   85314:	d1f9      	bne.n	8530a <_svfprintf_r+0x11a2>
   85316:	3301      	adds	r3, #1
   85318:	1a9b      	subs	r3, r3, r2
   8531a:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   8531e:	4413      	add	r3, r2
   85320:	aa21      	add	r2, sp, #132	; 0x84
   85322:	1a9b      	subs	r3, r3, r2
   85324:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85326:	931b      	str	r3, [sp, #108]	; 0x6c
   85328:	2a01      	cmp	r2, #1
   8532a:	4413      	add	r3, r2
   8532c:	930e      	str	r3, [sp, #56]	; 0x38
   8532e:	f340 8147 	ble.w	855c0 <_svfprintf_r+0x1458>
   85332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85334:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85336:	4413      	add	r3, r2
   85338:	930e      	str	r3, [sp, #56]	; 0x38
   8533a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8533e:	9308      	str	r3, [sp, #32]
   85340:	2300      	movs	r3, #0
   85342:	9312      	str	r3, [sp, #72]	; 0x48
   85344:	e714      	b.n	85170 <_svfprintf_r+0x1008>
   85346:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85348:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8534a:	f7ff b87a 	b.w	84442 <_svfprintf_r+0x2da>
   8534e:	aa25      	add	r2, sp, #148	; 0x94
   85350:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85352:	980c      	ldr	r0, [sp, #48]	; 0x30
   85354:	f001 fffc 	bl	87350 <__ssprint_r>
   85358:	2800      	cmp	r0, #0
   8535a:	f47e afe2 	bne.w	84322 <_svfprintf_r+0x1ba>
   8535e:	46c8      	mov	r8, r9
   85360:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85362:	e4fb      	b.n	84d5c <_svfprintf_r+0xbf4>
   85364:	4623      	mov	r3, r4
   85366:	e6e3      	b.n	85130 <_svfprintf_r+0xfc8>
   85368:	aa25      	add	r2, sp, #148	; 0x94
   8536a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8536c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8536e:	f001 ffef 	bl	87350 <__ssprint_r>
   85372:	2800      	cmp	r0, #0
   85374:	f47e afd5 	bne.w	84322 <_svfprintf_r+0x1ba>
   85378:	46c8      	mov	r8, r9
   8537a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8537c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8537e:	e5d3      	b.n	84f28 <_svfprintf_r+0xdc0>
   85380:	aa25      	add	r2, sp, #148	; 0x94
   85382:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85384:	980c      	ldr	r0, [sp, #48]	; 0x30
   85386:	f001 ffe3 	bl	87350 <__ssprint_r>
   8538a:	2800      	cmp	r0, #0
   8538c:	f47e afc9 	bne.w	84322 <_svfprintf_r+0x1ba>
   85390:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   85392:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85394:	46c8      	mov	r8, r9
   85396:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85398:	1a9a      	subs	r2, r3, r2
   8539a:	e5dd      	b.n	84f58 <_svfprintf_r+0xdf0>
   8539c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8539e:	f7ff b902 	b.w	845a6 <_svfprintf_r+0x43e>
   853a2:	aa25      	add	r2, sp, #148	; 0x94
   853a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   853a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   853a8:	f001 ffd2 	bl	87350 <__ssprint_r>
   853ac:	2800      	cmp	r0, #0
   853ae:	f47e afb8 	bne.w	84322 <_svfprintf_r+0x1ba>
   853b2:	46c8      	mov	r8, r9
   853b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   853b6:	e5b0      	b.n	84f1a <_svfprintf_r+0xdb2>
   853b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   853ba:	4637      	mov	r7, r6
   853bc:	2b06      	cmp	r3, #6
   853be:	bf28      	it	cs
   853c0:	2306      	movcs	r3, #6
   853c2:	960a      	str	r6, [sp, #40]	; 0x28
   853c4:	9612      	str	r6, [sp, #72]	; 0x48
   853c6:	9308      	str	r3, [sp, #32]
   853c8:	940f      	str	r4, [sp, #60]	; 0x3c
   853ca:	f8cd b01c 	str.w	fp, [sp, #28]
   853ce:	930e      	str	r3, [sp, #56]	; 0x38
   853d0:	4e27      	ldr	r6, [pc, #156]	; (85470 <_svfprintf_r+0x1308>)
   853d2:	f7fe bfed 	b.w	843b0 <_svfprintf_r+0x248>
   853d6:	2306      	movs	r3, #6
   853d8:	930a      	str	r3, [sp, #40]	; 0x28
   853da:	e663      	b.n	850a4 <_svfprintf_r+0xf3c>
   853dc:	232d      	movs	r3, #45	; 0x2d
   853de:	461f      	mov	r7, r3
   853e0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   853e4:	f7ff ba2b 	b.w	8483e <_svfprintf_r+0x6d6>
   853e8:	2003      	movs	r0, #3
   853ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   853ec:	a923      	add	r1, sp, #140	; 0x8c
   853ee:	e88d 0011 	stmia.w	sp, {r0, r4}
   853f2:	9104      	str	r1, [sp, #16]
   853f4:	a820      	add	r0, sp, #128	; 0x80
   853f6:	a91f      	add	r1, sp, #124	; 0x7c
   853f8:	9003      	str	r0, [sp, #12]
   853fa:	9a08      	ldr	r2, [sp, #32]
   853fc:	463b      	mov	r3, r7
   853fe:	9102      	str	r1, [sp, #8]
   85400:	980c      	ldr	r0, [sp, #48]	; 0x30
   85402:	f000 f9d1 	bl	857a8 <_dtoa_r>
   85406:	4625      	mov	r5, r4
   85408:	4606      	mov	r6, r0
   8540a:	1904      	adds	r4, r0, r4
   8540c:	e719      	b.n	85242 <_svfprintf_r+0x10da>
   8540e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85410:	4d15      	ldr	r5, [pc, #84]	; (85468 <_svfprintf_r+0x1300>)
   85412:	f7ff bb7f 	b.w	84b14 <_svfprintf_r+0x9ac>
   85416:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85418:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8541a:	4413      	add	r3, r2
   8541c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8541e:	930e      	str	r3, [sp, #56]	; 0x38
   85420:	2a00      	cmp	r2, #0
   85422:	f340 80c6 	ble.w	855b2 <_svfprintf_r+0x144a>
   85426:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8542a:	9308      	str	r3, [sp, #32]
   8542c:	2367      	movs	r3, #103	; 0x67
   8542e:	9311      	str	r3, [sp, #68]	; 0x44
   85430:	e69e      	b.n	85170 <_svfprintf_r+0x1008>
   85432:	2b00      	cmp	r3, #0
   85434:	f340 80e0 	ble.w	855f8 <_svfprintf_r+0x1490>
   85438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8543a:	2a00      	cmp	r2, #0
   8543c:	f040 80af 	bne.w	8559e <_svfprintf_r+0x1436>
   85440:	f01b 0f01 	tst.w	fp, #1
   85444:	f040 80ab 	bne.w	8559e <_svfprintf_r+0x1436>
   85448:	9308      	str	r3, [sp, #32]
   8544a:	930e      	str	r3, [sp, #56]	; 0x38
   8544c:	e690      	b.n	85170 <_svfprintf_r+0x1008>
   8544e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85450:	940f      	str	r4, [sp, #60]	; 0x3c
   85452:	9308      	str	r3, [sp, #32]
   85454:	930e      	str	r3, [sp, #56]	; 0x38
   85456:	900a      	str	r0, [sp, #40]	; 0x28
   85458:	f8cd b01c 	str.w	fp, [sp, #28]
   8545c:	9012      	str	r0, [sp, #72]	; 0x48
   8545e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85462:	f7fe bfa5 	b.w	843b0 <_svfprintf_r+0x248>
   85466:	bf00      	nop
   85468:	00089880 	.word	0x00089880
   8546c:	66666667 	.word	0x66666667
   85470:	00089864 	.word	0x00089864
   85474:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85476:	2b47      	cmp	r3, #71	; 0x47
   85478:	f47f ae46 	bne.w	85108 <_svfprintf_r+0xfa0>
   8547c:	f01b 0f01 	tst.w	fp, #1
   85480:	f47f aeda 	bne.w	85238 <_svfprintf_r+0x10d0>
   85484:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   85486:	1b9b      	subs	r3, r3, r6
   85488:	9313      	str	r3, [sp, #76]	; 0x4c
   8548a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8548c:	2b47      	cmp	r3, #71	; 0x47
   8548e:	f43f aef7 	beq.w	85280 <_svfprintf_r+0x1118>
   85492:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85494:	9312      	str	r3, [sp, #72]	; 0x48
   85496:	e700      	b.n	8529a <_svfprintf_r+0x1132>
   85498:	2000      	movs	r0, #0
   8549a:	900a      	str	r0, [sp, #40]	; 0x28
   8549c:	f7fe bec0 	b.w	84220 <_svfprintf_r+0xb8>
   854a0:	424f      	negs	r7, r1
   854a2:	3110      	adds	r1, #16
   854a4:	da35      	bge.n	85512 <_svfprintf_r+0x13aa>
   854a6:	2410      	movs	r4, #16
   854a8:	4d6a      	ldr	r5, [pc, #424]	; (85654 <_svfprintf_r+0x14ec>)
   854aa:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   854ae:	e004      	b.n	854ba <_svfprintf_r+0x1352>
   854b0:	f108 0808 	add.w	r8, r8, #8
   854b4:	3f10      	subs	r7, #16
   854b6:	2f10      	cmp	r7, #16
   854b8:	dd2c      	ble.n	85514 <_svfprintf_r+0x13ac>
   854ba:	3301      	adds	r3, #1
   854bc:	3210      	adds	r2, #16
   854be:	2b07      	cmp	r3, #7
   854c0:	9227      	str	r2, [sp, #156]	; 0x9c
   854c2:	9326      	str	r3, [sp, #152]	; 0x98
   854c4:	f8c8 5000 	str.w	r5, [r8]
   854c8:	f8c8 4004 	str.w	r4, [r8, #4]
   854cc:	ddf0      	ble.n	854b0 <_svfprintf_r+0x1348>
   854ce:	aa25      	add	r2, sp, #148	; 0x94
   854d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   854d2:	4658      	mov	r0, fp
   854d4:	f001 ff3c 	bl	87350 <__ssprint_r>
   854d8:	2800      	cmp	r0, #0
   854da:	f47e af22 	bne.w	84322 <_svfprintf_r+0x1ba>
   854de:	46c8      	mov	r8, r9
   854e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   854e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   854e4:	e7e6      	b.n	854b4 <_svfprintf_r+0x134c>
   854e6:	aa25      	add	r2, sp, #148	; 0x94
   854e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   854ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   854ec:	f001 ff30 	bl	87350 <__ssprint_r>
   854f0:	2800      	cmp	r0, #0
   854f2:	f47e af16 	bne.w	84322 <_svfprintf_r+0x1ba>
   854f6:	46c8      	mov	r8, r9
   854f8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   854fa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   854fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   854fe:	f7ff bbc3 	b.w	84c88 <_svfprintf_r+0xb20>
   85502:	2230      	movs	r2, #48	; 0x30
   85504:	4413      	add	r3, r2
   85506:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   8550a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   8550e:	ab22      	add	r3, sp, #136	; 0x88
   85510:	e706      	b.n	85320 <_svfprintf_r+0x11b8>
   85512:	4d50      	ldr	r5, [pc, #320]	; (85654 <_svfprintf_r+0x14ec>)
   85514:	3301      	adds	r3, #1
   85516:	443a      	add	r2, r7
   85518:	2b07      	cmp	r3, #7
   8551a:	e888 00a0 	stmia.w	r8, {r5, r7}
   8551e:	9227      	str	r2, [sp, #156]	; 0x9c
   85520:	9326      	str	r3, [sp, #152]	; 0x98
   85522:	f108 0808 	add.w	r8, r8, #8
   85526:	f77f abb2 	ble.w	84c8e <_svfprintf_r+0xb26>
   8552a:	aa25      	add	r2, sp, #148	; 0x94
   8552c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8552e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85530:	f001 ff0e 	bl	87350 <__ssprint_r>
   85534:	2800      	cmp	r0, #0
   85536:	f47e aef4 	bne.w	84322 <_svfprintf_r+0x1ba>
   8553a:	46c8      	mov	r8, r9
   8553c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8553e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85540:	f7ff bba5 	b.w	84c8e <_svfprintf_r+0xb26>
   85544:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85546:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85548:	4413      	add	r3, r2
   8554a:	930e      	str	r3, [sp, #56]	; 0x38
   8554c:	e76b      	b.n	85426 <_svfprintf_r+0x12be>
   8554e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   85550:	e5ee      	b.n	85130 <_svfprintf_r+0xfc8>
   85552:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85554:	4d3f      	ldr	r5, [pc, #252]	; (85654 <_svfprintf_r+0x14ec>)
   85556:	e4bb      	b.n	84ed0 <_svfprintf_r+0xd68>
   85558:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8555a:	9808      	ldr	r0, [sp, #32]
   8555c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8555e:	4639      	mov	r1, r7
   85560:	f002 ff76 	bl	88450 <__aeabi_dcmpeq>
   85564:	2800      	cmp	r0, #0
   85566:	f47f ae70 	bne.w	8524a <_svfprintf_r+0x10e2>
   8556a:	f1c5 0501 	rsb	r5, r5, #1
   8556e:	951f      	str	r5, [sp, #124]	; 0x7c
   85570:	442c      	add	r4, r5
   85572:	e5ca      	b.n	8510a <_svfprintf_r+0xfa2>
   85574:	2303      	movs	r3, #3
   85576:	461a      	mov	r2, r3
   85578:	9308      	str	r3, [sp, #32]
   8557a:	2300      	movs	r3, #0
   8557c:	4619      	mov	r1, r3
   8557e:	930a      	str	r3, [sp, #40]	; 0x28
   85580:	4e35      	ldr	r6, [pc, #212]	; (85658 <_svfprintf_r+0x14f0>)
   85582:	4b36      	ldr	r3, [pc, #216]	; (8565c <_svfprintf_r+0x14f4>)
   85584:	920e      	str	r2, [sp, #56]	; 0x38
   85586:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85588:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   8558c:	9007      	str	r0, [sp, #28]
   8558e:	9112      	str	r1, [sp, #72]	; 0x48
   85590:	2a47      	cmp	r2, #71	; 0x47
   85592:	bfd8      	it	le
   85594:	461e      	movle	r6, r3
   85596:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8559a:	f7fe bf09 	b.w	843b0 <_svfprintf_r+0x248>
   8559e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   855a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   855a2:	4413      	add	r3, r2
   855a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   855a6:	441a      	add	r2, r3
   855a8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   855ac:	920e      	str	r2, [sp, #56]	; 0x38
   855ae:	9308      	str	r3, [sp, #32]
   855b0:	e5de      	b.n	85170 <_svfprintf_r+0x1008>
   855b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   855b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   855b6:	f1c3 0301 	rsb	r3, r3, #1
   855ba:	441a      	add	r2, r3
   855bc:	4613      	mov	r3, r2
   855be:	e7c4      	b.n	8554a <_svfprintf_r+0x13e2>
   855c0:	f01b 0301 	ands.w	r3, fp, #1
   855c4:	9312      	str	r3, [sp, #72]	; 0x48
   855c6:	f47f aeb4 	bne.w	85332 <_svfprintf_r+0x11ca>
   855ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   855cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   855d0:	9308      	str	r3, [sp, #32]
   855d2:	e5cd      	b.n	85170 <_svfprintf_r+0x1008>
   855d4:	4d1f      	ldr	r5, [pc, #124]	; (85654 <_svfprintf_r+0x14ec>)
   855d6:	e43d      	b.n	84e54 <_svfprintf_r+0xcec>
   855d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   855da:	4d1e      	ldr	r5, [pc, #120]	; (85654 <_svfprintf_r+0x14ec>)
   855dc:	e492      	b.n	84f04 <_svfprintf_r+0xd9c>
   855de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   855e0:	f89a 3001 	ldrb.w	r3, [sl, #1]
   855e4:	6828      	ldr	r0, [r5, #0]
   855e6:	46a2      	mov	sl, r4
   855e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   855ec:	900a      	str	r0, [sp, #40]	; 0x28
   855ee:	4628      	mov	r0, r5
   855f0:	3004      	adds	r0, #4
   855f2:	900f      	str	r0, [sp, #60]	; 0x3c
   855f4:	f7fe be12 	b.w	8421c <_svfprintf_r+0xb4>
   855f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   855fa:	b913      	cbnz	r3, 85602 <_svfprintf_r+0x149a>
   855fc:	f01b 0f01 	tst.w	fp, #1
   85600:	d002      	beq.n	85608 <_svfprintf_r+0x14a0>
   85602:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85604:	3301      	adds	r3, #1
   85606:	e7cd      	b.n	855a4 <_svfprintf_r+0x143c>
   85608:	2301      	movs	r3, #1
   8560a:	e71d      	b.n	85448 <_svfprintf_r+0x12e0>
   8560c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85610:	f7ff b984 	b.w	8491c <_svfprintf_r+0x7b4>
   85614:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85618:	f7ff b93e 	b.w	84898 <_svfprintf_r+0x730>
   8561c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85620:	f7ff b854 	b.w	846cc <_svfprintf_r+0x564>
   85624:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   85628:	e67a      	b.n	85320 <_svfprintf_r+0x11b8>
   8562a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8562e:	f7ff b9b6 	b.w	8499e <_svfprintf_r+0x836>
   85632:	f04f 32ff 	mov.w	r2, #4294967295
   85636:	230c      	movs	r3, #12
   85638:	9209      	str	r2, [sp, #36]	; 0x24
   8563a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8563c:	6013      	str	r3, [r2, #0]
   8563e:	f7fe be79 	b.w	84334 <_svfprintf_r+0x1cc>
   85642:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85646:	f7ff b8c9 	b.w	847dc <_svfprintf_r+0x674>
   8564a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8564e:	f7ff b87d 	b.w	8474c <_svfprintf_r+0x5e4>
   85652:	bf00      	nop
   85654:	00089880 	.word	0x00089880
   85658:	00089838 	.word	0x00089838
   8565c:	00089834 	.word	0x00089834

00085660 <register_fini>:
   85660:	4b02      	ldr	r3, [pc, #8]	; (8566c <register_fini+0xc>)
   85662:	b113      	cbz	r3, 8566a <register_fini+0xa>
   85664:	4802      	ldr	r0, [pc, #8]	; (85670 <register_fini+0x10>)
   85666:	f000 b805 	b.w	85674 <atexit>
   8566a:	4770      	bx	lr
   8566c:	00000000 	.word	0x00000000
   85670:	000865ed 	.word	0x000865ed

00085674 <atexit>:
   85674:	2300      	movs	r3, #0
   85676:	4601      	mov	r1, r0
   85678:	461a      	mov	r2, r3
   8567a:	4618      	mov	r0, r3
   8567c:	f001 bef2 	b.w	87464 <__register_exitproc>

00085680 <quorem>:
   85680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85684:	6903      	ldr	r3, [r0, #16]
   85686:	690f      	ldr	r7, [r1, #16]
   85688:	b083      	sub	sp, #12
   8568a:	429f      	cmp	r7, r3
   8568c:	f300 8088 	bgt.w	857a0 <quorem+0x120>
   85690:	3f01      	subs	r7, #1
   85692:	f101 0614 	add.w	r6, r1, #20
   85696:	f100 0a14 	add.w	sl, r0, #20
   8569a:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   8569e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   856a2:	3301      	adds	r3, #1
   856a4:	fbb2 f8f3 	udiv	r8, r2, r3
   856a8:	00bb      	lsls	r3, r7, #2
   856aa:	9300      	str	r3, [sp, #0]
   856ac:	eb06 0903 	add.w	r9, r6, r3
   856b0:	4453      	add	r3, sl
   856b2:	9301      	str	r3, [sp, #4]
   856b4:	f1b8 0f00 	cmp.w	r8, #0
   856b8:	d03b      	beq.n	85732 <quorem+0xb2>
   856ba:	2300      	movs	r3, #0
   856bc:	46b4      	mov	ip, r6
   856be:	461c      	mov	r4, r3
   856c0:	46d6      	mov	lr, sl
   856c2:	f85c 2b04 	ldr.w	r2, [ip], #4
   856c6:	f8de 5000 	ldr.w	r5, [lr]
   856ca:	fa1f fb82 	uxth.w	fp, r2
   856ce:	fb08 330b 	mla	r3, r8, fp, r3
   856d2:	0c12      	lsrs	r2, r2, #16
   856d4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   856d8:	fb08 bb02 	mla	fp, r8, r2, fp
   856dc:	b29a      	uxth	r2, r3
   856de:	1aa2      	subs	r2, r4, r2
   856e0:	b2ab      	uxth	r3, r5
   856e2:	fa1f f48b 	uxth.w	r4, fp
   856e6:	441a      	add	r2, r3
   856e8:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   856ec:	eb04 4422 	add.w	r4, r4, r2, asr #16
   856f0:	b292      	uxth	r2, r2
   856f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   856f6:	45e1      	cmp	r9, ip
   856f8:	f84e 2b04 	str.w	r2, [lr], #4
   856fc:	ea4f 4424 	mov.w	r4, r4, asr #16
   85700:	ea4f 431b 	mov.w	r3, fp, lsr #16
   85704:	d2dd      	bcs.n	856c2 <quorem+0x42>
   85706:	9b00      	ldr	r3, [sp, #0]
   85708:	f85a 3003 	ldr.w	r3, [sl, r3]
   8570c:	b98b      	cbnz	r3, 85732 <quorem+0xb2>
   8570e:	9c01      	ldr	r4, [sp, #4]
   85710:	1f23      	subs	r3, r4, #4
   85712:	459a      	cmp	sl, r3
   85714:	d20c      	bcs.n	85730 <quorem+0xb0>
   85716:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8571a:	b94b      	cbnz	r3, 85730 <quorem+0xb0>
   8571c:	f1a4 0308 	sub.w	r3, r4, #8
   85720:	e002      	b.n	85728 <quorem+0xa8>
   85722:	681a      	ldr	r2, [r3, #0]
   85724:	3b04      	subs	r3, #4
   85726:	b91a      	cbnz	r2, 85730 <quorem+0xb0>
   85728:	459a      	cmp	sl, r3
   8572a:	f107 37ff 	add.w	r7, r7, #4294967295
   8572e:	d3f8      	bcc.n	85722 <quorem+0xa2>
   85730:	6107      	str	r7, [r0, #16]
   85732:	4604      	mov	r4, r0
   85734:	f001 fcfc 	bl	87130 <__mcmp>
   85738:	2800      	cmp	r0, #0
   8573a:	db2d      	blt.n	85798 <quorem+0x118>
   8573c:	4655      	mov	r5, sl
   8573e:	2300      	movs	r3, #0
   85740:	f108 0801 	add.w	r8, r8, #1
   85744:	f856 1b04 	ldr.w	r1, [r6], #4
   85748:	6828      	ldr	r0, [r5, #0]
   8574a:	b28a      	uxth	r2, r1
   8574c:	1a9a      	subs	r2, r3, r2
   8574e:	0c0b      	lsrs	r3, r1, #16
   85750:	b281      	uxth	r1, r0
   85752:	440a      	add	r2, r1
   85754:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   85758:	eb03 4322 	add.w	r3, r3, r2, asr #16
   8575c:	b292      	uxth	r2, r2
   8575e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   85762:	45b1      	cmp	r9, r6
   85764:	f845 2b04 	str.w	r2, [r5], #4
   85768:	ea4f 4323 	mov.w	r3, r3, asr #16
   8576c:	d2ea      	bcs.n	85744 <quorem+0xc4>
   8576e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   85772:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   85776:	b97a      	cbnz	r2, 85798 <quorem+0x118>
   85778:	1f1a      	subs	r2, r3, #4
   8577a:	4592      	cmp	sl, r2
   8577c:	d20b      	bcs.n	85796 <quorem+0x116>
   8577e:	f853 2c04 	ldr.w	r2, [r3, #-4]
   85782:	b942      	cbnz	r2, 85796 <quorem+0x116>
   85784:	3b08      	subs	r3, #8
   85786:	e002      	b.n	8578e <quorem+0x10e>
   85788:	681a      	ldr	r2, [r3, #0]
   8578a:	3b04      	subs	r3, #4
   8578c:	b91a      	cbnz	r2, 85796 <quorem+0x116>
   8578e:	459a      	cmp	sl, r3
   85790:	f107 37ff 	add.w	r7, r7, #4294967295
   85794:	d3f8      	bcc.n	85788 <quorem+0x108>
   85796:	6127      	str	r7, [r4, #16]
   85798:	4640      	mov	r0, r8
   8579a:	b003      	add	sp, #12
   8579c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   857a0:	2000      	movs	r0, #0
   857a2:	b003      	add	sp, #12
   857a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000857a8 <_dtoa_r>:
   857a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   857ac:	6c05      	ldr	r5, [r0, #64]	; 0x40
   857ae:	b09b      	sub	sp, #108	; 0x6c
   857b0:	4604      	mov	r4, r0
   857b2:	4692      	mov	sl, r2
   857b4:	469b      	mov	fp, r3
   857b6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   857b8:	b14d      	cbz	r5, 857ce <_dtoa_r+0x26>
   857ba:	2301      	movs	r3, #1
   857bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
   857be:	4629      	mov	r1, r5
   857c0:	4093      	lsls	r3, r2
   857c2:	60ab      	str	r3, [r5, #8]
   857c4:	606a      	str	r2, [r5, #4]
   857c6:	f001 fadb 	bl	86d80 <_Bfree>
   857ca:	2300      	movs	r3, #0
   857cc:	6423      	str	r3, [r4, #64]	; 0x40
   857ce:	f1bb 0f00 	cmp.w	fp, #0
   857d2:	465d      	mov	r5, fp
   857d4:	db35      	blt.n	85842 <_dtoa_r+0x9a>
   857d6:	2300      	movs	r3, #0
   857d8:	6033      	str	r3, [r6, #0]
   857da:	4b9d      	ldr	r3, [pc, #628]	; (85a50 <_dtoa_r+0x2a8>)
   857dc:	43ab      	bics	r3, r5
   857de:	d015      	beq.n	8580c <_dtoa_r+0x64>
   857e0:	2200      	movs	r2, #0
   857e2:	2300      	movs	r3, #0
   857e4:	4650      	mov	r0, sl
   857e6:	4659      	mov	r1, fp
   857e8:	f002 fe32 	bl	88450 <__aeabi_dcmpeq>
   857ec:	4680      	mov	r8, r0
   857ee:	2800      	cmp	r0, #0
   857f0:	d02d      	beq.n	8584e <_dtoa_r+0xa6>
   857f2:	2301      	movs	r3, #1
   857f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   857f6:	6013      	str	r3, [r2, #0]
   857f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   857fa:	2b00      	cmp	r3, #0
   857fc:	f000 80bd 	beq.w	8597a <_dtoa_r+0x1d2>
   85800:	4894      	ldr	r0, [pc, #592]	; (85a54 <_dtoa_r+0x2ac>)
   85802:	6018      	str	r0, [r3, #0]
   85804:	3801      	subs	r0, #1
   85806:	b01b      	add	sp, #108	; 0x6c
   85808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8580c:	f242 730f 	movw	r3, #9999	; 0x270f
   85810:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85812:	6013      	str	r3, [r2, #0]
   85814:	f1ba 0f00 	cmp.w	sl, #0
   85818:	d10d      	bne.n	85836 <_dtoa_r+0x8e>
   8581a:	f3c5 0513 	ubfx	r5, r5, #0, #20
   8581e:	b955      	cbnz	r5, 85836 <_dtoa_r+0x8e>
   85820:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85822:	488d      	ldr	r0, [pc, #564]	; (85a58 <_dtoa_r+0x2b0>)
   85824:	2b00      	cmp	r3, #0
   85826:	d0ee      	beq.n	85806 <_dtoa_r+0x5e>
   85828:	f100 0308 	add.w	r3, r0, #8
   8582c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8582e:	6013      	str	r3, [r2, #0]
   85830:	b01b      	add	sp, #108	; 0x6c
   85832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85836:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85838:	4888      	ldr	r0, [pc, #544]	; (85a5c <_dtoa_r+0x2b4>)
   8583a:	2b00      	cmp	r3, #0
   8583c:	d0e3      	beq.n	85806 <_dtoa_r+0x5e>
   8583e:	1cc3      	adds	r3, r0, #3
   85840:	e7f4      	b.n	8582c <_dtoa_r+0x84>
   85842:	2301      	movs	r3, #1
   85844:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   85848:	6033      	str	r3, [r6, #0]
   8584a:	46ab      	mov	fp, r5
   8584c:	e7c5      	b.n	857da <_dtoa_r+0x32>
   8584e:	aa18      	add	r2, sp, #96	; 0x60
   85850:	ab19      	add	r3, sp, #100	; 0x64
   85852:	9201      	str	r2, [sp, #4]
   85854:	9300      	str	r3, [sp, #0]
   85856:	4652      	mov	r2, sl
   85858:	465b      	mov	r3, fp
   8585a:	4620      	mov	r0, r4
   8585c:	f001 fd12 	bl	87284 <__d2b>
   85860:	0d2b      	lsrs	r3, r5, #20
   85862:	4681      	mov	r9, r0
   85864:	d071      	beq.n	8594a <_dtoa_r+0x1a2>
   85866:	4650      	mov	r0, sl
   85868:	f3cb 0213 	ubfx	r2, fp, #0, #20
   8586c:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   85870:	9f18      	ldr	r7, [sp, #96]	; 0x60
   85872:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   85876:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   8587a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8587e:	2200      	movs	r2, #0
   85880:	4b77      	ldr	r3, [pc, #476]	; (85a60 <_dtoa_r+0x2b8>)
   85882:	f002 f9c9 	bl	87c18 <__aeabi_dsub>
   85886:	a36c      	add	r3, pc, #432	; (adr r3, 85a38 <_dtoa_r+0x290>)
   85888:	e9d3 2300 	ldrd	r2, r3, [r3]
   8588c:	f002 fb78 	bl	87f80 <__aeabi_dmul>
   85890:	a36b      	add	r3, pc, #428	; (adr r3, 85a40 <_dtoa_r+0x298>)
   85892:	e9d3 2300 	ldrd	r2, r3, [r3]
   85896:	f002 f9c1 	bl	87c1c <__adddf3>
   8589a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8589e:	4630      	mov	r0, r6
   858a0:	f002 fb08 	bl	87eb4 <__aeabi_i2d>
   858a4:	a368      	add	r3, pc, #416	; (adr r3, 85a48 <_dtoa_r+0x2a0>)
   858a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   858aa:	f002 fb69 	bl	87f80 <__aeabi_dmul>
   858ae:	4602      	mov	r2, r0
   858b0:	460b      	mov	r3, r1
   858b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   858b6:	f002 f9b1 	bl	87c1c <__adddf3>
   858ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
   858be:	f002 fe0f 	bl	884e0 <__aeabi_d2iz>
   858c2:	2200      	movs	r2, #0
   858c4:	9002      	str	r0, [sp, #8]
   858c6:	2300      	movs	r3, #0
   858c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   858cc:	f002 fdca 	bl	88464 <__aeabi_dcmplt>
   858d0:	2800      	cmp	r0, #0
   858d2:	f040 816d 	bne.w	85bb0 <_dtoa_r+0x408>
   858d6:	9d02      	ldr	r5, [sp, #8]
   858d8:	2d16      	cmp	r5, #22
   858da:	f200 8157 	bhi.w	85b8c <_dtoa_r+0x3e4>
   858de:	4961      	ldr	r1, [pc, #388]	; (85a64 <_dtoa_r+0x2bc>)
   858e0:	4652      	mov	r2, sl
   858e2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   858e6:	465b      	mov	r3, fp
   858e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   858ec:	f002 fdd8 	bl	884a0 <__aeabi_dcmpgt>
   858f0:	2800      	cmp	r0, #0
   858f2:	f000 81be 	beq.w	85c72 <_dtoa_r+0x4ca>
   858f6:	1e6b      	subs	r3, r5, #1
   858f8:	9302      	str	r3, [sp, #8]
   858fa:	2300      	movs	r3, #0
   858fc:	930e      	str	r3, [sp, #56]	; 0x38
   858fe:	1bbf      	subs	r7, r7, r6
   85900:	1e7b      	subs	r3, r7, #1
   85902:	9308      	str	r3, [sp, #32]
   85904:	f100 814e 	bmi.w	85ba4 <_dtoa_r+0x3fc>
   85908:	2300      	movs	r3, #0
   8590a:	930a      	str	r3, [sp, #40]	; 0x28
   8590c:	9b02      	ldr	r3, [sp, #8]
   8590e:	2b00      	cmp	r3, #0
   85910:	f2c0 813f 	blt.w	85b92 <_dtoa_r+0x3ea>
   85914:	9a08      	ldr	r2, [sp, #32]
   85916:	930d      	str	r3, [sp, #52]	; 0x34
   85918:	4611      	mov	r1, r2
   8591a:	4419      	add	r1, r3
   8591c:	2300      	movs	r3, #0
   8591e:	9108      	str	r1, [sp, #32]
   85920:	930c      	str	r3, [sp, #48]	; 0x30
   85922:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85924:	2b09      	cmp	r3, #9
   85926:	d82a      	bhi.n	8597e <_dtoa_r+0x1d6>
   85928:	2b05      	cmp	r3, #5
   8592a:	f340 8658 	ble.w	865de <_dtoa_r+0xe36>
   8592e:	2500      	movs	r5, #0
   85930:	3b04      	subs	r3, #4
   85932:	9324      	str	r3, [sp, #144]	; 0x90
   85934:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85936:	3b02      	subs	r3, #2
   85938:	2b03      	cmp	r3, #3
   8593a:	f200 863f 	bhi.w	865bc <_dtoa_r+0xe14>
   8593e:	e8df f013 	tbh	[pc, r3, lsl #1]
   85942:	03ce      	.short	0x03ce
   85944:	03d902c3 	.word	0x03d902c3
   85948:	045b      	.short	0x045b
   8594a:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8594c:	9e19      	ldr	r6, [sp, #100]	; 0x64
   8594e:	443e      	add	r6, r7
   85950:	f206 4332 	addw	r3, r6, #1074	; 0x432
   85954:	2b20      	cmp	r3, #32
   85956:	f340 8187 	ble.w	85c68 <_dtoa_r+0x4c0>
   8595a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   8595e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   85962:	409d      	lsls	r5, r3
   85964:	fa2a f000 	lsr.w	r0, sl, r0
   85968:	4328      	orrs	r0, r5
   8596a:	f002 fa93 	bl	87e94 <__aeabi_ui2d>
   8596e:	2301      	movs	r3, #1
   85970:	3e01      	subs	r6, #1
   85972:	9314      	str	r3, [sp, #80]	; 0x50
   85974:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   85978:	e781      	b.n	8587e <_dtoa_r+0xd6>
   8597a:	483b      	ldr	r0, [pc, #236]	; (85a68 <_dtoa_r+0x2c0>)
   8597c:	e743      	b.n	85806 <_dtoa_r+0x5e>
   8597e:	2100      	movs	r1, #0
   85980:	4620      	mov	r0, r4
   85982:	6461      	str	r1, [r4, #68]	; 0x44
   85984:	9125      	str	r1, [sp, #148]	; 0x94
   85986:	f001 f9d5 	bl	86d34 <_Balloc>
   8598a:	f04f 33ff 	mov.w	r3, #4294967295
   8598e:	9307      	str	r3, [sp, #28]
   85990:	930f      	str	r3, [sp, #60]	; 0x3c
   85992:	2301      	movs	r3, #1
   85994:	9a25      	ldr	r2, [sp, #148]	; 0x94
   85996:	9004      	str	r0, [sp, #16]
   85998:	6420      	str	r0, [r4, #64]	; 0x40
   8599a:	9224      	str	r2, [sp, #144]	; 0x90
   8599c:	930b      	str	r3, [sp, #44]	; 0x2c
   8599e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   859a0:	2b00      	cmp	r3, #0
   859a2:	f2c0 80d3 	blt.w	85b4c <_dtoa_r+0x3a4>
   859a6:	9a02      	ldr	r2, [sp, #8]
   859a8:	2a0e      	cmp	r2, #14
   859aa:	f300 80cf 	bgt.w	85b4c <_dtoa_r+0x3a4>
   859ae:	4b2d      	ldr	r3, [pc, #180]	; (85a64 <_dtoa_r+0x2bc>)
   859b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   859b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   859b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   859bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   859be:	2b00      	cmp	r3, #0
   859c0:	f2c0 83b4 	blt.w	8612c <_dtoa_r+0x984>
   859c4:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   859c8:	4650      	mov	r0, sl
   859ca:	462a      	mov	r2, r5
   859cc:	4633      	mov	r3, r6
   859ce:	4659      	mov	r1, fp
   859d0:	f002 fc00 	bl	881d4 <__aeabi_ddiv>
   859d4:	f002 fd84 	bl	884e0 <__aeabi_d2iz>
   859d8:	4680      	mov	r8, r0
   859da:	f002 fa6b 	bl	87eb4 <__aeabi_i2d>
   859de:	462a      	mov	r2, r5
   859e0:	4633      	mov	r3, r6
   859e2:	f002 facd 	bl	87f80 <__aeabi_dmul>
   859e6:	4602      	mov	r2, r0
   859e8:	460b      	mov	r3, r1
   859ea:	4650      	mov	r0, sl
   859ec:	4659      	mov	r1, fp
   859ee:	f002 f913 	bl	87c18 <__aeabi_dsub>
   859f2:	9e07      	ldr	r6, [sp, #28]
   859f4:	9f04      	ldr	r7, [sp, #16]
   859f6:	f108 0530 	add.w	r5, r8, #48	; 0x30
   859fa:	2e01      	cmp	r6, #1
   859fc:	703d      	strb	r5, [r7, #0]
   859fe:	4602      	mov	r2, r0
   85a00:	460b      	mov	r3, r1
   85a02:	f107 0501 	add.w	r5, r7, #1
   85a06:	d064      	beq.n	85ad2 <_dtoa_r+0x32a>
   85a08:	2200      	movs	r2, #0
   85a0a:	4b18      	ldr	r3, [pc, #96]	; (85a6c <_dtoa_r+0x2c4>)
   85a0c:	f002 fab8 	bl	87f80 <__aeabi_dmul>
   85a10:	2200      	movs	r2, #0
   85a12:	2300      	movs	r3, #0
   85a14:	4606      	mov	r6, r0
   85a16:	460f      	mov	r7, r1
   85a18:	f002 fd1a 	bl	88450 <__aeabi_dcmpeq>
   85a1c:	2800      	cmp	r0, #0
   85a1e:	f040 8082 	bne.w	85b26 <_dtoa_r+0x37e>
   85a22:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   85a26:	f04f 0a00 	mov.w	sl, #0
   85a2a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   85a2e:	f04f 0b00 	mov.w	fp, #0
   85a32:	940b      	str	r4, [sp, #44]	; 0x2c
   85a34:	e029      	b.n	85a8a <_dtoa_r+0x2e2>
   85a36:	bf00      	nop
   85a38:	636f4361 	.word	0x636f4361
   85a3c:	3fd287a7 	.word	0x3fd287a7
   85a40:	8b60c8b3 	.word	0x8b60c8b3
   85a44:	3fc68a28 	.word	0x3fc68a28
   85a48:	509f79fb 	.word	0x509f79fb
   85a4c:	3fd34413 	.word	0x3fd34413
   85a50:	7ff00000 	.word	0x7ff00000
   85a54:	0008986d 	.word	0x0008986d
   85a58:	00089890 	.word	0x00089890
   85a5c:	0008989c 	.word	0x0008989c
   85a60:	3ff80000 	.word	0x3ff80000
   85a64:	000898d8 	.word	0x000898d8
   85a68:	0008986c 	.word	0x0008986c
   85a6c:	40240000 	.word	0x40240000
   85a70:	2200      	movs	r2, #0
   85a72:	4b81      	ldr	r3, [pc, #516]	; (85c78 <_dtoa_r+0x4d0>)
   85a74:	f002 fa84 	bl	87f80 <__aeabi_dmul>
   85a78:	4652      	mov	r2, sl
   85a7a:	465b      	mov	r3, fp
   85a7c:	4606      	mov	r6, r0
   85a7e:	460f      	mov	r7, r1
   85a80:	f002 fce6 	bl	88450 <__aeabi_dcmpeq>
   85a84:	2800      	cmp	r0, #0
   85a86:	f040 83ba 	bne.w	861fe <_dtoa_r+0xa56>
   85a8a:	4642      	mov	r2, r8
   85a8c:	464b      	mov	r3, r9
   85a8e:	4630      	mov	r0, r6
   85a90:	4639      	mov	r1, r7
   85a92:	f002 fb9f 	bl	881d4 <__aeabi_ddiv>
   85a96:	f002 fd23 	bl	884e0 <__aeabi_d2iz>
   85a9a:	4604      	mov	r4, r0
   85a9c:	f002 fa0a 	bl	87eb4 <__aeabi_i2d>
   85aa0:	4642      	mov	r2, r8
   85aa2:	464b      	mov	r3, r9
   85aa4:	f002 fa6c 	bl	87f80 <__aeabi_dmul>
   85aa8:	4602      	mov	r2, r0
   85aaa:	460b      	mov	r3, r1
   85aac:	4630      	mov	r0, r6
   85aae:	4639      	mov	r1, r7
   85ab0:	f002 f8b2 	bl	87c18 <__aeabi_dsub>
   85ab4:	f104 0630 	add.w	r6, r4, #48	; 0x30
   85ab8:	f805 6b01 	strb.w	r6, [r5], #1
   85abc:	9e04      	ldr	r6, [sp, #16]
   85abe:	9f07      	ldr	r7, [sp, #28]
   85ac0:	1bae      	subs	r6, r5, r6
   85ac2:	42be      	cmp	r6, r7
   85ac4:	4602      	mov	r2, r0
   85ac6:	460b      	mov	r3, r1
   85ac8:	d1d2      	bne.n	85a70 <_dtoa_r+0x2c8>
   85aca:	46a0      	mov	r8, r4
   85acc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85ad0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85ad2:	4610      	mov	r0, r2
   85ad4:	4619      	mov	r1, r3
   85ad6:	f002 f8a1 	bl	87c1c <__adddf3>
   85ada:	4606      	mov	r6, r0
   85adc:	460f      	mov	r7, r1
   85ade:	4602      	mov	r2, r0
   85ae0:	460b      	mov	r3, r1
   85ae2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85ae6:	f002 fcbd 	bl	88464 <__aeabi_dcmplt>
   85aea:	b948      	cbnz	r0, 85b00 <_dtoa_r+0x358>
   85aec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85af0:	4632      	mov	r2, r6
   85af2:	463b      	mov	r3, r7
   85af4:	f002 fcac 	bl	88450 <__aeabi_dcmpeq>
   85af8:	b1a8      	cbz	r0, 85b26 <_dtoa_r+0x37e>
   85afa:	f018 0f01 	tst.w	r8, #1
   85afe:	d012      	beq.n	85b26 <_dtoa_r+0x37e>
   85b00:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   85b04:	1e6b      	subs	r3, r5, #1
   85b06:	9a04      	ldr	r2, [sp, #16]
   85b08:	e004      	b.n	85b14 <_dtoa_r+0x36c>
   85b0a:	429a      	cmp	r2, r3
   85b0c:	f000 8402 	beq.w	86314 <_dtoa_r+0xb6c>
   85b10:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   85b14:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   85b18:	f103 0501 	add.w	r5, r3, #1
   85b1c:	d0f5      	beq.n	85b0a <_dtoa_r+0x362>
   85b1e:	f108 0801 	add.w	r8, r8, #1
   85b22:	f883 8000 	strb.w	r8, [r3]
   85b26:	4649      	mov	r1, r9
   85b28:	4620      	mov	r0, r4
   85b2a:	f001 f929 	bl	86d80 <_Bfree>
   85b2e:	2200      	movs	r2, #0
   85b30:	9b02      	ldr	r3, [sp, #8]
   85b32:	702a      	strb	r2, [r5, #0]
   85b34:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85b36:	3301      	adds	r3, #1
   85b38:	6013      	str	r3, [r2, #0]
   85b3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85b3c:	2b00      	cmp	r3, #0
   85b3e:	f000 839f 	beq.w	86280 <_dtoa_r+0xad8>
   85b42:	9804      	ldr	r0, [sp, #16]
   85b44:	601d      	str	r5, [r3, #0]
   85b46:	b01b      	add	sp, #108	; 0x6c
   85b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85b4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85b4e:	2a00      	cmp	r2, #0
   85b50:	d03e      	beq.n	85bd0 <_dtoa_r+0x428>
   85b52:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85b54:	2a01      	cmp	r2, #1
   85b56:	f340 8311 	ble.w	8617c <_dtoa_r+0x9d4>
   85b5a:	9b07      	ldr	r3, [sp, #28]
   85b5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85b5e:	1e5f      	subs	r7, r3, #1
   85b60:	42ba      	cmp	r2, r7
   85b62:	f2c0 8390 	blt.w	86286 <_dtoa_r+0xade>
   85b66:	1bd7      	subs	r7, r2, r7
   85b68:	9b07      	ldr	r3, [sp, #28]
   85b6a:	2b00      	cmp	r3, #0
   85b6c:	f2c0 848c 	blt.w	86488 <_dtoa_r+0xce0>
   85b70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85b72:	9b07      	ldr	r3, [sp, #28]
   85b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85b76:	2101      	movs	r1, #1
   85b78:	441a      	add	r2, r3
   85b7a:	920a      	str	r2, [sp, #40]	; 0x28
   85b7c:	9a08      	ldr	r2, [sp, #32]
   85b7e:	4620      	mov	r0, r4
   85b80:	441a      	add	r2, r3
   85b82:	9208      	str	r2, [sp, #32]
   85b84:	f001 f998 	bl	86eb8 <__i2b>
   85b88:	4606      	mov	r6, r0
   85b8a:	e023      	b.n	85bd4 <_dtoa_r+0x42c>
   85b8c:	2301      	movs	r3, #1
   85b8e:	930e      	str	r3, [sp, #56]	; 0x38
   85b90:	e6b5      	b.n	858fe <_dtoa_r+0x156>
   85b92:	2300      	movs	r3, #0
   85b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85b96:	930d      	str	r3, [sp, #52]	; 0x34
   85b98:	9b02      	ldr	r3, [sp, #8]
   85b9a:	1ad2      	subs	r2, r2, r3
   85b9c:	425b      	negs	r3, r3
   85b9e:	920a      	str	r2, [sp, #40]	; 0x28
   85ba0:	930c      	str	r3, [sp, #48]	; 0x30
   85ba2:	e6be      	b.n	85922 <_dtoa_r+0x17a>
   85ba4:	f1c7 0301 	rsb	r3, r7, #1
   85ba8:	930a      	str	r3, [sp, #40]	; 0x28
   85baa:	2300      	movs	r3, #0
   85bac:	9308      	str	r3, [sp, #32]
   85bae:	e6ad      	b.n	8590c <_dtoa_r+0x164>
   85bb0:	9d02      	ldr	r5, [sp, #8]
   85bb2:	4628      	mov	r0, r5
   85bb4:	f002 f97e 	bl	87eb4 <__aeabi_i2d>
   85bb8:	4602      	mov	r2, r0
   85bba:	460b      	mov	r3, r1
   85bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   85bc0:	f002 fc46 	bl	88450 <__aeabi_dcmpeq>
   85bc4:	2800      	cmp	r0, #0
   85bc6:	f47f ae86 	bne.w	858d6 <_dtoa_r+0x12e>
   85bca:	1e6b      	subs	r3, r5, #1
   85bcc:	9302      	str	r3, [sp, #8]
   85bce:	e682      	b.n	858d6 <_dtoa_r+0x12e>
   85bd0:	ad0a      	add	r5, sp, #40	; 0x28
   85bd2:	cde0      	ldmia	r5, {r5, r6, r7}
   85bd4:	2d00      	cmp	r5, #0
   85bd6:	dd0c      	ble.n	85bf2 <_dtoa_r+0x44a>
   85bd8:	9908      	ldr	r1, [sp, #32]
   85bda:	2900      	cmp	r1, #0
   85bdc:	460b      	mov	r3, r1
   85bde:	dd08      	ble.n	85bf2 <_dtoa_r+0x44a>
   85be0:	42a9      	cmp	r1, r5
   85be2:	bfa8      	it	ge
   85be4:	462b      	movge	r3, r5
   85be6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85be8:	1aed      	subs	r5, r5, r3
   85bea:	1ad2      	subs	r2, r2, r3
   85bec:	1acb      	subs	r3, r1, r3
   85bee:	920a      	str	r2, [sp, #40]	; 0x28
   85bf0:	9308      	str	r3, [sp, #32]
   85bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85bf4:	b1d3      	cbz	r3, 85c2c <_dtoa_r+0x484>
   85bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85bf8:	2b00      	cmp	r3, #0
   85bfa:	f000 82b8 	beq.w	8616e <_dtoa_r+0x9c6>
   85bfe:	2f00      	cmp	r7, #0
   85c00:	dd10      	ble.n	85c24 <_dtoa_r+0x47c>
   85c02:	4631      	mov	r1, r6
   85c04:	463a      	mov	r2, r7
   85c06:	4620      	mov	r0, r4
   85c08:	f001 f9f2 	bl	86ff0 <__pow5mult>
   85c0c:	464a      	mov	r2, r9
   85c0e:	4601      	mov	r1, r0
   85c10:	4606      	mov	r6, r0
   85c12:	4620      	mov	r0, r4
   85c14:	f001 f95a 	bl	86ecc <__multiply>
   85c18:	4603      	mov	r3, r0
   85c1a:	4649      	mov	r1, r9
   85c1c:	4620      	mov	r0, r4
   85c1e:	4699      	mov	r9, r3
   85c20:	f001 f8ae 	bl	86d80 <_Bfree>
   85c24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85c26:	1bda      	subs	r2, r3, r7
   85c28:	f040 82a2 	bne.w	86170 <_dtoa_r+0x9c8>
   85c2c:	2101      	movs	r1, #1
   85c2e:	4620      	mov	r0, r4
   85c30:	f001 f942 	bl	86eb8 <__i2b>
   85c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85c36:	4680      	mov	r8, r0
   85c38:	2b00      	cmp	r3, #0
   85c3a:	dd1f      	ble.n	85c7c <_dtoa_r+0x4d4>
   85c3c:	4601      	mov	r1, r0
   85c3e:	461a      	mov	r2, r3
   85c40:	4620      	mov	r0, r4
   85c42:	f001 f9d5 	bl	86ff0 <__pow5mult>
   85c46:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85c48:	4680      	mov	r8, r0
   85c4a:	2b01      	cmp	r3, #1
   85c4c:	f340 8255 	ble.w	860fa <_dtoa_r+0x952>
   85c50:	2300      	movs	r3, #0
   85c52:	930c      	str	r3, [sp, #48]	; 0x30
   85c54:	f8d8 3010 	ldr.w	r3, [r8, #16]
   85c58:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   85c5c:	6918      	ldr	r0, [r3, #16]
   85c5e:	f001 f8db 	bl	86e18 <__hi0bits>
   85c62:	f1c0 0020 	rsb	r0, r0, #32
   85c66:	e013      	b.n	85c90 <_dtoa_r+0x4e8>
   85c68:	f1c3 0520 	rsb	r5, r3, #32
   85c6c:	fa0a f005 	lsl.w	r0, sl, r5
   85c70:	e67b      	b.n	8596a <_dtoa_r+0x1c2>
   85c72:	900e      	str	r0, [sp, #56]	; 0x38
   85c74:	e643      	b.n	858fe <_dtoa_r+0x156>
   85c76:	bf00      	nop
   85c78:	40240000 	.word	0x40240000
   85c7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85c7e:	2b01      	cmp	r3, #1
   85c80:	f340 8285 	ble.w	8618e <_dtoa_r+0x9e6>
   85c84:	2300      	movs	r3, #0
   85c86:	930c      	str	r3, [sp, #48]	; 0x30
   85c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85c8a:	2001      	movs	r0, #1
   85c8c:	2b00      	cmp	r3, #0
   85c8e:	d1e1      	bne.n	85c54 <_dtoa_r+0x4ac>
   85c90:	9a08      	ldr	r2, [sp, #32]
   85c92:	4410      	add	r0, r2
   85c94:	f010 001f 	ands.w	r0, r0, #31
   85c98:	f000 80a1 	beq.w	85dde <_dtoa_r+0x636>
   85c9c:	f1c0 0320 	rsb	r3, r0, #32
   85ca0:	2b04      	cmp	r3, #4
   85ca2:	f340 8486 	ble.w	865b2 <_dtoa_r+0xe0a>
   85ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85ca8:	f1c0 001c 	rsb	r0, r0, #28
   85cac:	4403      	add	r3, r0
   85cae:	930a      	str	r3, [sp, #40]	; 0x28
   85cb0:	4613      	mov	r3, r2
   85cb2:	4403      	add	r3, r0
   85cb4:	4405      	add	r5, r0
   85cb6:	9308      	str	r3, [sp, #32]
   85cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85cba:	2b00      	cmp	r3, #0
   85cbc:	dd05      	ble.n	85cca <_dtoa_r+0x522>
   85cbe:	4649      	mov	r1, r9
   85cc0:	461a      	mov	r2, r3
   85cc2:	4620      	mov	r0, r4
   85cc4:	f001 f9e4 	bl	87090 <__lshift>
   85cc8:	4681      	mov	r9, r0
   85cca:	9b08      	ldr	r3, [sp, #32]
   85ccc:	2b00      	cmp	r3, #0
   85cce:	dd05      	ble.n	85cdc <_dtoa_r+0x534>
   85cd0:	4641      	mov	r1, r8
   85cd2:	461a      	mov	r2, r3
   85cd4:	4620      	mov	r0, r4
   85cd6:	f001 f9db 	bl	87090 <__lshift>
   85cda:	4680      	mov	r8, r0
   85cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85cde:	2b00      	cmp	r3, #0
   85ce0:	f040 8086 	bne.w	85df0 <_dtoa_r+0x648>
   85ce4:	9b07      	ldr	r3, [sp, #28]
   85ce6:	2b00      	cmp	r3, #0
   85ce8:	f340 8264 	ble.w	861b4 <_dtoa_r+0xa0c>
   85cec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85cee:	2b00      	cmp	r3, #0
   85cf0:	f000 8098 	beq.w	85e24 <_dtoa_r+0x67c>
   85cf4:	2d00      	cmp	r5, #0
   85cf6:	dd05      	ble.n	85d04 <_dtoa_r+0x55c>
   85cf8:	4631      	mov	r1, r6
   85cfa:	462a      	mov	r2, r5
   85cfc:	4620      	mov	r0, r4
   85cfe:	f001 f9c7 	bl	87090 <__lshift>
   85d02:	4606      	mov	r6, r0
   85d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85d06:	2b00      	cmp	r3, #0
   85d08:	f040 8336 	bne.w	86378 <_dtoa_r+0xbd0>
   85d0c:	9608      	str	r6, [sp, #32]
   85d0e:	9b07      	ldr	r3, [sp, #28]
   85d10:	9a04      	ldr	r2, [sp, #16]
   85d12:	3b01      	subs	r3, #1
   85d14:	18d3      	adds	r3, r2, r3
   85d16:	930b      	str	r3, [sp, #44]	; 0x2c
   85d18:	4617      	mov	r7, r2
   85d1a:	f00a 0301 	and.w	r3, sl, #1
   85d1e:	46c2      	mov	sl, r8
   85d20:	f8dd b020 	ldr.w	fp, [sp, #32]
   85d24:	930c      	str	r3, [sp, #48]	; 0x30
   85d26:	4651      	mov	r1, sl
   85d28:	4648      	mov	r0, r9
   85d2a:	f7ff fca9 	bl	85680 <quorem>
   85d2e:	4631      	mov	r1, r6
   85d30:	4605      	mov	r5, r0
   85d32:	4648      	mov	r0, r9
   85d34:	f001 f9fc 	bl	87130 <__mcmp>
   85d38:	465a      	mov	r2, fp
   85d3a:	9007      	str	r0, [sp, #28]
   85d3c:	4651      	mov	r1, sl
   85d3e:	4620      	mov	r0, r4
   85d40:	f001 fa12 	bl	87168 <__mdiff>
   85d44:	68c2      	ldr	r2, [r0, #12]
   85d46:	4680      	mov	r8, r0
   85d48:	f105 0330 	add.w	r3, r5, #48	; 0x30
   85d4c:	2a00      	cmp	r2, #0
   85d4e:	f040 8229 	bne.w	861a4 <_dtoa_r+0x9fc>
   85d52:	4601      	mov	r1, r0
   85d54:	4648      	mov	r0, r9
   85d56:	930a      	str	r3, [sp, #40]	; 0x28
   85d58:	f001 f9ea 	bl	87130 <__mcmp>
   85d5c:	4641      	mov	r1, r8
   85d5e:	9008      	str	r0, [sp, #32]
   85d60:	4620      	mov	r0, r4
   85d62:	f001 f80d 	bl	86d80 <_Bfree>
   85d66:	9a08      	ldr	r2, [sp, #32]
   85d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85d6a:	b932      	cbnz	r2, 85d7a <_dtoa_r+0x5d2>
   85d6c:	9924      	ldr	r1, [sp, #144]	; 0x90
   85d6e:	b921      	cbnz	r1, 85d7a <_dtoa_r+0x5d2>
   85d70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85d72:	2a00      	cmp	r2, #0
   85d74:	f000 83ee 	beq.w	86554 <_dtoa_r+0xdac>
   85d78:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85d7a:	9907      	ldr	r1, [sp, #28]
   85d7c:	2900      	cmp	r1, #0
   85d7e:	f2c0 829f 	blt.w	862c0 <_dtoa_r+0xb18>
   85d82:	d105      	bne.n	85d90 <_dtoa_r+0x5e8>
   85d84:	9924      	ldr	r1, [sp, #144]	; 0x90
   85d86:	b919      	cbnz	r1, 85d90 <_dtoa_r+0x5e8>
   85d88:	990c      	ldr	r1, [sp, #48]	; 0x30
   85d8a:	2900      	cmp	r1, #0
   85d8c:	f000 8298 	beq.w	862c0 <_dtoa_r+0xb18>
   85d90:	2a00      	cmp	r2, #0
   85d92:	f300 8305 	bgt.w	863a0 <_dtoa_r+0xbf8>
   85d96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85d98:	f107 0801 	add.w	r8, r7, #1
   85d9c:	4297      	cmp	r7, r2
   85d9e:	703b      	strb	r3, [r7, #0]
   85da0:	4645      	mov	r5, r8
   85da2:	f000 830b 	beq.w	863bc <_dtoa_r+0xc14>
   85da6:	4649      	mov	r1, r9
   85da8:	2300      	movs	r3, #0
   85daa:	220a      	movs	r2, #10
   85dac:	4620      	mov	r0, r4
   85dae:	f000 fff1 	bl	86d94 <__multadd>
   85db2:	455e      	cmp	r6, fp
   85db4:	4681      	mov	r9, r0
   85db6:	4631      	mov	r1, r6
   85db8:	f04f 0300 	mov.w	r3, #0
   85dbc:	f04f 020a 	mov.w	r2, #10
   85dc0:	4620      	mov	r0, r4
   85dc2:	f000 81e9 	beq.w	86198 <_dtoa_r+0x9f0>
   85dc6:	f000 ffe5 	bl	86d94 <__multadd>
   85dca:	4659      	mov	r1, fp
   85dcc:	4606      	mov	r6, r0
   85dce:	2300      	movs	r3, #0
   85dd0:	220a      	movs	r2, #10
   85dd2:	4620      	mov	r0, r4
   85dd4:	f000 ffde 	bl	86d94 <__multadd>
   85dd8:	4647      	mov	r7, r8
   85dda:	4683      	mov	fp, r0
   85ddc:	e7a3      	b.n	85d26 <_dtoa_r+0x57e>
   85dde:	201c      	movs	r0, #28
   85de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85de2:	4405      	add	r5, r0
   85de4:	4403      	add	r3, r0
   85de6:	930a      	str	r3, [sp, #40]	; 0x28
   85de8:	9b08      	ldr	r3, [sp, #32]
   85dea:	4403      	add	r3, r0
   85dec:	9308      	str	r3, [sp, #32]
   85dee:	e763      	b.n	85cb8 <_dtoa_r+0x510>
   85df0:	4641      	mov	r1, r8
   85df2:	4648      	mov	r0, r9
   85df4:	f001 f99c 	bl	87130 <__mcmp>
   85df8:	2800      	cmp	r0, #0
   85dfa:	f6bf af73 	bge.w	85ce4 <_dtoa_r+0x53c>
   85dfe:	9f02      	ldr	r7, [sp, #8]
   85e00:	4649      	mov	r1, r9
   85e02:	2300      	movs	r3, #0
   85e04:	220a      	movs	r2, #10
   85e06:	4620      	mov	r0, r4
   85e08:	3f01      	subs	r7, #1
   85e0a:	9702      	str	r7, [sp, #8]
   85e0c:	f000 ffc2 	bl	86d94 <__multadd>
   85e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85e12:	4681      	mov	r9, r0
   85e14:	2b00      	cmp	r3, #0
   85e16:	f040 83b5 	bne.w	86584 <_dtoa_r+0xddc>
   85e1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85e1c:	2b00      	cmp	r3, #0
   85e1e:	f340 83be 	ble.w	8659e <_dtoa_r+0xdf6>
   85e22:	9307      	str	r3, [sp, #28]
   85e24:	f8dd a010 	ldr.w	sl, [sp, #16]
   85e28:	9f07      	ldr	r7, [sp, #28]
   85e2a:	4655      	mov	r5, sl
   85e2c:	e006      	b.n	85e3c <_dtoa_r+0x694>
   85e2e:	4649      	mov	r1, r9
   85e30:	2300      	movs	r3, #0
   85e32:	220a      	movs	r2, #10
   85e34:	4620      	mov	r0, r4
   85e36:	f000 ffad 	bl	86d94 <__multadd>
   85e3a:	4681      	mov	r9, r0
   85e3c:	4641      	mov	r1, r8
   85e3e:	4648      	mov	r0, r9
   85e40:	f7ff fc1e 	bl	85680 <quorem>
   85e44:	3030      	adds	r0, #48	; 0x30
   85e46:	f805 0b01 	strb.w	r0, [r5], #1
   85e4a:	eba5 030a 	sub.w	r3, r5, sl
   85e4e:	42bb      	cmp	r3, r7
   85e50:	dbed      	blt.n	85e2e <_dtoa_r+0x686>
   85e52:	9b04      	ldr	r3, [sp, #16]
   85e54:	9a07      	ldr	r2, [sp, #28]
   85e56:	4682      	mov	sl, r0
   85e58:	2a01      	cmp	r2, #1
   85e5a:	bfac      	ite	ge
   85e5c:	189b      	addge	r3, r3, r2
   85e5e:	3301      	addlt	r3, #1
   85e60:	f04f 0b00 	mov.w	fp, #0
   85e64:	461d      	mov	r5, r3
   85e66:	4649      	mov	r1, r9
   85e68:	2201      	movs	r2, #1
   85e6a:	4620      	mov	r0, r4
   85e6c:	f001 f910 	bl	87090 <__lshift>
   85e70:	4641      	mov	r1, r8
   85e72:	4681      	mov	r9, r0
   85e74:	f001 f95c 	bl	87130 <__mcmp>
   85e78:	2800      	cmp	r0, #0
   85e7a:	f340 823f 	ble.w	862fc <_dtoa_r+0xb54>
   85e7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   85e82:	1e6b      	subs	r3, r5, #1
   85e84:	9904      	ldr	r1, [sp, #16]
   85e86:	e004      	b.n	85e92 <_dtoa_r+0x6ea>
   85e88:	428b      	cmp	r3, r1
   85e8a:	f000 81ae 	beq.w	861ea <_dtoa_r+0xa42>
   85e8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   85e92:	2a39      	cmp	r2, #57	; 0x39
   85e94:	f103 0501 	add.w	r5, r3, #1
   85e98:	d0f6      	beq.n	85e88 <_dtoa_r+0x6e0>
   85e9a:	3201      	adds	r2, #1
   85e9c:	701a      	strb	r2, [r3, #0]
   85e9e:	4641      	mov	r1, r8
   85ea0:	4620      	mov	r0, r4
   85ea2:	f000 ff6d 	bl	86d80 <_Bfree>
   85ea6:	2e00      	cmp	r6, #0
   85ea8:	f43f ae3d 	beq.w	85b26 <_dtoa_r+0x37e>
   85eac:	f1bb 0f00 	cmp.w	fp, #0
   85eb0:	d005      	beq.n	85ebe <_dtoa_r+0x716>
   85eb2:	45b3      	cmp	fp, r6
   85eb4:	d003      	beq.n	85ebe <_dtoa_r+0x716>
   85eb6:	4659      	mov	r1, fp
   85eb8:	4620      	mov	r0, r4
   85eba:	f000 ff61 	bl	86d80 <_Bfree>
   85ebe:	4631      	mov	r1, r6
   85ec0:	4620      	mov	r0, r4
   85ec2:	f000 ff5d 	bl	86d80 <_Bfree>
   85ec6:	e62e      	b.n	85b26 <_dtoa_r+0x37e>
   85ec8:	2300      	movs	r3, #0
   85eca:	930b      	str	r3, [sp, #44]	; 0x2c
   85ecc:	9b02      	ldr	r3, [sp, #8]
   85ece:	9a25      	ldr	r2, [sp, #148]	; 0x94
   85ed0:	4413      	add	r3, r2
   85ed2:	930f      	str	r3, [sp, #60]	; 0x3c
   85ed4:	3301      	adds	r3, #1
   85ed6:	2b01      	cmp	r3, #1
   85ed8:	461f      	mov	r7, r3
   85eda:	461e      	mov	r6, r3
   85edc:	bfb8      	it	lt
   85ede:	2701      	movlt	r7, #1
   85ee0:	9307      	str	r3, [sp, #28]
   85ee2:	2100      	movs	r1, #0
   85ee4:	2f17      	cmp	r7, #23
   85ee6:	6461      	str	r1, [r4, #68]	; 0x44
   85ee8:	d90a      	bls.n	85f00 <_dtoa_r+0x758>
   85eea:	2201      	movs	r2, #1
   85eec:	2304      	movs	r3, #4
   85eee:	005b      	lsls	r3, r3, #1
   85ef0:	f103 0014 	add.w	r0, r3, #20
   85ef4:	4287      	cmp	r7, r0
   85ef6:	4611      	mov	r1, r2
   85ef8:	f102 0201 	add.w	r2, r2, #1
   85efc:	d2f7      	bcs.n	85eee <_dtoa_r+0x746>
   85efe:	6461      	str	r1, [r4, #68]	; 0x44
   85f00:	4620      	mov	r0, r4
   85f02:	f000 ff17 	bl	86d34 <_Balloc>
   85f06:	2e0e      	cmp	r6, #14
   85f08:	9004      	str	r0, [sp, #16]
   85f0a:	6420      	str	r0, [r4, #64]	; 0x40
   85f0c:	f63f ad47 	bhi.w	8599e <_dtoa_r+0x1f6>
   85f10:	2d00      	cmp	r5, #0
   85f12:	f43f ad44 	beq.w	8599e <_dtoa_r+0x1f6>
   85f16:	9902      	ldr	r1, [sp, #8]
   85f18:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   85f1c:	2900      	cmp	r1, #0
   85f1e:	f340 8203 	ble.w	86328 <_dtoa_r+0xb80>
   85f22:	4bb9      	ldr	r3, [pc, #740]	; (86208 <_dtoa_r+0xa60>)
   85f24:	f001 020f 	and.w	r2, r1, #15
   85f28:	110d      	asrs	r5, r1, #4
   85f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85f2e:	06e9      	lsls	r1, r5, #27
   85f30:	e9d3 6700 	ldrd	r6, r7, [r3]
   85f34:	f140 81af 	bpl.w	86296 <_dtoa_r+0xaee>
   85f38:	4bb4      	ldr	r3, [pc, #720]	; (8620c <_dtoa_r+0xa64>)
   85f3a:	4650      	mov	r0, sl
   85f3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   85f40:	4659      	mov	r1, fp
   85f42:	f002 f947 	bl	881d4 <__aeabi_ddiv>
   85f46:	f04f 0a03 	mov.w	sl, #3
   85f4a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   85f4e:	f005 050f 	and.w	r5, r5, #15
   85f52:	b18d      	cbz	r5, 85f78 <_dtoa_r+0x7d0>
   85f54:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8620c <_dtoa_r+0xa64>
   85f58:	07ea      	lsls	r2, r5, #31
   85f5a:	d509      	bpl.n	85f70 <_dtoa_r+0x7c8>
   85f5c:	e9d8 2300 	ldrd	r2, r3, [r8]
   85f60:	4630      	mov	r0, r6
   85f62:	4639      	mov	r1, r7
   85f64:	f002 f80c 	bl	87f80 <__aeabi_dmul>
   85f68:	4606      	mov	r6, r0
   85f6a:	460f      	mov	r7, r1
   85f6c:	f10a 0a01 	add.w	sl, sl, #1
   85f70:	106d      	asrs	r5, r5, #1
   85f72:	f108 0808 	add.w	r8, r8, #8
   85f76:	d1ef      	bne.n	85f58 <_dtoa_r+0x7b0>
   85f78:	463b      	mov	r3, r7
   85f7a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   85f7e:	4632      	mov	r2, r6
   85f80:	f002 f928 	bl	881d4 <__aeabi_ddiv>
   85f84:	4607      	mov	r7, r0
   85f86:	4688      	mov	r8, r1
   85f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85f8a:	b143      	cbz	r3, 85f9e <_dtoa_r+0x7f6>
   85f8c:	2200      	movs	r2, #0
   85f8e:	4ba0      	ldr	r3, [pc, #640]	; (86210 <_dtoa_r+0xa68>)
   85f90:	4638      	mov	r0, r7
   85f92:	4641      	mov	r1, r8
   85f94:	f002 fa66 	bl	88464 <__aeabi_dcmplt>
   85f98:	2800      	cmp	r0, #0
   85f9a:	f040 8287 	bne.w	864ac <_dtoa_r+0xd04>
   85f9e:	4650      	mov	r0, sl
   85fa0:	f001 ff88 	bl	87eb4 <__aeabi_i2d>
   85fa4:	463a      	mov	r2, r7
   85fa6:	4643      	mov	r3, r8
   85fa8:	f001 ffea 	bl	87f80 <__aeabi_dmul>
   85fac:	4b99      	ldr	r3, [pc, #612]	; (86214 <_dtoa_r+0xa6c>)
   85fae:	2200      	movs	r2, #0
   85fb0:	f001 fe34 	bl	87c1c <__adddf3>
   85fb4:	9b07      	ldr	r3, [sp, #28]
   85fb6:	4605      	mov	r5, r0
   85fb8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   85fbc:	2b00      	cmp	r3, #0
   85fbe:	f000 813f 	beq.w	86240 <_dtoa_r+0xa98>
   85fc2:	9b02      	ldr	r3, [sp, #8]
   85fc4:	9315      	str	r3, [sp, #84]	; 0x54
   85fc6:	9b07      	ldr	r3, [sp, #28]
   85fc8:	9312      	str	r3, [sp, #72]	; 0x48
   85fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85fcc:	2b00      	cmp	r3, #0
   85fce:	f000 81fb 	beq.w	863c8 <_dtoa_r+0xc20>
   85fd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85fd4:	4b8c      	ldr	r3, [pc, #560]	; (86208 <_dtoa_r+0xa60>)
   85fd6:	2000      	movs	r0, #0
   85fd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85fdc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   85fe0:	498d      	ldr	r1, [pc, #564]	; (86218 <_dtoa_r+0xa70>)
   85fe2:	f002 f8f7 	bl	881d4 <__aeabi_ddiv>
   85fe6:	462a      	mov	r2, r5
   85fe8:	4633      	mov	r3, r6
   85fea:	f001 fe15 	bl	87c18 <__aeabi_dsub>
   85fee:	4682      	mov	sl, r0
   85ff0:	468b      	mov	fp, r1
   85ff2:	4638      	mov	r0, r7
   85ff4:	4641      	mov	r1, r8
   85ff6:	f002 fa73 	bl	884e0 <__aeabi_d2iz>
   85ffa:	4605      	mov	r5, r0
   85ffc:	f001 ff5a 	bl	87eb4 <__aeabi_i2d>
   86000:	4602      	mov	r2, r0
   86002:	460b      	mov	r3, r1
   86004:	4638      	mov	r0, r7
   86006:	4641      	mov	r1, r8
   86008:	f001 fe06 	bl	87c18 <__aeabi_dsub>
   8600c:	3530      	adds	r5, #48	; 0x30
   8600e:	fa5f f885 	uxtb.w	r8, r5
   86012:	9d04      	ldr	r5, [sp, #16]
   86014:	4606      	mov	r6, r0
   86016:	460f      	mov	r7, r1
   86018:	f885 8000 	strb.w	r8, [r5]
   8601c:	4602      	mov	r2, r0
   8601e:	460b      	mov	r3, r1
   86020:	4650      	mov	r0, sl
   86022:	4659      	mov	r1, fp
   86024:	3501      	adds	r5, #1
   86026:	f002 fa3b 	bl	884a0 <__aeabi_dcmpgt>
   8602a:	2800      	cmp	r0, #0
   8602c:	d154      	bne.n	860d8 <_dtoa_r+0x930>
   8602e:	4632      	mov	r2, r6
   86030:	463b      	mov	r3, r7
   86032:	2000      	movs	r0, #0
   86034:	4976      	ldr	r1, [pc, #472]	; (86210 <_dtoa_r+0xa68>)
   86036:	f001 fdef 	bl	87c18 <__aeabi_dsub>
   8603a:	4602      	mov	r2, r0
   8603c:	460b      	mov	r3, r1
   8603e:	4650      	mov	r0, sl
   86040:	4659      	mov	r1, fp
   86042:	f002 fa2d 	bl	884a0 <__aeabi_dcmpgt>
   86046:	2800      	cmp	r0, #0
   86048:	f040 8270 	bne.w	8652c <_dtoa_r+0xd84>
   8604c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8604e:	2a01      	cmp	r2, #1
   86050:	f000 8112 	beq.w	86278 <_dtoa_r+0xad0>
   86054:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86056:	9a04      	ldr	r2, [sp, #16]
   86058:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8605c:	4413      	add	r3, r2
   8605e:	4699      	mov	r9, r3
   86060:	e00f      	b.n	86082 <_dtoa_r+0x8da>
   86062:	4632      	mov	r2, r6
   86064:	463b      	mov	r3, r7
   86066:	2000      	movs	r0, #0
   86068:	4969      	ldr	r1, [pc, #420]	; (86210 <_dtoa_r+0xa68>)
   8606a:	f001 fdd5 	bl	87c18 <__aeabi_dsub>
   8606e:	4652      	mov	r2, sl
   86070:	465b      	mov	r3, fp
   86072:	f002 f9f7 	bl	88464 <__aeabi_dcmplt>
   86076:	2800      	cmp	r0, #0
   86078:	f040 8256 	bne.w	86528 <_dtoa_r+0xd80>
   8607c:	454d      	cmp	r5, r9
   8607e:	f000 80f9 	beq.w	86274 <_dtoa_r+0xacc>
   86082:	4650      	mov	r0, sl
   86084:	4659      	mov	r1, fp
   86086:	2200      	movs	r2, #0
   86088:	4b64      	ldr	r3, [pc, #400]	; (8621c <_dtoa_r+0xa74>)
   8608a:	f001 ff79 	bl	87f80 <__aeabi_dmul>
   8608e:	2200      	movs	r2, #0
   86090:	4b62      	ldr	r3, [pc, #392]	; (8621c <_dtoa_r+0xa74>)
   86092:	4682      	mov	sl, r0
   86094:	468b      	mov	fp, r1
   86096:	4630      	mov	r0, r6
   86098:	4639      	mov	r1, r7
   8609a:	f001 ff71 	bl	87f80 <__aeabi_dmul>
   8609e:	460f      	mov	r7, r1
   860a0:	4606      	mov	r6, r0
   860a2:	f002 fa1d 	bl	884e0 <__aeabi_d2iz>
   860a6:	4680      	mov	r8, r0
   860a8:	f001 ff04 	bl	87eb4 <__aeabi_i2d>
   860ac:	4602      	mov	r2, r0
   860ae:	460b      	mov	r3, r1
   860b0:	4630      	mov	r0, r6
   860b2:	4639      	mov	r1, r7
   860b4:	f001 fdb0 	bl	87c18 <__aeabi_dsub>
   860b8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   860bc:	fa5f f888 	uxtb.w	r8, r8
   860c0:	f805 8b01 	strb.w	r8, [r5], #1
   860c4:	4652      	mov	r2, sl
   860c6:	465b      	mov	r3, fp
   860c8:	4606      	mov	r6, r0
   860ca:	460f      	mov	r7, r1
   860cc:	f002 f9ca 	bl	88464 <__aeabi_dcmplt>
   860d0:	2800      	cmp	r0, #0
   860d2:	d0c6      	beq.n	86062 <_dtoa_r+0x8ba>
   860d4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   860d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   860da:	9302      	str	r3, [sp, #8]
   860dc:	e523      	b.n	85b26 <_dtoa_r+0x37e>
   860de:	2300      	movs	r3, #0
   860e0:	930b      	str	r3, [sp, #44]	; 0x2c
   860e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   860e4:	2b00      	cmp	r3, #0
   860e6:	f340 80dd 	ble.w	862a4 <_dtoa_r+0xafc>
   860ea:	461f      	mov	r7, r3
   860ec:	461e      	mov	r6, r3
   860ee:	930f      	str	r3, [sp, #60]	; 0x3c
   860f0:	9307      	str	r3, [sp, #28]
   860f2:	e6f6      	b.n	85ee2 <_dtoa_r+0x73a>
   860f4:	2301      	movs	r3, #1
   860f6:	930b      	str	r3, [sp, #44]	; 0x2c
   860f8:	e7f3      	b.n	860e2 <_dtoa_r+0x93a>
   860fa:	f1ba 0f00 	cmp.w	sl, #0
   860fe:	f47f ada7 	bne.w	85c50 <_dtoa_r+0x4a8>
   86102:	f3cb 0313 	ubfx	r3, fp, #0, #20
   86106:	2b00      	cmp	r3, #0
   86108:	f47f adbc 	bne.w	85c84 <_dtoa_r+0x4dc>
   8610c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   86110:	0d3f      	lsrs	r7, r7, #20
   86112:	053f      	lsls	r7, r7, #20
   86114:	2f00      	cmp	r7, #0
   86116:	f000 820d 	beq.w	86534 <_dtoa_r+0xd8c>
   8611a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8611c:	3301      	adds	r3, #1
   8611e:	930a      	str	r3, [sp, #40]	; 0x28
   86120:	9b08      	ldr	r3, [sp, #32]
   86122:	3301      	adds	r3, #1
   86124:	9308      	str	r3, [sp, #32]
   86126:	2301      	movs	r3, #1
   86128:	930c      	str	r3, [sp, #48]	; 0x30
   8612a:	e5ad      	b.n	85c88 <_dtoa_r+0x4e0>
   8612c:	9b07      	ldr	r3, [sp, #28]
   8612e:	2b00      	cmp	r3, #0
   86130:	f73f ac48 	bgt.w	859c4 <_dtoa_r+0x21c>
   86134:	f040 8222 	bne.w	8657c <_dtoa_r+0xdd4>
   86138:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8613c:	2200      	movs	r2, #0
   8613e:	4b38      	ldr	r3, [pc, #224]	; (86220 <_dtoa_r+0xa78>)
   86140:	f001 ff1e 	bl	87f80 <__aeabi_dmul>
   86144:	4652      	mov	r2, sl
   86146:	465b      	mov	r3, fp
   86148:	f002 f9a0 	bl	8848c <__aeabi_dcmpge>
   8614c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   86150:	4646      	mov	r6, r8
   86152:	2800      	cmp	r0, #0
   86154:	d041      	beq.n	861da <_dtoa_r+0xa32>
   86156:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86158:	9d04      	ldr	r5, [sp, #16]
   8615a:	43db      	mvns	r3, r3
   8615c:	9302      	str	r3, [sp, #8]
   8615e:	4641      	mov	r1, r8
   86160:	4620      	mov	r0, r4
   86162:	f000 fe0d 	bl	86d80 <_Bfree>
   86166:	2e00      	cmp	r6, #0
   86168:	f43f acdd 	beq.w	85b26 <_dtoa_r+0x37e>
   8616c:	e6a7      	b.n	85ebe <_dtoa_r+0x716>
   8616e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86170:	4649      	mov	r1, r9
   86172:	4620      	mov	r0, r4
   86174:	f000 ff3c 	bl	86ff0 <__pow5mult>
   86178:	4681      	mov	r9, r0
   8617a:	e557      	b.n	85c2c <_dtoa_r+0x484>
   8617c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   8617e:	2a00      	cmp	r2, #0
   86180:	f000 8188 	beq.w	86494 <_dtoa_r+0xcec>
   86184:	f203 4333 	addw	r3, r3, #1075	; 0x433
   86188:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8618a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8618c:	e4f2      	b.n	85b74 <_dtoa_r+0x3cc>
   8618e:	f1ba 0f00 	cmp.w	sl, #0
   86192:	f47f ad77 	bne.w	85c84 <_dtoa_r+0x4dc>
   86196:	e7b4      	b.n	86102 <_dtoa_r+0x95a>
   86198:	f000 fdfc 	bl	86d94 <__multadd>
   8619c:	4647      	mov	r7, r8
   8619e:	4606      	mov	r6, r0
   861a0:	4683      	mov	fp, r0
   861a2:	e5c0      	b.n	85d26 <_dtoa_r+0x57e>
   861a4:	4601      	mov	r1, r0
   861a6:	4620      	mov	r0, r4
   861a8:	9308      	str	r3, [sp, #32]
   861aa:	f000 fde9 	bl	86d80 <_Bfree>
   861ae:	2201      	movs	r2, #1
   861b0:	9b08      	ldr	r3, [sp, #32]
   861b2:	e5e2      	b.n	85d7a <_dtoa_r+0x5d2>
   861b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   861b6:	2b02      	cmp	r3, #2
   861b8:	f77f ad98 	ble.w	85cec <_dtoa_r+0x544>
   861bc:	9b07      	ldr	r3, [sp, #28]
   861be:	2b00      	cmp	r3, #0
   861c0:	d1c9      	bne.n	86156 <_dtoa_r+0x9ae>
   861c2:	4641      	mov	r1, r8
   861c4:	2205      	movs	r2, #5
   861c6:	4620      	mov	r0, r4
   861c8:	f000 fde4 	bl	86d94 <__multadd>
   861cc:	4601      	mov	r1, r0
   861ce:	4680      	mov	r8, r0
   861d0:	4648      	mov	r0, r9
   861d2:	f000 ffad 	bl	87130 <__mcmp>
   861d6:	2800      	cmp	r0, #0
   861d8:	ddbd      	ble.n	86156 <_dtoa_r+0x9ae>
   861da:	2331      	movs	r3, #49	; 0x31
   861dc:	9a02      	ldr	r2, [sp, #8]
   861de:	9904      	ldr	r1, [sp, #16]
   861e0:	3201      	adds	r2, #1
   861e2:	9202      	str	r2, [sp, #8]
   861e4:	700b      	strb	r3, [r1, #0]
   861e6:	1c4d      	adds	r5, r1, #1
   861e8:	e7b9      	b.n	8615e <_dtoa_r+0x9b6>
   861ea:	2331      	movs	r3, #49	; 0x31
   861ec:	9a02      	ldr	r2, [sp, #8]
   861ee:	3201      	adds	r2, #1
   861f0:	9202      	str	r2, [sp, #8]
   861f2:	9a04      	ldr	r2, [sp, #16]
   861f4:	7013      	strb	r3, [r2, #0]
   861f6:	e652      	b.n	85e9e <_dtoa_r+0x6f6>
   861f8:	2301      	movs	r3, #1
   861fa:	930b      	str	r3, [sp, #44]	; 0x2c
   861fc:	e666      	b.n	85ecc <_dtoa_r+0x724>
   861fe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86202:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86204:	e48f      	b.n	85b26 <_dtoa_r+0x37e>
   86206:	bf00      	nop
   86208:	000898d8 	.word	0x000898d8
   8620c:	000898b0 	.word	0x000898b0
   86210:	3ff00000 	.word	0x3ff00000
   86214:	401c0000 	.word	0x401c0000
   86218:	3fe00000 	.word	0x3fe00000
   8621c:	40240000 	.word	0x40240000
   86220:	40140000 	.word	0x40140000
   86224:	4650      	mov	r0, sl
   86226:	f001 fe45 	bl	87eb4 <__aeabi_i2d>
   8622a:	463a      	mov	r2, r7
   8622c:	4643      	mov	r3, r8
   8622e:	f001 fea7 	bl	87f80 <__aeabi_dmul>
   86232:	2200      	movs	r2, #0
   86234:	4bc1      	ldr	r3, [pc, #772]	; (8653c <_dtoa_r+0xd94>)
   86236:	f001 fcf1 	bl	87c1c <__adddf3>
   8623a:	4605      	mov	r5, r0
   8623c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   86240:	4641      	mov	r1, r8
   86242:	2200      	movs	r2, #0
   86244:	4bbe      	ldr	r3, [pc, #760]	; (86540 <_dtoa_r+0xd98>)
   86246:	4638      	mov	r0, r7
   86248:	f001 fce6 	bl	87c18 <__aeabi_dsub>
   8624c:	462a      	mov	r2, r5
   8624e:	4633      	mov	r3, r6
   86250:	4682      	mov	sl, r0
   86252:	468b      	mov	fp, r1
   86254:	f002 f924 	bl	884a0 <__aeabi_dcmpgt>
   86258:	4680      	mov	r8, r0
   8625a:	2800      	cmp	r0, #0
   8625c:	f040 8110 	bne.w	86480 <_dtoa_r+0xcd8>
   86260:	462a      	mov	r2, r5
   86262:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   86266:	4650      	mov	r0, sl
   86268:	4659      	mov	r1, fp
   8626a:	f002 f8fb 	bl	88464 <__aeabi_dcmplt>
   8626e:	b118      	cbz	r0, 86278 <_dtoa_r+0xad0>
   86270:	4646      	mov	r6, r8
   86272:	e770      	b.n	86156 <_dtoa_r+0x9ae>
   86274:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   86278:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   8627c:	f7ff bb8f 	b.w	8599e <_dtoa_r+0x1f6>
   86280:	9804      	ldr	r0, [sp, #16]
   86282:	f7ff bac0 	b.w	85806 <_dtoa_r+0x5e>
   86286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86288:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8628a:	1afb      	subs	r3, r7, r3
   8628c:	441a      	add	r2, r3
   8628e:	970c      	str	r7, [sp, #48]	; 0x30
   86290:	920d      	str	r2, [sp, #52]	; 0x34
   86292:	2700      	movs	r7, #0
   86294:	e468      	b.n	85b68 <_dtoa_r+0x3c0>
   86296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8629a:	f04f 0a02 	mov.w	sl, #2
   8629e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   862a2:	e656      	b.n	85f52 <_dtoa_r+0x7aa>
   862a4:	2100      	movs	r1, #0
   862a6:	2301      	movs	r3, #1
   862a8:	4620      	mov	r0, r4
   862aa:	6461      	str	r1, [r4, #68]	; 0x44
   862ac:	9325      	str	r3, [sp, #148]	; 0x94
   862ae:	f000 fd41 	bl	86d34 <_Balloc>
   862b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   862b4:	9004      	str	r0, [sp, #16]
   862b6:	9307      	str	r3, [sp, #28]
   862b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   862ba:	6420      	str	r0, [r4, #64]	; 0x40
   862bc:	930f      	str	r3, [sp, #60]	; 0x3c
   862be:	e627      	b.n	85f10 <_dtoa_r+0x768>
   862c0:	2a00      	cmp	r2, #0
   862c2:	46d0      	mov	r8, sl
   862c4:	f8cd b020 	str.w	fp, [sp, #32]
   862c8:	469a      	mov	sl, r3
   862ca:	dd11      	ble.n	862f0 <_dtoa_r+0xb48>
   862cc:	4649      	mov	r1, r9
   862ce:	2201      	movs	r2, #1
   862d0:	4620      	mov	r0, r4
   862d2:	f000 fedd 	bl	87090 <__lshift>
   862d6:	4641      	mov	r1, r8
   862d8:	4681      	mov	r9, r0
   862da:	f000 ff29 	bl	87130 <__mcmp>
   862de:	2800      	cmp	r0, #0
   862e0:	f340 8145 	ble.w	8656e <_dtoa_r+0xdc6>
   862e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   862e8:	f000 8105 	beq.w	864f6 <_dtoa_r+0xd4e>
   862ec:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   862f0:	46b3      	mov	fp, r6
   862f2:	f887 a000 	strb.w	sl, [r7]
   862f6:	1c7d      	adds	r5, r7, #1
   862f8:	9e08      	ldr	r6, [sp, #32]
   862fa:	e5d0      	b.n	85e9e <_dtoa_r+0x6f6>
   862fc:	d104      	bne.n	86308 <_dtoa_r+0xb60>
   862fe:	f01a 0f01 	tst.w	sl, #1
   86302:	d001      	beq.n	86308 <_dtoa_r+0xb60>
   86304:	e5bb      	b.n	85e7e <_dtoa_r+0x6d6>
   86306:	4615      	mov	r5, r2
   86308:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8630c:	1e6a      	subs	r2, r5, #1
   8630e:	2b30      	cmp	r3, #48	; 0x30
   86310:	d0f9      	beq.n	86306 <_dtoa_r+0xb5e>
   86312:	e5c4      	b.n	85e9e <_dtoa_r+0x6f6>
   86314:	2230      	movs	r2, #48	; 0x30
   86316:	9904      	ldr	r1, [sp, #16]
   86318:	700a      	strb	r2, [r1, #0]
   8631a:	9a02      	ldr	r2, [sp, #8]
   8631c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   86320:	3201      	adds	r2, #1
   86322:	9202      	str	r2, [sp, #8]
   86324:	f7ff bbfb 	b.w	85b1e <_dtoa_r+0x376>
   86328:	f000 80bb 	beq.w	864a2 <_dtoa_r+0xcfa>
   8632c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   86330:	9b02      	ldr	r3, [sp, #8]
   86332:	f04f 0a02 	mov.w	sl, #2
   86336:	425d      	negs	r5, r3
   86338:	4b82      	ldr	r3, [pc, #520]	; (86544 <_dtoa_r+0xd9c>)
   8633a:	f005 020f 	and.w	r2, r5, #15
   8633e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   86342:	e9d3 2300 	ldrd	r2, r3, [r3]
   86346:	f001 fe1b 	bl	87f80 <__aeabi_dmul>
   8634a:	112d      	asrs	r5, r5, #4
   8634c:	4607      	mov	r7, r0
   8634e:	4688      	mov	r8, r1
   86350:	f43f ae1a 	beq.w	85f88 <_dtoa_r+0x7e0>
   86354:	4e7c      	ldr	r6, [pc, #496]	; (86548 <_dtoa_r+0xda0>)
   86356:	07eb      	lsls	r3, r5, #31
   86358:	d509      	bpl.n	8636e <_dtoa_r+0xbc6>
   8635a:	e9d6 2300 	ldrd	r2, r3, [r6]
   8635e:	4638      	mov	r0, r7
   86360:	4641      	mov	r1, r8
   86362:	f001 fe0d 	bl	87f80 <__aeabi_dmul>
   86366:	4607      	mov	r7, r0
   86368:	4688      	mov	r8, r1
   8636a:	f10a 0a01 	add.w	sl, sl, #1
   8636e:	106d      	asrs	r5, r5, #1
   86370:	f106 0608 	add.w	r6, r6, #8
   86374:	d1ef      	bne.n	86356 <_dtoa_r+0xbae>
   86376:	e607      	b.n	85f88 <_dtoa_r+0x7e0>
   86378:	6871      	ldr	r1, [r6, #4]
   8637a:	4620      	mov	r0, r4
   8637c:	f000 fcda 	bl	86d34 <_Balloc>
   86380:	4605      	mov	r5, r0
   86382:	6933      	ldr	r3, [r6, #16]
   86384:	f106 010c 	add.w	r1, r6, #12
   86388:	3302      	adds	r3, #2
   8638a:	009a      	lsls	r2, r3, #2
   8638c:	300c      	adds	r0, #12
   8638e:	f000 fc57 	bl	86c40 <memcpy>
   86392:	4629      	mov	r1, r5
   86394:	2201      	movs	r2, #1
   86396:	4620      	mov	r0, r4
   86398:	f000 fe7a 	bl	87090 <__lshift>
   8639c:	9008      	str	r0, [sp, #32]
   8639e:	e4b6      	b.n	85d0e <_dtoa_r+0x566>
   863a0:	2b39      	cmp	r3, #57	; 0x39
   863a2:	f8cd b020 	str.w	fp, [sp, #32]
   863a6:	46d0      	mov	r8, sl
   863a8:	f000 80a5 	beq.w	864f6 <_dtoa_r+0xd4e>
   863ac:	f103 0a01 	add.w	sl, r3, #1
   863b0:	46b3      	mov	fp, r6
   863b2:	f887 a000 	strb.w	sl, [r7]
   863b6:	1c7d      	adds	r5, r7, #1
   863b8:	9e08      	ldr	r6, [sp, #32]
   863ba:	e570      	b.n	85e9e <_dtoa_r+0x6f6>
   863bc:	465a      	mov	r2, fp
   863be:	46d0      	mov	r8, sl
   863c0:	46b3      	mov	fp, r6
   863c2:	469a      	mov	sl, r3
   863c4:	4616      	mov	r6, r2
   863c6:	e54e      	b.n	85e66 <_dtoa_r+0x6be>
   863c8:	9812      	ldr	r0, [sp, #72]	; 0x48
   863ca:	495e      	ldr	r1, [pc, #376]	; (86544 <_dtoa_r+0xd9c>)
   863cc:	462a      	mov	r2, r5
   863ce:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   863d2:	4633      	mov	r3, r6
   863d4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   863d8:	f001 fdd2 	bl	87f80 <__aeabi_dmul>
   863dc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   863e0:	4638      	mov	r0, r7
   863e2:	4641      	mov	r1, r8
   863e4:	f002 f87c 	bl	884e0 <__aeabi_d2iz>
   863e8:	4605      	mov	r5, r0
   863ea:	f001 fd63 	bl	87eb4 <__aeabi_i2d>
   863ee:	4602      	mov	r2, r0
   863f0:	460b      	mov	r3, r1
   863f2:	4638      	mov	r0, r7
   863f4:	4641      	mov	r1, r8
   863f6:	f001 fc0f 	bl	87c18 <__aeabi_dsub>
   863fa:	4606      	mov	r6, r0
   863fc:	9812      	ldr	r0, [sp, #72]	; 0x48
   863fe:	9a04      	ldr	r2, [sp, #16]
   86400:	3530      	adds	r5, #48	; 0x30
   86402:	2801      	cmp	r0, #1
   86404:	7015      	strb	r5, [r2, #0]
   86406:	460f      	mov	r7, r1
   86408:	f102 0501 	add.w	r5, r2, #1
   8640c:	d026      	beq.n	8645c <_dtoa_r+0xcb4>
   8640e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86410:	9a04      	ldr	r2, [sp, #16]
   86412:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   86416:	4413      	add	r3, r2
   86418:	f04f 0a00 	mov.w	sl, #0
   8641c:	4699      	mov	r9, r3
   8641e:	f8df b130 	ldr.w	fp, [pc, #304]	; 86550 <_dtoa_r+0xda8>
   86422:	4652      	mov	r2, sl
   86424:	465b      	mov	r3, fp
   86426:	4630      	mov	r0, r6
   86428:	4639      	mov	r1, r7
   8642a:	f001 fda9 	bl	87f80 <__aeabi_dmul>
   8642e:	460f      	mov	r7, r1
   86430:	4606      	mov	r6, r0
   86432:	f002 f855 	bl	884e0 <__aeabi_d2iz>
   86436:	4680      	mov	r8, r0
   86438:	f001 fd3c 	bl	87eb4 <__aeabi_i2d>
   8643c:	4602      	mov	r2, r0
   8643e:	460b      	mov	r3, r1
   86440:	4630      	mov	r0, r6
   86442:	4639      	mov	r1, r7
   86444:	f001 fbe8 	bl	87c18 <__aeabi_dsub>
   86448:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8644c:	f805 8b01 	strb.w	r8, [r5], #1
   86450:	454d      	cmp	r5, r9
   86452:	4606      	mov	r6, r0
   86454:	460f      	mov	r7, r1
   86456:	d1e4      	bne.n	86422 <_dtoa_r+0xc7a>
   86458:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8645c:	2200      	movs	r2, #0
   8645e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   86462:	4b3a      	ldr	r3, [pc, #232]	; (8654c <_dtoa_r+0xda4>)
   86464:	f001 fbda 	bl	87c1c <__adddf3>
   86468:	4632      	mov	r2, r6
   8646a:	463b      	mov	r3, r7
   8646c:	f001 fffa 	bl	88464 <__aeabi_dcmplt>
   86470:	2800      	cmp	r0, #0
   86472:	d046      	beq.n	86502 <_dtoa_r+0xd5a>
   86474:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86476:	9302      	str	r3, [sp, #8]
   86478:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8647c:	f7ff bb42 	b.w	85b04 <_dtoa_r+0x35c>
   86480:	f04f 0800 	mov.w	r8, #0
   86484:	4646      	mov	r6, r8
   86486:	e6a8      	b.n	861da <_dtoa_r+0xa32>
   86488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8648a:	9a07      	ldr	r2, [sp, #28]
   8648c:	1a9d      	subs	r5, r3, r2
   8648e:	2300      	movs	r3, #0
   86490:	f7ff bb70 	b.w	85b74 <_dtoa_r+0x3cc>
   86494:	9b18      	ldr	r3, [sp, #96]	; 0x60
   86496:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86498:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8649c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8649e:	f7ff bb69 	b.w	85b74 <_dtoa_r+0x3cc>
   864a2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   864a6:	f04f 0a02 	mov.w	sl, #2
   864aa:	e56d      	b.n	85f88 <_dtoa_r+0x7e0>
   864ac:	9b07      	ldr	r3, [sp, #28]
   864ae:	2b00      	cmp	r3, #0
   864b0:	f43f aeb8 	beq.w	86224 <_dtoa_r+0xa7c>
   864b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   864b6:	2b00      	cmp	r3, #0
   864b8:	f77f aede 	ble.w	86278 <_dtoa_r+0xad0>
   864bc:	2200      	movs	r2, #0
   864be:	4b24      	ldr	r3, [pc, #144]	; (86550 <_dtoa_r+0xda8>)
   864c0:	4638      	mov	r0, r7
   864c2:	4641      	mov	r1, r8
   864c4:	f001 fd5c 	bl	87f80 <__aeabi_dmul>
   864c8:	4607      	mov	r7, r0
   864ca:	4688      	mov	r8, r1
   864cc:	f10a 0001 	add.w	r0, sl, #1
   864d0:	f001 fcf0 	bl	87eb4 <__aeabi_i2d>
   864d4:	463a      	mov	r2, r7
   864d6:	4643      	mov	r3, r8
   864d8:	f001 fd52 	bl	87f80 <__aeabi_dmul>
   864dc:	2200      	movs	r2, #0
   864de:	4b17      	ldr	r3, [pc, #92]	; (8653c <_dtoa_r+0xd94>)
   864e0:	f001 fb9c 	bl	87c1c <__adddf3>
   864e4:	9a02      	ldr	r2, [sp, #8]
   864e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   864e8:	3a01      	subs	r2, #1
   864ea:	4605      	mov	r5, r0
   864ec:	9215      	str	r2, [sp, #84]	; 0x54
   864ee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   864f2:	9312      	str	r3, [sp, #72]	; 0x48
   864f4:	e569      	b.n	85fca <_dtoa_r+0x822>
   864f6:	2239      	movs	r2, #57	; 0x39
   864f8:	46b3      	mov	fp, r6
   864fa:	703a      	strb	r2, [r7, #0]
   864fc:	9e08      	ldr	r6, [sp, #32]
   864fe:	1c7d      	adds	r5, r7, #1
   86500:	e4bf      	b.n	85e82 <_dtoa_r+0x6da>
   86502:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   86506:	2000      	movs	r0, #0
   86508:	4910      	ldr	r1, [pc, #64]	; (8654c <_dtoa_r+0xda4>)
   8650a:	f001 fb85 	bl	87c18 <__aeabi_dsub>
   8650e:	4632      	mov	r2, r6
   86510:	463b      	mov	r3, r7
   86512:	f001 ffc5 	bl	884a0 <__aeabi_dcmpgt>
   86516:	b908      	cbnz	r0, 8651c <_dtoa_r+0xd74>
   86518:	e6ae      	b.n	86278 <_dtoa_r+0xad0>
   8651a:	4615      	mov	r5, r2
   8651c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   86520:	1e6a      	subs	r2, r5, #1
   86522:	2b30      	cmp	r3, #48	; 0x30
   86524:	d0f9      	beq.n	8651a <_dtoa_r+0xd72>
   86526:	e5d7      	b.n	860d8 <_dtoa_r+0x930>
   86528:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8652c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8652e:	9302      	str	r3, [sp, #8]
   86530:	f7ff bae8 	b.w	85b04 <_dtoa_r+0x35c>
   86534:	970c      	str	r7, [sp, #48]	; 0x30
   86536:	f7ff bba7 	b.w	85c88 <_dtoa_r+0x4e0>
   8653a:	bf00      	nop
   8653c:	401c0000 	.word	0x401c0000
   86540:	40140000 	.word	0x40140000
   86544:	000898d8 	.word	0x000898d8
   86548:	000898b0 	.word	0x000898b0
   8654c:	3fe00000 	.word	0x3fe00000
   86550:	40240000 	.word	0x40240000
   86554:	2b39      	cmp	r3, #57	; 0x39
   86556:	f8cd b020 	str.w	fp, [sp, #32]
   8655a:	46d0      	mov	r8, sl
   8655c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86560:	469a      	mov	sl, r3
   86562:	d0c8      	beq.n	864f6 <_dtoa_r+0xd4e>
   86564:	f1bb 0f00 	cmp.w	fp, #0
   86568:	f73f aec0 	bgt.w	862ec <_dtoa_r+0xb44>
   8656c:	e6c0      	b.n	862f0 <_dtoa_r+0xb48>
   8656e:	f47f aebf 	bne.w	862f0 <_dtoa_r+0xb48>
   86572:	f01a 0f01 	tst.w	sl, #1
   86576:	f43f aebb 	beq.w	862f0 <_dtoa_r+0xb48>
   8657a:	e6b3      	b.n	862e4 <_dtoa_r+0xb3c>
   8657c:	f04f 0800 	mov.w	r8, #0
   86580:	4646      	mov	r6, r8
   86582:	e5e8      	b.n	86156 <_dtoa_r+0x9ae>
   86584:	4631      	mov	r1, r6
   86586:	2300      	movs	r3, #0
   86588:	220a      	movs	r2, #10
   8658a:	4620      	mov	r0, r4
   8658c:	f000 fc02 	bl	86d94 <__multadd>
   86590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86592:	4606      	mov	r6, r0
   86594:	2b00      	cmp	r3, #0
   86596:	dd07      	ble.n	865a8 <_dtoa_r+0xe00>
   86598:	9307      	str	r3, [sp, #28]
   8659a:	f7ff bbab 	b.w	85cf4 <_dtoa_r+0x54c>
   8659e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   865a0:	2b02      	cmp	r3, #2
   865a2:	dc1f      	bgt.n	865e4 <_dtoa_r+0xe3c>
   865a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   865a6:	e43c      	b.n	85e22 <_dtoa_r+0x67a>
   865a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   865aa:	2b02      	cmp	r3, #2
   865ac:	dc1a      	bgt.n	865e4 <_dtoa_r+0xe3c>
   865ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   865b0:	e7f2      	b.n	86598 <_dtoa_r+0xdf0>
   865b2:	f43f ab81 	beq.w	85cb8 <_dtoa_r+0x510>
   865b6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   865ba:	e411      	b.n	85de0 <_dtoa_r+0x638>
   865bc:	2500      	movs	r5, #0
   865be:	4620      	mov	r0, r4
   865c0:	6465      	str	r5, [r4, #68]	; 0x44
   865c2:	4629      	mov	r1, r5
   865c4:	f000 fbb6 	bl	86d34 <_Balloc>
   865c8:	f04f 33ff 	mov.w	r3, #4294967295
   865cc:	9307      	str	r3, [sp, #28]
   865ce:	930f      	str	r3, [sp, #60]	; 0x3c
   865d0:	2301      	movs	r3, #1
   865d2:	9004      	str	r0, [sp, #16]
   865d4:	9525      	str	r5, [sp, #148]	; 0x94
   865d6:	6420      	str	r0, [r4, #64]	; 0x40
   865d8:	930b      	str	r3, [sp, #44]	; 0x2c
   865da:	f7ff b9e0 	b.w	8599e <_dtoa_r+0x1f6>
   865de:	2501      	movs	r5, #1
   865e0:	f7ff b9a8 	b.w	85934 <_dtoa_r+0x18c>
   865e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   865e6:	9307      	str	r3, [sp, #28]
   865e8:	e5e8      	b.n	861bc <_dtoa_r+0xa14>
   865ea:	bf00      	nop

000865ec <__libc_fini_array>:
   865ec:	b538      	push	{r3, r4, r5, lr}
   865ee:	4c0a      	ldr	r4, [pc, #40]	; (86618 <__libc_fini_array+0x2c>)
   865f0:	4d0a      	ldr	r5, [pc, #40]	; (8661c <__libc_fini_array+0x30>)
   865f2:	1b64      	subs	r4, r4, r5
   865f4:	10a4      	asrs	r4, r4, #2
   865f6:	d00a      	beq.n	8660e <__libc_fini_array+0x22>
   865f8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   865fc:	3b01      	subs	r3, #1
   865fe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   86602:	3c01      	subs	r4, #1
   86604:	f855 3904 	ldr.w	r3, [r5], #-4
   86608:	4798      	blx	r3
   8660a:	2c00      	cmp	r4, #0
   8660c:	d1f9      	bne.n	86602 <__libc_fini_array+0x16>
   8660e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   86612:	f003 ba57 	b.w	89ac4 <_fini>
   86616:	bf00      	nop
   86618:	00089ad4 	.word	0x00089ad4
   8661c:	00089ad0 	.word	0x00089ad0

00086620 <__locale_ctype_ptr_l>:
   86620:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   86624:	4770      	bx	lr
   86626:	bf00      	nop

00086628 <_localeconv_r>:
   86628:	4a04      	ldr	r2, [pc, #16]	; (8663c <_localeconv_r+0x14>)
   8662a:	4b05      	ldr	r3, [pc, #20]	; (86640 <_localeconv_r+0x18>)
   8662c:	6812      	ldr	r2, [r2, #0]
   8662e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   86630:	2800      	cmp	r0, #0
   86632:	bf08      	it	eq
   86634:	4618      	moveq	r0, r3
   86636:	30f0      	adds	r0, #240	; 0xf0
   86638:	4770      	bx	lr
   8663a:	bf00      	nop
   8663c:	20000634 	.word	0x20000634
   86640:	20000a60 	.word	0x20000a60

00086644 <_malloc_r>:
   86644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86648:	f101 060b 	add.w	r6, r1, #11
   8664c:	2e16      	cmp	r6, #22
   8664e:	b083      	sub	sp, #12
   86650:	4605      	mov	r5, r0
   86652:	f240 809e 	bls.w	86792 <_malloc_r+0x14e>
   86656:	f036 0607 	bics.w	r6, r6, #7
   8665a:	f100 80bd 	bmi.w	867d8 <_malloc_r+0x194>
   8665e:	42b1      	cmp	r1, r6
   86660:	f200 80ba 	bhi.w	867d8 <_malloc_r+0x194>
   86664:	f000 fb62 	bl	86d2c <__malloc_lock>
   86668:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8666c:	f0c0 8285 	bcc.w	86b7a <_malloc_r+0x536>
   86670:	0a73      	lsrs	r3, r6, #9
   86672:	f000 80b8 	beq.w	867e6 <_malloc_r+0x1a2>
   86676:	2b04      	cmp	r3, #4
   86678:	f200 816c 	bhi.w	86954 <_malloc_r+0x310>
   8667c:	09b3      	lsrs	r3, r6, #6
   8667e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   86682:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   86686:	00c1      	lsls	r1, r0, #3
   86688:	4fb8      	ldr	r7, [pc, #736]	; (8696c <_malloc_r+0x328>)
   8668a:	4439      	add	r1, r7
   8668c:	684c      	ldr	r4, [r1, #4]
   8668e:	3908      	subs	r1, #8
   86690:	42a1      	cmp	r1, r4
   86692:	d106      	bne.n	866a2 <_malloc_r+0x5e>
   86694:	e00c      	b.n	866b0 <_malloc_r+0x6c>
   86696:	2a00      	cmp	r2, #0
   86698:	f280 80ab 	bge.w	867f2 <_malloc_r+0x1ae>
   8669c:	68e4      	ldr	r4, [r4, #12]
   8669e:	42a1      	cmp	r1, r4
   866a0:	d006      	beq.n	866b0 <_malloc_r+0x6c>
   866a2:	6863      	ldr	r3, [r4, #4]
   866a4:	f023 0303 	bic.w	r3, r3, #3
   866a8:	1b9a      	subs	r2, r3, r6
   866aa:	2a0f      	cmp	r2, #15
   866ac:	ddf3      	ble.n	86696 <_malloc_r+0x52>
   866ae:	4670      	mov	r0, lr
   866b0:	693c      	ldr	r4, [r7, #16]
   866b2:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 86980 <_malloc_r+0x33c>
   866b6:	4574      	cmp	r4, lr
   866b8:	f000 819e 	beq.w	869f8 <_malloc_r+0x3b4>
   866bc:	6863      	ldr	r3, [r4, #4]
   866be:	f023 0303 	bic.w	r3, r3, #3
   866c2:	1b9a      	subs	r2, r3, r6
   866c4:	2a0f      	cmp	r2, #15
   866c6:	f300 8183 	bgt.w	869d0 <_malloc_r+0x38c>
   866ca:	2a00      	cmp	r2, #0
   866cc:	f8c7 e014 	str.w	lr, [r7, #20]
   866d0:	f8c7 e010 	str.w	lr, [r7, #16]
   866d4:	f280 8091 	bge.w	867fa <_malloc_r+0x1b6>
   866d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   866dc:	f080 8154 	bcs.w	86988 <_malloc_r+0x344>
   866e0:	2201      	movs	r2, #1
   866e2:	08db      	lsrs	r3, r3, #3
   866e4:	6879      	ldr	r1, [r7, #4]
   866e6:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   866ea:	4413      	add	r3, r2
   866ec:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   866f0:	fa02 f20c 	lsl.w	r2, r2, ip
   866f4:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   866f8:	430a      	orrs	r2, r1
   866fa:	f1ac 0108 	sub.w	r1, ip, #8
   866fe:	60e1      	str	r1, [r4, #12]
   86700:	f8c4 8008 	str.w	r8, [r4, #8]
   86704:	607a      	str	r2, [r7, #4]
   86706:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8670a:	f8c8 400c 	str.w	r4, [r8, #12]
   8670e:	2401      	movs	r4, #1
   86710:	1083      	asrs	r3, r0, #2
   86712:	409c      	lsls	r4, r3
   86714:	4294      	cmp	r4, r2
   86716:	d87d      	bhi.n	86814 <_malloc_r+0x1d0>
   86718:	4214      	tst	r4, r2
   8671a:	d106      	bne.n	8672a <_malloc_r+0xe6>
   8671c:	f020 0003 	bic.w	r0, r0, #3
   86720:	0064      	lsls	r4, r4, #1
   86722:	4214      	tst	r4, r2
   86724:	f100 0004 	add.w	r0, r0, #4
   86728:	d0fa      	beq.n	86720 <_malloc_r+0xdc>
   8672a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8672e:	46cc      	mov	ip, r9
   86730:	4680      	mov	r8, r0
   86732:	f8dc 300c 	ldr.w	r3, [ip, #12]
   86736:	459c      	cmp	ip, r3
   86738:	d107      	bne.n	8674a <_malloc_r+0x106>
   8673a:	e15f      	b.n	869fc <_malloc_r+0x3b8>
   8673c:	2a00      	cmp	r2, #0
   8673e:	f280 816d 	bge.w	86a1c <_malloc_r+0x3d8>
   86742:	68db      	ldr	r3, [r3, #12]
   86744:	459c      	cmp	ip, r3
   86746:	f000 8159 	beq.w	869fc <_malloc_r+0x3b8>
   8674a:	6859      	ldr	r1, [r3, #4]
   8674c:	f021 0103 	bic.w	r1, r1, #3
   86750:	1b8a      	subs	r2, r1, r6
   86752:	2a0f      	cmp	r2, #15
   86754:	ddf2      	ble.n	8673c <_malloc_r+0xf8>
   86756:	68dc      	ldr	r4, [r3, #12]
   86758:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8675c:	f046 0801 	orr.w	r8, r6, #1
   86760:	4628      	mov	r0, r5
   86762:	441e      	add	r6, r3
   86764:	f042 0501 	orr.w	r5, r2, #1
   86768:	f8c3 8004 	str.w	r8, [r3, #4]
   8676c:	f8cc 400c 	str.w	r4, [ip, #12]
   86770:	f8c4 c008 	str.w	ip, [r4, #8]
   86774:	617e      	str	r6, [r7, #20]
   86776:	613e      	str	r6, [r7, #16]
   86778:	f8c6 e00c 	str.w	lr, [r6, #12]
   8677c:	f8c6 e008 	str.w	lr, [r6, #8]
   86780:	6075      	str	r5, [r6, #4]
   86782:	505a      	str	r2, [r3, r1]
   86784:	9300      	str	r3, [sp, #0]
   86786:	f000 fad3 	bl	86d30 <__malloc_unlock>
   8678a:	9b00      	ldr	r3, [sp, #0]
   8678c:	f103 0408 	add.w	r4, r3, #8
   86790:	e01e      	b.n	867d0 <_malloc_r+0x18c>
   86792:	2910      	cmp	r1, #16
   86794:	d820      	bhi.n	867d8 <_malloc_r+0x194>
   86796:	f000 fac9 	bl	86d2c <__malloc_lock>
   8679a:	2610      	movs	r6, #16
   8679c:	2318      	movs	r3, #24
   8679e:	2002      	movs	r0, #2
   867a0:	4f72      	ldr	r7, [pc, #456]	; (8696c <_malloc_r+0x328>)
   867a2:	443b      	add	r3, r7
   867a4:	685c      	ldr	r4, [r3, #4]
   867a6:	f1a3 0208 	sub.w	r2, r3, #8
   867aa:	4294      	cmp	r4, r2
   867ac:	f000 812f 	beq.w	86a0e <_malloc_r+0x3ca>
   867b0:	6863      	ldr	r3, [r4, #4]
   867b2:	68e1      	ldr	r1, [r4, #12]
   867b4:	f023 0303 	bic.w	r3, r3, #3
   867b8:	4423      	add	r3, r4
   867ba:	685a      	ldr	r2, [r3, #4]
   867bc:	68a6      	ldr	r6, [r4, #8]
   867be:	f042 0201 	orr.w	r2, r2, #1
   867c2:	60f1      	str	r1, [r6, #12]
   867c4:	4628      	mov	r0, r5
   867c6:	608e      	str	r6, [r1, #8]
   867c8:	605a      	str	r2, [r3, #4]
   867ca:	f000 fab1 	bl	86d30 <__malloc_unlock>
   867ce:	3408      	adds	r4, #8
   867d0:	4620      	mov	r0, r4
   867d2:	b003      	add	sp, #12
   867d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   867d8:	2400      	movs	r4, #0
   867da:	230c      	movs	r3, #12
   867dc:	4620      	mov	r0, r4
   867de:	602b      	str	r3, [r5, #0]
   867e0:	b003      	add	sp, #12
   867e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   867e6:	2040      	movs	r0, #64	; 0x40
   867e8:	f44f 7100 	mov.w	r1, #512	; 0x200
   867ec:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   867f0:	e74a      	b.n	86688 <_malloc_r+0x44>
   867f2:	4423      	add	r3, r4
   867f4:	685a      	ldr	r2, [r3, #4]
   867f6:	68e1      	ldr	r1, [r4, #12]
   867f8:	e7e0      	b.n	867bc <_malloc_r+0x178>
   867fa:	4423      	add	r3, r4
   867fc:	685a      	ldr	r2, [r3, #4]
   867fe:	4628      	mov	r0, r5
   86800:	f042 0201 	orr.w	r2, r2, #1
   86804:	605a      	str	r2, [r3, #4]
   86806:	3408      	adds	r4, #8
   86808:	f000 fa92 	bl	86d30 <__malloc_unlock>
   8680c:	4620      	mov	r0, r4
   8680e:	b003      	add	sp, #12
   86810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86814:	68bc      	ldr	r4, [r7, #8]
   86816:	6863      	ldr	r3, [r4, #4]
   86818:	f023 0803 	bic.w	r8, r3, #3
   8681c:	45b0      	cmp	r8, r6
   8681e:	d304      	bcc.n	8682a <_malloc_r+0x1e6>
   86820:	eba8 0306 	sub.w	r3, r8, r6
   86824:	2b0f      	cmp	r3, #15
   86826:	f300 8085 	bgt.w	86934 <_malloc_r+0x2f0>
   8682a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 86984 <_malloc_r+0x340>
   8682e:	4b50      	ldr	r3, [pc, #320]	; (86970 <_malloc_r+0x32c>)
   86830:	f8d9 2000 	ldr.w	r2, [r9]
   86834:	681b      	ldr	r3, [r3, #0]
   86836:	3201      	adds	r2, #1
   86838:	4433      	add	r3, r6
   8683a:	eb04 0a08 	add.w	sl, r4, r8
   8683e:	f000 8154 	beq.w	86aea <_malloc_r+0x4a6>
   86842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   86846:	330f      	adds	r3, #15
   86848:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8684c:	f02b 0b0f 	bic.w	fp, fp, #15
   86850:	4659      	mov	r1, fp
   86852:	4628      	mov	r0, r5
   86854:	f000 fd6a 	bl	8732c <_sbrk_r>
   86858:	1c41      	adds	r1, r0, #1
   8685a:	4602      	mov	r2, r0
   8685c:	f000 80fb 	beq.w	86a56 <_malloc_r+0x412>
   86860:	4582      	cmp	sl, r0
   86862:	f200 80f6 	bhi.w	86a52 <_malloc_r+0x40e>
   86866:	4b43      	ldr	r3, [pc, #268]	; (86974 <_malloc_r+0x330>)
   86868:	6819      	ldr	r1, [r3, #0]
   8686a:	4459      	add	r1, fp
   8686c:	6019      	str	r1, [r3, #0]
   8686e:	f000 814c 	beq.w	86b0a <_malloc_r+0x4c6>
   86872:	f8d9 0000 	ldr.w	r0, [r9]
   86876:	3001      	adds	r0, #1
   86878:	bf1b      	ittet	ne
   8687a:	eba2 0a0a 	subne.w	sl, r2, sl
   8687e:	4451      	addne	r1, sl
   86880:	f8c9 2000 	streq.w	r2, [r9]
   86884:	6019      	strne	r1, [r3, #0]
   86886:	f012 0107 	ands.w	r1, r2, #7
   8688a:	f000 8114 	beq.w	86ab6 <_malloc_r+0x472>
   8688e:	f1c1 0008 	rsb	r0, r1, #8
   86892:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   86896:	4402      	add	r2, r0
   86898:	3108      	adds	r1, #8
   8689a:	eb02 090b 	add.w	r9, r2, fp
   8689e:	f3c9 090b 	ubfx	r9, r9, #0, #12
   868a2:	eba1 0909 	sub.w	r9, r1, r9
   868a6:	4649      	mov	r1, r9
   868a8:	4628      	mov	r0, r5
   868aa:	9301      	str	r3, [sp, #4]
   868ac:	9200      	str	r2, [sp, #0]
   868ae:	f000 fd3d 	bl	8732c <_sbrk_r>
   868b2:	1c43      	adds	r3, r0, #1
   868b4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   868b8:	f000 8142 	beq.w	86b40 <_malloc_r+0x4fc>
   868bc:	1a80      	subs	r0, r0, r2
   868be:	4448      	add	r0, r9
   868c0:	f040 0001 	orr.w	r0, r0, #1
   868c4:	6819      	ldr	r1, [r3, #0]
   868c6:	42bc      	cmp	r4, r7
   868c8:	4449      	add	r1, r9
   868ca:	60ba      	str	r2, [r7, #8]
   868cc:	6019      	str	r1, [r3, #0]
   868ce:	6050      	str	r0, [r2, #4]
   868d0:	d017      	beq.n	86902 <_malloc_r+0x2be>
   868d2:	f1b8 0f0f 	cmp.w	r8, #15
   868d6:	f240 80fa 	bls.w	86ace <_malloc_r+0x48a>
   868da:	f04f 0c05 	mov.w	ip, #5
   868de:	6862      	ldr	r2, [r4, #4]
   868e0:	f1a8 000c 	sub.w	r0, r8, #12
   868e4:	f020 0007 	bic.w	r0, r0, #7
   868e8:	f002 0201 	and.w	r2, r2, #1
   868ec:	eb04 0e00 	add.w	lr, r4, r0
   868f0:	4302      	orrs	r2, r0
   868f2:	280f      	cmp	r0, #15
   868f4:	6062      	str	r2, [r4, #4]
   868f6:	f8ce c004 	str.w	ip, [lr, #4]
   868fa:	f8ce c008 	str.w	ip, [lr, #8]
   868fe:	f200 8116 	bhi.w	86b2e <_malloc_r+0x4ea>
   86902:	4b1d      	ldr	r3, [pc, #116]	; (86978 <_malloc_r+0x334>)
   86904:	68bc      	ldr	r4, [r7, #8]
   86906:	681a      	ldr	r2, [r3, #0]
   86908:	4291      	cmp	r1, r2
   8690a:	bf88      	it	hi
   8690c:	6019      	strhi	r1, [r3, #0]
   8690e:	4b1b      	ldr	r3, [pc, #108]	; (8697c <_malloc_r+0x338>)
   86910:	681a      	ldr	r2, [r3, #0]
   86912:	4291      	cmp	r1, r2
   86914:	6862      	ldr	r2, [r4, #4]
   86916:	bf88      	it	hi
   86918:	6019      	strhi	r1, [r3, #0]
   8691a:	f022 0203 	bic.w	r2, r2, #3
   8691e:	4296      	cmp	r6, r2
   86920:	eba2 0306 	sub.w	r3, r2, r6
   86924:	d801      	bhi.n	8692a <_malloc_r+0x2e6>
   86926:	2b0f      	cmp	r3, #15
   86928:	dc04      	bgt.n	86934 <_malloc_r+0x2f0>
   8692a:	4628      	mov	r0, r5
   8692c:	f000 fa00 	bl	86d30 <__malloc_unlock>
   86930:	2400      	movs	r4, #0
   86932:	e74d      	b.n	867d0 <_malloc_r+0x18c>
   86934:	f046 0201 	orr.w	r2, r6, #1
   86938:	f043 0301 	orr.w	r3, r3, #1
   8693c:	4426      	add	r6, r4
   8693e:	6062      	str	r2, [r4, #4]
   86940:	4628      	mov	r0, r5
   86942:	60be      	str	r6, [r7, #8]
   86944:	3408      	adds	r4, #8
   86946:	6073      	str	r3, [r6, #4]
   86948:	f000 f9f2 	bl	86d30 <__malloc_unlock>
   8694c:	4620      	mov	r0, r4
   8694e:	b003      	add	sp, #12
   86950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86954:	2b14      	cmp	r3, #20
   86956:	d970      	bls.n	86a3a <_malloc_r+0x3f6>
   86958:	2b54      	cmp	r3, #84	; 0x54
   8695a:	f200 80a2 	bhi.w	86aa2 <_malloc_r+0x45e>
   8695e:	0b33      	lsrs	r3, r6, #12
   86960:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   86964:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   86968:	00c1      	lsls	r1, r0, #3
   8696a:	e68d      	b.n	86688 <_malloc_r+0x44>
   8696c:	20000bcc 	.word	0x20000bcc
   86970:	200010b4 	.word	0x200010b4
   86974:	20001084 	.word	0x20001084
   86978:	200010ac 	.word	0x200010ac
   8697c:	200010b0 	.word	0x200010b0
   86980:	20000bd4 	.word	0x20000bd4
   86984:	20000fd4 	.word	0x20000fd4
   86988:	0a5a      	lsrs	r2, r3, #9
   8698a:	2a04      	cmp	r2, #4
   8698c:	d95b      	bls.n	86a46 <_malloc_r+0x402>
   8698e:	2a14      	cmp	r2, #20
   86990:	f200 80ae 	bhi.w	86af0 <_malloc_r+0x4ac>
   86994:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   86998:	00c9      	lsls	r1, r1, #3
   8699a:	325b      	adds	r2, #91	; 0x5b
   8699c:	eb07 0c01 	add.w	ip, r7, r1
   869a0:	5879      	ldr	r1, [r7, r1]
   869a2:	f1ac 0c08 	sub.w	ip, ip, #8
   869a6:	458c      	cmp	ip, r1
   869a8:	f000 8088 	beq.w	86abc <_malloc_r+0x478>
   869ac:	684a      	ldr	r2, [r1, #4]
   869ae:	f022 0203 	bic.w	r2, r2, #3
   869b2:	4293      	cmp	r3, r2
   869b4:	d273      	bcs.n	86a9e <_malloc_r+0x45a>
   869b6:	6889      	ldr	r1, [r1, #8]
   869b8:	458c      	cmp	ip, r1
   869ba:	d1f7      	bne.n	869ac <_malloc_r+0x368>
   869bc:	f8dc 300c 	ldr.w	r3, [ip, #12]
   869c0:	687a      	ldr	r2, [r7, #4]
   869c2:	60e3      	str	r3, [r4, #12]
   869c4:	f8c4 c008 	str.w	ip, [r4, #8]
   869c8:	609c      	str	r4, [r3, #8]
   869ca:	f8cc 400c 	str.w	r4, [ip, #12]
   869ce:	e69e      	b.n	8670e <_malloc_r+0xca>
   869d0:	f046 0c01 	orr.w	ip, r6, #1
   869d4:	f042 0101 	orr.w	r1, r2, #1
   869d8:	4426      	add	r6, r4
   869da:	f8c4 c004 	str.w	ip, [r4, #4]
   869de:	4628      	mov	r0, r5
   869e0:	617e      	str	r6, [r7, #20]
   869e2:	613e      	str	r6, [r7, #16]
   869e4:	f8c6 e00c 	str.w	lr, [r6, #12]
   869e8:	f8c6 e008 	str.w	lr, [r6, #8]
   869ec:	6071      	str	r1, [r6, #4]
   869ee:	50e2      	str	r2, [r4, r3]
   869f0:	f000 f99e 	bl	86d30 <__malloc_unlock>
   869f4:	3408      	adds	r4, #8
   869f6:	e6eb      	b.n	867d0 <_malloc_r+0x18c>
   869f8:	687a      	ldr	r2, [r7, #4]
   869fa:	e688      	b.n	8670e <_malloc_r+0xca>
   869fc:	f108 0801 	add.w	r8, r8, #1
   86a00:	f018 0f03 	tst.w	r8, #3
   86a04:	f10c 0c08 	add.w	ip, ip, #8
   86a08:	f47f ae93 	bne.w	86732 <_malloc_r+0xee>
   86a0c:	e02d      	b.n	86a6a <_malloc_r+0x426>
   86a0e:	68dc      	ldr	r4, [r3, #12]
   86a10:	42a3      	cmp	r3, r4
   86a12:	bf08      	it	eq
   86a14:	3002      	addeq	r0, #2
   86a16:	f43f ae4b 	beq.w	866b0 <_malloc_r+0x6c>
   86a1a:	e6c9      	b.n	867b0 <_malloc_r+0x16c>
   86a1c:	461c      	mov	r4, r3
   86a1e:	4419      	add	r1, r3
   86a20:	684a      	ldr	r2, [r1, #4]
   86a22:	68db      	ldr	r3, [r3, #12]
   86a24:	f854 6f08 	ldr.w	r6, [r4, #8]!
   86a28:	f042 0201 	orr.w	r2, r2, #1
   86a2c:	604a      	str	r2, [r1, #4]
   86a2e:	4628      	mov	r0, r5
   86a30:	60f3      	str	r3, [r6, #12]
   86a32:	609e      	str	r6, [r3, #8]
   86a34:	f000 f97c 	bl	86d30 <__malloc_unlock>
   86a38:	e6ca      	b.n	867d0 <_malloc_r+0x18c>
   86a3a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   86a3e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   86a42:	00c1      	lsls	r1, r0, #3
   86a44:	e620      	b.n	86688 <_malloc_r+0x44>
   86a46:	099a      	lsrs	r2, r3, #6
   86a48:	f102 0139 	add.w	r1, r2, #57	; 0x39
   86a4c:	00c9      	lsls	r1, r1, #3
   86a4e:	3238      	adds	r2, #56	; 0x38
   86a50:	e7a4      	b.n	8699c <_malloc_r+0x358>
   86a52:	42bc      	cmp	r4, r7
   86a54:	d054      	beq.n	86b00 <_malloc_r+0x4bc>
   86a56:	68bc      	ldr	r4, [r7, #8]
   86a58:	6862      	ldr	r2, [r4, #4]
   86a5a:	f022 0203 	bic.w	r2, r2, #3
   86a5e:	e75e      	b.n	8691e <_malloc_r+0x2da>
   86a60:	f859 3908 	ldr.w	r3, [r9], #-8
   86a64:	4599      	cmp	r9, r3
   86a66:	f040 8086 	bne.w	86b76 <_malloc_r+0x532>
   86a6a:	f010 0f03 	tst.w	r0, #3
   86a6e:	f100 30ff 	add.w	r0, r0, #4294967295
   86a72:	d1f5      	bne.n	86a60 <_malloc_r+0x41c>
   86a74:	687b      	ldr	r3, [r7, #4]
   86a76:	ea23 0304 	bic.w	r3, r3, r4
   86a7a:	607b      	str	r3, [r7, #4]
   86a7c:	0064      	lsls	r4, r4, #1
   86a7e:	429c      	cmp	r4, r3
   86a80:	f63f aec8 	bhi.w	86814 <_malloc_r+0x1d0>
   86a84:	2c00      	cmp	r4, #0
   86a86:	f43f aec5 	beq.w	86814 <_malloc_r+0x1d0>
   86a8a:	421c      	tst	r4, r3
   86a8c:	4640      	mov	r0, r8
   86a8e:	f47f ae4c 	bne.w	8672a <_malloc_r+0xe6>
   86a92:	0064      	lsls	r4, r4, #1
   86a94:	421c      	tst	r4, r3
   86a96:	f100 0004 	add.w	r0, r0, #4
   86a9a:	d0fa      	beq.n	86a92 <_malloc_r+0x44e>
   86a9c:	e645      	b.n	8672a <_malloc_r+0xe6>
   86a9e:	468c      	mov	ip, r1
   86aa0:	e78c      	b.n	869bc <_malloc_r+0x378>
   86aa2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86aa6:	d815      	bhi.n	86ad4 <_malloc_r+0x490>
   86aa8:	0bf3      	lsrs	r3, r6, #15
   86aaa:	f103 0078 	add.w	r0, r3, #120	; 0x78
   86aae:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   86ab2:	00c1      	lsls	r1, r0, #3
   86ab4:	e5e8      	b.n	86688 <_malloc_r+0x44>
   86ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   86aba:	e6ee      	b.n	8689a <_malloc_r+0x256>
   86abc:	2101      	movs	r1, #1
   86abe:	687b      	ldr	r3, [r7, #4]
   86ac0:	1092      	asrs	r2, r2, #2
   86ac2:	fa01 f202 	lsl.w	r2, r1, r2
   86ac6:	431a      	orrs	r2, r3
   86ac8:	607a      	str	r2, [r7, #4]
   86aca:	4663      	mov	r3, ip
   86acc:	e779      	b.n	869c2 <_malloc_r+0x37e>
   86ace:	2301      	movs	r3, #1
   86ad0:	6053      	str	r3, [r2, #4]
   86ad2:	e72a      	b.n	8692a <_malloc_r+0x2e6>
   86ad4:	f240 5254 	movw	r2, #1364	; 0x554
   86ad8:	4293      	cmp	r3, r2
   86ada:	d822      	bhi.n	86b22 <_malloc_r+0x4de>
   86adc:	0cb3      	lsrs	r3, r6, #18
   86ade:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   86ae2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   86ae6:	00c1      	lsls	r1, r0, #3
   86ae8:	e5ce      	b.n	86688 <_malloc_r+0x44>
   86aea:	f103 0b10 	add.w	fp, r3, #16
   86aee:	e6af      	b.n	86850 <_malloc_r+0x20c>
   86af0:	2a54      	cmp	r2, #84	; 0x54
   86af2:	d829      	bhi.n	86b48 <_malloc_r+0x504>
   86af4:	0b1a      	lsrs	r2, r3, #12
   86af6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   86afa:	00c9      	lsls	r1, r1, #3
   86afc:	326e      	adds	r2, #110	; 0x6e
   86afe:	e74d      	b.n	8699c <_malloc_r+0x358>
   86b00:	4b20      	ldr	r3, [pc, #128]	; (86b84 <_malloc_r+0x540>)
   86b02:	6819      	ldr	r1, [r3, #0]
   86b04:	4459      	add	r1, fp
   86b06:	6019      	str	r1, [r3, #0]
   86b08:	e6b3      	b.n	86872 <_malloc_r+0x22e>
   86b0a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   86b0e:	2800      	cmp	r0, #0
   86b10:	f47f aeaf 	bne.w	86872 <_malloc_r+0x22e>
   86b14:	eb08 030b 	add.w	r3, r8, fp
   86b18:	68ba      	ldr	r2, [r7, #8]
   86b1a:	f043 0301 	orr.w	r3, r3, #1
   86b1e:	6053      	str	r3, [r2, #4]
   86b20:	e6ef      	b.n	86902 <_malloc_r+0x2be>
   86b22:	207f      	movs	r0, #127	; 0x7f
   86b24:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86b28:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   86b2c:	e5ac      	b.n	86688 <_malloc_r+0x44>
   86b2e:	f104 0108 	add.w	r1, r4, #8
   86b32:	4628      	mov	r0, r5
   86b34:	9300      	str	r3, [sp, #0]
   86b36:	f000 fd6b 	bl	87610 <_free_r>
   86b3a:	9b00      	ldr	r3, [sp, #0]
   86b3c:	6819      	ldr	r1, [r3, #0]
   86b3e:	e6e0      	b.n	86902 <_malloc_r+0x2be>
   86b40:	2001      	movs	r0, #1
   86b42:	f04f 0900 	mov.w	r9, #0
   86b46:	e6bd      	b.n	868c4 <_malloc_r+0x280>
   86b48:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86b4c:	d805      	bhi.n	86b5a <_malloc_r+0x516>
   86b4e:	0bda      	lsrs	r2, r3, #15
   86b50:	f102 0178 	add.w	r1, r2, #120	; 0x78
   86b54:	00c9      	lsls	r1, r1, #3
   86b56:	3277      	adds	r2, #119	; 0x77
   86b58:	e720      	b.n	8699c <_malloc_r+0x358>
   86b5a:	f240 5154 	movw	r1, #1364	; 0x554
   86b5e:	428a      	cmp	r2, r1
   86b60:	d805      	bhi.n	86b6e <_malloc_r+0x52a>
   86b62:	0c9a      	lsrs	r2, r3, #18
   86b64:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   86b68:	00c9      	lsls	r1, r1, #3
   86b6a:	327c      	adds	r2, #124	; 0x7c
   86b6c:	e716      	b.n	8699c <_malloc_r+0x358>
   86b6e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86b72:	227e      	movs	r2, #126	; 0x7e
   86b74:	e712      	b.n	8699c <_malloc_r+0x358>
   86b76:	687b      	ldr	r3, [r7, #4]
   86b78:	e780      	b.n	86a7c <_malloc_r+0x438>
   86b7a:	08f0      	lsrs	r0, r6, #3
   86b7c:	f106 0308 	add.w	r3, r6, #8
   86b80:	e60e      	b.n	867a0 <_malloc_r+0x15c>
   86b82:	bf00      	nop
   86b84:	20001084 	.word	0x20001084

00086b88 <__ascii_mbtowc>:
   86b88:	b082      	sub	sp, #8
   86b8a:	b149      	cbz	r1, 86ba0 <__ascii_mbtowc+0x18>
   86b8c:	b15a      	cbz	r2, 86ba6 <__ascii_mbtowc+0x1e>
   86b8e:	b16b      	cbz	r3, 86bac <__ascii_mbtowc+0x24>
   86b90:	7813      	ldrb	r3, [r2, #0]
   86b92:	600b      	str	r3, [r1, #0]
   86b94:	7812      	ldrb	r2, [r2, #0]
   86b96:	1c10      	adds	r0, r2, #0
   86b98:	bf18      	it	ne
   86b9a:	2001      	movne	r0, #1
   86b9c:	b002      	add	sp, #8
   86b9e:	4770      	bx	lr
   86ba0:	a901      	add	r1, sp, #4
   86ba2:	2a00      	cmp	r2, #0
   86ba4:	d1f3      	bne.n	86b8e <__ascii_mbtowc+0x6>
   86ba6:	4610      	mov	r0, r2
   86ba8:	b002      	add	sp, #8
   86baa:	4770      	bx	lr
   86bac:	f06f 0001 	mvn.w	r0, #1
   86bb0:	e7f4      	b.n	86b9c <__ascii_mbtowc+0x14>
   86bb2:	bf00      	nop

00086bb4 <memchr>:
   86bb4:	0783      	lsls	r3, r0, #30
   86bb6:	b470      	push	{r4, r5, r6}
   86bb8:	b2cd      	uxtb	r5, r1
   86bba:	d03d      	beq.n	86c38 <memchr+0x84>
   86bbc:	1e54      	subs	r4, r2, #1
   86bbe:	b30a      	cbz	r2, 86c04 <memchr+0x50>
   86bc0:	7803      	ldrb	r3, [r0, #0]
   86bc2:	42ab      	cmp	r3, r5
   86bc4:	d01f      	beq.n	86c06 <memchr+0x52>
   86bc6:	1c43      	adds	r3, r0, #1
   86bc8:	e005      	b.n	86bd6 <memchr+0x22>
   86bca:	f114 34ff 	adds.w	r4, r4, #4294967295
   86bce:	d319      	bcc.n	86c04 <memchr+0x50>
   86bd0:	7802      	ldrb	r2, [r0, #0]
   86bd2:	42aa      	cmp	r2, r5
   86bd4:	d017      	beq.n	86c06 <memchr+0x52>
   86bd6:	f013 0f03 	tst.w	r3, #3
   86bda:	4618      	mov	r0, r3
   86bdc:	f103 0301 	add.w	r3, r3, #1
   86be0:	d1f3      	bne.n	86bca <memchr+0x16>
   86be2:	2c03      	cmp	r4, #3
   86be4:	d811      	bhi.n	86c0a <memchr+0x56>
   86be6:	b34c      	cbz	r4, 86c3c <memchr+0x88>
   86be8:	7803      	ldrb	r3, [r0, #0]
   86bea:	42ab      	cmp	r3, r5
   86bec:	d00b      	beq.n	86c06 <memchr+0x52>
   86bee:	4404      	add	r4, r0
   86bf0:	1c43      	adds	r3, r0, #1
   86bf2:	e002      	b.n	86bfa <memchr+0x46>
   86bf4:	7802      	ldrb	r2, [r0, #0]
   86bf6:	42aa      	cmp	r2, r5
   86bf8:	d005      	beq.n	86c06 <memchr+0x52>
   86bfa:	429c      	cmp	r4, r3
   86bfc:	4618      	mov	r0, r3
   86bfe:	f103 0301 	add.w	r3, r3, #1
   86c02:	d1f7      	bne.n	86bf4 <memchr+0x40>
   86c04:	2000      	movs	r0, #0
   86c06:	bc70      	pop	{r4, r5, r6}
   86c08:	4770      	bx	lr
   86c0a:	0209      	lsls	r1, r1, #8
   86c0c:	b289      	uxth	r1, r1
   86c0e:	4329      	orrs	r1, r5
   86c10:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   86c14:	6803      	ldr	r3, [r0, #0]
   86c16:	4606      	mov	r6, r0
   86c18:	404b      	eors	r3, r1
   86c1a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   86c1e:	ea22 0303 	bic.w	r3, r2, r3
   86c22:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   86c26:	f100 0004 	add.w	r0, r0, #4
   86c2a:	d103      	bne.n	86c34 <memchr+0x80>
   86c2c:	3c04      	subs	r4, #4
   86c2e:	2c03      	cmp	r4, #3
   86c30:	d8f0      	bhi.n	86c14 <memchr+0x60>
   86c32:	e7d8      	b.n	86be6 <memchr+0x32>
   86c34:	4630      	mov	r0, r6
   86c36:	e7d7      	b.n	86be8 <memchr+0x34>
   86c38:	4614      	mov	r4, r2
   86c3a:	e7d2      	b.n	86be2 <memchr+0x2e>
   86c3c:	4620      	mov	r0, r4
   86c3e:	e7e2      	b.n	86c06 <memchr+0x52>

00086c40 <memcpy>:
   86c40:	4684      	mov	ip, r0
   86c42:	ea41 0300 	orr.w	r3, r1, r0
   86c46:	f013 0303 	ands.w	r3, r3, #3
   86c4a:	d149      	bne.n	86ce0 <memcpy+0xa0>
   86c4c:	3a40      	subs	r2, #64	; 0x40
   86c4e:	d323      	bcc.n	86c98 <memcpy+0x58>
   86c50:	680b      	ldr	r3, [r1, #0]
   86c52:	6003      	str	r3, [r0, #0]
   86c54:	684b      	ldr	r3, [r1, #4]
   86c56:	6043      	str	r3, [r0, #4]
   86c58:	688b      	ldr	r3, [r1, #8]
   86c5a:	6083      	str	r3, [r0, #8]
   86c5c:	68cb      	ldr	r3, [r1, #12]
   86c5e:	60c3      	str	r3, [r0, #12]
   86c60:	690b      	ldr	r3, [r1, #16]
   86c62:	6103      	str	r3, [r0, #16]
   86c64:	694b      	ldr	r3, [r1, #20]
   86c66:	6143      	str	r3, [r0, #20]
   86c68:	698b      	ldr	r3, [r1, #24]
   86c6a:	6183      	str	r3, [r0, #24]
   86c6c:	69cb      	ldr	r3, [r1, #28]
   86c6e:	61c3      	str	r3, [r0, #28]
   86c70:	6a0b      	ldr	r3, [r1, #32]
   86c72:	6203      	str	r3, [r0, #32]
   86c74:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86c76:	6243      	str	r3, [r0, #36]	; 0x24
   86c78:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86c7a:	6283      	str	r3, [r0, #40]	; 0x28
   86c7c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86c7e:	62c3      	str	r3, [r0, #44]	; 0x2c
   86c80:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86c82:	6303      	str	r3, [r0, #48]	; 0x30
   86c84:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86c86:	6343      	str	r3, [r0, #52]	; 0x34
   86c88:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86c8a:	6383      	str	r3, [r0, #56]	; 0x38
   86c8c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86c8e:	63c3      	str	r3, [r0, #60]	; 0x3c
   86c90:	3040      	adds	r0, #64	; 0x40
   86c92:	3140      	adds	r1, #64	; 0x40
   86c94:	3a40      	subs	r2, #64	; 0x40
   86c96:	d2db      	bcs.n	86c50 <memcpy+0x10>
   86c98:	3230      	adds	r2, #48	; 0x30
   86c9a:	d30b      	bcc.n	86cb4 <memcpy+0x74>
   86c9c:	680b      	ldr	r3, [r1, #0]
   86c9e:	6003      	str	r3, [r0, #0]
   86ca0:	684b      	ldr	r3, [r1, #4]
   86ca2:	6043      	str	r3, [r0, #4]
   86ca4:	688b      	ldr	r3, [r1, #8]
   86ca6:	6083      	str	r3, [r0, #8]
   86ca8:	68cb      	ldr	r3, [r1, #12]
   86caa:	60c3      	str	r3, [r0, #12]
   86cac:	3010      	adds	r0, #16
   86cae:	3110      	adds	r1, #16
   86cb0:	3a10      	subs	r2, #16
   86cb2:	d2f3      	bcs.n	86c9c <memcpy+0x5c>
   86cb4:	320c      	adds	r2, #12
   86cb6:	d305      	bcc.n	86cc4 <memcpy+0x84>
   86cb8:	f851 3b04 	ldr.w	r3, [r1], #4
   86cbc:	f840 3b04 	str.w	r3, [r0], #4
   86cc0:	3a04      	subs	r2, #4
   86cc2:	d2f9      	bcs.n	86cb8 <memcpy+0x78>
   86cc4:	3204      	adds	r2, #4
   86cc6:	d008      	beq.n	86cda <memcpy+0x9a>
   86cc8:	07d2      	lsls	r2, r2, #31
   86cca:	bf1c      	itt	ne
   86ccc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86cd0:	f800 3b01 	strbne.w	r3, [r0], #1
   86cd4:	d301      	bcc.n	86cda <memcpy+0x9a>
   86cd6:	880b      	ldrh	r3, [r1, #0]
   86cd8:	8003      	strh	r3, [r0, #0]
   86cda:	4660      	mov	r0, ip
   86cdc:	4770      	bx	lr
   86cde:	bf00      	nop
   86ce0:	2a08      	cmp	r2, #8
   86ce2:	d313      	bcc.n	86d0c <memcpy+0xcc>
   86ce4:	078b      	lsls	r3, r1, #30
   86ce6:	d0b1      	beq.n	86c4c <memcpy+0xc>
   86ce8:	f010 0303 	ands.w	r3, r0, #3
   86cec:	d0ae      	beq.n	86c4c <memcpy+0xc>
   86cee:	f1c3 0304 	rsb	r3, r3, #4
   86cf2:	1ad2      	subs	r2, r2, r3
   86cf4:	07db      	lsls	r3, r3, #31
   86cf6:	bf1c      	itt	ne
   86cf8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86cfc:	f800 3b01 	strbne.w	r3, [r0], #1
   86d00:	d3a4      	bcc.n	86c4c <memcpy+0xc>
   86d02:	f831 3b02 	ldrh.w	r3, [r1], #2
   86d06:	f820 3b02 	strh.w	r3, [r0], #2
   86d0a:	e79f      	b.n	86c4c <memcpy+0xc>
   86d0c:	3a04      	subs	r2, #4
   86d0e:	d3d9      	bcc.n	86cc4 <memcpy+0x84>
   86d10:	3a01      	subs	r2, #1
   86d12:	f811 3b01 	ldrb.w	r3, [r1], #1
   86d16:	f800 3b01 	strb.w	r3, [r0], #1
   86d1a:	d2f9      	bcs.n	86d10 <memcpy+0xd0>
   86d1c:	780b      	ldrb	r3, [r1, #0]
   86d1e:	7003      	strb	r3, [r0, #0]
   86d20:	784b      	ldrb	r3, [r1, #1]
   86d22:	7043      	strb	r3, [r0, #1]
   86d24:	788b      	ldrb	r3, [r1, #2]
   86d26:	7083      	strb	r3, [r0, #2]
   86d28:	4660      	mov	r0, ip
   86d2a:	4770      	bx	lr

00086d2c <__malloc_lock>:
   86d2c:	4770      	bx	lr
   86d2e:	bf00      	nop

00086d30 <__malloc_unlock>:
   86d30:	4770      	bx	lr
   86d32:	bf00      	nop

00086d34 <_Balloc>:
   86d34:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86d36:	b570      	push	{r4, r5, r6, lr}
   86d38:	4605      	mov	r5, r0
   86d3a:	460c      	mov	r4, r1
   86d3c:	b14b      	cbz	r3, 86d52 <_Balloc+0x1e>
   86d3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   86d42:	b180      	cbz	r0, 86d66 <_Balloc+0x32>
   86d44:	6802      	ldr	r2, [r0, #0]
   86d46:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   86d4a:	2300      	movs	r3, #0
   86d4c:	6103      	str	r3, [r0, #16]
   86d4e:	60c3      	str	r3, [r0, #12]
   86d50:	bd70      	pop	{r4, r5, r6, pc}
   86d52:	2221      	movs	r2, #33	; 0x21
   86d54:	2104      	movs	r1, #4
   86d56:	f000 fbdb 	bl	87510 <_calloc_r>
   86d5a:	64e8      	str	r0, [r5, #76]	; 0x4c
   86d5c:	4603      	mov	r3, r0
   86d5e:	2800      	cmp	r0, #0
   86d60:	d1ed      	bne.n	86d3e <_Balloc+0xa>
   86d62:	2000      	movs	r0, #0
   86d64:	bd70      	pop	{r4, r5, r6, pc}
   86d66:	2101      	movs	r1, #1
   86d68:	fa01 f604 	lsl.w	r6, r1, r4
   86d6c:	1d72      	adds	r2, r6, #5
   86d6e:	4628      	mov	r0, r5
   86d70:	0092      	lsls	r2, r2, #2
   86d72:	f000 fbcd 	bl	87510 <_calloc_r>
   86d76:	2800      	cmp	r0, #0
   86d78:	d0f3      	beq.n	86d62 <_Balloc+0x2e>
   86d7a:	6044      	str	r4, [r0, #4]
   86d7c:	6086      	str	r6, [r0, #8]
   86d7e:	e7e4      	b.n	86d4a <_Balloc+0x16>

00086d80 <_Bfree>:
   86d80:	b131      	cbz	r1, 86d90 <_Bfree+0x10>
   86d82:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86d84:	684a      	ldr	r2, [r1, #4]
   86d86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   86d8a:	6008      	str	r0, [r1, #0]
   86d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   86d90:	4770      	bx	lr
   86d92:	bf00      	nop

00086d94 <__multadd>:
   86d94:	b5f0      	push	{r4, r5, r6, r7, lr}
   86d96:	460c      	mov	r4, r1
   86d98:	4605      	mov	r5, r0
   86d9a:	f04f 0e00 	mov.w	lr, #0
   86d9e:	690e      	ldr	r6, [r1, #16]
   86da0:	b083      	sub	sp, #12
   86da2:	f101 0714 	add.w	r7, r1, #20
   86da6:	6838      	ldr	r0, [r7, #0]
   86da8:	f10e 0e01 	add.w	lr, lr, #1
   86dac:	b281      	uxth	r1, r0
   86dae:	fb02 3301 	mla	r3, r2, r1, r3
   86db2:	0c01      	lsrs	r1, r0, #16
   86db4:	0c18      	lsrs	r0, r3, #16
   86db6:	fb02 0101 	mla	r1, r2, r1, r0
   86dba:	b29b      	uxth	r3, r3
   86dbc:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   86dc0:	4576      	cmp	r6, lr
   86dc2:	f847 3b04 	str.w	r3, [r7], #4
   86dc6:	ea4f 4311 	mov.w	r3, r1, lsr #16
   86dca:	dcec      	bgt.n	86da6 <__multadd+0x12>
   86dcc:	b13b      	cbz	r3, 86dde <__multadd+0x4a>
   86dce:	68a2      	ldr	r2, [r4, #8]
   86dd0:	4296      	cmp	r6, r2
   86dd2:	da07      	bge.n	86de4 <__multadd+0x50>
   86dd4:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   86dd8:	3601      	adds	r6, #1
   86dda:	6153      	str	r3, [r2, #20]
   86ddc:	6126      	str	r6, [r4, #16]
   86dde:	4620      	mov	r0, r4
   86de0:	b003      	add	sp, #12
   86de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86de4:	6861      	ldr	r1, [r4, #4]
   86de6:	4628      	mov	r0, r5
   86de8:	3101      	adds	r1, #1
   86dea:	9301      	str	r3, [sp, #4]
   86dec:	f7ff ffa2 	bl	86d34 <_Balloc>
   86df0:	4607      	mov	r7, r0
   86df2:	6922      	ldr	r2, [r4, #16]
   86df4:	f104 010c 	add.w	r1, r4, #12
   86df8:	3202      	adds	r2, #2
   86dfa:	0092      	lsls	r2, r2, #2
   86dfc:	300c      	adds	r0, #12
   86dfe:	f7ff ff1f 	bl	86c40 <memcpy>
   86e02:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   86e04:	6861      	ldr	r1, [r4, #4]
   86e06:	9b01      	ldr	r3, [sp, #4]
   86e08:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   86e0c:	6020      	str	r0, [r4, #0]
   86e0e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   86e12:	463c      	mov	r4, r7
   86e14:	e7de      	b.n	86dd4 <__multadd+0x40>
   86e16:	bf00      	nop

00086e18 <__hi0bits>:
   86e18:	0c02      	lsrs	r2, r0, #16
   86e1a:	0412      	lsls	r2, r2, #16
   86e1c:	4603      	mov	r3, r0
   86e1e:	b9b2      	cbnz	r2, 86e4e <__hi0bits+0x36>
   86e20:	0403      	lsls	r3, r0, #16
   86e22:	2010      	movs	r0, #16
   86e24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   86e28:	bf04      	itt	eq
   86e2a:	021b      	lsleq	r3, r3, #8
   86e2c:	3008      	addeq	r0, #8
   86e2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   86e32:	bf04      	itt	eq
   86e34:	011b      	lsleq	r3, r3, #4
   86e36:	3004      	addeq	r0, #4
   86e38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   86e3c:	bf04      	itt	eq
   86e3e:	009b      	lsleq	r3, r3, #2
   86e40:	3002      	addeq	r0, #2
   86e42:	2b00      	cmp	r3, #0
   86e44:	db02      	blt.n	86e4c <__hi0bits+0x34>
   86e46:	005b      	lsls	r3, r3, #1
   86e48:	d403      	bmi.n	86e52 <__hi0bits+0x3a>
   86e4a:	2020      	movs	r0, #32
   86e4c:	4770      	bx	lr
   86e4e:	2000      	movs	r0, #0
   86e50:	e7e8      	b.n	86e24 <__hi0bits+0xc>
   86e52:	3001      	adds	r0, #1
   86e54:	4770      	bx	lr
   86e56:	bf00      	nop

00086e58 <__lo0bits>:
   86e58:	6803      	ldr	r3, [r0, #0]
   86e5a:	4601      	mov	r1, r0
   86e5c:	f013 0207 	ands.w	r2, r3, #7
   86e60:	d007      	beq.n	86e72 <__lo0bits+0x1a>
   86e62:	07da      	lsls	r2, r3, #31
   86e64:	d421      	bmi.n	86eaa <__lo0bits+0x52>
   86e66:	0798      	lsls	r0, r3, #30
   86e68:	d421      	bmi.n	86eae <__lo0bits+0x56>
   86e6a:	089b      	lsrs	r3, r3, #2
   86e6c:	600b      	str	r3, [r1, #0]
   86e6e:	2002      	movs	r0, #2
   86e70:	4770      	bx	lr
   86e72:	b298      	uxth	r0, r3
   86e74:	b198      	cbz	r0, 86e9e <__lo0bits+0x46>
   86e76:	4610      	mov	r0, r2
   86e78:	f013 0fff 	tst.w	r3, #255	; 0xff
   86e7c:	bf04      	itt	eq
   86e7e:	0a1b      	lsreq	r3, r3, #8
   86e80:	3008      	addeq	r0, #8
   86e82:	071a      	lsls	r2, r3, #28
   86e84:	bf04      	itt	eq
   86e86:	091b      	lsreq	r3, r3, #4
   86e88:	3004      	addeq	r0, #4
   86e8a:	079a      	lsls	r2, r3, #30
   86e8c:	bf04      	itt	eq
   86e8e:	089b      	lsreq	r3, r3, #2
   86e90:	3002      	addeq	r0, #2
   86e92:	07da      	lsls	r2, r3, #31
   86e94:	d407      	bmi.n	86ea6 <__lo0bits+0x4e>
   86e96:	085b      	lsrs	r3, r3, #1
   86e98:	d104      	bne.n	86ea4 <__lo0bits+0x4c>
   86e9a:	2020      	movs	r0, #32
   86e9c:	4770      	bx	lr
   86e9e:	0c1b      	lsrs	r3, r3, #16
   86ea0:	2010      	movs	r0, #16
   86ea2:	e7e9      	b.n	86e78 <__lo0bits+0x20>
   86ea4:	3001      	adds	r0, #1
   86ea6:	600b      	str	r3, [r1, #0]
   86ea8:	4770      	bx	lr
   86eaa:	2000      	movs	r0, #0
   86eac:	4770      	bx	lr
   86eae:	085b      	lsrs	r3, r3, #1
   86eb0:	600b      	str	r3, [r1, #0]
   86eb2:	2001      	movs	r0, #1
   86eb4:	4770      	bx	lr
   86eb6:	bf00      	nop

00086eb8 <__i2b>:
   86eb8:	b510      	push	{r4, lr}
   86eba:	460c      	mov	r4, r1
   86ebc:	2101      	movs	r1, #1
   86ebe:	f7ff ff39 	bl	86d34 <_Balloc>
   86ec2:	2201      	movs	r2, #1
   86ec4:	6144      	str	r4, [r0, #20]
   86ec6:	6102      	str	r2, [r0, #16]
   86ec8:	bd10      	pop	{r4, pc}
   86eca:	bf00      	nop

00086ecc <__multiply>:
   86ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86ed0:	690c      	ldr	r4, [r1, #16]
   86ed2:	6915      	ldr	r5, [r2, #16]
   86ed4:	b083      	sub	sp, #12
   86ed6:	42ac      	cmp	r4, r5
   86ed8:	468b      	mov	fp, r1
   86eda:	4616      	mov	r6, r2
   86edc:	da04      	bge.n	86ee8 <__multiply+0x1c>
   86ede:	4622      	mov	r2, r4
   86ee0:	46b3      	mov	fp, r6
   86ee2:	462c      	mov	r4, r5
   86ee4:	460e      	mov	r6, r1
   86ee6:	4615      	mov	r5, r2
   86ee8:	f8db 3008 	ldr.w	r3, [fp, #8]
   86eec:	eb04 0805 	add.w	r8, r4, r5
   86ef0:	f8db 1004 	ldr.w	r1, [fp, #4]
   86ef4:	4598      	cmp	r8, r3
   86ef6:	bfc8      	it	gt
   86ef8:	3101      	addgt	r1, #1
   86efa:	f7ff ff1b 	bl	86d34 <_Balloc>
   86efe:	f100 0914 	add.w	r9, r0, #20
   86f02:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   86f06:	45d1      	cmp	r9, sl
   86f08:	9000      	str	r0, [sp, #0]
   86f0a:	d205      	bcs.n	86f18 <__multiply+0x4c>
   86f0c:	464b      	mov	r3, r9
   86f0e:	2100      	movs	r1, #0
   86f10:	f843 1b04 	str.w	r1, [r3], #4
   86f14:	459a      	cmp	sl, r3
   86f16:	d8fb      	bhi.n	86f10 <__multiply+0x44>
   86f18:	f106 0c14 	add.w	ip, r6, #20
   86f1c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   86f20:	f10b 0b14 	add.w	fp, fp, #20
   86f24:	459c      	cmp	ip, r3
   86f26:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   86f2a:	d24b      	bcs.n	86fc4 <__multiply+0xf8>
   86f2c:	f8cd a004 	str.w	sl, [sp, #4]
   86f30:	469a      	mov	sl, r3
   86f32:	f8dc 5000 	ldr.w	r5, [ip]
   86f36:	b2af      	uxth	r7, r5
   86f38:	b1e7      	cbz	r7, 86f74 <__multiply+0xa8>
   86f3a:	464d      	mov	r5, r9
   86f3c:	465e      	mov	r6, fp
   86f3e:	2100      	movs	r1, #0
   86f40:	f856 2b04 	ldr.w	r2, [r6], #4
   86f44:	6828      	ldr	r0, [r5, #0]
   86f46:	b293      	uxth	r3, r2
   86f48:	b284      	uxth	r4, r0
   86f4a:	0c12      	lsrs	r2, r2, #16
   86f4c:	fb07 4303 	mla	r3, r7, r3, r4
   86f50:	0c00      	lsrs	r0, r0, #16
   86f52:	fb07 0202 	mla	r2, r7, r2, r0
   86f56:	440b      	add	r3, r1
   86f58:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   86f5c:	b29b      	uxth	r3, r3
   86f5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   86f62:	45b6      	cmp	lr, r6
   86f64:	f845 3b04 	str.w	r3, [r5], #4
   86f68:	ea4f 4111 	mov.w	r1, r1, lsr #16
   86f6c:	d8e8      	bhi.n	86f40 <__multiply+0x74>
   86f6e:	6029      	str	r1, [r5, #0]
   86f70:	f8dc 5000 	ldr.w	r5, [ip]
   86f74:	0c2d      	lsrs	r5, r5, #16
   86f76:	d01d      	beq.n	86fb4 <__multiply+0xe8>
   86f78:	f8d9 3000 	ldr.w	r3, [r9]
   86f7c:	4648      	mov	r0, r9
   86f7e:	461c      	mov	r4, r3
   86f80:	4659      	mov	r1, fp
   86f82:	2200      	movs	r2, #0
   86f84:	880e      	ldrh	r6, [r1, #0]
   86f86:	0c24      	lsrs	r4, r4, #16
   86f88:	fb05 4406 	mla	r4, r5, r6, r4
   86f8c:	b29b      	uxth	r3, r3
   86f8e:	4422      	add	r2, r4
   86f90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   86f94:	f840 3b04 	str.w	r3, [r0], #4
   86f98:	f851 3b04 	ldr.w	r3, [r1], #4
   86f9c:	6804      	ldr	r4, [r0, #0]
   86f9e:	0c1b      	lsrs	r3, r3, #16
   86fa0:	b2a6      	uxth	r6, r4
   86fa2:	fb05 6303 	mla	r3, r5, r3, r6
   86fa6:	458e      	cmp	lr, r1
   86fa8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   86fac:	ea4f 4213 	mov.w	r2, r3, lsr #16
   86fb0:	d8e8      	bhi.n	86f84 <__multiply+0xb8>
   86fb2:	6003      	str	r3, [r0, #0]
   86fb4:	f10c 0c04 	add.w	ip, ip, #4
   86fb8:	45e2      	cmp	sl, ip
   86fba:	f109 0904 	add.w	r9, r9, #4
   86fbe:	d8b8      	bhi.n	86f32 <__multiply+0x66>
   86fc0:	f8dd a004 	ldr.w	sl, [sp, #4]
   86fc4:	f1b8 0f00 	cmp.w	r8, #0
   86fc8:	dd0b      	ble.n	86fe2 <__multiply+0x116>
   86fca:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   86fce:	f1aa 0a04 	sub.w	sl, sl, #4
   86fd2:	b11b      	cbz	r3, 86fdc <__multiply+0x110>
   86fd4:	e005      	b.n	86fe2 <__multiply+0x116>
   86fd6:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   86fda:	b913      	cbnz	r3, 86fe2 <__multiply+0x116>
   86fdc:	f1b8 0801 	subs.w	r8, r8, #1
   86fe0:	d1f9      	bne.n	86fd6 <__multiply+0x10a>
   86fe2:	9800      	ldr	r0, [sp, #0]
   86fe4:	f8c0 8010 	str.w	r8, [r0, #16]
   86fe8:	b003      	add	sp, #12
   86fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86fee:	bf00      	nop

00086ff0 <__pow5mult>:
   86ff0:	f012 0303 	ands.w	r3, r2, #3
   86ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86ff8:	4614      	mov	r4, r2
   86ffa:	4607      	mov	r7, r0
   86ffc:	d12e      	bne.n	8705c <__pow5mult+0x6c>
   86ffe:	460d      	mov	r5, r1
   87000:	10a4      	asrs	r4, r4, #2
   87002:	d01c      	beq.n	8703e <__pow5mult+0x4e>
   87004:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   87006:	b396      	cbz	r6, 8706e <__pow5mult+0x7e>
   87008:	07e3      	lsls	r3, r4, #31
   8700a:	f04f 0800 	mov.w	r8, #0
   8700e:	d406      	bmi.n	8701e <__pow5mult+0x2e>
   87010:	1064      	asrs	r4, r4, #1
   87012:	d014      	beq.n	8703e <__pow5mult+0x4e>
   87014:	6830      	ldr	r0, [r6, #0]
   87016:	b1a8      	cbz	r0, 87044 <__pow5mult+0x54>
   87018:	4606      	mov	r6, r0
   8701a:	07e3      	lsls	r3, r4, #31
   8701c:	d5f8      	bpl.n	87010 <__pow5mult+0x20>
   8701e:	4632      	mov	r2, r6
   87020:	4629      	mov	r1, r5
   87022:	4638      	mov	r0, r7
   87024:	f7ff ff52 	bl	86ecc <__multiply>
   87028:	b1b5      	cbz	r5, 87058 <__pow5mult+0x68>
   8702a:	686a      	ldr	r2, [r5, #4]
   8702c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8702e:	1064      	asrs	r4, r4, #1
   87030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   87034:	6029      	str	r1, [r5, #0]
   87036:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8703a:	4605      	mov	r5, r0
   8703c:	d1ea      	bne.n	87014 <__pow5mult+0x24>
   8703e:	4628      	mov	r0, r5
   87040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87044:	4632      	mov	r2, r6
   87046:	4631      	mov	r1, r6
   87048:	4638      	mov	r0, r7
   8704a:	f7ff ff3f 	bl	86ecc <__multiply>
   8704e:	6030      	str	r0, [r6, #0]
   87050:	f8c0 8000 	str.w	r8, [r0]
   87054:	4606      	mov	r6, r0
   87056:	e7e0      	b.n	8701a <__pow5mult+0x2a>
   87058:	4605      	mov	r5, r0
   8705a:	e7d9      	b.n	87010 <__pow5mult+0x20>
   8705c:	4a0b      	ldr	r2, [pc, #44]	; (8708c <__pow5mult+0x9c>)
   8705e:	3b01      	subs	r3, #1
   87060:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   87064:	2300      	movs	r3, #0
   87066:	f7ff fe95 	bl	86d94 <__multadd>
   8706a:	4605      	mov	r5, r0
   8706c:	e7c8      	b.n	87000 <__pow5mult+0x10>
   8706e:	2101      	movs	r1, #1
   87070:	4638      	mov	r0, r7
   87072:	f7ff fe5f 	bl	86d34 <_Balloc>
   87076:	f240 2171 	movw	r1, #625	; 0x271
   8707a:	2201      	movs	r2, #1
   8707c:	2300      	movs	r3, #0
   8707e:	6141      	str	r1, [r0, #20]
   87080:	6102      	str	r2, [r0, #16]
   87082:	4606      	mov	r6, r0
   87084:	64b8      	str	r0, [r7, #72]	; 0x48
   87086:	6003      	str	r3, [r0, #0]
   87088:	e7be      	b.n	87008 <__pow5mult+0x18>
   8708a:	bf00      	nop
   8708c:	000899a0 	.word	0x000899a0

00087090 <__lshift>:
   87090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   87094:	690b      	ldr	r3, [r1, #16]
   87096:	1154      	asrs	r4, r2, #5
   87098:	eb04 0803 	add.w	r8, r4, r3
   8709c:	688b      	ldr	r3, [r1, #8]
   8709e:	f108 0501 	add.w	r5, r8, #1
   870a2:	429d      	cmp	r5, r3
   870a4:	460e      	mov	r6, r1
   870a6:	4691      	mov	r9, r2
   870a8:	4607      	mov	r7, r0
   870aa:	6849      	ldr	r1, [r1, #4]
   870ac:	dd04      	ble.n	870b8 <__lshift+0x28>
   870ae:	005b      	lsls	r3, r3, #1
   870b0:	429d      	cmp	r5, r3
   870b2:	f101 0101 	add.w	r1, r1, #1
   870b6:	dcfa      	bgt.n	870ae <__lshift+0x1e>
   870b8:	4638      	mov	r0, r7
   870ba:	f7ff fe3b 	bl	86d34 <_Balloc>
   870be:	2c00      	cmp	r4, #0
   870c0:	f100 0314 	add.w	r3, r0, #20
   870c4:	dd06      	ble.n	870d4 <__lshift+0x44>
   870c6:	2100      	movs	r1, #0
   870c8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   870cc:	f843 1b04 	str.w	r1, [r3], #4
   870d0:	429a      	cmp	r2, r3
   870d2:	d1fb      	bne.n	870cc <__lshift+0x3c>
   870d4:	6934      	ldr	r4, [r6, #16]
   870d6:	f106 0114 	add.w	r1, r6, #20
   870da:	f019 091f 	ands.w	r9, r9, #31
   870de:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   870e2:	d01d      	beq.n	87120 <__lshift+0x90>
   870e4:	2200      	movs	r2, #0
   870e6:	f1c9 0c20 	rsb	ip, r9, #32
   870ea:	680c      	ldr	r4, [r1, #0]
   870ec:	fa04 f409 	lsl.w	r4, r4, r9
   870f0:	4314      	orrs	r4, r2
   870f2:	f843 4b04 	str.w	r4, [r3], #4
   870f6:	f851 2b04 	ldr.w	r2, [r1], #4
   870fa:	458e      	cmp	lr, r1
   870fc:	fa22 f20c 	lsr.w	r2, r2, ip
   87100:	d8f3      	bhi.n	870ea <__lshift+0x5a>
   87102:	601a      	str	r2, [r3, #0]
   87104:	b10a      	cbz	r2, 8710a <__lshift+0x7a>
   87106:	f108 0502 	add.w	r5, r8, #2
   8710a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8710c:	6872      	ldr	r2, [r6, #4]
   8710e:	3d01      	subs	r5, #1
   87110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   87114:	6105      	str	r5, [r0, #16]
   87116:	6031      	str	r1, [r6, #0]
   87118:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8711c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   87120:	3b04      	subs	r3, #4
   87122:	f851 2b04 	ldr.w	r2, [r1], #4
   87126:	458e      	cmp	lr, r1
   87128:	f843 2f04 	str.w	r2, [r3, #4]!
   8712c:	d8f9      	bhi.n	87122 <__lshift+0x92>
   8712e:	e7ec      	b.n	8710a <__lshift+0x7a>

00087130 <__mcmp>:
   87130:	b430      	push	{r4, r5}
   87132:	690b      	ldr	r3, [r1, #16]
   87134:	4605      	mov	r5, r0
   87136:	6900      	ldr	r0, [r0, #16]
   87138:	1ac0      	subs	r0, r0, r3
   8713a:	d10f      	bne.n	8715c <__mcmp+0x2c>
   8713c:	009b      	lsls	r3, r3, #2
   8713e:	3514      	adds	r5, #20
   87140:	3114      	adds	r1, #20
   87142:	4419      	add	r1, r3
   87144:	442b      	add	r3, r5
   87146:	e001      	b.n	8714c <__mcmp+0x1c>
   87148:	429d      	cmp	r5, r3
   8714a:	d207      	bcs.n	8715c <__mcmp+0x2c>
   8714c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   87150:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   87154:	4294      	cmp	r4, r2
   87156:	d0f7      	beq.n	87148 <__mcmp+0x18>
   87158:	d302      	bcc.n	87160 <__mcmp+0x30>
   8715a:	2001      	movs	r0, #1
   8715c:	bc30      	pop	{r4, r5}
   8715e:	4770      	bx	lr
   87160:	f04f 30ff 	mov.w	r0, #4294967295
   87164:	e7fa      	b.n	8715c <__mcmp+0x2c>
   87166:	bf00      	nop

00087168 <__mdiff>:
   87168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8716c:	690c      	ldr	r4, [r1, #16]
   8716e:	4689      	mov	r9, r1
   87170:	6911      	ldr	r1, [r2, #16]
   87172:	4692      	mov	sl, r2
   87174:	1a64      	subs	r4, r4, r1
   87176:	2c00      	cmp	r4, #0
   87178:	d117      	bne.n	871aa <__mdiff+0x42>
   8717a:	0089      	lsls	r1, r1, #2
   8717c:	f109 0714 	add.w	r7, r9, #20
   87180:	f102 0614 	add.w	r6, r2, #20
   87184:	187b      	adds	r3, r7, r1
   87186:	4431      	add	r1, r6
   87188:	e001      	b.n	8718e <__mdiff+0x26>
   8718a:	429f      	cmp	r7, r3
   8718c:	d265      	bcs.n	8725a <__mdiff+0xf2>
   8718e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   87192:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   87196:	4295      	cmp	r5, r2
   87198:	d0f7      	beq.n	8718a <__mdiff+0x22>
   8719a:	d267      	bcs.n	8726c <__mdiff+0x104>
   8719c:	464b      	mov	r3, r9
   8719e:	46bb      	mov	fp, r7
   871a0:	46d1      	mov	r9, sl
   871a2:	4637      	mov	r7, r6
   871a4:	469a      	mov	sl, r3
   871a6:	2401      	movs	r4, #1
   871a8:	e005      	b.n	871b6 <__mdiff+0x4e>
   871aa:	db61      	blt.n	87270 <__mdiff+0x108>
   871ac:	2400      	movs	r4, #0
   871ae:	f109 0714 	add.w	r7, r9, #20
   871b2:	f10a 0b14 	add.w	fp, sl, #20
   871b6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   871ba:	f7ff fdbb 	bl	86d34 <_Balloc>
   871be:	465d      	mov	r5, fp
   871c0:	f04f 0800 	mov.w	r8, #0
   871c4:	f8d9 e010 	ldr.w	lr, [r9, #16]
   871c8:	f8da 3010 	ldr.w	r3, [sl, #16]
   871cc:	463e      	mov	r6, r7
   871ce:	60c4      	str	r4, [r0, #12]
   871d0:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   871d4:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   871d8:	f100 0414 	add.w	r4, r0, #20
   871dc:	f856 9b04 	ldr.w	r9, [r6], #4
   871e0:	f855 2b04 	ldr.w	r2, [r5], #4
   871e4:	fa1f f389 	uxth.w	r3, r9
   871e8:	4443      	add	r3, r8
   871ea:	fa1f f882 	uxth.w	r8, r2
   871ee:	0c12      	lsrs	r2, r2, #16
   871f0:	eba3 0308 	sub.w	r3, r3, r8
   871f4:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   871f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
   871fc:	b29b      	uxth	r3, r3
   871fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   87202:	45ac      	cmp	ip, r5
   87204:	f844 3b04 	str.w	r3, [r4], #4
   87208:	ea4f 4822 	mov.w	r8, r2, asr #16
   8720c:	d8e6      	bhi.n	871dc <__mdiff+0x74>
   8720e:	42b7      	cmp	r7, r6
   87210:	d917      	bls.n	87242 <__mdiff+0xda>
   87212:	46a4      	mov	ip, r4
   87214:	4635      	mov	r5, r6
   87216:	f855 3b04 	ldr.w	r3, [r5], #4
   8721a:	b299      	uxth	r1, r3
   8721c:	4441      	add	r1, r8
   8721e:	140a      	asrs	r2, r1, #16
   87220:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   87224:	b289      	uxth	r1, r1
   87226:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8722a:	42af      	cmp	r7, r5
   8722c:	f84c 3b04 	str.w	r3, [ip], #4
   87230:	ea4f 4822 	mov.w	r8, r2, asr #16
   87234:	d8ef      	bhi.n	87216 <__mdiff+0xae>
   87236:	43f6      	mvns	r6, r6
   87238:	4437      	add	r7, r6
   8723a:	f027 0703 	bic.w	r7, r7, #3
   8723e:	3704      	adds	r7, #4
   87240:	443c      	add	r4, r7
   87242:	3c04      	subs	r4, #4
   87244:	b92b      	cbnz	r3, 87252 <__mdiff+0xea>
   87246:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8724a:	f10e 3eff 	add.w	lr, lr, #4294967295
   8724e:	2b00      	cmp	r3, #0
   87250:	d0f9      	beq.n	87246 <__mdiff+0xde>
   87252:	f8c0 e010 	str.w	lr, [r0, #16]
   87256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8725a:	2100      	movs	r1, #0
   8725c:	f7ff fd6a 	bl	86d34 <_Balloc>
   87260:	2201      	movs	r2, #1
   87262:	2300      	movs	r3, #0
   87264:	6102      	str	r2, [r0, #16]
   87266:	6143      	str	r3, [r0, #20]
   87268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8726c:	46b3      	mov	fp, r6
   8726e:	e7a2      	b.n	871b6 <__mdiff+0x4e>
   87270:	464b      	mov	r3, r9
   87272:	f109 0b14 	add.w	fp, r9, #20
   87276:	f102 0714 	add.w	r7, r2, #20
   8727a:	4691      	mov	r9, r2
   8727c:	2401      	movs	r4, #1
   8727e:	469a      	mov	sl, r3
   87280:	e799      	b.n	871b6 <__mdiff+0x4e>
   87282:	bf00      	nop

00087284 <__d2b>:
   87284:	b5f0      	push	{r4, r5, r6, r7, lr}
   87286:	2101      	movs	r1, #1
   87288:	b083      	sub	sp, #12
   8728a:	461c      	mov	r4, r3
   8728c:	f3c3 550a 	ubfx	r5, r3, #20, #11
   87290:	4616      	mov	r6, r2
   87292:	f7ff fd4f 	bl	86d34 <_Balloc>
   87296:	f3c4 0413 	ubfx	r4, r4, #0, #20
   8729a:	4607      	mov	r7, r0
   8729c:	b10d      	cbz	r5, 872a2 <__d2b+0x1e>
   8729e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   872a2:	9401      	str	r4, [sp, #4]
   872a4:	b306      	cbz	r6, 872e8 <__d2b+0x64>
   872a6:	a802      	add	r0, sp, #8
   872a8:	f840 6d08 	str.w	r6, [r0, #-8]!
   872ac:	f7ff fdd4 	bl	86e58 <__lo0bits>
   872b0:	2800      	cmp	r0, #0
   872b2:	d130      	bne.n	87316 <__d2b+0x92>
   872b4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   872b8:	617a      	str	r2, [r7, #20]
   872ba:	2b00      	cmp	r3, #0
   872bc:	bf0c      	ite	eq
   872be:	2101      	moveq	r1, #1
   872c0:	2102      	movne	r1, #2
   872c2:	61bb      	str	r3, [r7, #24]
   872c4:	6139      	str	r1, [r7, #16]
   872c6:	b9d5      	cbnz	r5, 872fe <__d2b+0x7a>
   872c8:	9a08      	ldr	r2, [sp, #32]
   872ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   872ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   872d2:	6010      	str	r0, [r2, #0]
   872d4:	6918      	ldr	r0, [r3, #16]
   872d6:	f7ff fd9f 	bl	86e18 <__hi0bits>
   872da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   872dc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   872e0:	6018      	str	r0, [r3, #0]
   872e2:	4638      	mov	r0, r7
   872e4:	b003      	add	sp, #12
   872e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   872e8:	a801      	add	r0, sp, #4
   872ea:	f7ff fdb5 	bl	86e58 <__lo0bits>
   872ee:	2201      	movs	r2, #1
   872f0:	9b01      	ldr	r3, [sp, #4]
   872f2:	4611      	mov	r1, r2
   872f4:	3020      	adds	r0, #32
   872f6:	613a      	str	r2, [r7, #16]
   872f8:	617b      	str	r3, [r7, #20]
   872fa:	2d00      	cmp	r5, #0
   872fc:	d0e4      	beq.n	872c8 <__d2b+0x44>
   872fe:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   87302:	9a08      	ldr	r2, [sp, #32]
   87304:	4403      	add	r3, r0
   87306:	6013      	str	r3, [r2, #0]
   87308:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8730a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8730e:	6018      	str	r0, [r3, #0]
   87310:	4638      	mov	r0, r7
   87312:	b003      	add	sp, #12
   87314:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87316:	9b01      	ldr	r3, [sp, #4]
   87318:	f1c0 0220 	rsb	r2, r0, #32
   8731c:	9900      	ldr	r1, [sp, #0]
   8731e:	fa03 f202 	lsl.w	r2, r3, r2
   87322:	430a      	orrs	r2, r1
   87324:	40c3      	lsrs	r3, r0
   87326:	9301      	str	r3, [sp, #4]
   87328:	617a      	str	r2, [r7, #20]
   8732a:	e7c6      	b.n	872ba <__d2b+0x36>

0008732c <_sbrk_r>:
   8732c:	b538      	push	{r3, r4, r5, lr}
   8732e:	2300      	movs	r3, #0
   87330:	4c06      	ldr	r4, [pc, #24]	; (8734c <_sbrk_r+0x20>)
   87332:	4605      	mov	r5, r0
   87334:	4608      	mov	r0, r1
   87336:	6023      	str	r3, [r4, #0]
   87338:	f7f9 ff36 	bl	811a8 <_sbrk>
   8733c:	1c43      	adds	r3, r0, #1
   8733e:	d000      	beq.n	87342 <_sbrk_r+0x16>
   87340:	bd38      	pop	{r3, r4, r5, pc}
   87342:	6823      	ldr	r3, [r4, #0]
   87344:	2b00      	cmp	r3, #0
   87346:	d0fb      	beq.n	87340 <_sbrk_r+0x14>
   87348:	602b      	str	r3, [r5, #0]
   8734a:	bd38      	pop	{r3, r4, r5, pc}
   8734c:	20001844 	.word	0x20001844

00087350 <__ssprint_r>:
   87350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87354:	6893      	ldr	r3, [r2, #8]
   87356:	b083      	sub	sp, #12
   87358:	4690      	mov	r8, r2
   8735a:	2b00      	cmp	r3, #0
   8735c:	d070      	beq.n	87440 <__ssprint_r+0xf0>
   8735e:	4682      	mov	sl, r0
   87360:	460c      	mov	r4, r1
   87362:	6817      	ldr	r7, [r2, #0]
   87364:	688d      	ldr	r5, [r1, #8]
   87366:	6808      	ldr	r0, [r1, #0]
   87368:	e042      	b.n	873f0 <__ssprint_r+0xa0>
   8736a:	89a3      	ldrh	r3, [r4, #12]
   8736c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   87370:	d02e      	beq.n	873d0 <__ssprint_r+0x80>
   87372:	6965      	ldr	r5, [r4, #20]
   87374:	6921      	ldr	r1, [r4, #16]
   87376:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8737a:	eba0 0b01 	sub.w	fp, r0, r1
   8737e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   87382:	f10b 0001 	add.w	r0, fp, #1
   87386:	106d      	asrs	r5, r5, #1
   87388:	4430      	add	r0, r6
   8738a:	42a8      	cmp	r0, r5
   8738c:	462a      	mov	r2, r5
   8738e:	bf84      	itt	hi
   87390:	4605      	movhi	r5, r0
   87392:	462a      	movhi	r2, r5
   87394:	055b      	lsls	r3, r3, #21
   87396:	d538      	bpl.n	8740a <__ssprint_r+0xba>
   87398:	4611      	mov	r1, r2
   8739a:	4650      	mov	r0, sl
   8739c:	f7ff f952 	bl	86644 <_malloc_r>
   873a0:	2800      	cmp	r0, #0
   873a2:	d03c      	beq.n	8741e <__ssprint_r+0xce>
   873a4:	465a      	mov	r2, fp
   873a6:	6921      	ldr	r1, [r4, #16]
   873a8:	9001      	str	r0, [sp, #4]
   873aa:	f7ff fc49 	bl	86c40 <memcpy>
   873ae:	89a2      	ldrh	r2, [r4, #12]
   873b0:	9b01      	ldr	r3, [sp, #4]
   873b2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   873b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   873ba:	81a2      	strh	r2, [r4, #12]
   873bc:	eba5 020b 	sub.w	r2, r5, fp
   873c0:	eb03 000b 	add.w	r0, r3, fp
   873c4:	6165      	str	r5, [r4, #20]
   873c6:	46b3      	mov	fp, r6
   873c8:	4635      	mov	r5, r6
   873ca:	6123      	str	r3, [r4, #16]
   873cc:	6020      	str	r0, [r4, #0]
   873ce:	60a2      	str	r2, [r4, #8]
   873d0:	465a      	mov	r2, fp
   873d2:	4649      	mov	r1, r9
   873d4:	f000 fa02 	bl	877dc <memmove>
   873d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   873dc:	68a2      	ldr	r2, [r4, #8]
   873de:	6820      	ldr	r0, [r4, #0]
   873e0:	1b55      	subs	r5, r2, r5
   873e2:	4458      	add	r0, fp
   873e4:	1b9e      	subs	r6, r3, r6
   873e6:	60a5      	str	r5, [r4, #8]
   873e8:	6020      	str	r0, [r4, #0]
   873ea:	f8c8 6008 	str.w	r6, [r8, #8]
   873ee:	b33e      	cbz	r6, 87440 <__ssprint_r+0xf0>
   873f0:	687e      	ldr	r6, [r7, #4]
   873f2:	463b      	mov	r3, r7
   873f4:	3708      	adds	r7, #8
   873f6:	2e00      	cmp	r6, #0
   873f8:	d0fa      	beq.n	873f0 <__ssprint_r+0xa0>
   873fa:	42ae      	cmp	r6, r5
   873fc:	f8d3 9000 	ldr.w	r9, [r3]
   87400:	46ab      	mov	fp, r5
   87402:	d2b2      	bcs.n	8736a <__ssprint_r+0x1a>
   87404:	4635      	mov	r5, r6
   87406:	46b3      	mov	fp, r6
   87408:	e7e2      	b.n	873d0 <__ssprint_r+0x80>
   8740a:	4650      	mov	r0, sl
   8740c:	f000 fa4a 	bl	878a4 <_realloc_r>
   87410:	4603      	mov	r3, r0
   87412:	2800      	cmp	r0, #0
   87414:	d1d2      	bne.n	873bc <__ssprint_r+0x6c>
   87416:	6921      	ldr	r1, [r4, #16]
   87418:	4650      	mov	r0, sl
   8741a:	f000 f8f9 	bl	87610 <_free_r>
   8741e:	230c      	movs	r3, #12
   87420:	2200      	movs	r2, #0
   87422:	f04f 30ff 	mov.w	r0, #4294967295
   87426:	f8ca 3000 	str.w	r3, [sl]
   8742a:	89a3      	ldrh	r3, [r4, #12]
   8742c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87430:	81a3      	strh	r3, [r4, #12]
   87432:	f8c8 2008 	str.w	r2, [r8, #8]
   87436:	f8c8 2004 	str.w	r2, [r8, #4]
   8743a:	b003      	add	sp, #12
   8743c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87440:	2000      	movs	r0, #0
   87442:	f8c8 0004 	str.w	r0, [r8, #4]
   87446:	b003      	add	sp, #12
   87448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008744c <__ascii_wctomb>:
   8744c:	b119      	cbz	r1, 87456 <__ascii_wctomb+0xa>
   8744e:	2aff      	cmp	r2, #255	; 0xff
   87450:	d803      	bhi.n	8745a <__ascii_wctomb+0xe>
   87452:	700a      	strb	r2, [r1, #0]
   87454:	2101      	movs	r1, #1
   87456:	4608      	mov	r0, r1
   87458:	4770      	bx	lr
   8745a:	238a      	movs	r3, #138	; 0x8a
   8745c:	f04f 31ff 	mov.w	r1, #4294967295
   87460:	6003      	str	r3, [r0, #0]
   87462:	e7f8      	b.n	87456 <__ascii_wctomb+0xa>

00087464 <__register_exitproc>:
   87464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87468:	4c27      	ldr	r4, [pc, #156]	; (87508 <__register_exitproc+0xa4>)
   8746a:	4607      	mov	r7, r0
   8746c:	6826      	ldr	r6, [r4, #0]
   8746e:	4688      	mov	r8, r1
   87470:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   87474:	4692      	mov	sl, r2
   87476:	4699      	mov	r9, r3
   87478:	2c00      	cmp	r4, #0
   8747a:	d03c      	beq.n	874f6 <__register_exitproc+0x92>
   8747c:	6865      	ldr	r5, [r4, #4]
   8747e:	2d1f      	cmp	r5, #31
   87480:	dc1a      	bgt.n	874b8 <__register_exitproc+0x54>
   87482:	f105 0e01 	add.w	lr, r5, #1
   87486:	b17f      	cbz	r7, 874a8 <__register_exitproc+0x44>
   87488:	2001      	movs	r0, #1
   8748a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   8748e:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   87492:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
   87496:	fa00 f205 	lsl.w	r2, r0, r5
   8749a:	4311      	orrs	r1, r2
   8749c:	2f02      	cmp	r7, #2
   8749e:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
   874a2:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   874a6:	d020      	beq.n	874ea <__register_exitproc+0x86>
   874a8:	3502      	adds	r5, #2
   874aa:	f8c4 e004 	str.w	lr, [r4, #4]
   874ae:	2000      	movs	r0, #0
   874b0:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
   874b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   874b8:	4b14      	ldr	r3, [pc, #80]	; (8750c <__register_exitproc+0xa8>)
   874ba:	b30b      	cbz	r3, 87500 <__register_exitproc+0x9c>
   874bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   874c0:	f3af 8000 	nop.w
   874c4:	4604      	mov	r4, r0
   874c6:	b1d8      	cbz	r0, 87500 <__register_exitproc+0x9c>
   874c8:	2000      	movs	r0, #0
   874ca:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
   874ce:	f04f 0e01 	mov.w	lr, #1
   874d2:	6060      	str	r0, [r4, #4]
   874d4:	6023      	str	r3, [r4, #0]
   874d6:	4605      	mov	r5, r0
   874d8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   874dc:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   874e0:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   874e4:	2f00      	cmp	r7, #0
   874e6:	d0df      	beq.n	874a8 <__register_exitproc+0x44>
   874e8:	e7ce      	b.n	87488 <__register_exitproc+0x24>
   874ea:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   874ee:	431a      	orrs	r2, r3
   874f0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   874f4:	e7d8      	b.n	874a8 <__register_exitproc+0x44>
   874f6:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   874fa:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   874fe:	e7bd      	b.n	8747c <__register_exitproc+0x18>
   87500:	f04f 30ff 	mov.w	r0, #4294967295
   87504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87508:	00089828 	.word	0x00089828
   8750c:	00000000 	.word	0x00000000

00087510 <_calloc_r>:
   87510:	b510      	push	{r4, lr}
   87512:	fb02 f101 	mul.w	r1, r2, r1
   87516:	f7ff f895 	bl	86644 <_malloc_r>
   8751a:	4604      	mov	r4, r0
   8751c:	b1d8      	cbz	r0, 87556 <_calloc_r+0x46>
   8751e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   87522:	f022 0203 	bic.w	r2, r2, #3
   87526:	3a04      	subs	r2, #4
   87528:	2a24      	cmp	r2, #36	; 0x24
   8752a:	d818      	bhi.n	8755e <_calloc_r+0x4e>
   8752c:	2a13      	cmp	r2, #19
   8752e:	d914      	bls.n	8755a <_calloc_r+0x4a>
   87530:	2300      	movs	r3, #0
   87532:	2a1b      	cmp	r2, #27
   87534:	6003      	str	r3, [r0, #0]
   87536:	6043      	str	r3, [r0, #4]
   87538:	d916      	bls.n	87568 <_calloc_r+0x58>
   8753a:	2a24      	cmp	r2, #36	; 0x24
   8753c:	6083      	str	r3, [r0, #8]
   8753e:	60c3      	str	r3, [r0, #12]
   87540:	bf11      	iteee	ne
   87542:	f100 0210 	addne.w	r2, r0, #16
   87546:	6103      	streq	r3, [r0, #16]
   87548:	6143      	streq	r3, [r0, #20]
   8754a:	f100 0218 	addeq.w	r2, r0, #24
   8754e:	2300      	movs	r3, #0
   87550:	6013      	str	r3, [r2, #0]
   87552:	6053      	str	r3, [r2, #4]
   87554:	6093      	str	r3, [r2, #8]
   87556:	4620      	mov	r0, r4
   87558:	bd10      	pop	{r4, pc}
   8755a:	4602      	mov	r2, r0
   8755c:	e7f7      	b.n	8754e <_calloc_r+0x3e>
   8755e:	2100      	movs	r1, #0
   87560:	f7fc fc7c 	bl	83e5c <memset>
   87564:	4620      	mov	r0, r4
   87566:	bd10      	pop	{r4, pc}
   87568:	f100 0208 	add.w	r2, r0, #8
   8756c:	e7ef      	b.n	8754e <_calloc_r+0x3e>
   8756e:	bf00      	nop

00087570 <_malloc_trim_r>:
   87570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87572:	460c      	mov	r4, r1
   87574:	4f23      	ldr	r7, [pc, #140]	; (87604 <_malloc_trim_r+0x94>)
   87576:	4606      	mov	r6, r0
   87578:	f7ff fbd8 	bl	86d2c <__malloc_lock>
   8757c:	68bb      	ldr	r3, [r7, #8]
   8757e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   87582:	685d      	ldr	r5, [r3, #4]
   87584:	310f      	adds	r1, #15
   87586:	f025 0503 	bic.w	r5, r5, #3
   8758a:	4429      	add	r1, r5
   8758c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   87590:	f021 010f 	bic.w	r1, r1, #15
   87594:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   87598:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8759c:	db07      	blt.n	875ae <_malloc_trim_r+0x3e>
   8759e:	2100      	movs	r1, #0
   875a0:	4630      	mov	r0, r6
   875a2:	f7ff fec3 	bl	8732c <_sbrk_r>
   875a6:	68bb      	ldr	r3, [r7, #8]
   875a8:	442b      	add	r3, r5
   875aa:	4298      	cmp	r0, r3
   875ac:	d004      	beq.n	875b8 <_malloc_trim_r+0x48>
   875ae:	4630      	mov	r0, r6
   875b0:	f7ff fbbe 	bl	86d30 <__malloc_unlock>
   875b4:	2000      	movs	r0, #0
   875b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   875b8:	4261      	negs	r1, r4
   875ba:	4630      	mov	r0, r6
   875bc:	f7ff feb6 	bl	8732c <_sbrk_r>
   875c0:	3001      	adds	r0, #1
   875c2:	d00d      	beq.n	875e0 <_malloc_trim_r+0x70>
   875c4:	4b10      	ldr	r3, [pc, #64]	; (87608 <_malloc_trim_r+0x98>)
   875c6:	68ba      	ldr	r2, [r7, #8]
   875c8:	6819      	ldr	r1, [r3, #0]
   875ca:	1b2d      	subs	r5, r5, r4
   875cc:	f045 0501 	orr.w	r5, r5, #1
   875d0:	4630      	mov	r0, r6
   875d2:	1b09      	subs	r1, r1, r4
   875d4:	6055      	str	r5, [r2, #4]
   875d6:	6019      	str	r1, [r3, #0]
   875d8:	f7ff fbaa 	bl	86d30 <__malloc_unlock>
   875dc:	2001      	movs	r0, #1
   875de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   875e0:	2100      	movs	r1, #0
   875e2:	4630      	mov	r0, r6
   875e4:	f7ff fea2 	bl	8732c <_sbrk_r>
   875e8:	68ba      	ldr	r2, [r7, #8]
   875ea:	1a83      	subs	r3, r0, r2
   875ec:	2b0f      	cmp	r3, #15
   875ee:	ddde      	ble.n	875ae <_malloc_trim_r+0x3e>
   875f0:	4c06      	ldr	r4, [pc, #24]	; (8760c <_malloc_trim_r+0x9c>)
   875f2:	4905      	ldr	r1, [pc, #20]	; (87608 <_malloc_trim_r+0x98>)
   875f4:	6824      	ldr	r4, [r4, #0]
   875f6:	f043 0301 	orr.w	r3, r3, #1
   875fa:	1b00      	subs	r0, r0, r4
   875fc:	6053      	str	r3, [r2, #4]
   875fe:	6008      	str	r0, [r1, #0]
   87600:	e7d5      	b.n	875ae <_malloc_trim_r+0x3e>
   87602:	bf00      	nop
   87604:	20000bcc 	.word	0x20000bcc
   87608:	20001084 	.word	0x20001084
   8760c:	20000fd4 	.word	0x20000fd4

00087610 <_free_r>:
   87610:	2900      	cmp	r1, #0
   87612:	d044      	beq.n	8769e <_free_r+0x8e>
   87614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87618:	460d      	mov	r5, r1
   8761a:	4680      	mov	r8, r0
   8761c:	f7ff fb86 	bl	86d2c <__malloc_lock>
   87620:	f855 7c04 	ldr.w	r7, [r5, #-4]
   87624:	4969      	ldr	r1, [pc, #420]	; (877cc <_free_r+0x1bc>)
   87626:	f1a5 0408 	sub.w	r4, r5, #8
   8762a:	f027 0301 	bic.w	r3, r7, #1
   8762e:	18e2      	adds	r2, r4, r3
   87630:	688e      	ldr	r6, [r1, #8]
   87632:	6850      	ldr	r0, [r2, #4]
   87634:	42b2      	cmp	r2, r6
   87636:	f020 0003 	bic.w	r0, r0, #3
   8763a:	d05e      	beq.n	876fa <_free_r+0xea>
   8763c:	07fe      	lsls	r6, r7, #31
   8763e:	6050      	str	r0, [r2, #4]
   87640:	d40b      	bmi.n	8765a <_free_r+0x4a>
   87642:	f855 7c08 	ldr.w	r7, [r5, #-8]
   87646:	f101 0e08 	add.w	lr, r1, #8
   8764a:	1be4      	subs	r4, r4, r7
   8764c:	68a5      	ldr	r5, [r4, #8]
   8764e:	443b      	add	r3, r7
   87650:	4575      	cmp	r5, lr
   87652:	d06d      	beq.n	87730 <_free_r+0x120>
   87654:	68e7      	ldr	r7, [r4, #12]
   87656:	60ef      	str	r7, [r5, #12]
   87658:	60bd      	str	r5, [r7, #8]
   8765a:	1815      	adds	r5, r2, r0
   8765c:	686d      	ldr	r5, [r5, #4]
   8765e:	07ed      	lsls	r5, r5, #31
   87660:	d53e      	bpl.n	876e0 <_free_r+0xd0>
   87662:	f043 0201 	orr.w	r2, r3, #1
   87666:	6062      	str	r2, [r4, #4]
   87668:	50e3      	str	r3, [r4, r3]
   8766a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8766e:	d217      	bcs.n	876a0 <_free_r+0x90>
   87670:	2201      	movs	r2, #1
   87672:	08db      	lsrs	r3, r3, #3
   87674:	1098      	asrs	r0, r3, #2
   87676:	684d      	ldr	r5, [r1, #4]
   87678:	4413      	add	r3, r2
   8767a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8767e:	4082      	lsls	r2, r0
   87680:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   87684:	432a      	orrs	r2, r5
   87686:	3808      	subs	r0, #8
   87688:	60e0      	str	r0, [r4, #12]
   8768a:	60a7      	str	r7, [r4, #8]
   8768c:	604a      	str	r2, [r1, #4]
   8768e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   87692:	60fc      	str	r4, [r7, #12]
   87694:	4640      	mov	r0, r8
   87696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8769a:	f7ff bb49 	b.w	86d30 <__malloc_unlock>
   8769e:	4770      	bx	lr
   876a0:	0a5a      	lsrs	r2, r3, #9
   876a2:	2a04      	cmp	r2, #4
   876a4:	d852      	bhi.n	8774c <_free_r+0x13c>
   876a6:	099a      	lsrs	r2, r3, #6
   876a8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   876ac:	00ff      	lsls	r7, r7, #3
   876ae:	f102 0538 	add.w	r5, r2, #56	; 0x38
   876b2:	19c8      	adds	r0, r1, r7
   876b4:	59ca      	ldr	r2, [r1, r7]
   876b6:	3808      	subs	r0, #8
   876b8:	4290      	cmp	r0, r2
   876ba:	d04f      	beq.n	8775c <_free_r+0x14c>
   876bc:	6851      	ldr	r1, [r2, #4]
   876be:	f021 0103 	bic.w	r1, r1, #3
   876c2:	428b      	cmp	r3, r1
   876c4:	d232      	bcs.n	8772c <_free_r+0x11c>
   876c6:	6892      	ldr	r2, [r2, #8]
   876c8:	4290      	cmp	r0, r2
   876ca:	d1f7      	bne.n	876bc <_free_r+0xac>
   876cc:	68c3      	ldr	r3, [r0, #12]
   876ce:	60a0      	str	r0, [r4, #8]
   876d0:	60e3      	str	r3, [r4, #12]
   876d2:	609c      	str	r4, [r3, #8]
   876d4:	60c4      	str	r4, [r0, #12]
   876d6:	4640      	mov	r0, r8
   876d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   876dc:	f7ff bb28 	b.w	86d30 <__malloc_unlock>
   876e0:	6895      	ldr	r5, [r2, #8]
   876e2:	4f3b      	ldr	r7, [pc, #236]	; (877d0 <_free_r+0x1c0>)
   876e4:	4403      	add	r3, r0
   876e6:	42bd      	cmp	r5, r7
   876e8:	d040      	beq.n	8776c <_free_r+0x15c>
   876ea:	68d0      	ldr	r0, [r2, #12]
   876ec:	f043 0201 	orr.w	r2, r3, #1
   876f0:	60e8      	str	r0, [r5, #12]
   876f2:	6085      	str	r5, [r0, #8]
   876f4:	6062      	str	r2, [r4, #4]
   876f6:	50e3      	str	r3, [r4, r3]
   876f8:	e7b7      	b.n	8766a <_free_r+0x5a>
   876fa:	07ff      	lsls	r7, r7, #31
   876fc:	4403      	add	r3, r0
   876fe:	d407      	bmi.n	87710 <_free_r+0x100>
   87700:	f855 5c08 	ldr.w	r5, [r5, #-8]
   87704:	1b64      	subs	r4, r4, r5
   87706:	68e2      	ldr	r2, [r4, #12]
   87708:	68a0      	ldr	r0, [r4, #8]
   8770a:	442b      	add	r3, r5
   8770c:	60c2      	str	r2, [r0, #12]
   8770e:	6090      	str	r0, [r2, #8]
   87710:	4a30      	ldr	r2, [pc, #192]	; (877d4 <_free_r+0x1c4>)
   87712:	f043 0001 	orr.w	r0, r3, #1
   87716:	6812      	ldr	r2, [r2, #0]
   87718:	6060      	str	r0, [r4, #4]
   8771a:	4293      	cmp	r3, r2
   8771c:	608c      	str	r4, [r1, #8]
   8771e:	d3b9      	bcc.n	87694 <_free_r+0x84>
   87720:	4b2d      	ldr	r3, [pc, #180]	; (877d8 <_free_r+0x1c8>)
   87722:	4640      	mov	r0, r8
   87724:	6819      	ldr	r1, [r3, #0]
   87726:	f7ff ff23 	bl	87570 <_malloc_trim_r>
   8772a:	e7b3      	b.n	87694 <_free_r+0x84>
   8772c:	4610      	mov	r0, r2
   8772e:	e7cd      	b.n	876cc <_free_r+0xbc>
   87730:	1811      	adds	r1, r2, r0
   87732:	6849      	ldr	r1, [r1, #4]
   87734:	07c9      	lsls	r1, r1, #31
   87736:	d444      	bmi.n	877c2 <_free_r+0x1b2>
   87738:	6891      	ldr	r1, [r2, #8]
   8773a:	4403      	add	r3, r0
   8773c:	68d2      	ldr	r2, [r2, #12]
   8773e:	f043 0001 	orr.w	r0, r3, #1
   87742:	60ca      	str	r2, [r1, #12]
   87744:	6091      	str	r1, [r2, #8]
   87746:	6060      	str	r0, [r4, #4]
   87748:	50e3      	str	r3, [r4, r3]
   8774a:	e7a3      	b.n	87694 <_free_r+0x84>
   8774c:	2a14      	cmp	r2, #20
   8774e:	d816      	bhi.n	8777e <_free_r+0x16e>
   87750:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   87754:	00ff      	lsls	r7, r7, #3
   87756:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8775a:	e7aa      	b.n	876b2 <_free_r+0xa2>
   8775c:	2301      	movs	r3, #1
   8775e:	10aa      	asrs	r2, r5, #2
   87760:	684d      	ldr	r5, [r1, #4]
   87762:	4093      	lsls	r3, r2
   87764:	432b      	orrs	r3, r5
   87766:	604b      	str	r3, [r1, #4]
   87768:	4603      	mov	r3, r0
   8776a:	e7b0      	b.n	876ce <_free_r+0xbe>
   8776c:	f043 0201 	orr.w	r2, r3, #1
   87770:	614c      	str	r4, [r1, #20]
   87772:	610c      	str	r4, [r1, #16]
   87774:	60e5      	str	r5, [r4, #12]
   87776:	60a5      	str	r5, [r4, #8]
   87778:	6062      	str	r2, [r4, #4]
   8777a:	50e3      	str	r3, [r4, r3]
   8777c:	e78a      	b.n	87694 <_free_r+0x84>
   8777e:	2a54      	cmp	r2, #84	; 0x54
   87780:	d806      	bhi.n	87790 <_free_r+0x180>
   87782:	0b1a      	lsrs	r2, r3, #12
   87784:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   87788:	00ff      	lsls	r7, r7, #3
   8778a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8778e:	e790      	b.n	876b2 <_free_r+0xa2>
   87790:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   87794:	d806      	bhi.n	877a4 <_free_r+0x194>
   87796:	0bda      	lsrs	r2, r3, #15
   87798:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8779c:	00ff      	lsls	r7, r7, #3
   8779e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   877a2:	e786      	b.n	876b2 <_free_r+0xa2>
   877a4:	f240 5054 	movw	r0, #1364	; 0x554
   877a8:	4282      	cmp	r2, r0
   877aa:	d806      	bhi.n	877ba <_free_r+0x1aa>
   877ac:	0c9a      	lsrs	r2, r3, #18
   877ae:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   877b2:	00ff      	lsls	r7, r7, #3
   877b4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   877b8:	e77b      	b.n	876b2 <_free_r+0xa2>
   877ba:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   877be:	257e      	movs	r5, #126	; 0x7e
   877c0:	e777      	b.n	876b2 <_free_r+0xa2>
   877c2:	f043 0101 	orr.w	r1, r3, #1
   877c6:	6061      	str	r1, [r4, #4]
   877c8:	6013      	str	r3, [r2, #0]
   877ca:	e763      	b.n	87694 <_free_r+0x84>
   877cc:	20000bcc 	.word	0x20000bcc
   877d0:	20000bd4 	.word	0x20000bd4
   877d4:	20000fd8 	.word	0x20000fd8
   877d8:	200010b4 	.word	0x200010b4

000877dc <memmove>:
   877dc:	4288      	cmp	r0, r1
   877de:	b5f0      	push	{r4, r5, r6, r7, lr}
   877e0:	d90d      	bls.n	877fe <memmove+0x22>
   877e2:	188b      	adds	r3, r1, r2
   877e4:	4298      	cmp	r0, r3
   877e6:	d20a      	bcs.n	877fe <memmove+0x22>
   877e8:	1884      	adds	r4, r0, r2
   877ea:	2a00      	cmp	r2, #0
   877ec:	d051      	beq.n	87892 <memmove+0xb6>
   877ee:	4622      	mov	r2, r4
   877f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   877f4:	4299      	cmp	r1, r3
   877f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   877fa:	d1f9      	bne.n	877f0 <memmove+0x14>
   877fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   877fe:	2a0f      	cmp	r2, #15
   87800:	d948      	bls.n	87894 <memmove+0xb8>
   87802:	ea41 0300 	orr.w	r3, r1, r0
   87806:	079b      	lsls	r3, r3, #30
   87808:	d146      	bne.n	87898 <memmove+0xbc>
   8780a:	4615      	mov	r5, r2
   8780c:	f100 0410 	add.w	r4, r0, #16
   87810:	f101 0310 	add.w	r3, r1, #16
   87814:	f853 6c10 	ldr.w	r6, [r3, #-16]
   87818:	3d10      	subs	r5, #16
   8781a:	f844 6c10 	str.w	r6, [r4, #-16]
   8781e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   87822:	2d0f      	cmp	r5, #15
   87824:	f844 6c0c 	str.w	r6, [r4, #-12]
   87828:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8782c:	f104 0410 	add.w	r4, r4, #16
   87830:	f844 6c18 	str.w	r6, [r4, #-24]
   87834:	f853 6c04 	ldr.w	r6, [r3, #-4]
   87838:	f103 0310 	add.w	r3, r3, #16
   8783c:	f844 6c14 	str.w	r6, [r4, #-20]
   87840:	d8e8      	bhi.n	87814 <memmove+0x38>
   87842:	f1a2 0310 	sub.w	r3, r2, #16
   87846:	f023 030f 	bic.w	r3, r3, #15
   8784a:	f002 0e0f 	and.w	lr, r2, #15
   8784e:	3310      	adds	r3, #16
   87850:	f1be 0f03 	cmp.w	lr, #3
   87854:	4419      	add	r1, r3
   87856:	4403      	add	r3, r0
   87858:	d921      	bls.n	8789e <memmove+0xc2>
   8785a:	460e      	mov	r6, r1
   8785c:	4674      	mov	r4, lr
   8785e:	1f1d      	subs	r5, r3, #4
   87860:	f856 7b04 	ldr.w	r7, [r6], #4
   87864:	3c04      	subs	r4, #4
   87866:	2c03      	cmp	r4, #3
   87868:	f845 7f04 	str.w	r7, [r5, #4]!
   8786c:	d8f8      	bhi.n	87860 <memmove+0x84>
   8786e:	f1ae 0404 	sub.w	r4, lr, #4
   87872:	f024 0403 	bic.w	r4, r4, #3
   87876:	3404      	adds	r4, #4
   87878:	4421      	add	r1, r4
   8787a:	4423      	add	r3, r4
   8787c:	f002 0203 	and.w	r2, r2, #3
   87880:	b162      	cbz	r2, 8789c <memmove+0xc0>
   87882:	3b01      	subs	r3, #1
   87884:	440a      	add	r2, r1
   87886:	f811 4b01 	ldrb.w	r4, [r1], #1
   8788a:	428a      	cmp	r2, r1
   8788c:	f803 4f01 	strb.w	r4, [r3, #1]!
   87890:	d1f9      	bne.n	87886 <memmove+0xaa>
   87892:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87894:	4603      	mov	r3, r0
   87896:	e7f3      	b.n	87880 <memmove+0xa4>
   87898:	4603      	mov	r3, r0
   8789a:	e7f2      	b.n	87882 <memmove+0xa6>
   8789c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8789e:	4672      	mov	r2, lr
   878a0:	e7ee      	b.n	87880 <memmove+0xa4>
   878a2:	bf00      	nop

000878a4 <_realloc_r>:
   878a4:	2900      	cmp	r1, #0
   878a6:	f000 8094 	beq.w	879d2 <_realloc_r+0x12e>
   878aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   878ae:	460c      	mov	r4, r1
   878b0:	4615      	mov	r5, r2
   878b2:	b083      	sub	sp, #12
   878b4:	4680      	mov	r8, r0
   878b6:	f105 060b 	add.w	r6, r5, #11
   878ba:	f7ff fa37 	bl	86d2c <__malloc_lock>
   878be:	f854 ec04 	ldr.w	lr, [r4, #-4]
   878c2:	2e16      	cmp	r6, #22
   878c4:	f02e 0703 	bic.w	r7, lr, #3
   878c8:	f1a4 0908 	sub.w	r9, r4, #8
   878cc:	d83c      	bhi.n	87948 <_realloc_r+0xa4>
   878ce:	2210      	movs	r2, #16
   878d0:	4616      	mov	r6, r2
   878d2:	42b5      	cmp	r5, r6
   878d4:	d83d      	bhi.n	87952 <_realloc_r+0xae>
   878d6:	4297      	cmp	r7, r2
   878d8:	da43      	bge.n	87962 <_realloc_r+0xbe>
   878da:	4bc6      	ldr	r3, [pc, #792]	; (87bf4 <_realloc_r+0x350>)
   878dc:	eb09 0007 	add.w	r0, r9, r7
   878e0:	6899      	ldr	r1, [r3, #8]
   878e2:	4288      	cmp	r0, r1
   878e4:	f000 80c3 	beq.w	87a6e <_realloc_r+0x1ca>
   878e8:	6843      	ldr	r3, [r0, #4]
   878ea:	f023 0101 	bic.w	r1, r3, #1
   878ee:	4401      	add	r1, r0
   878f0:	6849      	ldr	r1, [r1, #4]
   878f2:	07c9      	lsls	r1, r1, #31
   878f4:	d54d      	bpl.n	87992 <_realloc_r+0xee>
   878f6:	f01e 0f01 	tst.w	lr, #1
   878fa:	f000 809b 	beq.w	87a34 <_realloc_r+0x190>
   878fe:	4629      	mov	r1, r5
   87900:	4640      	mov	r0, r8
   87902:	f7fe fe9f 	bl	86644 <_malloc_r>
   87906:	4605      	mov	r5, r0
   87908:	2800      	cmp	r0, #0
   8790a:	d03b      	beq.n	87984 <_realloc_r+0xe0>
   8790c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87910:	f1a0 0208 	sub.w	r2, r0, #8
   87914:	f023 0301 	bic.w	r3, r3, #1
   87918:	444b      	add	r3, r9
   8791a:	429a      	cmp	r2, r3
   8791c:	f000 812b 	beq.w	87b76 <_realloc_r+0x2d2>
   87920:	1f3a      	subs	r2, r7, #4
   87922:	2a24      	cmp	r2, #36	; 0x24
   87924:	f200 8118 	bhi.w	87b58 <_realloc_r+0x2b4>
   87928:	2a13      	cmp	r2, #19
   8792a:	f200 80eb 	bhi.w	87b04 <_realloc_r+0x260>
   8792e:	4603      	mov	r3, r0
   87930:	4622      	mov	r2, r4
   87932:	6811      	ldr	r1, [r2, #0]
   87934:	6019      	str	r1, [r3, #0]
   87936:	6851      	ldr	r1, [r2, #4]
   87938:	6059      	str	r1, [r3, #4]
   8793a:	6892      	ldr	r2, [r2, #8]
   8793c:	609a      	str	r2, [r3, #8]
   8793e:	4621      	mov	r1, r4
   87940:	4640      	mov	r0, r8
   87942:	f7ff fe65 	bl	87610 <_free_r>
   87946:	e01d      	b.n	87984 <_realloc_r+0xe0>
   87948:	f026 0607 	bic.w	r6, r6, #7
   8794c:	2e00      	cmp	r6, #0
   8794e:	4632      	mov	r2, r6
   87950:	dabf      	bge.n	878d2 <_realloc_r+0x2e>
   87952:	2500      	movs	r5, #0
   87954:	230c      	movs	r3, #12
   87956:	4628      	mov	r0, r5
   87958:	f8c8 3000 	str.w	r3, [r8]
   8795c:	b003      	add	sp, #12
   8795e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87962:	4625      	mov	r5, r4
   87964:	1bbb      	subs	r3, r7, r6
   87966:	2b0f      	cmp	r3, #15
   87968:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8796c:	d81d      	bhi.n	879aa <_realloc_r+0x106>
   8796e:	f002 0201 	and.w	r2, r2, #1
   87972:	433a      	orrs	r2, r7
   87974:	eb09 0107 	add.w	r1, r9, r7
   87978:	f8c9 2004 	str.w	r2, [r9, #4]
   8797c:	684b      	ldr	r3, [r1, #4]
   8797e:	f043 0301 	orr.w	r3, r3, #1
   87982:	604b      	str	r3, [r1, #4]
   87984:	4640      	mov	r0, r8
   87986:	f7ff f9d3 	bl	86d30 <__malloc_unlock>
   8798a:	4628      	mov	r0, r5
   8798c:	b003      	add	sp, #12
   8798e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87992:	f023 0303 	bic.w	r3, r3, #3
   87996:	18f9      	adds	r1, r7, r3
   87998:	4291      	cmp	r1, r2
   8799a:	db1d      	blt.n	879d8 <_realloc_r+0x134>
   8799c:	68c3      	ldr	r3, [r0, #12]
   8799e:	6882      	ldr	r2, [r0, #8]
   879a0:	4625      	mov	r5, r4
   879a2:	60d3      	str	r3, [r2, #12]
   879a4:	460f      	mov	r7, r1
   879a6:	609a      	str	r2, [r3, #8]
   879a8:	e7dc      	b.n	87964 <_realloc_r+0xc0>
   879aa:	f002 0201 	and.w	r2, r2, #1
   879ae:	eb09 0106 	add.w	r1, r9, r6
   879b2:	f043 0301 	orr.w	r3, r3, #1
   879b6:	4332      	orrs	r2, r6
   879b8:	f8c9 2004 	str.w	r2, [r9, #4]
   879bc:	444f      	add	r7, r9
   879be:	604b      	str	r3, [r1, #4]
   879c0:	687b      	ldr	r3, [r7, #4]
   879c2:	3108      	adds	r1, #8
   879c4:	f043 0301 	orr.w	r3, r3, #1
   879c8:	607b      	str	r3, [r7, #4]
   879ca:	4640      	mov	r0, r8
   879cc:	f7ff fe20 	bl	87610 <_free_r>
   879d0:	e7d8      	b.n	87984 <_realloc_r+0xe0>
   879d2:	4611      	mov	r1, r2
   879d4:	f7fe be36 	b.w	86644 <_malloc_r>
   879d8:	f01e 0f01 	tst.w	lr, #1
   879dc:	d18f      	bne.n	878fe <_realloc_r+0x5a>
   879de:	f854 1c08 	ldr.w	r1, [r4, #-8]
   879e2:	eba9 0a01 	sub.w	sl, r9, r1
   879e6:	f8da 1004 	ldr.w	r1, [sl, #4]
   879ea:	f021 0103 	bic.w	r1, r1, #3
   879ee:	440b      	add	r3, r1
   879f0:	443b      	add	r3, r7
   879f2:	4293      	cmp	r3, r2
   879f4:	db26      	blt.n	87a44 <_realloc_r+0x1a0>
   879f6:	4655      	mov	r5, sl
   879f8:	68c1      	ldr	r1, [r0, #12]
   879fa:	6880      	ldr	r0, [r0, #8]
   879fc:	1f3a      	subs	r2, r7, #4
   879fe:	60c1      	str	r1, [r0, #12]
   87a00:	6088      	str	r0, [r1, #8]
   87a02:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87a06:	f8da 100c 	ldr.w	r1, [sl, #12]
   87a0a:	2a24      	cmp	r2, #36	; 0x24
   87a0c:	60c1      	str	r1, [r0, #12]
   87a0e:	6088      	str	r0, [r1, #8]
   87a10:	d826      	bhi.n	87a60 <_realloc_r+0x1bc>
   87a12:	2a13      	cmp	r2, #19
   87a14:	f240 8081 	bls.w	87b1a <_realloc_r+0x276>
   87a18:	6821      	ldr	r1, [r4, #0]
   87a1a:	2a1b      	cmp	r2, #27
   87a1c:	f8ca 1008 	str.w	r1, [sl, #8]
   87a20:	6861      	ldr	r1, [r4, #4]
   87a22:	f8ca 100c 	str.w	r1, [sl, #12]
   87a26:	f200 80ad 	bhi.w	87b84 <_realloc_r+0x2e0>
   87a2a:	f104 0008 	add.w	r0, r4, #8
   87a2e:	f10a 0210 	add.w	r2, sl, #16
   87a32:	e074      	b.n	87b1e <_realloc_r+0x27a>
   87a34:	f854 3c08 	ldr.w	r3, [r4, #-8]
   87a38:	eba9 0a03 	sub.w	sl, r9, r3
   87a3c:	f8da 1004 	ldr.w	r1, [sl, #4]
   87a40:	f021 0103 	bic.w	r1, r1, #3
   87a44:	187b      	adds	r3, r7, r1
   87a46:	4293      	cmp	r3, r2
   87a48:	f6ff af59 	blt.w	878fe <_realloc_r+0x5a>
   87a4c:	4655      	mov	r5, sl
   87a4e:	f8da 100c 	ldr.w	r1, [sl, #12]
   87a52:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87a56:	1f3a      	subs	r2, r7, #4
   87a58:	2a24      	cmp	r2, #36	; 0x24
   87a5a:	60c1      	str	r1, [r0, #12]
   87a5c:	6088      	str	r0, [r1, #8]
   87a5e:	d9d8      	bls.n	87a12 <_realloc_r+0x16e>
   87a60:	4621      	mov	r1, r4
   87a62:	4628      	mov	r0, r5
   87a64:	461f      	mov	r7, r3
   87a66:	46d1      	mov	r9, sl
   87a68:	f7ff feb8 	bl	877dc <memmove>
   87a6c:	e77a      	b.n	87964 <_realloc_r+0xc0>
   87a6e:	6841      	ldr	r1, [r0, #4]
   87a70:	f106 0010 	add.w	r0, r6, #16
   87a74:	f021 0b03 	bic.w	fp, r1, #3
   87a78:	44bb      	add	fp, r7
   87a7a:	4583      	cmp	fp, r0
   87a7c:	da58      	bge.n	87b30 <_realloc_r+0x28c>
   87a7e:	f01e 0f01 	tst.w	lr, #1
   87a82:	f47f af3c 	bne.w	878fe <_realloc_r+0x5a>
   87a86:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87a8a:	eba9 0a01 	sub.w	sl, r9, r1
   87a8e:	f8da 1004 	ldr.w	r1, [sl, #4]
   87a92:	f021 0103 	bic.w	r1, r1, #3
   87a96:	448b      	add	fp, r1
   87a98:	4558      	cmp	r0, fp
   87a9a:	dcd3      	bgt.n	87a44 <_realloc_r+0x1a0>
   87a9c:	4655      	mov	r5, sl
   87a9e:	f8da 100c 	ldr.w	r1, [sl, #12]
   87aa2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87aa6:	1f3a      	subs	r2, r7, #4
   87aa8:	2a24      	cmp	r2, #36	; 0x24
   87aaa:	60c1      	str	r1, [r0, #12]
   87aac:	6088      	str	r0, [r1, #8]
   87aae:	f200 808d 	bhi.w	87bcc <_realloc_r+0x328>
   87ab2:	2a13      	cmp	r2, #19
   87ab4:	f240 8087 	bls.w	87bc6 <_realloc_r+0x322>
   87ab8:	6821      	ldr	r1, [r4, #0]
   87aba:	2a1b      	cmp	r2, #27
   87abc:	f8ca 1008 	str.w	r1, [sl, #8]
   87ac0:	6861      	ldr	r1, [r4, #4]
   87ac2:	f8ca 100c 	str.w	r1, [sl, #12]
   87ac6:	f200 8088 	bhi.w	87bda <_realloc_r+0x336>
   87aca:	f104 0108 	add.w	r1, r4, #8
   87ace:	f10a 0210 	add.w	r2, sl, #16
   87ad2:	6808      	ldr	r0, [r1, #0]
   87ad4:	6010      	str	r0, [r2, #0]
   87ad6:	6848      	ldr	r0, [r1, #4]
   87ad8:	6050      	str	r0, [r2, #4]
   87ada:	6889      	ldr	r1, [r1, #8]
   87adc:	6091      	str	r1, [r2, #8]
   87ade:	ebab 0206 	sub.w	r2, fp, r6
   87ae2:	eb0a 0106 	add.w	r1, sl, r6
   87ae6:	f042 0201 	orr.w	r2, r2, #1
   87aea:	6099      	str	r1, [r3, #8]
   87aec:	604a      	str	r2, [r1, #4]
   87aee:	f8da 3004 	ldr.w	r3, [sl, #4]
   87af2:	4640      	mov	r0, r8
   87af4:	f003 0301 	and.w	r3, r3, #1
   87af8:	431e      	orrs	r6, r3
   87afa:	f8ca 6004 	str.w	r6, [sl, #4]
   87afe:	f7ff f917 	bl	86d30 <__malloc_unlock>
   87b02:	e742      	b.n	8798a <_realloc_r+0xe6>
   87b04:	6823      	ldr	r3, [r4, #0]
   87b06:	2a1b      	cmp	r2, #27
   87b08:	6003      	str	r3, [r0, #0]
   87b0a:	6863      	ldr	r3, [r4, #4]
   87b0c:	6043      	str	r3, [r0, #4]
   87b0e:	d827      	bhi.n	87b60 <_realloc_r+0x2bc>
   87b10:	f100 0308 	add.w	r3, r0, #8
   87b14:	f104 0208 	add.w	r2, r4, #8
   87b18:	e70b      	b.n	87932 <_realloc_r+0x8e>
   87b1a:	4620      	mov	r0, r4
   87b1c:	462a      	mov	r2, r5
   87b1e:	6801      	ldr	r1, [r0, #0]
   87b20:	461f      	mov	r7, r3
   87b22:	6011      	str	r1, [r2, #0]
   87b24:	6841      	ldr	r1, [r0, #4]
   87b26:	46d1      	mov	r9, sl
   87b28:	6051      	str	r1, [r2, #4]
   87b2a:	6883      	ldr	r3, [r0, #8]
   87b2c:	6093      	str	r3, [r2, #8]
   87b2e:	e719      	b.n	87964 <_realloc_r+0xc0>
   87b30:	ebab 0b06 	sub.w	fp, fp, r6
   87b34:	eb09 0106 	add.w	r1, r9, r6
   87b38:	f04b 0201 	orr.w	r2, fp, #1
   87b3c:	6099      	str	r1, [r3, #8]
   87b3e:	604a      	str	r2, [r1, #4]
   87b40:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87b44:	4640      	mov	r0, r8
   87b46:	f003 0301 	and.w	r3, r3, #1
   87b4a:	431e      	orrs	r6, r3
   87b4c:	f844 6c04 	str.w	r6, [r4, #-4]
   87b50:	f7ff f8ee 	bl	86d30 <__malloc_unlock>
   87b54:	4625      	mov	r5, r4
   87b56:	e718      	b.n	8798a <_realloc_r+0xe6>
   87b58:	4621      	mov	r1, r4
   87b5a:	f7ff fe3f 	bl	877dc <memmove>
   87b5e:	e6ee      	b.n	8793e <_realloc_r+0x9a>
   87b60:	68a3      	ldr	r3, [r4, #8]
   87b62:	2a24      	cmp	r2, #36	; 0x24
   87b64:	6083      	str	r3, [r0, #8]
   87b66:	68e3      	ldr	r3, [r4, #12]
   87b68:	60c3      	str	r3, [r0, #12]
   87b6a:	d018      	beq.n	87b9e <_realloc_r+0x2fa>
   87b6c:	f100 0310 	add.w	r3, r0, #16
   87b70:	f104 0210 	add.w	r2, r4, #16
   87b74:	e6dd      	b.n	87932 <_realloc_r+0x8e>
   87b76:	f850 3c04 	ldr.w	r3, [r0, #-4]
   87b7a:	4625      	mov	r5, r4
   87b7c:	f023 0303 	bic.w	r3, r3, #3
   87b80:	441f      	add	r7, r3
   87b82:	e6ef      	b.n	87964 <_realloc_r+0xc0>
   87b84:	68a1      	ldr	r1, [r4, #8]
   87b86:	2a24      	cmp	r2, #36	; 0x24
   87b88:	f8ca 1010 	str.w	r1, [sl, #16]
   87b8c:	68e1      	ldr	r1, [r4, #12]
   87b8e:	f8ca 1014 	str.w	r1, [sl, #20]
   87b92:	d00d      	beq.n	87bb0 <_realloc_r+0x30c>
   87b94:	f104 0010 	add.w	r0, r4, #16
   87b98:	f10a 0218 	add.w	r2, sl, #24
   87b9c:	e7bf      	b.n	87b1e <_realloc_r+0x27a>
   87b9e:	6922      	ldr	r2, [r4, #16]
   87ba0:	f100 0318 	add.w	r3, r0, #24
   87ba4:	6102      	str	r2, [r0, #16]
   87ba6:	6961      	ldr	r1, [r4, #20]
   87ba8:	f104 0218 	add.w	r2, r4, #24
   87bac:	6141      	str	r1, [r0, #20]
   87bae:	e6c0      	b.n	87932 <_realloc_r+0x8e>
   87bb0:	6922      	ldr	r2, [r4, #16]
   87bb2:	f104 0018 	add.w	r0, r4, #24
   87bb6:	f8ca 2018 	str.w	r2, [sl, #24]
   87bba:	6961      	ldr	r1, [r4, #20]
   87bbc:	f10a 0220 	add.w	r2, sl, #32
   87bc0:	f8ca 101c 	str.w	r1, [sl, #28]
   87bc4:	e7ab      	b.n	87b1e <_realloc_r+0x27a>
   87bc6:	4621      	mov	r1, r4
   87bc8:	462a      	mov	r2, r5
   87bca:	e782      	b.n	87ad2 <_realloc_r+0x22e>
   87bcc:	4621      	mov	r1, r4
   87bce:	4628      	mov	r0, r5
   87bd0:	9301      	str	r3, [sp, #4]
   87bd2:	f7ff fe03 	bl	877dc <memmove>
   87bd6:	9b01      	ldr	r3, [sp, #4]
   87bd8:	e781      	b.n	87ade <_realloc_r+0x23a>
   87bda:	68a1      	ldr	r1, [r4, #8]
   87bdc:	2a24      	cmp	r2, #36	; 0x24
   87bde:	f8ca 1010 	str.w	r1, [sl, #16]
   87be2:	68e1      	ldr	r1, [r4, #12]
   87be4:	f8ca 1014 	str.w	r1, [sl, #20]
   87be8:	d006      	beq.n	87bf8 <_realloc_r+0x354>
   87bea:	f104 0110 	add.w	r1, r4, #16
   87bee:	f10a 0218 	add.w	r2, sl, #24
   87bf2:	e76e      	b.n	87ad2 <_realloc_r+0x22e>
   87bf4:	20000bcc 	.word	0x20000bcc
   87bf8:	6922      	ldr	r2, [r4, #16]
   87bfa:	f104 0118 	add.w	r1, r4, #24
   87bfe:	f8ca 2018 	str.w	r2, [sl, #24]
   87c02:	6960      	ldr	r0, [r4, #20]
   87c04:	f10a 0220 	add.w	r2, sl, #32
   87c08:	f8ca 001c 	str.w	r0, [sl, #28]
   87c0c:	e761      	b.n	87ad2 <_realloc_r+0x22e>
   87c0e:	bf00      	nop

00087c10 <__aeabi_drsub>:
   87c10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   87c14:	e002      	b.n	87c1c <__adddf3>
   87c16:	bf00      	nop

00087c18 <__aeabi_dsub>:
   87c18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00087c1c <__adddf3>:
   87c1c:	b530      	push	{r4, r5, lr}
   87c1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   87c22:	ea4f 0543 	mov.w	r5, r3, lsl #1
   87c26:	ea94 0f05 	teq	r4, r5
   87c2a:	bf08      	it	eq
   87c2c:	ea90 0f02 	teqeq	r0, r2
   87c30:	bf1f      	itttt	ne
   87c32:	ea54 0c00 	orrsne.w	ip, r4, r0
   87c36:	ea55 0c02 	orrsne.w	ip, r5, r2
   87c3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   87c3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87c42:	f000 80e2 	beq.w	87e0a <__adddf3+0x1ee>
   87c46:	ea4f 5454 	mov.w	r4, r4, lsr #21
   87c4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   87c4e:	bfb8      	it	lt
   87c50:	426d      	neglt	r5, r5
   87c52:	dd0c      	ble.n	87c6e <__adddf3+0x52>
   87c54:	442c      	add	r4, r5
   87c56:	ea80 0202 	eor.w	r2, r0, r2
   87c5a:	ea81 0303 	eor.w	r3, r1, r3
   87c5e:	ea82 0000 	eor.w	r0, r2, r0
   87c62:	ea83 0101 	eor.w	r1, r3, r1
   87c66:	ea80 0202 	eor.w	r2, r0, r2
   87c6a:	ea81 0303 	eor.w	r3, r1, r3
   87c6e:	2d36      	cmp	r5, #54	; 0x36
   87c70:	bf88      	it	hi
   87c72:	bd30      	pophi	{r4, r5, pc}
   87c74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   87c78:	ea4f 3101 	mov.w	r1, r1, lsl #12
   87c7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   87c80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   87c84:	d002      	beq.n	87c8c <__adddf3+0x70>
   87c86:	4240      	negs	r0, r0
   87c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87c8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   87c90:	ea4f 3303 	mov.w	r3, r3, lsl #12
   87c94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   87c98:	d002      	beq.n	87ca0 <__adddf3+0x84>
   87c9a:	4252      	negs	r2, r2
   87c9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   87ca0:	ea94 0f05 	teq	r4, r5
   87ca4:	f000 80a7 	beq.w	87df6 <__adddf3+0x1da>
   87ca8:	f1a4 0401 	sub.w	r4, r4, #1
   87cac:	f1d5 0e20 	rsbs	lr, r5, #32
   87cb0:	db0d      	blt.n	87cce <__adddf3+0xb2>
   87cb2:	fa02 fc0e 	lsl.w	ip, r2, lr
   87cb6:	fa22 f205 	lsr.w	r2, r2, r5
   87cba:	1880      	adds	r0, r0, r2
   87cbc:	f141 0100 	adc.w	r1, r1, #0
   87cc0:	fa03 f20e 	lsl.w	r2, r3, lr
   87cc4:	1880      	adds	r0, r0, r2
   87cc6:	fa43 f305 	asr.w	r3, r3, r5
   87cca:	4159      	adcs	r1, r3
   87ccc:	e00e      	b.n	87cec <__adddf3+0xd0>
   87cce:	f1a5 0520 	sub.w	r5, r5, #32
   87cd2:	f10e 0e20 	add.w	lr, lr, #32
   87cd6:	2a01      	cmp	r2, #1
   87cd8:	fa03 fc0e 	lsl.w	ip, r3, lr
   87cdc:	bf28      	it	cs
   87cde:	f04c 0c02 	orrcs.w	ip, ip, #2
   87ce2:	fa43 f305 	asr.w	r3, r3, r5
   87ce6:	18c0      	adds	r0, r0, r3
   87ce8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   87cec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87cf0:	d507      	bpl.n	87d02 <__adddf3+0xe6>
   87cf2:	f04f 0e00 	mov.w	lr, #0
   87cf6:	f1dc 0c00 	rsbs	ip, ip, #0
   87cfa:	eb7e 0000 	sbcs.w	r0, lr, r0
   87cfe:	eb6e 0101 	sbc.w	r1, lr, r1
   87d02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   87d06:	d31b      	bcc.n	87d40 <__adddf3+0x124>
   87d08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   87d0c:	d30c      	bcc.n	87d28 <__adddf3+0x10c>
   87d0e:	0849      	lsrs	r1, r1, #1
   87d10:	ea5f 0030 	movs.w	r0, r0, rrx
   87d14:	ea4f 0c3c 	mov.w	ip, ip, rrx
   87d18:	f104 0401 	add.w	r4, r4, #1
   87d1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   87d20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   87d24:	f080 809a 	bcs.w	87e5c <__adddf3+0x240>
   87d28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   87d2c:	bf08      	it	eq
   87d2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   87d32:	f150 0000 	adcs.w	r0, r0, #0
   87d36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87d3a:	ea41 0105 	orr.w	r1, r1, r5
   87d3e:	bd30      	pop	{r4, r5, pc}
   87d40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   87d44:	4140      	adcs	r0, r0
   87d46:	eb41 0101 	adc.w	r1, r1, r1
   87d4a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87d4e:	f1a4 0401 	sub.w	r4, r4, #1
   87d52:	d1e9      	bne.n	87d28 <__adddf3+0x10c>
   87d54:	f091 0f00 	teq	r1, #0
   87d58:	bf04      	itt	eq
   87d5a:	4601      	moveq	r1, r0
   87d5c:	2000      	moveq	r0, #0
   87d5e:	fab1 f381 	clz	r3, r1
   87d62:	bf08      	it	eq
   87d64:	3320      	addeq	r3, #32
   87d66:	f1a3 030b 	sub.w	r3, r3, #11
   87d6a:	f1b3 0220 	subs.w	r2, r3, #32
   87d6e:	da0c      	bge.n	87d8a <__adddf3+0x16e>
   87d70:	320c      	adds	r2, #12
   87d72:	dd08      	ble.n	87d86 <__adddf3+0x16a>
   87d74:	f102 0c14 	add.w	ip, r2, #20
   87d78:	f1c2 020c 	rsb	r2, r2, #12
   87d7c:	fa01 f00c 	lsl.w	r0, r1, ip
   87d80:	fa21 f102 	lsr.w	r1, r1, r2
   87d84:	e00c      	b.n	87da0 <__adddf3+0x184>
   87d86:	f102 0214 	add.w	r2, r2, #20
   87d8a:	bfd8      	it	le
   87d8c:	f1c2 0c20 	rsble	ip, r2, #32
   87d90:	fa01 f102 	lsl.w	r1, r1, r2
   87d94:	fa20 fc0c 	lsr.w	ip, r0, ip
   87d98:	bfdc      	itt	le
   87d9a:	ea41 010c 	orrle.w	r1, r1, ip
   87d9e:	4090      	lslle	r0, r2
   87da0:	1ae4      	subs	r4, r4, r3
   87da2:	bfa2      	ittt	ge
   87da4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   87da8:	4329      	orrge	r1, r5
   87daa:	bd30      	popge	{r4, r5, pc}
   87dac:	ea6f 0404 	mvn.w	r4, r4
   87db0:	3c1f      	subs	r4, #31
   87db2:	da1c      	bge.n	87dee <__adddf3+0x1d2>
   87db4:	340c      	adds	r4, #12
   87db6:	dc0e      	bgt.n	87dd6 <__adddf3+0x1ba>
   87db8:	f104 0414 	add.w	r4, r4, #20
   87dbc:	f1c4 0220 	rsb	r2, r4, #32
   87dc0:	fa20 f004 	lsr.w	r0, r0, r4
   87dc4:	fa01 f302 	lsl.w	r3, r1, r2
   87dc8:	ea40 0003 	orr.w	r0, r0, r3
   87dcc:	fa21 f304 	lsr.w	r3, r1, r4
   87dd0:	ea45 0103 	orr.w	r1, r5, r3
   87dd4:	bd30      	pop	{r4, r5, pc}
   87dd6:	f1c4 040c 	rsb	r4, r4, #12
   87dda:	f1c4 0220 	rsb	r2, r4, #32
   87dde:	fa20 f002 	lsr.w	r0, r0, r2
   87de2:	fa01 f304 	lsl.w	r3, r1, r4
   87de6:	ea40 0003 	orr.w	r0, r0, r3
   87dea:	4629      	mov	r1, r5
   87dec:	bd30      	pop	{r4, r5, pc}
   87dee:	fa21 f004 	lsr.w	r0, r1, r4
   87df2:	4629      	mov	r1, r5
   87df4:	bd30      	pop	{r4, r5, pc}
   87df6:	f094 0f00 	teq	r4, #0
   87dfa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   87dfe:	bf06      	itte	eq
   87e00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   87e04:	3401      	addeq	r4, #1
   87e06:	3d01      	subne	r5, #1
   87e08:	e74e      	b.n	87ca8 <__adddf3+0x8c>
   87e0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87e0e:	bf18      	it	ne
   87e10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87e14:	d029      	beq.n	87e6a <__adddf3+0x24e>
   87e16:	ea94 0f05 	teq	r4, r5
   87e1a:	bf08      	it	eq
   87e1c:	ea90 0f02 	teqeq	r0, r2
   87e20:	d005      	beq.n	87e2e <__adddf3+0x212>
   87e22:	ea54 0c00 	orrs.w	ip, r4, r0
   87e26:	bf04      	itt	eq
   87e28:	4619      	moveq	r1, r3
   87e2a:	4610      	moveq	r0, r2
   87e2c:	bd30      	pop	{r4, r5, pc}
   87e2e:	ea91 0f03 	teq	r1, r3
   87e32:	bf1e      	ittt	ne
   87e34:	2100      	movne	r1, #0
   87e36:	2000      	movne	r0, #0
   87e38:	bd30      	popne	{r4, r5, pc}
   87e3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   87e3e:	d105      	bne.n	87e4c <__adddf3+0x230>
   87e40:	0040      	lsls	r0, r0, #1
   87e42:	4149      	adcs	r1, r1
   87e44:	bf28      	it	cs
   87e46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   87e4a:	bd30      	pop	{r4, r5, pc}
   87e4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   87e50:	bf3c      	itt	cc
   87e52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   87e56:	bd30      	popcc	{r4, r5, pc}
   87e58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87e5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   87e60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87e64:	f04f 0000 	mov.w	r0, #0
   87e68:	bd30      	pop	{r4, r5, pc}
   87e6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87e6e:	bf1a      	itte	ne
   87e70:	4619      	movne	r1, r3
   87e72:	4610      	movne	r0, r2
   87e74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   87e78:	bf1c      	itt	ne
   87e7a:	460b      	movne	r3, r1
   87e7c:	4602      	movne	r2, r0
   87e7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   87e82:	bf06      	itte	eq
   87e84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   87e88:	ea91 0f03 	teqeq	r1, r3
   87e8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   87e90:	bd30      	pop	{r4, r5, pc}
   87e92:	bf00      	nop

00087e94 <__aeabi_ui2d>:
   87e94:	f090 0f00 	teq	r0, #0
   87e98:	bf04      	itt	eq
   87e9a:	2100      	moveq	r1, #0
   87e9c:	4770      	bxeq	lr
   87e9e:	b530      	push	{r4, r5, lr}
   87ea0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87ea4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87ea8:	f04f 0500 	mov.w	r5, #0
   87eac:	f04f 0100 	mov.w	r1, #0
   87eb0:	e750      	b.n	87d54 <__adddf3+0x138>
   87eb2:	bf00      	nop

00087eb4 <__aeabi_i2d>:
   87eb4:	f090 0f00 	teq	r0, #0
   87eb8:	bf04      	itt	eq
   87eba:	2100      	moveq	r1, #0
   87ebc:	4770      	bxeq	lr
   87ebe:	b530      	push	{r4, r5, lr}
   87ec0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87ec4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87ec8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   87ecc:	bf48      	it	mi
   87ece:	4240      	negmi	r0, r0
   87ed0:	f04f 0100 	mov.w	r1, #0
   87ed4:	e73e      	b.n	87d54 <__adddf3+0x138>
   87ed6:	bf00      	nop

00087ed8 <__aeabi_f2d>:
   87ed8:	0042      	lsls	r2, r0, #1
   87eda:	ea4f 01e2 	mov.w	r1, r2, asr #3
   87ede:	ea4f 0131 	mov.w	r1, r1, rrx
   87ee2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   87ee6:	bf1f      	itttt	ne
   87ee8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   87eec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87ef0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   87ef4:	4770      	bxne	lr
   87ef6:	f092 0f00 	teq	r2, #0
   87efa:	bf14      	ite	ne
   87efc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87f00:	4770      	bxeq	lr
   87f02:	b530      	push	{r4, r5, lr}
   87f04:	f44f 7460 	mov.w	r4, #896	; 0x380
   87f08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87f0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87f10:	e720      	b.n	87d54 <__adddf3+0x138>
   87f12:	bf00      	nop

00087f14 <__aeabi_ul2d>:
   87f14:	ea50 0201 	orrs.w	r2, r0, r1
   87f18:	bf08      	it	eq
   87f1a:	4770      	bxeq	lr
   87f1c:	b530      	push	{r4, r5, lr}
   87f1e:	f04f 0500 	mov.w	r5, #0
   87f22:	e00a      	b.n	87f3a <__aeabi_l2d+0x16>

00087f24 <__aeabi_l2d>:
   87f24:	ea50 0201 	orrs.w	r2, r0, r1
   87f28:	bf08      	it	eq
   87f2a:	4770      	bxeq	lr
   87f2c:	b530      	push	{r4, r5, lr}
   87f2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   87f32:	d502      	bpl.n	87f3a <__aeabi_l2d+0x16>
   87f34:	4240      	negs	r0, r0
   87f36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87f3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87f3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87f42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   87f46:	f43f aedc 	beq.w	87d02 <__adddf3+0xe6>
   87f4a:	f04f 0203 	mov.w	r2, #3
   87f4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87f52:	bf18      	it	ne
   87f54:	3203      	addne	r2, #3
   87f56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87f5a:	bf18      	it	ne
   87f5c:	3203      	addne	r2, #3
   87f5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   87f62:	f1c2 0320 	rsb	r3, r2, #32
   87f66:	fa00 fc03 	lsl.w	ip, r0, r3
   87f6a:	fa20 f002 	lsr.w	r0, r0, r2
   87f6e:	fa01 fe03 	lsl.w	lr, r1, r3
   87f72:	ea40 000e 	orr.w	r0, r0, lr
   87f76:	fa21 f102 	lsr.w	r1, r1, r2
   87f7a:	4414      	add	r4, r2
   87f7c:	e6c1      	b.n	87d02 <__adddf3+0xe6>
   87f7e:	bf00      	nop

00087f80 <__aeabi_dmul>:
   87f80:	b570      	push	{r4, r5, r6, lr}
   87f82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87f86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87f8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87f8e:	bf1d      	ittte	ne
   87f90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87f94:	ea94 0f0c 	teqne	r4, ip
   87f98:	ea95 0f0c 	teqne	r5, ip
   87f9c:	f000 f8de 	bleq	8815c <__aeabi_dmul+0x1dc>
   87fa0:	442c      	add	r4, r5
   87fa2:	ea81 0603 	eor.w	r6, r1, r3
   87fa6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   87faa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   87fae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   87fb2:	bf18      	it	ne
   87fb4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   87fb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   87fc0:	d038      	beq.n	88034 <__aeabi_dmul+0xb4>
   87fc2:	fba0 ce02 	umull	ip, lr, r0, r2
   87fc6:	f04f 0500 	mov.w	r5, #0
   87fca:	fbe1 e502 	umlal	lr, r5, r1, r2
   87fce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   87fd2:	fbe0 e503 	umlal	lr, r5, r0, r3
   87fd6:	f04f 0600 	mov.w	r6, #0
   87fda:	fbe1 5603 	umlal	r5, r6, r1, r3
   87fde:	f09c 0f00 	teq	ip, #0
   87fe2:	bf18      	it	ne
   87fe4:	f04e 0e01 	orrne.w	lr, lr, #1
   87fe8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   87fec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   87ff0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   87ff4:	d204      	bcs.n	88000 <__aeabi_dmul+0x80>
   87ff6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   87ffa:	416d      	adcs	r5, r5
   87ffc:	eb46 0606 	adc.w	r6, r6, r6
   88000:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   88004:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   88008:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8800c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   88010:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   88014:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   88018:	bf88      	it	hi
   8801a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8801e:	d81e      	bhi.n	8805e <__aeabi_dmul+0xde>
   88020:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   88024:	bf08      	it	eq
   88026:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8802a:	f150 0000 	adcs.w	r0, r0, #0
   8802e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   88032:	bd70      	pop	{r4, r5, r6, pc}
   88034:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   88038:	ea46 0101 	orr.w	r1, r6, r1
   8803c:	ea40 0002 	orr.w	r0, r0, r2
   88040:	ea81 0103 	eor.w	r1, r1, r3
   88044:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   88048:	bfc2      	ittt	gt
   8804a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8804e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   88052:	bd70      	popgt	{r4, r5, r6, pc}
   88054:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88058:	f04f 0e00 	mov.w	lr, #0
   8805c:	3c01      	subs	r4, #1
   8805e:	f300 80ab 	bgt.w	881b8 <__aeabi_dmul+0x238>
   88062:	f114 0f36 	cmn.w	r4, #54	; 0x36
   88066:	bfde      	ittt	le
   88068:	2000      	movle	r0, #0
   8806a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8806e:	bd70      	pople	{r4, r5, r6, pc}
   88070:	f1c4 0400 	rsb	r4, r4, #0
   88074:	3c20      	subs	r4, #32
   88076:	da35      	bge.n	880e4 <__aeabi_dmul+0x164>
   88078:	340c      	adds	r4, #12
   8807a:	dc1b      	bgt.n	880b4 <__aeabi_dmul+0x134>
   8807c:	f104 0414 	add.w	r4, r4, #20
   88080:	f1c4 0520 	rsb	r5, r4, #32
   88084:	fa00 f305 	lsl.w	r3, r0, r5
   88088:	fa20 f004 	lsr.w	r0, r0, r4
   8808c:	fa01 f205 	lsl.w	r2, r1, r5
   88090:	ea40 0002 	orr.w	r0, r0, r2
   88094:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   88098:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8809c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   880a0:	fa21 f604 	lsr.w	r6, r1, r4
   880a4:	eb42 0106 	adc.w	r1, r2, r6
   880a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   880ac:	bf08      	it	eq
   880ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   880b2:	bd70      	pop	{r4, r5, r6, pc}
   880b4:	f1c4 040c 	rsb	r4, r4, #12
   880b8:	f1c4 0520 	rsb	r5, r4, #32
   880bc:	fa00 f304 	lsl.w	r3, r0, r4
   880c0:	fa20 f005 	lsr.w	r0, r0, r5
   880c4:	fa01 f204 	lsl.w	r2, r1, r4
   880c8:	ea40 0002 	orr.w	r0, r0, r2
   880cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   880d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   880d4:	f141 0100 	adc.w	r1, r1, #0
   880d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   880dc:	bf08      	it	eq
   880de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   880e2:	bd70      	pop	{r4, r5, r6, pc}
   880e4:	f1c4 0520 	rsb	r5, r4, #32
   880e8:	fa00 f205 	lsl.w	r2, r0, r5
   880ec:	ea4e 0e02 	orr.w	lr, lr, r2
   880f0:	fa20 f304 	lsr.w	r3, r0, r4
   880f4:	fa01 f205 	lsl.w	r2, r1, r5
   880f8:	ea43 0302 	orr.w	r3, r3, r2
   880fc:	fa21 f004 	lsr.w	r0, r1, r4
   88100:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88104:	fa21 f204 	lsr.w	r2, r1, r4
   88108:	ea20 0002 	bic.w	r0, r0, r2
   8810c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   88110:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88114:	bf08      	it	eq
   88116:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8811a:	bd70      	pop	{r4, r5, r6, pc}
   8811c:	f094 0f00 	teq	r4, #0
   88120:	d10f      	bne.n	88142 <__aeabi_dmul+0x1c2>
   88122:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   88126:	0040      	lsls	r0, r0, #1
   88128:	eb41 0101 	adc.w	r1, r1, r1
   8812c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88130:	bf08      	it	eq
   88132:	3c01      	subeq	r4, #1
   88134:	d0f7      	beq.n	88126 <__aeabi_dmul+0x1a6>
   88136:	ea41 0106 	orr.w	r1, r1, r6
   8813a:	f095 0f00 	teq	r5, #0
   8813e:	bf18      	it	ne
   88140:	4770      	bxne	lr
   88142:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   88146:	0052      	lsls	r2, r2, #1
   88148:	eb43 0303 	adc.w	r3, r3, r3
   8814c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   88150:	bf08      	it	eq
   88152:	3d01      	subeq	r5, #1
   88154:	d0f7      	beq.n	88146 <__aeabi_dmul+0x1c6>
   88156:	ea43 0306 	orr.w	r3, r3, r6
   8815a:	4770      	bx	lr
   8815c:	ea94 0f0c 	teq	r4, ip
   88160:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   88164:	bf18      	it	ne
   88166:	ea95 0f0c 	teqne	r5, ip
   8816a:	d00c      	beq.n	88186 <__aeabi_dmul+0x206>
   8816c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88170:	bf18      	it	ne
   88172:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88176:	d1d1      	bne.n	8811c <__aeabi_dmul+0x19c>
   88178:	ea81 0103 	eor.w	r1, r1, r3
   8817c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88180:	f04f 0000 	mov.w	r0, #0
   88184:	bd70      	pop	{r4, r5, r6, pc}
   88186:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8818a:	bf06      	itte	eq
   8818c:	4610      	moveq	r0, r2
   8818e:	4619      	moveq	r1, r3
   88190:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88194:	d019      	beq.n	881ca <__aeabi_dmul+0x24a>
   88196:	ea94 0f0c 	teq	r4, ip
   8819a:	d102      	bne.n	881a2 <__aeabi_dmul+0x222>
   8819c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   881a0:	d113      	bne.n	881ca <__aeabi_dmul+0x24a>
   881a2:	ea95 0f0c 	teq	r5, ip
   881a6:	d105      	bne.n	881b4 <__aeabi_dmul+0x234>
   881a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   881ac:	bf1c      	itt	ne
   881ae:	4610      	movne	r0, r2
   881b0:	4619      	movne	r1, r3
   881b2:	d10a      	bne.n	881ca <__aeabi_dmul+0x24a>
   881b4:	ea81 0103 	eor.w	r1, r1, r3
   881b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   881bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   881c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   881c4:	f04f 0000 	mov.w	r0, #0
   881c8:	bd70      	pop	{r4, r5, r6, pc}
   881ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   881ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   881d2:	bd70      	pop	{r4, r5, r6, pc}

000881d4 <__aeabi_ddiv>:
   881d4:	b570      	push	{r4, r5, r6, lr}
   881d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   881da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   881de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   881e2:	bf1d      	ittte	ne
   881e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   881e8:	ea94 0f0c 	teqne	r4, ip
   881ec:	ea95 0f0c 	teqne	r5, ip
   881f0:	f000 f8a7 	bleq	88342 <__aeabi_ddiv+0x16e>
   881f4:	eba4 0405 	sub.w	r4, r4, r5
   881f8:	ea81 0e03 	eor.w	lr, r1, r3
   881fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   88200:	ea4f 3101 	mov.w	r1, r1, lsl #12
   88204:	f000 8088 	beq.w	88318 <__aeabi_ddiv+0x144>
   88208:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8820c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   88210:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   88214:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   88218:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8821c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   88220:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   88224:	ea4f 2600 	mov.w	r6, r0, lsl #8
   88228:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8822c:	429d      	cmp	r5, r3
   8822e:	bf08      	it	eq
   88230:	4296      	cmpeq	r6, r2
   88232:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   88236:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8823a:	d202      	bcs.n	88242 <__aeabi_ddiv+0x6e>
   8823c:	085b      	lsrs	r3, r3, #1
   8823e:	ea4f 0232 	mov.w	r2, r2, rrx
   88242:	1ab6      	subs	r6, r6, r2
   88244:	eb65 0503 	sbc.w	r5, r5, r3
   88248:	085b      	lsrs	r3, r3, #1
   8824a:	ea4f 0232 	mov.w	r2, r2, rrx
   8824e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   88252:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   88256:	ebb6 0e02 	subs.w	lr, r6, r2
   8825a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8825e:	bf22      	ittt	cs
   88260:	1ab6      	subcs	r6, r6, r2
   88262:	4675      	movcs	r5, lr
   88264:	ea40 000c 	orrcs.w	r0, r0, ip
   88268:	085b      	lsrs	r3, r3, #1
   8826a:	ea4f 0232 	mov.w	r2, r2, rrx
   8826e:	ebb6 0e02 	subs.w	lr, r6, r2
   88272:	eb75 0e03 	sbcs.w	lr, r5, r3
   88276:	bf22      	ittt	cs
   88278:	1ab6      	subcs	r6, r6, r2
   8827a:	4675      	movcs	r5, lr
   8827c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   88280:	085b      	lsrs	r3, r3, #1
   88282:	ea4f 0232 	mov.w	r2, r2, rrx
   88286:	ebb6 0e02 	subs.w	lr, r6, r2
   8828a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8828e:	bf22      	ittt	cs
   88290:	1ab6      	subcs	r6, r6, r2
   88292:	4675      	movcs	r5, lr
   88294:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   88298:	085b      	lsrs	r3, r3, #1
   8829a:	ea4f 0232 	mov.w	r2, r2, rrx
   8829e:	ebb6 0e02 	subs.w	lr, r6, r2
   882a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   882a6:	bf22      	ittt	cs
   882a8:	1ab6      	subcs	r6, r6, r2
   882aa:	4675      	movcs	r5, lr
   882ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   882b0:	ea55 0e06 	orrs.w	lr, r5, r6
   882b4:	d018      	beq.n	882e8 <__aeabi_ddiv+0x114>
   882b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   882ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   882be:	ea4f 1606 	mov.w	r6, r6, lsl #4
   882c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   882c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   882ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   882ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   882d2:	d1c0      	bne.n	88256 <__aeabi_ddiv+0x82>
   882d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   882d8:	d10b      	bne.n	882f2 <__aeabi_ddiv+0x11e>
   882da:	ea41 0100 	orr.w	r1, r1, r0
   882de:	f04f 0000 	mov.w	r0, #0
   882e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   882e6:	e7b6      	b.n	88256 <__aeabi_ddiv+0x82>
   882e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   882ec:	bf04      	itt	eq
   882ee:	4301      	orreq	r1, r0
   882f0:	2000      	moveq	r0, #0
   882f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   882f6:	bf88      	it	hi
   882f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   882fc:	f63f aeaf 	bhi.w	8805e <__aeabi_dmul+0xde>
   88300:	ebb5 0c03 	subs.w	ip, r5, r3
   88304:	bf04      	itt	eq
   88306:	ebb6 0c02 	subseq.w	ip, r6, r2
   8830a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8830e:	f150 0000 	adcs.w	r0, r0, #0
   88312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   88316:	bd70      	pop	{r4, r5, r6, pc}
   88318:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8831c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   88320:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   88324:	bfc2      	ittt	gt
   88326:	ebd4 050c 	rsbsgt	r5, r4, ip
   8832a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8832e:	bd70      	popgt	{r4, r5, r6, pc}
   88330:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88334:	f04f 0e00 	mov.w	lr, #0
   88338:	3c01      	subs	r4, #1
   8833a:	e690      	b.n	8805e <__aeabi_dmul+0xde>
   8833c:	ea45 0e06 	orr.w	lr, r5, r6
   88340:	e68d      	b.n	8805e <__aeabi_dmul+0xde>
   88342:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   88346:	ea94 0f0c 	teq	r4, ip
   8834a:	bf08      	it	eq
   8834c:	ea95 0f0c 	teqeq	r5, ip
   88350:	f43f af3b 	beq.w	881ca <__aeabi_dmul+0x24a>
   88354:	ea94 0f0c 	teq	r4, ip
   88358:	d10a      	bne.n	88370 <__aeabi_ddiv+0x19c>
   8835a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8835e:	f47f af34 	bne.w	881ca <__aeabi_dmul+0x24a>
   88362:	ea95 0f0c 	teq	r5, ip
   88366:	f47f af25 	bne.w	881b4 <__aeabi_dmul+0x234>
   8836a:	4610      	mov	r0, r2
   8836c:	4619      	mov	r1, r3
   8836e:	e72c      	b.n	881ca <__aeabi_dmul+0x24a>
   88370:	ea95 0f0c 	teq	r5, ip
   88374:	d106      	bne.n	88384 <__aeabi_ddiv+0x1b0>
   88376:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8837a:	f43f aefd 	beq.w	88178 <__aeabi_dmul+0x1f8>
   8837e:	4610      	mov	r0, r2
   88380:	4619      	mov	r1, r3
   88382:	e722      	b.n	881ca <__aeabi_dmul+0x24a>
   88384:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88388:	bf18      	it	ne
   8838a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8838e:	f47f aec5 	bne.w	8811c <__aeabi_dmul+0x19c>
   88392:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   88396:	f47f af0d 	bne.w	881b4 <__aeabi_dmul+0x234>
   8839a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8839e:	f47f aeeb 	bne.w	88178 <__aeabi_dmul+0x1f8>
   883a2:	e712      	b.n	881ca <__aeabi_dmul+0x24a>

000883a4 <__gedf2>:
   883a4:	f04f 3cff 	mov.w	ip, #4294967295
   883a8:	e006      	b.n	883b8 <__cmpdf2+0x4>
   883aa:	bf00      	nop

000883ac <__ledf2>:
   883ac:	f04f 0c01 	mov.w	ip, #1
   883b0:	e002      	b.n	883b8 <__cmpdf2+0x4>
   883b2:	bf00      	nop

000883b4 <__cmpdf2>:
   883b4:	f04f 0c01 	mov.w	ip, #1
   883b8:	f84d cd04 	str.w	ip, [sp, #-4]!
   883bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   883c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   883c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   883c8:	bf18      	it	ne
   883ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   883ce:	d01b      	beq.n	88408 <__cmpdf2+0x54>
   883d0:	b001      	add	sp, #4
   883d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   883d6:	bf0c      	ite	eq
   883d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   883dc:	ea91 0f03 	teqne	r1, r3
   883e0:	bf02      	ittt	eq
   883e2:	ea90 0f02 	teqeq	r0, r2
   883e6:	2000      	moveq	r0, #0
   883e8:	4770      	bxeq	lr
   883ea:	f110 0f00 	cmn.w	r0, #0
   883ee:	ea91 0f03 	teq	r1, r3
   883f2:	bf58      	it	pl
   883f4:	4299      	cmppl	r1, r3
   883f6:	bf08      	it	eq
   883f8:	4290      	cmpeq	r0, r2
   883fa:	bf2c      	ite	cs
   883fc:	17d8      	asrcs	r0, r3, #31
   883fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   88402:	f040 0001 	orr.w	r0, r0, #1
   88406:	4770      	bx	lr
   88408:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8840c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88410:	d102      	bne.n	88418 <__cmpdf2+0x64>
   88412:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   88416:	d107      	bne.n	88428 <__cmpdf2+0x74>
   88418:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8841c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88420:	d1d6      	bne.n	883d0 <__cmpdf2+0x1c>
   88422:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   88426:	d0d3      	beq.n	883d0 <__cmpdf2+0x1c>
   88428:	f85d 0b04 	ldr.w	r0, [sp], #4
   8842c:	4770      	bx	lr
   8842e:	bf00      	nop

00088430 <__aeabi_cdrcmple>:
   88430:	4684      	mov	ip, r0
   88432:	4610      	mov	r0, r2
   88434:	4662      	mov	r2, ip
   88436:	468c      	mov	ip, r1
   88438:	4619      	mov	r1, r3
   8843a:	4663      	mov	r3, ip
   8843c:	e000      	b.n	88440 <__aeabi_cdcmpeq>
   8843e:	bf00      	nop

00088440 <__aeabi_cdcmpeq>:
   88440:	b501      	push	{r0, lr}
   88442:	f7ff ffb7 	bl	883b4 <__cmpdf2>
   88446:	2800      	cmp	r0, #0
   88448:	bf48      	it	mi
   8844a:	f110 0f00 	cmnmi.w	r0, #0
   8844e:	bd01      	pop	{r0, pc}

00088450 <__aeabi_dcmpeq>:
   88450:	f84d ed08 	str.w	lr, [sp, #-8]!
   88454:	f7ff fff4 	bl	88440 <__aeabi_cdcmpeq>
   88458:	bf0c      	ite	eq
   8845a:	2001      	moveq	r0, #1
   8845c:	2000      	movne	r0, #0
   8845e:	f85d fb08 	ldr.w	pc, [sp], #8
   88462:	bf00      	nop

00088464 <__aeabi_dcmplt>:
   88464:	f84d ed08 	str.w	lr, [sp, #-8]!
   88468:	f7ff ffea 	bl	88440 <__aeabi_cdcmpeq>
   8846c:	bf34      	ite	cc
   8846e:	2001      	movcc	r0, #1
   88470:	2000      	movcs	r0, #0
   88472:	f85d fb08 	ldr.w	pc, [sp], #8
   88476:	bf00      	nop

00088478 <__aeabi_dcmple>:
   88478:	f84d ed08 	str.w	lr, [sp, #-8]!
   8847c:	f7ff ffe0 	bl	88440 <__aeabi_cdcmpeq>
   88480:	bf94      	ite	ls
   88482:	2001      	movls	r0, #1
   88484:	2000      	movhi	r0, #0
   88486:	f85d fb08 	ldr.w	pc, [sp], #8
   8848a:	bf00      	nop

0008848c <__aeabi_dcmpge>:
   8848c:	f84d ed08 	str.w	lr, [sp, #-8]!
   88490:	f7ff ffce 	bl	88430 <__aeabi_cdrcmple>
   88494:	bf94      	ite	ls
   88496:	2001      	movls	r0, #1
   88498:	2000      	movhi	r0, #0
   8849a:	f85d fb08 	ldr.w	pc, [sp], #8
   8849e:	bf00      	nop

000884a0 <__aeabi_dcmpgt>:
   884a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   884a4:	f7ff ffc4 	bl	88430 <__aeabi_cdrcmple>
   884a8:	bf34      	ite	cc
   884aa:	2001      	movcc	r0, #1
   884ac:	2000      	movcs	r0, #0
   884ae:	f85d fb08 	ldr.w	pc, [sp], #8
   884b2:	bf00      	nop

000884b4 <__aeabi_dcmpun>:
   884b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   884b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   884bc:	d102      	bne.n	884c4 <__aeabi_dcmpun+0x10>
   884be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   884c2:	d10a      	bne.n	884da <__aeabi_dcmpun+0x26>
   884c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   884c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   884cc:	d102      	bne.n	884d4 <__aeabi_dcmpun+0x20>
   884ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   884d2:	d102      	bne.n	884da <__aeabi_dcmpun+0x26>
   884d4:	f04f 0000 	mov.w	r0, #0
   884d8:	4770      	bx	lr
   884da:	f04f 0001 	mov.w	r0, #1
   884de:	4770      	bx	lr

000884e0 <__aeabi_d2iz>:
   884e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   884e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   884e8:	d215      	bcs.n	88516 <__aeabi_d2iz+0x36>
   884ea:	d511      	bpl.n	88510 <__aeabi_d2iz+0x30>
   884ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   884f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   884f4:	d912      	bls.n	8851c <__aeabi_d2iz+0x3c>
   884f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   884fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   884fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   88502:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   88506:	fa23 f002 	lsr.w	r0, r3, r2
   8850a:	bf18      	it	ne
   8850c:	4240      	negne	r0, r0
   8850e:	4770      	bx	lr
   88510:	f04f 0000 	mov.w	r0, #0
   88514:	4770      	bx	lr
   88516:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8851a:	d105      	bne.n	88528 <__aeabi_d2iz+0x48>
   8851c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   88520:	bf08      	it	eq
   88522:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   88526:	4770      	bx	lr
   88528:	f04f 0000 	mov.w	r0, #0
   8852c:	4770      	bx	lr
   8852e:	bf00      	nop

00088530 <__aeabi_uldivmod>:
   88530:	b953      	cbnz	r3, 88548 <__aeabi_uldivmod+0x18>
   88532:	b94a      	cbnz	r2, 88548 <__aeabi_uldivmod+0x18>
   88534:	2900      	cmp	r1, #0
   88536:	bf08      	it	eq
   88538:	2800      	cmpeq	r0, #0
   8853a:	bf1c      	itt	ne
   8853c:	f04f 31ff 	movne.w	r1, #4294967295
   88540:	f04f 30ff 	movne.w	r0, #4294967295
   88544:	f000 b97a 	b.w	8883c <__aeabi_idiv0>
   88548:	f1ad 0c08 	sub.w	ip, sp, #8
   8854c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   88550:	f000 f806 	bl	88560 <__udivmoddi4>
   88554:	f8dd e004 	ldr.w	lr, [sp, #4]
   88558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8855c:	b004      	add	sp, #16
   8855e:	4770      	bx	lr

00088560 <__udivmoddi4>:
   88560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   88564:	468c      	mov	ip, r1
   88566:	460e      	mov	r6, r1
   88568:	4604      	mov	r4, r0
   8856a:	9d08      	ldr	r5, [sp, #32]
   8856c:	2b00      	cmp	r3, #0
   8856e:	d150      	bne.n	88612 <__udivmoddi4+0xb2>
   88570:	428a      	cmp	r2, r1
   88572:	4617      	mov	r7, r2
   88574:	d96c      	bls.n	88650 <__udivmoddi4+0xf0>
   88576:	fab2 fe82 	clz	lr, r2
   8857a:	f1be 0f00 	cmp.w	lr, #0
   8857e:	d00b      	beq.n	88598 <__udivmoddi4+0x38>
   88580:	f1ce 0c20 	rsb	ip, lr, #32
   88584:	fa01 f60e 	lsl.w	r6, r1, lr
   88588:	fa20 fc0c 	lsr.w	ip, r0, ip
   8858c:	fa02 f70e 	lsl.w	r7, r2, lr
   88590:	ea4c 0c06 	orr.w	ip, ip, r6
   88594:	fa00 f40e 	lsl.w	r4, r0, lr
   88598:	0c3a      	lsrs	r2, r7, #16
   8859a:	fbbc f9f2 	udiv	r9, ip, r2
   8859e:	b2bb      	uxth	r3, r7
   885a0:	fb02 cc19 	mls	ip, r2, r9, ip
   885a4:	fb09 fa03 	mul.w	sl, r9, r3
   885a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   885ac:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   885b0:	45b2      	cmp	sl, r6
   885b2:	d90a      	bls.n	885ca <__udivmoddi4+0x6a>
   885b4:	19f6      	adds	r6, r6, r7
   885b6:	f109 31ff 	add.w	r1, r9, #4294967295
   885ba:	f080 8125 	bcs.w	88808 <__udivmoddi4+0x2a8>
   885be:	45b2      	cmp	sl, r6
   885c0:	f240 8122 	bls.w	88808 <__udivmoddi4+0x2a8>
   885c4:	f1a9 0902 	sub.w	r9, r9, #2
   885c8:	443e      	add	r6, r7
   885ca:	eba6 060a 	sub.w	r6, r6, sl
   885ce:	fbb6 f0f2 	udiv	r0, r6, r2
   885d2:	fb02 6610 	mls	r6, r2, r0, r6
   885d6:	fb00 f303 	mul.w	r3, r0, r3
   885da:	b2a4      	uxth	r4, r4
   885dc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   885e0:	42a3      	cmp	r3, r4
   885e2:	d909      	bls.n	885f8 <__udivmoddi4+0x98>
   885e4:	19e4      	adds	r4, r4, r7
   885e6:	f100 32ff 	add.w	r2, r0, #4294967295
   885ea:	f080 810b 	bcs.w	88804 <__udivmoddi4+0x2a4>
   885ee:	42a3      	cmp	r3, r4
   885f0:	f240 8108 	bls.w	88804 <__udivmoddi4+0x2a4>
   885f4:	3802      	subs	r0, #2
   885f6:	443c      	add	r4, r7
   885f8:	2100      	movs	r1, #0
   885fa:	1ae4      	subs	r4, r4, r3
   885fc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   88600:	2d00      	cmp	r5, #0
   88602:	d062      	beq.n	886ca <__udivmoddi4+0x16a>
   88604:	2300      	movs	r3, #0
   88606:	fa24 f40e 	lsr.w	r4, r4, lr
   8860a:	602c      	str	r4, [r5, #0]
   8860c:	606b      	str	r3, [r5, #4]
   8860e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88612:	428b      	cmp	r3, r1
   88614:	d907      	bls.n	88626 <__udivmoddi4+0xc6>
   88616:	2d00      	cmp	r5, #0
   88618:	d055      	beq.n	886c6 <__udivmoddi4+0x166>
   8861a:	2100      	movs	r1, #0
   8861c:	e885 0041 	stmia.w	r5, {r0, r6}
   88620:	4608      	mov	r0, r1
   88622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88626:	fab3 f183 	clz	r1, r3
   8862a:	2900      	cmp	r1, #0
   8862c:	f040 808f 	bne.w	8874e <__udivmoddi4+0x1ee>
   88630:	42b3      	cmp	r3, r6
   88632:	d302      	bcc.n	8863a <__udivmoddi4+0xda>
   88634:	4282      	cmp	r2, r0
   88636:	f200 80fc 	bhi.w	88832 <__udivmoddi4+0x2d2>
   8863a:	1a84      	subs	r4, r0, r2
   8863c:	eb66 0603 	sbc.w	r6, r6, r3
   88640:	2001      	movs	r0, #1
   88642:	46b4      	mov	ip, r6
   88644:	2d00      	cmp	r5, #0
   88646:	d040      	beq.n	886ca <__udivmoddi4+0x16a>
   88648:	e885 1010 	stmia.w	r5, {r4, ip}
   8864c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88650:	b912      	cbnz	r2, 88658 <__udivmoddi4+0xf8>
   88652:	2701      	movs	r7, #1
   88654:	fbb7 f7f2 	udiv	r7, r7, r2
   88658:	fab7 fe87 	clz	lr, r7
   8865c:	f1be 0f00 	cmp.w	lr, #0
   88660:	d135      	bne.n	886ce <__udivmoddi4+0x16e>
   88662:	2101      	movs	r1, #1
   88664:	1bf6      	subs	r6, r6, r7
   88666:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8866a:	fa1f f887 	uxth.w	r8, r7
   8866e:	fbb6 f2fc 	udiv	r2, r6, ip
   88672:	fb0c 6612 	mls	r6, ip, r2, r6
   88676:	fb08 f002 	mul.w	r0, r8, r2
   8867a:	0c23      	lsrs	r3, r4, #16
   8867c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   88680:	42b0      	cmp	r0, r6
   88682:	d907      	bls.n	88694 <__udivmoddi4+0x134>
   88684:	19f6      	adds	r6, r6, r7
   88686:	f102 33ff 	add.w	r3, r2, #4294967295
   8868a:	d202      	bcs.n	88692 <__udivmoddi4+0x132>
   8868c:	42b0      	cmp	r0, r6
   8868e:	f200 80d2 	bhi.w	88836 <__udivmoddi4+0x2d6>
   88692:	461a      	mov	r2, r3
   88694:	1a36      	subs	r6, r6, r0
   88696:	fbb6 f0fc 	udiv	r0, r6, ip
   8869a:	fb0c 6610 	mls	r6, ip, r0, r6
   8869e:	fb08 f800 	mul.w	r8, r8, r0
   886a2:	b2a3      	uxth	r3, r4
   886a4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   886a8:	45a0      	cmp	r8, r4
   886aa:	d907      	bls.n	886bc <__udivmoddi4+0x15c>
   886ac:	19e4      	adds	r4, r4, r7
   886ae:	f100 33ff 	add.w	r3, r0, #4294967295
   886b2:	d202      	bcs.n	886ba <__udivmoddi4+0x15a>
   886b4:	45a0      	cmp	r8, r4
   886b6:	f200 80b9 	bhi.w	8882c <__udivmoddi4+0x2cc>
   886ba:	4618      	mov	r0, r3
   886bc:	eba4 0408 	sub.w	r4, r4, r8
   886c0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   886c4:	e79c      	b.n	88600 <__udivmoddi4+0xa0>
   886c6:	4629      	mov	r1, r5
   886c8:	4628      	mov	r0, r5
   886ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   886ce:	fa07 f70e 	lsl.w	r7, r7, lr
   886d2:	f1ce 0320 	rsb	r3, lr, #32
   886d6:	fa26 f203 	lsr.w	r2, r6, r3
   886da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   886de:	fbb2 f1fc 	udiv	r1, r2, ip
   886e2:	fa1f f887 	uxth.w	r8, r7
   886e6:	fb0c 2211 	mls	r2, ip, r1, r2
   886ea:	fa06 f60e 	lsl.w	r6, r6, lr
   886ee:	fa20 f303 	lsr.w	r3, r0, r3
   886f2:	fb01 f908 	mul.w	r9, r1, r8
   886f6:	4333      	orrs	r3, r6
   886f8:	0c1e      	lsrs	r6, r3, #16
   886fa:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   886fe:	45b1      	cmp	r9, r6
   88700:	fa00 f40e 	lsl.w	r4, r0, lr
   88704:	d909      	bls.n	8871a <__udivmoddi4+0x1ba>
   88706:	19f6      	adds	r6, r6, r7
   88708:	f101 32ff 	add.w	r2, r1, #4294967295
   8870c:	f080 808c 	bcs.w	88828 <__udivmoddi4+0x2c8>
   88710:	45b1      	cmp	r9, r6
   88712:	f240 8089 	bls.w	88828 <__udivmoddi4+0x2c8>
   88716:	3902      	subs	r1, #2
   88718:	443e      	add	r6, r7
   8871a:	eba6 0609 	sub.w	r6, r6, r9
   8871e:	fbb6 f0fc 	udiv	r0, r6, ip
   88722:	fb0c 6210 	mls	r2, ip, r0, r6
   88726:	fb00 f908 	mul.w	r9, r0, r8
   8872a:	b29e      	uxth	r6, r3
   8872c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   88730:	45b1      	cmp	r9, r6
   88732:	d907      	bls.n	88744 <__udivmoddi4+0x1e4>
   88734:	19f6      	adds	r6, r6, r7
   88736:	f100 33ff 	add.w	r3, r0, #4294967295
   8873a:	d271      	bcs.n	88820 <__udivmoddi4+0x2c0>
   8873c:	45b1      	cmp	r9, r6
   8873e:	d96f      	bls.n	88820 <__udivmoddi4+0x2c0>
   88740:	3802      	subs	r0, #2
   88742:	443e      	add	r6, r7
   88744:	eba6 0609 	sub.w	r6, r6, r9
   88748:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   8874c:	e78f      	b.n	8866e <__udivmoddi4+0x10e>
   8874e:	f1c1 0720 	rsb	r7, r1, #32
   88752:	fa22 f807 	lsr.w	r8, r2, r7
   88756:	408b      	lsls	r3, r1
   88758:	ea48 0303 	orr.w	r3, r8, r3
   8875c:	fa26 f407 	lsr.w	r4, r6, r7
   88760:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   88764:	fbb4 f9fe 	udiv	r9, r4, lr
   88768:	fa1f fc83 	uxth.w	ip, r3
   8876c:	fb0e 4419 	mls	r4, lr, r9, r4
   88770:	408e      	lsls	r6, r1
   88772:	fa20 f807 	lsr.w	r8, r0, r7
   88776:	fb09 fa0c 	mul.w	sl, r9, ip
   8877a:	ea48 0806 	orr.w	r8, r8, r6
   8877e:	ea4f 4618 	mov.w	r6, r8, lsr #16
   88782:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   88786:	45a2      	cmp	sl, r4
   88788:	fa02 f201 	lsl.w	r2, r2, r1
   8878c:	fa00 f601 	lsl.w	r6, r0, r1
   88790:	d908      	bls.n	887a4 <__udivmoddi4+0x244>
   88792:	18e4      	adds	r4, r4, r3
   88794:	f109 30ff 	add.w	r0, r9, #4294967295
   88798:	d244      	bcs.n	88824 <__udivmoddi4+0x2c4>
   8879a:	45a2      	cmp	sl, r4
   8879c:	d942      	bls.n	88824 <__udivmoddi4+0x2c4>
   8879e:	f1a9 0902 	sub.w	r9, r9, #2
   887a2:	441c      	add	r4, r3
   887a4:	eba4 040a 	sub.w	r4, r4, sl
   887a8:	fbb4 f0fe 	udiv	r0, r4, lr
   887ac:	fb0e 4410 	mls	r4, lr, r0, r4
   887b0:	fb00 fc0c 	mul.w	ip, r0, ip
   887b4:	fa1f f888 	uxth.w	r8, r8
   887b8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   887bc:	45a4      	cmp	ip, r4
   887be:	d907      	bls.n	887d0 <__udivmoddi4+0x270>
   887c0:	18e4      	adds	r4, r4, r3
   887c2:	f100 3eff 	add.w	lr, r0, #4294967295
   887c6:	d229      	bcs.n	8881c <__udivmoddi4+0x2bc>
   887c8:	45a4      	cmp	ip, r4
   887ca:	d927      	bls.n	8881c <__udivmoddi4+0x2bc>
   887cc:	3802      	subs	r0, #2
   887ce:	441c      	add	r4, r3
   887d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   887d4:	fba0 8902 	umull	r8, r9, r0, r2
   887d8:	eba4 0c0c 	sub.w	ip, r4, ip
   887dc:	45cc      	cmp	ip, r9
   887de:	46c2      	mov	sl, r8
   887e0:	46ce      	mov	lr, r9
   887e2:	d315      	bcc.n	88810 <__udivmoddi4+0x2b0>
   887e4:	d012      	beq.n	8880c <__udivmoddi4+0x2ac>
   887e6:	b155      	cbz	r5, 887fe <__udivmoddi4+0x29e>
   887e8:	ebb6 030a 	subs.w	r3, r6, sl
   887ec:	eb6c 060e 	sbc.w	r6, ip, lr
   887f0:	fa06 f707 	lsl.w	r7, r6, r7
   887f4:	40cb      	lsrs	r3, r1
   887f6:	431f      	orrs	r7, r3
   887f8:	40ce      	lsrs	r6, r1
   887fa:	602f      	str	r7, [r5, #0]
   887fc:	606e      	str	r6, [r5, #4]
   887fe:	2100      	movs	r1, #0
   88800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88804:	4610      	mov	r0, r2
   88806:	e6f7      	b.n	885f8 <__udivmoddi4+0x98>
   88808:	4689      	mov	r9, r1
   8880a:	e6de      	b.n	885ca <__udivmoddi4+0x6a>
   8880c:	4546      	cmp	r6, r8
   8880e:	d2ea      	bcs.n	887e6 <__udivmoddi4+0x286>
   88810:	ebb8 0a02 	subs.w	sl, r8, r2
   88814:	eb69 0e03 	sbc.w	lr, r9, r3
   88818:	3801      	subs	r0, #1
   8881a:	e7e4      	b.n	887e6 <__udivmoddi4+0x286>
   8881c:	4670      	mov	r0, lr
   8881e:	e7d7      	b.n	887d0 <__udivmoddi4+0x270>
   88820:	4618      	mov	r0, r3
   88822:	e78f      	b.n	88744 <__udivmoddi4+0x1e4>
   88824:	4681      	mov	r9, r0
   88826:	e7bd      	b.n	887a4 <__udivmoddi4+0x244>
   88828:	4611      	mov	r1, r2
   8882a:	e776      	b.n	8871a <__udivmoddi4+0x1ba>
   8882c:	3802      	subs	r0, #2
   8882e:	443c      	add	r4, r7
   88830:	e744      	b.n	886bc <__udivmoddi4+0x15c>
   88832:	4608      	mov	r0, r1
   88834:	e706      	b.n	88644 <__udivmoddi4+0xe4>
   88836:	3a02      	subs	r2, #2
   88838:	443e      	add	r6, r7
   8883a:	e72b      	b.n	88694 <__udivmoddi4+0x134>

0008883c <__aeabi_idiv0>:
   8883c:	4770      	bx	lr
   8883e:	bf00      	nop
   88840:	090a0a0d 	.word	0x090a0a0d
   88844:	5f5f5f2a 	.word	0x5f5f5f2a
   88848:	5f5f5f5f 	.word	0x5f5f5f5f
   8884c:	5f5f5f5f 	.word	0x5f5f5f5f
   88850:	205f5f5f 	.word	0x205f5f5f
   88854:	2e555043 	.word	0x2e555043
   88858:	2d584341 	.word	0x2d584341
   8885c:	41535441 	.word	0x41535441
   88860:	3455334d 	.word	0x3455334d
   88864:	412d4143 	.word	0x412d4143
   88868:	5f5f2055 	.word	0x5f5f2055
   8886c:	5f5f5f5f 	.word	0x5f5f5f5f
   88870:	5f5f5f5f 	.word	0x5f5f5f5f
   88874:	5f5f5f5f 	.word	0x5f5f5f5f
   88878:	0a0a0d2a 	.word	0x0a0a0d2a
   8887c:	00000000 	.word	0x00000000
   88880:	2e555043 	.word	0x2e555043
   88884:	20584341 	.word	0x20584341
   88888:	53544120 	.word	0x53544120
   8888c:	55334d41 	.word	0x55334d41
   88890:	00004334 	.word	0x00004334
   88894:	2e777777 	.word	0x2e777777
   88898:	2d322d61 	.word	0x2d322d61
   8889c:	656e2e73 	.word	0x656e2e73
   888a0:	00000074 	.word	0x00000074
   888a4:	554e454d 	.word	0x554e454d
   888a8:	57454e5f 	.word	0x57454e5f
   888ac:	0000000d 	.word	0x0000000d
   888b0:	554e454d 	.word	0x554e454d
   888b4:	57454e20 	.word	0x57454e20
   888b8:	4e494620 	.word	0x4e494620
   888bc:	45485349 	.word	0x45485349
   888c0:	0a0d2044 	.word	0x0a0d2044
   888c4:	00000000 	.word	0x00000000

000888c8 <_etatMenu>:
   888c8:	00088958 00088a10 00000000 00080349     X...........I...
   888d8:	00088968 00088a10 00000000 00080381     h...............
   888e8:	00088978 00088a10 00000000 000803b9     x...............
	...

00088908 <_mainMenu>:
   88908:	00088a50 00000000 00000000 000802a1     P...............
   88918:	00088a5c 00000000 00088a10 00000000     \...............
   88928:	00088a6c 00000000 00088a10 00000000     l...............
   88938:	00088a7c 00000000 00088a10 00000000     |...............
	...
   88958:	74617445 726f7020 31206574 00000000     Etat porte 1....
   88968:	74617445 726f7020 32206574 00000000     Etat porte 2....
   88978:	74617445 726f7020 00736574 6e656d5f     Etat portes._men
   88988:	74704f75 536e6f69 75467361 203a636e     uOptionSasFunc: 
   88998:	20444142 00004353 6d726546 72757465     BAD SC..Fermetur
   889a8:	61732065 00000073 6e656d5f 726f5075     e sas..._menuPor
   889b8:	65466574 72656d72 42203a31 53204441     teFermer1: BAD S
   889c8:	00000043 6d726546 72757465 6f702065     C...Fermeture po
   889d8:	20657472 00000031 6e656d5f 726f5075     rte 1..._menuPor
   889e8:	65466574 72656d72 42203a32 53204441     teFermer2: BAD S
   889f8:	00000043 6d726546 72757465 6f702065     C...Fermeture po
   88a08:	20657472 00000032                       rte 2...

00088a10 <_porteMenu>:
   88a10:	00088a8c 00088908 00000000 000802d9     ................
   88a20:	00088a9c 00088908 00000000 00080311     ................
   88a30:	00088978 00088908 000888c8 00000000     x...............
	...
   88a50:	6974704f 73206e6f 00007361 6974704f     Option sas..Opti
   88a60:	70206e6f 6574726f 00000073 6974704f     on portes...Opti
   88a70:	66206e6f 74656e65 00006572 6974704f     on fenetre..Opti
   88a80:	74206e6f 70706172 00000065 6d726546     on trappe...Ferm
   88a90:	70207265 6574726f 00003120 6d726546     er porte 1..Ferm
   88aa0:	70207265 6574726f 00003220 00000001     er porte 2......
   88ab0:	00000002 00000004 00000008 00000010     ................
   88ac0:	00000020 00000040 00000080 00000100      ...@...........
   88ad0:	00000200 00000400 000186a0 000186a0     ................
   88ae0:	00b71b00 65540a0d 73207473 74726174     ......Test start
   88af0:	2e2e6465 000a0d2e 48500a0d 2d64253a     ed........PH:%d-
   88b00:	0d64252d 0000000a 454e4550 56554f20     -%d.....PENE OUV
   88b10:	00545245 00203a09 00004e4f 0046464f     ERT..: .ON..OFF.
   88b20:	454e4550 52454620 0000454d 00534c49     PENE FERME..ILS.
   88b30:	203a0909 00000000 00005653 41444152     ..: ....SV..RADA
   88b40:	00000052 00555644 4d455250 45524549     R...DVU.PREMIERE
   88b50:	544e4520 00454552 20555644 454e4547      ENTREE.DVU GENE
   88b60:	004c4152 52544e45 4c204545 45524249     RAL.ENTREE LIBRE
   88b70:	00000000 52544e45 4f204545 4f495450     ....ENTREE OPTIO
   88b80:	0000004e 65540a0d 74207473 696d7265     N.....Test termi
   88b90:	6574616e 2e2e2e64 00000a0d              nated.......

00088b9c <commands>:
   88b9c:	0000624f 000815dd 0000ae76 00081539     Ob......v...9...
	...
   88bb4:	624e0a0d 74736554 6425203a 00000a0d     ..NbTest: %d....
   88bc4:	75420a0d 72657a7a 206e6f20 20726f66     ..Buzzer on for 
   88bd4:	00000000 6d206425 2e2e2e73 00000a0d     ....%d ms.......
   88be4:	75420a0d 72657a7a 66666f20 0d2e2e2e     ..Buzzer off....
   88bf4:	0000000a 000a0d20 25207325 73252064     .... ...%s %d %s
   88c04:	64342520 00000000                        %4d....

00088c0c <nbDaysInMonth>:
   88c0c:	1e1f1c1f 1f1f1e1f 1f1e1f1e 756e614a     ............Janu
   88c1c:	00797261 72626546 79726175 00000000     ary.February....
   88c2c:	6372614d 00000068 69727041 0000006c     March...April...
   88c3c:	0079614d 656e754a 00000000 796c754a     May.June....July
   88c4c:	00000000 75677541 00007473 74706553     ....August..Sept
   88c5c:	65626d65 00000072 6f74634f 00726562     ember...October.
   88c6c:	65766f4e 7265626d 00000000 65636544     November....Dece
   88c7c:	7265626d 00000000 646e7553 00007961     mber....Sunday..
   88c8c:	646e6f4d 00007961 73657554 00796164     Monday..Tuesday.
   88c9c:	6e646557 61647365 00000079 72756854     Wednesday...Thur
   88cac:	79616473 00000000 64697246 00007961     sday....Friday..
   88cbc:	75746153 79616472 00000000              Saturday....

00088cc8 <line2addr>:
   88cc8:	54144000 3230250d 30253a64 253a6432     .@.T.%02d:%02d:%
   88cd8:	00643230 64323025 3230253a 30253a64     02d.%02d:%02d:%0
   88ce8:	00006432 64323025 3230252f 30252f64     2d..%02d/%02d/%0
   88cf8:	00006434 003e0a0d 00445b1b 00435b1b     4d....>..[D..[C.
   88d08:	3e2f0a0d 00000000 6b6e7509 6e776f6e     ../>.....unknown
   88d18:	646d6320 3025203a 0a0d5834 00000000      cmd: %04X......
   88d28:	2a090a0d 2a2a2a2a 73616320 535f2065     ...***** case _S
   88d38:	4c4c4548 48424b5f 203a5449 20444142     HELL_KBHIT: BAD 
   88d48:	65736163 2a2a2021 2a2a2a2a 00000a0d     case! ******....
   88d58:	20200a0d 43534520 5145535f 0000203a     ..   ESC_SEQ: ..
   88d68:	30253c20 0d3e5834 0000000a 4b325b1b      <%04X>......[2K
   88d78:	0000000d 3b315b1b 00004335              .....[1;5C..

00088d84 <heartBeatRhythm>:
   88d84:	00000028 000000fe 00000028 00000548     (.......(...H...
   88d94:	00000000                                ....

00088d98 <hexDigits>:
   88d98:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   88da8:	00000000                                ....

00088dac <separators>:
   88dac:	3a3b2e20 0d095c2f 0000000a 4a325b1b      .;:/\.......[2J
   88dbc:	00000000 3d090a0d 3d3d3d3d 3d3d3d3d     .......=========
   88dcc:	3d3d3d3d 43203d3d 20504948 4e454449     ====== CHIP IDEN
   88ddc:	49464954 49205245 534f464e 3d3d3d20     TIFIER INFOS ===
   88dec:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0a0d     ============....
   88dfc:	52455609 4e4f4953 6325203a 00000a0d     .VERSION: %c....
   88e0c:	45202009 434f5250 0000203a 564e2009     .  EPROC: ... NV
   88e1c:	5a495350 0000203a 50564e09 325a4953     PSIZ: ...NVPSIZ2
   88e2c:	0000203a 41525309 5a49534d 0000203a     : ...SRAMSIZ: ..
   88e3c:	20202009 48435241 0000203a 2d2d2d20     .   ARCH: .. ---
   88e4c:	00000020 564e2009 50595450 0000203a      .... NVPTYP: ..
   88e5c:	20202009 44495845 3025203a 0a0d5838     .   EXID: %08X..
   88e6c:	00000000 3d090a0d 3d3d3d3d 3d3d3d3d     .......=========
   88e7c:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   88e8c:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   88e9c:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0a0d     ============....
   88eac:	7379530d 206d6574 6c6c6977 73657220     .System will res
   88ebc:	74726174 206e6920 73206925 6e6f6365     tart in %i secon
   88ecc:	2e2e2e64 00000000 2f2e3a20 00000a0d     d....... :./....
   88edc:	4b325b1b 00000000 646d6320 61747320     .[2K.... cmd sta
   88eec:	3a207472 00000020                       rt : ...

00088ef4 <arch>:
   88ef4:	00000019 000891c0 000891cc 00000029     ............)...
   88f04:	000891e0 000891f0 00000034 00089204     ........4.......
   88f14:	0008920c 00000037 0008921c 00089224     ....7.......$...
   88f24:	00000039 00089230 00089238 0000003b     9...0...8...;...
   88f34:	00089244 0008924c 00000040 0008925c     D...L...@...\...
   88f44:	00089264 00000042 00089274 0008927c     d...B...t...|...
   88f54:	00000055 0008928c 00089294 00000060     U...........`...
   88f64:	000892a4 000892b0 00000061 000892c4     ........a.......
   88f74:	000892d4 00000063 000892e8 000892f0     ....c...........
   88f84:	00000070 00089300 0008930c 00000071     p...........q...
   88f94:	00089320 00089330 00000072 00089344      ...0...r...D...
   88fa4:	00089354 00000073 00089368 00089374     T...s...h...t...
   88fb4:	00000075 00089388 00089394 00000076     u...........v...
   88fc4:	000893a8 000893b8 00000080 000893cc     ................
   88fd4:	000893d4 00000081 000893f8 00089400     ................
   88fe4:	00000083 00089424 00089434 00000084     ....$...4.......
   88ff4:	00089460 00089470 00000085 0008949c     `...p...........
   89004:	000894ac 00000086 000894d8 000894e8     ................
   89014:	00000088 00089518 00089528 00000089     ........(.......
   89024:	00089550 00089560 0000008a 00089588     P...`...........
   89034:	00089598 00000092 000895c4 000895cc     ................
   89044:	00000093 000895dc 000895e4 00000094     ................
   89054:	00089604 0008960c 00000095 0008962c     ............,...
   89064:	00089634 00000099 00089658 00089664     4.......X...d...
   89074:	0000009a 00089688 00089694 000000a5     ................
   89084:	000896b8 000896b8 000000f0 000896c0     ................
   89094:	000896c8 00000000 000896d8 00000000     ................

000890a4 <cmdEntries>:
   890a4:	0000624f 00082f71 00006cab 00082fa1     Ob..q/...l.../..
   890b4:	00003bed 00082f8d 0000aaf6 00082ef1     .;.../..........
   890c4:	0000b326 00082f31 0000902b 0008319d     &...1/..+....1..
   890d4:	0000b344 0008319d 0000ebe8 000831d1     D....1.......1..
   890e4:	000010e1 000830b9 00000000 00000000     .....0..........
   890f4:	204d4f52 202d2d2d 004d4f52 4c4d4f52     ROM --- ROM.ROML
   89104:	20535345 202d2d2d 6c4d4f52 20737365     ESS --- ROMless 
   89114:	6f20726f 68632d6e 46207069 6873616c     or on-chip Flash
   89124:	00000000 53414c46 2d2d2048 6d45202d     ....FLASH --- Em
   89134:	64646562 46206465 6873616c 6d654d20     bedded Flash Mem
   89144:	0079726f 5f4d4f52 53414c46 2d2d2048     ory.ROM_FLASH --
   89154:	4f52202d 6e61204d 6d452064 64646562     - ROM and Embedd
   89164:	46206465 6873616c 6d654d20 2079726f     ed Flash Memory 
   89174:	50564e5b 205a4953 52207369 73204d4f     [NVPSIZ is ROM s
   89184:	20657a69 564e202f 5a495350 73692032     ize / NVPSIZ2 is
   89194:	616c4620 73206873 5d657a69 00000000      Flash size]....
   891a4:	4d415253 2d2d2d20 41525320 6d65204d     SRAM --- SRAM em
   891b4:	74616c75 20676e69 004d4f52 31395441     ulating ROM.AT91
   891c4:	394d4153 00007878 31395441 394d4153     SAM9xx..AT91SAM9
   891d4:	53207878 65697265 00000073 31395441     xx Series...AT91
   891e4:	394d4153 78784558 00000000 31395441     SAM9XExx....AT91
   891f4:	394d4153 78784558 72655320 00736569     SAM9XExx Series.
   89204:	31395441 00343378 31395441 20343378     AT91x34.AT91x34 
   89214:	69726553 00007365 37504143 00000000     Series..CAP7....
   89224:	37504143 72655320 00736569 39504143     CAP7 Series.CAP9
   89234:	00000000 39504143 72655320 00736569     ....CAP9 Series.
   89244:	31504143 00000031 31504143 65532031     CAP11...CAP11 Se
   89254:	73656972 00000000 31395441 00303478     ries....AT91x40.
   89264:	31395441 20303478 69726553 00007365     AT91x40 Series..
   89274:	31395441 00323478 31395441 20323478     AT91x42.AT91x42 
   89284:	69726553 00007365 31395441 00353578     Series..AT91x55.
   89294:	31395441 20353578 69726553 00007365     AT91x55 Series..
   892a4:	31395441 374d4153 00787841 31395441     AT91SAM7Axx.AT91
   892b4:	374d4153 20787841 69726553 00007365     SAM7Axx Series..
   892c4:	31395441 374d4153 78785141 00000000     AT91SAM7AQxx....
   892d4:	31395441 374d4153 78785141 72655320     AT91SAM7AQxx Ser
   892e4:	00736569 31395441 00333678 31395441     ies.AT91x63.AT91
   892f4:	20333678 69726553 00007365 31395441     x63 Series..AT91
   89304:	374d4153 00787853 31395441 374d4153     SAM7Sxx.AT91SAM7
   89314:	20787853 69726553 00007365 31395441     Sxx Series..AT91
   89324:	374d4153 78784358 00000000 31395441     SAM7XCxx....AT91
   89334:	374d4153 78784358 72655320 00736569     SAM7XCxx Series.
   89344:	31395441 374d4153 78784553 00000000     AT91SAM7SExx....
   89354:	31395441 374d4153 78784553 72655320     AT91SAM7SExx Ser
   89364:	00736569 31395441 374d4153 0078784c     ies.AT91SAM7Lxx.
   89374:	31395441 374d4153 2078784c 69726553     AT91SAM7Lxx Seri
   89384:	00007365 31395441 374d4153 00787858     es..AT91SAM7Xxx.
   89394:	31395441 374d4153 20787858 69726553     AT91SAM7Xxx Seri
   893a4:	00007365 31395441 374d4153 78784c53     es..AT91SAM7SLxx
   893b4:	00000000 31395441 374d4153 78784c53     ....AT91SAM7SLxx
   893c4:	72655320 00736569 334d4153 00437855      Series.SAM3UxC.
   893d4:	334d4153 20437855 69726553 28207365     SAM3UxC Series (
   893e4:	2d303031 206e6970 73726576 296e6f69     100-pin version)
   893f4:	00000000 334d4153 00457855 334d4153     ....SAM3UxE.SAM3
   89404:	20457855 69726553 28207365 2d343431     UxE Series (144-
   89414:	206e6970 73726576 296e6f69 00000000     pin version)....
   89424:	334d4153 2f437841 334d4153 00437841     SAM3AxC/SAM3AxC.
   89434:	334d4153 2f437841 344d4153 20437841     SAM3AxC/SAM4AxC 
   89444:	69726553 28207365 2d303031 206e6970     Series (100-pin 
   89454:	73726576 296e6f69 00000000 334d4153     version)....SAM3
   89464:	2f437858 344d4153 00437858 334d4153     XxC/SAM4XxC.SAM3
   89474:	2f437858 344d4153 20437858 69726553     XxC/SAM4XxC Seri
   89484:	28207365 2d303031 206e6970 73726576     es (100-pin vers
   89494:	296e6f69 00000000 334d4153 2f457858     ion)....SAM3XxE/
   894a4:	344d4153 00457858 334d4153 2f457858     SAM4XxE.SAM3XxE/
   894b4:	344d4153 20457858 69726553 28207365     SAM4XxE Series (
   894c4:	2d343431 206e6970 73726576 296e6f69     144-pin version)
   894d4:	00000000 334d4153 2f477858 344d4153     ....SAM3XxG/SAM4
   894e4:	00477858 334d4153 2f477858 344d4153     XxG.SAM3XxG/SAM4
   894f4:	20477858 69726553 28207365 2f383032     XxG Series (208/
   89504:	2d373132 206e6970 73726576 296e6f69     217-pin version)
   89514:	00000000 334d4153 2f417853 344d4153     ....SAM3SxA/SAM4
   89524:	00417853 334d4153 2f417853 344d4153     SxA.SAM3SxA/SAM4
   89534:	20417853 69726553 28207365 702d3834     SxA Series (48-p
   89544:	76206e69 69737265 00296e6f 334d4153     in version).SAM3
   89554:	2f427853 344d4153 00427853 334d4153     SxB/SAM4SxB.SAM3
   89564:	2f427853 344d4153 20427853 69726553     SxB/SAM4SxB Seri
   89574:	28207365 702d3436 76206e69 69737265     es (64-pin versi
   89584:	00296e6f 334d4153 2f437853 344d4153     on).SAM3SxC/SAM4
   89594:	00437853 334d4153 2f437853 344d4153     SxC.SAM3SxC/SAM4
   895a4:	20437853 69726553 28207365 2d303031     SxC Series (100-
   895b4:	206e6970 73726576 296e6f69 00000000     pin version)....
   895c4:	31395441 00323978 31395441 20323978     AT91x92.AT91x92 
   895d4:	69726553 00007365 334d4153 0041784e     Series..SAM3NxA.
   895e4:	334d4153 2041784e 69726553 28207365     SAM3NxA Series (
   895f4:	702d3834 76206e69 69737265 00296e6f     48-pin version).
   89604:	334d4153 0042784e 334d4153 2042784e     SAM3NxB.SAM3NxB 
   89614:	69726553 28207365 702d3436 76206e69     Series (64-pin v
   89624:	69737265 00296e6f 334d4153 0043784e     ersion).SAM3NxC.
   89634:	334d4153 2043784e 69726553 28207365     SAM3NxC Series (
   89644:	2d303031 206e6970 73726576 296e6f69     100-pin version)
   89654:	00000000 334d4153 42784453 00000000     ....SAM3SDxB....
   89664:	334d4153 42784453 72655320 20736569     SAM3SDxB Series 
   89674:	2d343628 206e6970 73726576 296e6f69     (64-pin version)
   89684:	00000000 334d4153 43784453 00000000     ....SAM3SDxC....
   89694:	334d4153 43784453 72655320 20736569     SAM3SDxC Series 
   896a4:	30303128 6e69702d 72657620 6e6f6973     (100-pin version
   896b4:	00000029 354d4153 00000041 35375441     )...SAM5A...AT75
   896c4:	00787843 35375441 20787843 69726553     Cxx.AT75Cxx Seri
   896d4:	00007365 41204f4e 21484352 00000000     es..NO ARCH!....
   896e4:	204b3834 65747962 00000073 62204b31     48K bytes...1K b
   896f4:	73657479 00000000 62204b32 73657479     ytes....2K bytes
   89704:	00000000 62204b36 73657479 00000000     ....6K bytes....
   89714:	204b3432 65747962 00000073 62204b34     24K bytes...4K b
   89724:	73657479 00000000 204b3038 65747962     ytes....80K byte
   89734:	00000073 4b303631 74796220 00007365     s...160K bytes..
   89744:	62204b38 73657479 00000000 204b3631     8K bytes....16K 
   89754:	65747962 00000073 204b3233 65747962     bytes...32K byte
   89764:	00000073 204b3436 65747962 00000073     s...64K bytes...
   89774:	4b383231 74796220 00007365 4b363532     128K bytes..256K
   89784:	74796220 00007365 204b3639 65747962      bytes..96K byte
   89794:	00000073 4b323135 74796220 00007365     s...512K bytes..
   897a4:	454e4f4e 00000000 34323031 7962204b     NONE....1024K by
   897b4:	00736574 38343032 7962204b 00736574     tes.2048K bytes.
   897c4:	45444e55 454e4946 00002144 394d5241     UNDEFINED!..ARM9
   897d4:	00533634 374d5241 494d4454 00000000     46S.ARM7TDMI....
   897e4:	74726f43 4d2d7865 00000033 394d5241     Cortex-M3...ARM9
   897f4:	00543032 394d5241 4a453632 00000053     20T.ARM926EJS...
   89804:	74726f43 412d7865 00000035 74726f43     Cortex-A5...Cort
   89814:	4d2d7865 00000034                       ex-M4...

0008981c <uart_opt>:
   8981c:	05b8d800 0001c200 00000800              ............

00089828 <_global_impure_ptr>:
   89828:	20000638 00464e49 00666e69 004e414e     8.. INF.inf.NAN.
   89838:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   89848:	46454443 00000000 33323130 37363534     CDEF....01234567
   89858:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   89868:	0000296c 00000030                       l)..0...

00089870 <blanks.7208>:
   89870:	20202020 20202020 20202020 20202020                     

00089880 <zeroes.7209>:
   89880:	30303030 30303030 30303030 30303030     0000000000000000
   89890:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   898a0:	49534f50 00000058 0000002e 00000000     POSIX...........

000898b0 <__mprec_bigtens>:
   898b0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   898c0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   898d0:	7f73bf3c 75154fdd                       <.s..O.u

000898d8 <__mprec_tens>:
   898d8:	00000000 3ff00000 00000000 40240000     .......?......$@
   898e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   898f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   89908:	00000000 412e8480 00000000 416312d0     .......A......cA
   89918:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   89928:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   89938:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   89948:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   89958:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   89968:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   89978:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   89988:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   89998:	79d99db4 44ea7843                       ...yCx.D

000899a0 <p05.6040>:
   899a0:	00000005 00000019 0000007d              ........}...

000899ac <_ctype_>:
   899ac:	20202000 20202020 28282020 20282828     .         ((((( 
   899bc:	20202020 20202020 20202020 20202020                     
   899cc:	10108820 10101010 10101010 10101010      ...............
   899dc:	04040410 04040404 10040404 10101010     ................
   899ec:	41411010 41414141 01010101 01010101     ..AAAAAA........
   899fc:	01010101 01010101 01010101 10101010     ................
   89a0c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   89a1c:	02020202 02020202 02020202 10101010     ................
   89a2c:	00000020 00000000 00000000 00000000      ...............
	...

00089ab0 <_init>:
   89ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89ab2:	bf00      	nop
   89ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89ab6:	bc08      	pop	{r3}
   89ab8:	469e      	mov	lr, r3
   89aba:	4770      	bx	lr

00089abc <__init_array_start>:
   89abc:	00085661 	.word	0x00085661

00089ac0 <__frame_dummy_init_array_entry>:
   89ac0:	000800e1                                ....

00089ac4 <_fini>:
   89ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89ac6:	bf00      	nop
   89ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89aca:	bc08      	pop	{r3}
   89acc:	469e      	mov	lr, r3
   89ace:	4770      	bx	lr

00089ad0 <__fini_array_start>:
   89ad0:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000010:	4a21      	ldr	r2, [pc, #132]	; (20000098 <SystemInit+0x8c>)
20000012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000001a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
2000001e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
20000022:	6a1b      	ldr	r3, [r3, #32]
20000024:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20000028:	d107      	bne.n	2000003a <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000002a:	4a1c      	ldr	r2, [pc, #112]	; (2000009c <SystemInit+0x90>)
2000002c:	4b1c      	ldr	r3, [pc, #112]	; (200000a0 <SystemInit+0x94>)
2000002e:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000030:	461a      	mov	r2, r3
20000032:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000034:	f013 0f01 	tst.w	r3, #1
20000038:	d0fb      	beq.n	20000032 <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000003a:	4a1a      	ldr	r2, [pc, #104]	; (200000a4 <SystemInit+0x98>)
2000003c:	4b18      	ldr	r3, [pc, #96]	; (200000a0 <SystemInit+0x94>)
2000003e:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000040:	461a      	mov	r2, r3
20000042:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000044:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20000048:	d0fb      	beq.n	20000042 <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2000004a:	4a15      	ldr	r2, [pc, #84]	; (200000a0 <SystemInit+0x94>)
2000004c:	6b13      	ldr	r3, [r2, #48]	; 0x30
2000004e:	f023 0303 	bic.w	r3, r3, #3
20000052:	f043 0301 	orr.w	r3, r3, #1
20000056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000005a:	f013 0f08 	tst.w	r3, #8
2000005e:	d0fb      	beq.n	20000058 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000060:	4a11      	ldr	r2, [pc, #68]	; (200000a8 <SystemInit+0x9c>)
20000062:	4b0f      	ldr	r3, [pc, #60]	; (200000a0 <SystemInit+0x94>)
20000064:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000066:	461a      	mov	r2, r3
20000068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000006a:	f013 0f02 	tst.w	r3, #2
2000006e:	d0fb      	beq.n	20000068 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000070:	2211      	movs	r2, #17
20000072:	4b0b      	ldr	r3, [pc, #44]	; (200000a0 <SystemInit+0x94>)
20000074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000076:	461a      	mov	r2, r3
20000078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000007a:	f013 0f08 	tst.w	r3, #8
2000007e:	d0fb      	beq.n	20000078 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000080:	2212      	movs	r2, #18
20000082:	4b07      	ldr	r3, [pc, #28]	; (200000a0 <SystemInit+0x94>)
20000084:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000086:	461a      	mov	r2, r3
20000088:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000008a:	f013 0f08 	tst.w	r3, #8
2000008e:	d0fb      	beq.n	20000088 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000090:	4a06      	ldr	r2, [pc, #24]	; (200000ac <SystemInit+0xa0>)
20000092:	4b07      	ldr	r3, [pc, #28]	; (200000b0 <SystemInit+0xa4>)
20000094:	601a      	str	r2, [r3, #0]
20000096:	4770      	bx	lr
20000098:	400e0800 	.word	0x400e0800
2000009c:	00370809 	.word	0x00370809
200000a0:	400e0400 	.word	0x400e0400
200000a4:	01370809 	.word	0x01370809
200000a8:	200f3f01 	.word	0x200f3f01
200000ac:	05b8d800 	.word	0x05b8d800
200000b0:	20000130 	.word	0x20000130

200000b4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000b4:	4b16      	ldr	r3, [pc, #88]	; (20000110 <system_init_flash+0x5c>)
200000b6:	4298      	cmp	r0, r3
200000b8:	d912      	bls.n	200000e0 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000ba:	4b16      	ldr	r3, [pc, #88]	; (20000114 <system_init_flash+0x60>)
200000bc:	4298      	cmp	r0, r3
200000be:	d916      	bls.n	200000ee <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000c0:	4b15      	ldr	r3, [pc, #84]	; (20000118 <system_init_flash+0x64>)
200000c2:	4298      	cmp	r0, r3
200000c4:	d91b      	bls.n	200000fe <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200000c6:	4b15      	ldr	r3, [pc, #84]	; (2000011c <system_init_flash+0x68>)
200000c8:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200000ca:	bf94      	ite	ls
200000cc:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000d0:	f44f 6380 	movhi.w	r3, #1024	; 0x400
200000d4:	4a12      	ldr	r2, [pc, #72]	; (20000120 <system_init_flash+0x6c>)
200000d6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000dc:	6013      	str	r3, [r2, #0]
200000de:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200000e0:	2300      	movs	r3, #0
200000e2:	4a0f      	ldr	r2, [pc, #60]	; (20000120 <system_init_flash+0x6c>)
200000e4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200000e6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000ea:	6013      	str	r3, [r2, #0]
200000ec:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200000ee:	f44f 7380 	mov.w	r3, #256	; 0x100
200000f2:	4a0b      	ldr	r2, [pc, #44]	; (20000120 <system_init_flash+0x6c>)
200000f4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200000f6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000fa:	6013      	str	r3, [r2, #0]
200000fc:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200000fe:	f44f 7300 	mov.w	r3, #512	; 0x200
20000102:	4a07      	ldr	r2, [pc, #28]	; (20000120 <system_init_flash+0x6c>)
20000104:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000106:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000010a:	6013      	str	r3, [r2, #0]
2000010c:	4770      	bx	lr
2000010e:	bf00      	nop
20000110:	016e35ff 	.word	0x016e35ff
20000114:	026259ff 	.word	0x026259ff
20000118:	044aa1ff 	.word	0x044aa1ff
2000011c:	0501bcff 	.word	0x0501bcff
20000120:	400e0800 	.word	0x400e0800

20000124 <timerCallMap>:
20000124:	00080129 00000000                       ).......

2000012c <g_interrupt_enabled>:
2000012c:	00000001                                ....

20000130 <SystemCoreClock>:
20000130:	003d0900                                ..=.

20000134 <wCRCTable>:
20000134:	00000000 0000c0c1 0000c181 00000140     ............@...
20000144:	0000c301 000003c0 00000280 0000c241     ............A...
20000154:	0000c601 000006c0 00000780 0000c741     ............A...
20000164:	00000500 0000c5c1 0000c481 00000440     ............@...
20000174:	0000cc01 00000cc0 00000d80 0000cd41     ............A...
20000184:	00000f00 0000cfc1 0000ce81 00000e40     ............@...
20000194:	00000a00 0000cac1 0000cb81 00000b40     ............@...
200001a4:	0000c901 000009c0 00000880 0000c841     ............A...
200001b4:	0000d801 000018c0 00001980 0000d941     ............A...
200001c4:	00001b00 0000dbc1 0000da81 00001a40     ............@...
200001d4:	00001e00 0000dec1 0000df81 00001f40     ............@...
200001e4:	0000dd01 00001dc0 00001c80 0000dc41     ............A...
200001f4:	00001400 0000d4c1 0000d581 00001540     ............@...
20000204:	0000d701 000017c0 00001680 0000d641     ............A...
20000214:	0000d201 000012c0 00001380 0000d341     ............A...
20000224:	00001100 0000d1c1 0000d081 00001040     ............@...
20000234:	0000f001 000030c0 00003180 0000f141     .....0...1..A...
20000244:	00003300 0000f3c1 0000f281 00003240     .3..........@2..
20000254:	00003600 0000f6c1 0000f781 00003740     .6..........@7..
20000264:	0000f501 000035c0 00003480 0000f441     .....5...4..A...
20000274:	00003c00 0000fcc1 0000fd81 00003d40     .<..........@=..
20000284:	0000ff01 00003fc0 00003e80 0000fe41     .....?...>..A...
20000294:	0000fa01 00003ac0 00003b80 0000fb41     .....:...;..A...
200002a4:	00003900 0000f9c1 0000f881 00003840     .9..........@8..
200002b4:	00002800 0000e8c1 0000e981 00002940     .(..........@)..
200002c4:	0000eb01 00002bc0 00002a80 0000ea41     .....+...*..A...
200002d4:	0000ee01 00002ec0 00002f80 0000ef41     ........./..A...
200002e4:	00002d00 0000edc1 0000ec81 00002c40     .-..........@,..
200002f4:	0000e401 000024c0 00002580 0000e541     .....$...%..A...
20000304:	00002700 0000e7c1 0000e681 00002640     .'..........@&..
20000314:	00002200 0000e2c1 0000e381 00002340     ."..........@#..
20000324:	0000e101 000021c0 00002080 0000e041     .....!... ..A...
20000334:	0000a001 000060c0 00006180 0000a141     .....`...a..A...
20000344:	00006300 0000a3c1 0000a281 00006240     .c..........@b..
20000354:	00006600 0000a6c1 0000a781 00006740     .f..........@g..
20000364:	0000a501 000065c0 00006480 0000a441     .....e...d..A...
20000374:	00006c00 0000acc1 0000ad81 00006d40     .l..........@m..
20000384:	0000af01 00006fc0 00006e80 0000ae41     .....o...n..A...
20000394:	0000aa01 00006ac0 00006b80 0000ab41     .....j...k..A...
200003a4:	00006900 0000a9c1 0000a881 00006840     .i..........@h..
200003b4:	00007800 0000b8c1 0000b981 00007940     .x..........@y..
200003c4:	0000bb01 00007bc0 00007a80 0000ba41     .....{...z..A...
200003d4:	0000be01 00007ec0 00007f80 0000bf41     .....~......A...
200003e4:	00007d00 0000bdc1 0000bc81 00007c40     .}..........@|..
200003f4:	0000b401 000074c0 00007580 0000b541     .....t...u..A...
20000404:	00007700 0000b7c1 0000b681 00007640     .w..........@v..
20000414:	00007200 0000b2c1 0000b381 00007340     .r..........@s..
20000424:	0000b101 000071c0 00007080 0000b041     .....q...p..A...
20000434:	00005000 000090c1 00009181 00005140     .P..........@Q..
20000444:	00009301 000053c0 00005280 00009241     .....S...R..A...
20000454:	00009601 000056c0 00005780 00009741     .....V...W..A...
20000464:	00005500 000095c1 00009481 00005440     .U..........@T..
20000474:	00009c01 00005cc0 00005d80 00009d41     .....\...]..A...
20000484:	00005f00 00009fc1 00009e81 00005e40     ._..........@^..
20000494:	00005a00 00009ac1 00009b81 00005b40     .Z..........@[..
200004a4:	00009901 000059c0 00005880 00009841     .....Y...X..A...
200004b4:	00008801 000048c0 00004980 00008941     .....H...I..A...
200004c4:	00004b00 00008bc1 00008a81 00004a40     .K..........@J..
200004d4:	00004e00 00008ec1 00008f81 00004f40     .N..........@O..
200004e4:	00008d01 00004dc0 00004c80 00008c41     .....M...L..A...
200004f4:	00004400 000084c1 00008581 00004540     .D..........@E..
20000504:	00008701 000047c0 00004680 00008641     .....G...F..A...
20000514:	00008201 000042c0 00004380 00008341     .....B...C..A...
20000524:	00004100 000081c1 00008081 00004040     .A..........@@..

20000534 <daysOfWeek>:
20000534:	00088c84 00088c8c 00088c94 00088c9c     ................
20000544:	00088ca8 00088cb4 00088cbc              ............

20000550 <months>:
20000550:	00088c18 00088c20 00088c2c 00088c34     .... ...,...4...
20000560:	00088c3c 00088c40 00088c48 00088c50     <...@...H...P...
20000570:	00088c58 00088c64 00088c6c 00088c78     X...d...l...x...

20000580 <eprocs>:
20000580:	000897c4 000897d0 000897d8 000897e4     ................
20000590:	000897f0 000897f8 00089804 00089810     ................

200005a0 <nvpsiz>:
200005a0:	000897a4 00089744 00089750 0008975c     ....D...P...\...
200005b0:	00000000 00089768 00000000 00089774     ....h.......t...
200005c0:	00000000 00089780 00089798 00000000     ................
200005d0:	000897ac 00000000 000897b8 00000000     ................

200005e0 <nvptyp>:
200005e0:	000890f4 00089100 00089128 00089148     ........(...H...
200005f0:	000891a4                                ....

200005f4 <sramsiz>:
200005f4:	000896e4 000896f0 000896fc 00089708     ................
20000604:	00089714 00089720 0008972c 00089738     .... ...,...8...
20000614:	00089744 00089750 0008975c 00089768     D...P...\...h...
20000624:	00089774 00089780 0008978c 00089798     t...............

20000634 <_impure_ptr>:
20000634:	20000638                                8.. 

20000638 <impure_data>:
20000638:	00000000 20000924 2000098c 200009f4     ....$.. ... ... 
	...
200006e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200006f0:	0005deec 0000000b 00000000 00000000     ................
	...

20000a60 <__global_locale>:
20000a60:	00000043 00000000 00000000 00000000     C...............
	...
20000a80:	00000043 00000000 00000000 00000000     C...............
	...
20000aa0:	00000043 00000000 00000000 00000000     C...............
	...
20000ac0:	00000043 00000000 00000000 00000000     C...............
	...
20000ae0:	00000043 00000000 00000000 00000000     C...............
	...
20000b00:	00000043 00000000 00000000 00000000     C...............
	...
20000b20:	00000043 00000000 00000000 00000000     C...............
	...
20000b40:	0008744d 00086b89 00000000 000899ac     Mt...k..........
20000b50:	000898a8 0008887c 0008887c 0008887c     ....|...|...|...
20000b60:	0008887c 0008887c 0008887c 0008887c     |...|...|...|...
20000b70:	0008887c 0008887c ffffffff ffffffff     |...|...........
20000b80:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000ba8:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000bcc <__malloc_av_>:
	...
20000bd4:	20000bcc 20000bcc 20000bd4 20000bd4     ... ... ... ... 
20000be4:	20000bdc 20000bdc 20000be4 20000be4     ... ... ... ... 
20000bf4:	20000bec 20000bec 20000bf4 20000bf4     ... ... ... ... 
20000c04:	20000bfc 20000bfc 20000c04 20000c04     ... ... ... ... 
20000c14:	20000c0c 20000c0c 20000c14 20000c14     ... ... ... ... 
20000c24:	20000c1c 20000c1c 20000c24 20000c24     ... ... $.. $.. 
20000c34:	20000c2c 20000c2c 20000c34 20000c34     ,.. ,.. 4.. 4.. 
20000c44:	20000c3c 20000c3c 20000c44 20000c44     <.. <.. D.. D.. 
20000c54:	20000c4c 20000c4c 20000c54 20000c54     L.. L.. T.. T.. 
20000c64:	20000c5c 20000c5c 20000c64 20000c64     \.. \.. d.. d.. 
20000c74:	20000c6c 20000c6c 20000c74 20000c74     l.. l.. t.. t.. 
20000c84:	20000c7c 20000c7c 20000c84 20000c84     |.. |.. ... ... 
20000c94:	20000c8c 20000c8c 20000c94 20000c94     ... ... ... ... 
20000ca4:	20000c9c 20000c9c 20000ca4 20000ca4     ... ... ... ... 
20000cb4:	20000cac 20000cac 20000cb4 20000cb4     ... ... ... ... 
20000cc4:	20000cbc 20000cbc 20000cc4 20000cc4     ... ... ... ... 
20000cd4:	20000ccc 20000ccc 20000cd4 20000cd4     ... ... ... ... 
20000ce4:	20000cdc 20000cdc 20000ce4 20000ce4     ... ... ... ... 
20000cf4:	20000cec 20000cec 20000cf4 20000cf4     ... ... ... ... 
20000d04:	20000cfc 20000cfc 20000d04 20000d04     ... ... ... ... 
20000d14:	20000d0c 20000d0c 20000d14 20000d14     ... ... ... ... 
20000d24:	20000d1c 20000d1c 20000d24 20000d24     ... ... $.. $.. 
20000d34:	20000d2c 20000d2c 20000d34 20000d34     ,.. ,.. 4.. 4.. 
20000d44:	20000d3c 20000d3c 20000d44 20000d44     <.. <.. D.. D.. 
20000d54:	20000d4c 20000d4c 20000d54 20000d54     L.. L.. T.. T.. 
20000d64:	20000d5c 20000d5c 20000d64 20000d64     \.. \.. d.. d.. 
20000d74:	20000d6c 20000d6c 20000d74 20000d74     l.. l.. t.. t.. 
20000d84:	20000d7c 20000d7c 20000d84 20000d84     |.. |.. ... ... 
20000d94:	20000d8c 20000d8c 20000d94 20000d94     ... ... ... ... 
20000da4:	20000d9c 20000d9c 20000da4 20000da4     ... ... ... ... 
20000db4:	20000dac 20000dac 20000db4 20000db4     ... ... ... ... 
20000dc4:	20000dbc 20000dbc 20000dc4 20000dc4     ... ... ... ... 
20000dd4:	20000dcc 20000dcc 20000dd4 20000dd4     ... ... ... ... 
20000de4:	20000ddc 20000ddc 20000de4 20000de4     ... ... ... ... 
20000df4:	20000dec 20000dec 20000df4 20000df4     ... ... ... ... 
20000e04:	20000dfc 20000dfc 20000e04 20000e04     ... ... ... ... 
20000e14:	20000e0c 20000e0c 20000e14 20000e14     ... ... ... ... 
20000e24:	20000e1c 20000e1c 20000e24 20000e24     ... ... $.. $.. 
20000e34:	20000e2c 20000e2c 20000e34 20000e34     ,.. ,.. 4.. 4.. 
20000e44:	20000e3c 20000e3c 20000e44 20000e44     <.. <.. D.. D.. 
20000e54:	20000e4c 20000e4c 20000e54 20000e54     L.. L.. T.. T.. 
20000e64:	20000e5c 20000e5c 20000e64 20000e64     \.. \.. d.. d.. 
20000e74:	20000e6c 20000e6c 20000e74 20000e74     l.. l.. t.. t.. 
20000e84:	20000e7c 20000e7c 20000e84 20000e84     |.. |.. ... ... 
20000e94:	20000e8c 20000e8c 20000e94 20000e94     ... ... ... ... 
20000ea4:	20000e9c 20000e9c 20000ea4 20000ea4     ... ... ... ... 
20000eb4:	20000eac 20000eac 20000eb4 20000eb4     ... ... ... ... 
20000ec4:	20000ebc 20000ebc 20000ec4 20000ec4     ... ... ... ... 
20000ed4:	20000ecc 20000ecc 20000ed4 20000ed4     ... ... ... ... 
20000ee4:	20000edc 20000edc 20000ee4 20000ee4     ... ... ... ... 
20000ef4:	20000eec 20000eec 20000ef4 20000ef4     ... ... ... ... 
20000f04:	20000efc 20000efc 20000f04 20000f04     ... ... ... ... 
20000f14:	20000f0c 20000f0c 20000f14 20000f14     ... ... ... ... 
20000f24:	20000f1c 20000f1c 20000f24 20000f24     ... ... $.. $.. 
20000f34:	20000f2c 20000f2c 20000f34 20000f34     ,.. ,.. 4.. 4.. 
20000f44:	20000f3c 20000f3c 20000f44 20000f44     <.. <.. D.. D.. 
20000f54:	20000f4c 20000f4c 20000f54 20000f54     L.. L.. T.. T.. 
20000f64:	20000f5c 20000f5c 20000f64 20000f64     \.. \.. d.. d.. 
20000f74:	20000f6c 20000f6c 20000f74 20000f74     l.. l.. t.. t.. 
20000f84:	20000f7c 20000f7c 20000f84 20000f84     |.. |.. ... ... 
20000f94:	20000f8c 20000f8c 20000f94 20000f94     ... ... ... ... 
20000fa4:	20000f9c 20000f9c 20000fa4 20000fa4     ... ... ... ... 
20000fb4:	20000fac 20000fac 20000fb4 20000fb4     ... ... ... ... 
20000fc4:	20000fbc 20000fbc 20000fc4 20000fc4     ... ... ... ... 

20000fd4 <__malloc_sbrk_base>:
20000fd4:	ffffffff                                ....

20000fd8 <__malloc_trim_threshold>:
20000fd8:	00020000                                ....
