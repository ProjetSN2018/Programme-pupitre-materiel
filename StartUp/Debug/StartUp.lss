
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009a4c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00089a4c  00089a4c  00019a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000fd4  20000000  00089a54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000864  20000fd4  0008aa28  00020fd4  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020fd4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020ffd  2**0
                  CONTENTS, READONLY
  7 .debug_info   00021e03  00000000  00000000  00021056  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004dfe  00000000  00000000  00042e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000057a0  00000000  00000000  00047c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c28  00000000  00000000  0004d3f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a80  00000000  00000000  0004e01f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001999f  00000000  00000000  0004ea9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017c3e  00000000  00000000  0006843e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00051a8e  00000000  00000000  0008007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000277c  00000000  00000000  000d1b0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 b9 0f 08 00 b5 0f 08 00 b5 0f 08 00     .@. ............
   80010:	b5 0f 08 00 b5 0f 08 00 b5 0f 08 00 00 00 00 00     ................
	...
   8002c:	b5 0f 08 00 b5 0f 08 00 00 00 00 00 b5 0f 08 00     ................
   8003c:	b5 0f 08 00 b5 0f 08 00 b5 0f 08 00 a5 1c 08 00     ................
   8004c:	b5 0f 08 00 b5 0f 08 00 b5 0f 08 00 b5 0f 08 00     ................
   8005c:	b5 0f 08 00 9d 34 08 00 b5 0f 08 00 c9 06 08 00     .....4..........
   8006c:	dd 06 08 00 b5 0f 08 00 b5 0f 08 00 b5 0f 08 00     ................
   8007c:	b5 0f 08 00 b5 0f 08 00 b5 0f 08 00 b5 0f 08 00     ................
   8008c:	b5 0f 08 00 b5 0f 08 00 b5 0f 08 00 19 37 08 00     .............7..
   8009c:	b5 0f 08 00 b5 0f 08 00 b5 0f 08 00 b5 0f 08 00     ................
   800ac:	b5 0f 08 00 b5 0f 08 00 b5 0f 08 00 b5 0f 08 00     ................

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000fd4 	.word	0x20000fd4
   800d8:	00000000 	.word	0x00000000
   800dc:	00089a54 	.word	0x00089a54

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	00089a54 	.word	0x00089a54
   8011c:	20000fd8 	.word	0x20000fd8
   80120:	00089a54 	.word	0x00089a54
   80124:	00000000 	.word	0x00000000

00080128 <Appli>:

#include "appli.h"


uint32_t Appli(uint32_t sc, ...)
{
   80128:	b40f      	push	{r0, r1, r2, r3}
   8012a:	b538      	push	{r3, r4, r5, lr}
   8012c:	9904      	ldr	r1, [sp, #16]
	switch(sc)
   8012e:	2964      	cmp	r1, #100	; 0x64
   80130:	d007      	beq.n	80142 <Appli+0x1a>
		LcdPutstr("CPU.ACX  ATSAM3U4C",2,1);
		LcdPutstr("www.a-2-s.net",3,4);
		
		break;
	default:
		Error(ERROR_APPLI_SWITCH_BAD_SC,sc);
   80132:	2010      	movs	r0, #16
   80134:	4b27      	ldr	r3, [pc, #156]	; (801d4 <Appli+0xac>)
   80136:	4798      	blx	r3
	}
	return 0;
}
   80138:	2000      	movs	r0, #0
   8013a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8013e:	b004      	add	sp, #16
   80140:	4770      	bx	lr
		gpio_configure_pin(CMD_MOSFET,			CMD_MOSFET_FLAGS);
   80142:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80146:	2020      	movs	r0, #32
   80148:	4c23      	ldr	r4, [pc, #140]	; (801d8 <Appli+0xb0>)
   8014a:	47a0      	blx	r4
		gpio_configure_pin(CMD_MOT_SERRURE,		CMD_MOT_SERRURE_FLAGS);
   8014c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80150:	2021      	movs	r0, #33	; 0x21
   80152:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS,			CMD_RELAIS_FLAGS);
   80154:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80158:	2022      	movs	r0, #34	; 0x22
   8015a:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS_1,		CMD_RELAIS_1_FLAGS);
   8015c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80160:	2023      	movs	r0, #35	; 0x23
   80162:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS_2,		CMD_RELAIS_2_FLAGS);
   80164:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80168:	2024      	movs	r0, #36	; 0x24
   8016a:	47a0      	blx	r4
		pmc_enable_periph_clk(ID_PIOA);
   8016c:	200a      	movs	r0, #10
   8016e:	4d1b      	ldr	r5, [pc, #108]	; (801dc <Appli+0xb4>)
   80170:	47a8      	blx	r5
		pmc_enable_periph_clk(ID_PIOB);
   80172:	200b      	movs	r0, #11
   80174:	47a8      	blx	r5
		gpio_configure_pin(PENE_OUVERT,			PENE_OUVERT_FLAGS);
   80176:	4d1a      	ldr	r5, [pc, #104]	; (801e0 <Appli+0xb8>)
   80178:	4629      	mov	r1, r5
   8017a:	200e      	movs	r0, #14
   8017c:	47a0      	blx	r4
		gpio_configure_pin(PENE_FERME,			PENE_FERME_FLAGS);
   8017e:	4629      	mov	r1, r5
   80180:	200f      	movs	r0, #15
   80182:	47a0      	blx	r4
		gpio_configure_pin(IN_ILS,				IN_ILS_FLAGS);
   80184:	4629      	mov	r1, r5
   80186:	2010      	movs	r0, #16
   80188:	47a0      	blx	r4
		gpio_configure_pin(IN_SV,				IN_SV_FLAGS);
   8018a:	4629      	mov	r1, r5
   8018c:	2011      	movs	r0, #17
   8018e:	47a0      	blx	r4
		gpio_configure_pin(IN_RADAR,			IN_RADAR_FLAGS);
   80190:	4629      	mov	r1, r5
   80192:	2018      	movs	r0, #24
   80194:	47a0      	blx	r4
		gpio_configure_pin(IN_DVU,				IN_DVU_FLAGS);
   80196:	4629      	mov	r1, r5
   80198:	2019      	movs	r0, #25
   8019a:	47a0      	blx	r4
		gpio_configure_pin(IN_PREMIERE_ENTREE,	IN_PREMIERE_ENTREE_FLAGS);
   8019c:	4629      	mov	r1, r5
   8019e:	201a      	movs	r0, #26
   801a0:	47a0      	blx	r4
		gpio_configure_pin(IN_DVU_GENERAL,		IN_DVU_GENERAL_FLAGS);
   801a2:	4629      	mov	r1, r5
   801a4:	201b      	movs	r0, #27
   801a6:	47a0      	blx	r4
		gpio_configure_pin(IN_ENTREE_LIBRE,		IN_ENTREE_OPTION_FLAGS);
   801a8:	4629      	mov	r1, r5
   801aa:	201c      	movs	r0, #28
   801ac:	47a0      	blx	r4
		gpio_configure_pin(IN_ENTREE_OPTION,	IN_ENTREE_OPTION_FLAGS);
   801ae:	4629      	mov	r1, r5
   801b0:	201d      	movs	r0, #29
   801b2:	47a0      	blx	r4
		Putstr("\r\n\n\t*______________ CPU.ACX-ATSAM3U4CA-AU ______________*\r\n\n");
   801b4:	490b      	ldr	r1, [pc, #44]	; (801e4 <Appli+0xbc>)
   801b6:	2067      	movs	r0, #103	; 0x67
   801b8:	4b0b      	ldr	r3, [pc, #44]	; (801e8 <Appli+0xc0>)
   801ba:	4798      	blx	r3
		LcdPutstr("CPU.ACX  ATSAM3U4C",2,1);
   801bc:	2301      	movs	r3, #1
   801be:	2202      	movs	r2, #2
   801c0:	490a      	ldr	r1, [pc, #40]	; (801ec <Appli+0xc4>)
   801c2:	2067      	movs	r0, #103	; 0x67
   801c4:	4c0a      	ldr	r4, [pc, #40]	; (801f0 <Appli+0xc8>)
   801c6:	47a0      	blx	r4
		LcdPutstr("www.a-2-s.net",3,4);
   801c8:	2304      	movs	r3, #4
   801ca:	2203      	movs	r2, #3
   801cc:	4909      	ldr	r1, [pc, #36]	; (801f4 <Appli+0xcc>)
   801ce:	2067      	movs	r0, #103	; 0x67
   801d0:	47a0      	blx	r4
		break;
   801d2:	e7b1      	b.n	80138 <Appli+0x10>
   801d4:	000817b5 	.word	0x000817b5
   801d8:	000808ad 	.word	0x000808ad
   801dc:	00080aad 	.word	0x00080aad
   801e0:	28000001 	.word	0x28000001
   801e4:	000887b8 	.word	0x000887b8
   801e8:	000832dd 	.word	0x000832dd
   801ec:	000887f8 	.word	0x000887f8
   801f0:	00081cd5 	.word	0x00081cd5
   801f4:	0008880c 	.word	0x0008880c

000801f8 <chipid_read>:
 *
 * \return 0 on success.
 */
uint32_t chipid_read(Chipid *p_chipid, chipid_data_t *p_chipid_data)
{
	if (NULL == p_chipid_data) {
   801f8:	b311      	cbz	r1, 80240 <chipid_read+0x48>
		return 0xFFFFFFFF;
	}
	
	p_chipid_data->ul_version =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_VERSION_Msk) >>
   801fa:	6802      	ldr	r2, [r0, #0]
   801fc:	f002 021f 	and.w	r2, r2, #31
	p_chipid_data->ul_version =
   80200:	600a      	str	r2, [r1, #0]
			CHIPID_CIDR_VERSION_Pos;
	p_chipid_data->ul_eproc =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_EPROC_Msk) >>
   80202:	6802      	ldr	r2, [r0, #0]
   80204:	f3c2 1242 	ubfx	r2, r2, #5, #3
	p_chipid_data->ul_eproc =
   80208:	604a      	str	r2, [r1, #4]
			CHIPID_CIDR_EPROC_Pos;
	p_chipid_data->ul_nvpsiz =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPSIZ_Msk) >>
   8020a:	6802      	ldr	r2, [r0, #0]
   8020c:	f3c2 2203 	ubfx	r2, r2, #8, #4
	p_chipid_data->ul_nvpsiz =
   80210:	608a      	str	r2, [r1, #8]
			CHIPID_CIDR_NVPSIZ_Pos;
	p_chipid_data->ul_nvpsiz2 =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPSIZ2_Pos) >>
   80212:	6802      	ldr	r2, [r0, #0]
	p_chipid_data->ul_nvpsiz2 =
   80214:	2200      	movs	r2, #0
   80216:	60ca      	str	r2, [r1, #12]
			CHIPID_CIDR_NVPSIZ2_Pos;
	p_chipid_data->ul_sramsiz =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_SRAMSIZ_Msk) >>
   80218:	6802      	ldr	r2, [r0, #0]
   8021a:	f3c2 4203 	ubfx	r2, r2, #16, #4
	p_chipid_data->ul_sramsiz =
   8021e:	610a      	str	r2, [r1, #16]
			CHIPID_CIDR_SRAMSIZ_Pos;
	p_chipid_data->ul_arch =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_ARCH_Msk) >>
   80220:	6802      	ldr	r2, [r0, #0]
   80222:	f3c2 5207 	ubfx	r2, r2, #20, #8
	p_chipid_data->ul_arch =
   80226:	614a      	str	r2, [r1, #20]
			CHIPID_CIDR_ARCH_Pos;
	p_chipid_data->ul_nvptyp =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPTYP_Msk) >>
   80228:	6802      	ldr	r2, [r0, #0]
   8022a:	f3c2 7202 	ubfx	r2, r2, #28, #3
	p_chipid_data->ul_nvptyp =
   8022e:	618a      	str	r2, [r1, #24]
			CHIPID_CIDR_NVPTYP_Pos;
	p_chipid_data->ul_extflag =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_EXT) >> 31;
   80230:	6802      	ldr	r2, [r0, #0]
   80232:	0fd2      	lsrs	r2, r2, #31
	p_chipid_data->ul_extflag =
   80234:	61ca      	str	r2, [r1, #28]
		
	if (p_chipid_data->ul_extflag) {
   80236:	b132      	cbz	r2, 80246 <chipid_read+0x4e>
		p_chipid_data->ul_extid =
			p_chipid->CHIPID_EXID & CHIPID_EXID_EXID_Msk;
   80238:	6842      	ldr	r2, [r0, #4]
		p_chipid_data->ul_extid =
   8023a:	620a      	str	r2, [r1, #32]
	}
	return 0;
   8023c:	2000      	movs	r0, #0
   8023e:	4770      	bx	lr
		return 0xFFFFFFFF;
   80240:	f04f 30ff 	mov.w	r0, #4294967295
   80244:	4770      	bx	lr
	return 0;
   80246:	2000      	movs	r0, #0
}
   80248:	4770      	bx	lr
	...

0008024c <_menuOptionSasFunc>:

	if(getShellStatus() == ST_MENU_IDLE) setShellStatus(ST_MENU_MENU);
}

 uint32_t _menuOptionSasFunc(uint32_t sc, ...)
 {
   8024c:	b40f      	push	{r0, r1, r2, r3}
   8024e:	b510      	push	{r4, lr}
	switch(sc)
	{
	default:
		Putstr("_menuOptionSasFunc: BAD SC");
   80250:	4908      	ldr	r1, [pc, #32]	; (80274 <_menuOptionSasFunc+0x28>)
   80252:	2067      	movs	r0, #103	; 0x67
   80254:	4b08      	ldr	r3, [pc, #32]	; (80278 <_menuOptionSasFunc+0x2c>)
   80256:	4798      	blx	r3
		LcdPutstr("Fermeture sas",
   80258:	210d      	movs	r1, #13
   8025a:	2069      	movs	r0, #105	; 0x69
   8025c:	4c07      	ldr	r4, [pc, #28]	; (8027c <_menuOptionSasFunc+0x30>)
   8025e:	47a0      	blx	r4
   80260:	4603      	mov	r3, r0
   80262:	2203      	movs	r2, #3
   80264:	4906      	ldr	r1, [pc, #24]	; (80280 <_menuOptionSasFunc+0x34>)
   80266:	2067      	movs	r0, #103	; 0x67
   80268:	47a0      	blx	r4
					LcdFindCenter(strlen("Fermeture sas"))
					);
		break;
	}
	return 0;
 }
   8026a:	2000      	movs	r0, #0
   8026c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80270:	b004      	add	sp, #16
   80272:	4770      	bx	lr
   80274:	000888fc 	.word	0x000888fc
   80278:	000832dd 	.word	0x000832dd
   8027c:	00081cd5 	.word	0x00081cd5
   80280:	00088918 	.word	0x00088918

00080284 <_menuPorteFermer1>:

uint32_t _menuPorteFermer1(uint32_t sc, ...)
{
   80284:	b40f      	push	{r0, r1, r2, r3}
   80286:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuPorteFermer1: BAD SC");
   80288:	4908      	ldr	r1, [pc, #32]	; (802ac <_menuPorteFermer1+0x28>)
   8028a:	2067      	movs	r0, #103	; 0x67
   8028c:	4b08      	ldr	r3, [pc, #32]	; (802b0 <_menuPorteFermer1+0x2c>)
   8028e:	4798      	blx	r3
		LcdPutstr("Fermeture porte 1",
   80290:	2111      	movs	r1, #17
   80292:	2069      	movs	r0, #105	; 0x69
   80294:	4c07      	ldr	r4, [pc, #28]	; (802b4 <_menuPorteFermer1+0x30>)
   80296:	47a0      	blx	r4
   80298:	4603      	mov	r3, r0
   8029a:	2203      	movs	r2, #3
   8029c:	4906      	ldr	r1, [pc, #24]	; (802b8 <_menuPorteFermer1+0x34>)
   8029e:	2067      	movs	r0, #103	; 0x67
   802a0:	47a0      	blx	r4
					LcdFindCenter(strlen("Fermeture porte 1"))
					);
		break;
	}
	return 0;
}
   802a2:	2000      	movs	r0, #0
   802a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   802a8:	b004      	add	sp, #16
   802aa:	4770      	bx	lr
   802ac:	00088928 	.word	0x00088928
   802b0:	000832dd 	.word	0x000832dd
   802b4:	00081cd5 	.word	0x00081cd5
   802b8:	00088944 	.word	0x00088944

000802bc <_menuPorteFermer2>:

uint32_t _menuPorteFermer2(uint32_t sc, ...)
{
   802bc:	b40f      	push	{r0, r1, r2, r3}
   802be:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuPorteFermer2: BAD SC");
   802c0:	4908      	ldr	r1, [pc, #32]	; (802e4 <_menuPorteFermer2+0x28>)
   802c2:	2067      	movs	r0, #103	; 0x67
   802c4:	4b08      	ldr	r3, [pc, #32]	; (802e8 <_menuPorteFermer2+0x2c>)
   802c6:	4798      	blx	r3
		LcdPutstr("Fermeture porte 2",
   802c8:	2111      	movs	r1, #17
   802ca:	2069      	movs	r0, #105	; 0x69
   802cc:	4c07      	ldr	r4, [pc, #28]	; (802ec <_menuPorteFermer2+0x30>)
   802ce:	47a0      	blx	r4
   802d0:	4603      	mov	r3, r0
   802d2:	2203      	movs	r2, #3
   802d4:	4906      	ldr	r1, [pc, #24]	; (802f0 <_menuPorteFermer2+0x34>)
   802d6:	2067      	movs	r0, #103	; 0x67
   802d8:	47a0      	blx	r4
					LcdFindCenter(strlen("Fermeture porte 2"))
					);
		break;
	}
	return 0;
}
   802da:	2000      	movs	r0, #0
   802dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   802e0:	b004      	add	sp, #16
   802e2:	4770      	bx	lr
   802e4:	00088958 	.word	0x00088958
   802e8:	000832dd 	.word	0x000832dd
   802ec:	00081cd5 	.word	0x00081cd5
   802f0:	00088974 	.word	0x00088974

000802f4 <_menuEtatPorte1>:

uint32_t _menuEtatPorte1(uint32_t sc, ...)
{
   802f4:	b40f      	push	{r0, r1, r2, r3}
   802f6:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   802f8:	4908      	ldr	r1, [pc, #32]	; (8031c <_menuEtatPorte1+0x28>)
   802fa:	2067      	movs	r0, #103	; 0x67
   802fc:	4b08      	ldr	r3, [pc, #32]	; (80320 <_menuEtatPorte1+0x2c>)
   802fe:	4798      	blx	r3
		LcdPutstr("Etat porte 1",
   80300:	210c      	movs	r1, #12
   80302:	2069      	movs	r0, #105	; 0x69
   80304:	4c07      	ldr	r4, [pc, #28]	; (80324 <_menuEtatPorte1+0x30>)
   80306:	47a0      	blx	r4
   80308:	4603      	mov	r3, r0
   8030a:	2203      	movs	r2, #3
   8030c:	4906      	ldr	r1, [pc, #24]	; (80328 <_menuEtatPorte1+0x34>)
   8030e:	2067      	movs	r0, #103	; 0x67
   80310:	47a0      	blx	r4
					LcdFindCenter(strlen("Etat porte 1"))
					);
		break;
	}
	return 0;
}
   80312:	2000      	movs	r0, #0
   80314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80318:	b004      	add	sp, #16
   8031a:	4770      	bx	lr
   8031c:	000888fc 	.word	0x000888fc
   80320:	000832dd 	.word	0x000832dd
   80324:	00081cd5 	.word	0x00081cd5
   80328:	000888d0 	.word	0x000888d0

0008032c <_menuEtatPorte2>:

uint32_t _menuEtatPorte2(uint32_t sc, ...)
{
   8032c:	b40f      	push	{r0, r1, r2, r3}
   8032e:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   80330:	4908      	ldr	r1, [pc, #32]	; (80354 <_menuEtatPorte2+0x28>)
   80332:	2067      	movs	r0, #103	; 0x67
   80334:	4b08      	ldr	r3, [pc, #32]	; (80358 <_menuEtatPorte2+0x2c>)
   80336:	4798      	blx	r3
		LcdPutstr("Etat porte 2",
   80338:	210c      	movs	r1, #12
   8033a:	2069      	movs	r0, #105	; 0x69
   8033c:	4c07      	ldr	r4, [pc, #28]	; (8035c <_menuEtatPorte2+0x30>)
   8033e:	47a0      	blx	r4
   80340:	4603      	mov	r3, r0
   80342:	2203      	movs	r2, #3
   80344:	4906      	ldr	r1, [pc, #24]	; (80360 <_menuEtatPorte2+0x34>)
   80346:	2067      	movs	r0, #103	; 0x67
   80348:	47a0      	blx	r4
					LcdFindCenter(strlen("Etat porte 2"))
					);
		break;
	}
	return 0;
}
   8034a:	2000      	movs	r0, #0
   8034c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80350:	b004      	add	sp, #16
   80352:	4770      	bx	lr
   80354:	000888fc 	.word	0x000888fc
   80358:	000832dd 	.word	0x000832dd
   8035c:	00081cd5 	.word	0x00081cd5
   80360:	000888e0 	.word	0x000888e0

00080364 <_menuEtatPortes>:

uint32_t _menuEtatPortes(uint32_t sc, ...)
{
   80364:	b40f      	push	{r0, r1, r2, r3}
   80366:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   80368:	4908      	ldr	r1, [pc, #32]	; (8038c <_menuEtatPortes+0x28>)
   8036a:	2067      	movs	r0, #103	; 0x67
   8036c:	4b08      	ldr	r3, [pc, #32]	; (80390 <_menuEtatPortes+0x2c>)
   8036e:	4798      	blx	r3
		LcdPutstr("Etat portes",
   80370:	210b      	movs	r1, #11
   80372:	2069      	movs	r0, #105	; 0x69
   80374:	4c07      	ldr	r4, [pc, #28]	; (80394 <_menuEtatPortes+0x30>)
   80376:	47a0      	blx	r4
   80378:	4603      	mov	r3, r0
   8037a:	2203      	movs	r2, #3
   8037c:	4906      	ldr	r1, [pc, #24]	; (80398 <_menuEtatPortes+0x34>)
   8037e:	2067      	movs	r0, #103	; 0x67
   80380:	47a0      	blx	r4
					LcdFindCenter(strlen("Etat portes"))
					);
		break;
	}
	return 0;
   80382:	2000      	movs	r0, #0
   80384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80388:	b004      	add	sp, #16
   8038a:	4770      	bx	lr
   8038c:	000888fc 	.word	0x000888fc
   80390:	000832dd 	.word	0x000832dd
   80394:	00081cd5 	.word	0x00081cd5
   80398:	000888f0 	.word	0x000888f0

0008039c <Menu>:
{
   8039c:	b40f      	push	{r0, r1, r2, r3}
   8039e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803a2:	b082      	sub	sp, #8
   803a4:	9908      	ldr	r1, [sp, #32]
	switch(sc)
   803a6:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   803aa:	2b07      	cmp	r3, #7
   803ac:	f200 80af 	bhi.w	8050e <Menu+0x172>
   803b0:	e8df f003 	tbb	[pc, r3]
   803b4:	826d5d04 	.word	0x826d5d04
   803b8:	57ad91ad 	.word	0x57ad91ad
			Putstr("MENU_NEW\r");
   803bc:	4956      	ldr	r1, [pc, #344]	; (80518 <Menu+0x17c>)
   803be:	2067      	movs	r0, #103	; 0x67
   803c0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8054c <Menu+0x1b0>
   803c4:	47c0      	blx	r8
			pio_set_input(PIOA, PIN_BUTTON_SWITCH, PIO_PULLUP); //A0 (Bouton Gauche)
   803c6:	4c55      	ldr	r4, [pc, #340]	; (8051c <Menu+0x180>)
   803c8:	2201      	movs	r2, #1
   803ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
   803ce:	4620      	mov	r0, r4
   803d0:	4f53      	ldr	r7, [pc, #332]	; (80520 <Menu+0x184>)
   803d2:	47b8      	blx	r7
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_SWITCH, PIO_IT_FALL_EDGE, ButtonSwitch_ISR_Handler);
   803d4:	4b53      	ldr	r3, [pc, #332]	; (80524 <Menu+0x188>)
   803d6:	9300      	str	r3, [sp, #0]
   803d8:	2350      	movs	r3, #80	; 0x50
   803da:	f44f 6280 	mov.w	r2, #1024	; 0x400
   803de:	210a      	movs	r1, #10
   803e0:	4620      	mov	r0, r4
   803e2:	4e51      	ldr	r6, [pc, #324]	; (80528 <Menu+0x18c>)
   803e4:	47b0      	blx	r6
			pio_enable_interrupt(PIOA, PIN_BUTTON_SWITCH);
   803e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   803ea:	4620      	mov	r0, r4
   803ec:	4d4f      	ldr	r5, [pc, #316]	; (8052c <Menu+0x190>)
   803ee:	47a8      	blx	r5
			pio_set_input(PIOA, PIN_BUTTON_SELECT, PIO_PULLUP); //A1 (Bouton Milieu)
   803f0:	2201      	movs	r2, #1
   803f2:	f44f 7100 	mov.w	r1, #512	; 0x200
   803f6:	4620      	mov	r0, r4
   803f8:	47b8      	blx	r7
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_SELECT, PIO_IT_FALL_EDGE, ButtonSelect_ISR_Handler);
   803fa:	4b4d      	ldr	r3, [pc, #308]	; (80530 <Menu+0x194>)
   803fc:	9300      	str	r3, [sp, #0]
   803fe:	2350      	movs	r3, #80	; 0x50
   80400:	f44f 7200 	mov.w	r2, #512	; 0x200
   80404:	210a      	movs	r1, #10
   80406:	4620      	mov	r0, r4
   80408:	47b0      	blx	r6
			pio_enable_interrupt(PIOA, PIN_BUTTON_SELECT);
   8040a:	f44f 7100 	mov.w	r1, #512	; 0x200
   8040e:	4620      	mov	r0, r4
   80410:	47a8      	blx	r5
			pio_set_input(PIOA, PIN_BUTTON_BACK, PIO_PULLUP); //A1 (Bouton Droite)
   80412:	2201      	movs	r2, #1
   80414:	f44f 7180 	mov.w	r1, #256	; 0x100
   80418:	4620      	mov	r0, r4
   8041a:	47b8      	blx	r7
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_BACK, PIO_IT_FALL_EDGE, ButtonBack_ISR_Handler);
   8041c:	4b45      	ldr	r3, [pc, #276]	; (80534 <Menu+0x198>)
   8041e:	9300      	str	r3, [sp, #0]
   80420:	2350      	movs	r3, #80	; 0x50
   80422:	f44f 7280 	mov.w	r2, #256	; 0x100
   80426:	210a      	movs	r1, #10
   80428:	4620      	mov	r0, r4
   8042a:	47b0      	blx	r6
			pio_enable_interrupt(PIOA, PIN_BUTTON_BACK);
   8042c:	f44f 7180 	mov.w	r1, #256	; 0x100
   80430:	4620      	mov	r0, r4
   80432:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80434:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80438:	4b3f      	ldr	r3, [pc, #252]	; (80538 <Menu+0x19c>)
   8043a:	601a      	str	r2, [r3, #0]
			sprintf(buf, "MENU NEW FINISHED \r\n");
   8043c:	4d3f      	ldr	r5, [pc, #252]	; (8053c <Menu+0x1a0>)
   8043e:	4c40      	ldr	r4, [pc, #256]	; (80540 <Menu+0x1a4>)
   80440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   80442:	6028      	str	r0, [r5, #0]
   80444:	6069      	str	r1, [r5, #4]
   80446:	60aa      	str	r2, [r5, #8]
   80448:	60eb      	str	r3, [r5, #12]
   8044a:	6820      	ldr	r0, [r4, #0]
   8044c:	6128      	str	r0, [r5, #16]
   8044e:	7923      	ldrb	r3, [r4, #4]
   80450:	752b      	strb	r3, [r5, #20]
			Putstr(buf);
   80452:	4629      	mov	r1, r5
   80454:	2067      	movs	r0, #103	; 0x67
   80456:	47c0      	blx	r8
			menu.iIndexMenu = 0;
   80458:	4b3a      	ldr	r3, [pc, #232]	; (80544 <Menu+0x1a8>)
   8045a:	2200      	movs	r2, #0
   8045c:	601a      	str	r2, [r3, #0]
			menu.pCurrentMenu = _mainMenu;
   8045e:	4a3a      	ldr	r2, [pc, #232]	; (80548 <Menu+0x1ac>)
   80460:	605a      	str	r2, [r3, #4]
}
   80462:	2000      	movs	r0, #0
   80464:	b002      	add	sp, #8
   80466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8046a:	b004      	add	sp, #16
   8046c:	4770      	bx	lr
			menu.iIndexMenu++;
   8046e:	4a35      	ldr	r2, [pc, #212]	; (80544 <Menu+0x1a8>)
   80470:	6813      	ldr	r3, [r2, #0]
   80472:	3301      	adds	r3, #1
   80474:	6013      	str	r3, [r2, #0]
			if(menu.pCurrentMenu[menu.iIndexMenu].pMenuLabel == NULL) menu.iIndexMenu = 0;
   80476:	6852      	ldr	r2, [r2, #4]
   80478:	011b      	lsls	r3, r3, #4
   8047a:	58d3      	ldr	r3, [r2, r3]
   8047c:	b11b      	cbz	r3, 80486 <Menu+0xea>
			Menu(MENU_PROMPT);
   8047e:	2069      	movs	r0, #105	; 0x69
   80480:	f7ff ff8c 	bl	8039c <Menu>
			break;
   80484:	e7ed      	b.n	80462 <Menu+0xc6>
			if(menu.pCurrentMenu[menu.iIndexMenu].pMenuLabel == NULL) menu.iIndexMenu = 0;
   80486:	2200      	movs	r2, #0
   80488:	4b2e      	ldr	r3, [pc, #184]	; (80544 <Menu+0x1a8>)
   8048a:	601a      	str	r2, [r3, #0]
   8048c:	e7f7      	b.n	8047e <Menu+0xe2>
			if(menu.pCurrentMenu[menu.iIndexMenu].pMenuFunc)
   8048e:	4a2d      	ldr	r2, [pc, #180]	; (80544 <Menu+0x1a8>)
   80490:	6811      	ldr	r1, [r2, #0]
   80492:	6853      	ldr	r3, [r2, #4]
   80494:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   80498:	68da      	ldr	r2, [r3, #12]
   8049a:	b112      	cbz	r2, 804a2 <Menu+0x106>
				menu.pCurrentMenu[menu.iIndexMenu].pMenuFunc(0);
   8049c:	2000      	movs	r0, #0
   8049e:	4790      	blx	r2
   804a0:	e7df      	b.n	80462 <Menu+0xc6>
			else if(menu.pCurrentMenu[menu.iIndexMenu].pSubMenu)
   804a2:	689b      	ldr	r3, [r3, #8]
   804a4:	2b00      	cmp	r3, #0
   804a6:	d0dc      	beq.n	80462 <Menu+0xc6>
				menu.pCurrentMenu = menu.pCurrentMenu[menu.iIndexMenu].pSubMenu;
   804a8:	4a26      	ldr	r2, [pc, #152]	; (80544 <Menu+0x1a8>)
   804aa:	6053      	str	r3, [r2, #4]
				menu.iIndexMenu = 0;
   804ac:	2300      	movs	r3, #0
   804ae:	6013      	str	r3, [r2, #0]
				Menu(MENU_PROMPT);
   804b0:	2069      	movs	r0, #105	; 0x69
   804b2:	f7ff ff73 	bl	8039c <Menu>
   804b6:	e7d4      	b.n	80462 <Menu+0xc6>
			if(menu.pCurrentMenu[menu.iIndexMenu].pParentMenu)
   804b8:	4a22      	ldr	r2, [pc, #136]	; (80544 <Menu+0x1a8>)
   804ba:	6811      	ldr	r1, [r2, #0]
   804bc:	6853      	ldr	r3, [r2, #4]
   804be:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   804c2:	685b      	ldr	r3, [r3, #4]
   804c4:	2b00      	cmp	r3, #0
   804c6:	d0cc      	beq.n	80462 <Menu+0xc6>
				menu.pCurrentMenu = menu.pCurrentMenu[menu.iIndexMenu].pParentMenu;
   804c8:	6053      	str	r3, [r2, #4]
				menu.iIndexMenu = 0;
   804ca:	2300      	movs	r3, #0
   804cc:	6013      	str	r3, [r2, #0]
				Menu(MENU_PROMPT);
   804ce:	2069      	movs	r0, #105	; 0x69
   804d0:	f7ff ff64 	bl	8039c <Menu>
   804d4:	e7c5      	b.n	80462 <Menu+0xc6>
			Putstr(menu.pCurrentMenu[menu.iIndexMenu].pMenuLabel);
   804d6:	4c1b      	ldr	r4, [pc, #108]	; (80544 <Menu+0x1a8>)
   804d8:	6823      	ldr	r3, [r4, #0]
   804da:	6862      	ldr	r2, [r4, #4]
   804dc:	011b      	lsls	r3, r3, #4
   804de:	58d1      	ldr	r1, [r2, r3]
   804e0:	2067      	movs	r0, #103	; 0x67
   804e2:	4b1a      	ldr	r3, [pc, #104]	; (8054c <Menu+0x1b0>)
   804e4:	4798      	blx	r3
			LcdPutstr(menu.pCurrentMenu[menu.iIndexMenu].pMenuLabel,2,LcdFindCenter(strlen(menu.pCurrentMenu[menu.iIndexMenu].pMenuLabel)));
   804e6:	6823      	ldr	r3, [r4, #0]
   804e8:	6862      	ldr	r2, [r4, #4]
   804ea:	011b      	lsls	r3, r3, #4
   804ec:	58d5      	ldr	r5, [r2, r3]
   804ee:	4628      	mov	r0, r5
   804f0:	4b17      	ldr	r3, [pc, #92]	; (80550 <Menu+0x1b4>)
   804f2:	4798      	blx	r3
   804f4:	4601      	mov	r1, r0
   804f6:	2069      	movs	r0, #105	; 0x69
   804f8:	4c16      	ldr	r4, [pc, #88]	; (80554 <Menu+0x1b8>)
   804fa:	47a0      	blx	r4
   804fc:	4603      	mov	r3, r0
   804fe:	2202      	movs	r2, #2
   80500:	4629      	mov	r1, r5
   80502:	2067      	movs	r0, #103	; 0x67
   80504:	47a0      	blx	r4
			setShellStatus(ST_MENU_MENU);
   80506:	2002      	movs	r0, #2
   80508:	4b13      	ldr	r3, [pc, #76]	; (80558 <Menu+0x1bc>)
   8050a:	4798      	blx	r3
			break;
   8050c:	e7a9      	b.n	80462 <Menu+0xc6>
			Error(ERROR_MENU_SWITCH_BAD_SC, sc);
   8050e:	2011      	movs	r0, #17
   80510:	4b12      	ldr	r3, [pc, #72]	; (8055c <Menu+0x1c0>)
   80512:	4798      	blx	r3
   80514:	e7a5      	b.n	80462 <Menu+0xc6>
   80516:	bf00      	nop
   80518:	0008881c 	.word	0x0008881c
   8051c:	400e0c00 	.word	0x400e0c00
   80520:	000807ab 	.word	0x000807ab
   80524:	00080561 	.word	0x00080561
   80528:	00080659 	.word	0x00080659
   8052c:	00080831 	.word	0x00080831
   80530:	00080599 	.word	0x00080599
   80534:	000805d1 	.word	0x000805d1
   80538:	e000e100 	.word	0xe000e100
   8053c:	200012a4 	.word	0x200012a4
   80540:	00088828 	.word	0x00088828
   80544:	200010b0 	.word	0x200010b0
   80548:	00088880 	.word	0x00088880
   8054c:	000832dd 	.word	0x000832dd
   80550:	00083ebd 	.word	0x00083ebd
   80554:	00081cd5 	.word	0x00081cd5
   80558:	00082e7d 	.word	0x00082e7d
   8055c:	000817b5 	.word	0x000817b5

00080560 <ButtonSwitch_ISR_Handler>:
{
   80560:	b510      	push	{r4, lr}
   80562:	b082      	sub	sp, #8
	PushTask(Menu, MENU_SWITCH_BUTTON,0,0);
   80564:	2300      	movs	r3, #0
   80566:	9300      	str	r3, [sp, #0]
   80568:	2265      	movs	r2, #101	; 0x65
   8056a:	4907      	ldr	r1, [pc, #28]	; (80588 <ButtonSwitch_ISR_Handler+0x28>)
   8056c:	2066      	movs	r0, #102	; 0x66
   8056e:	4c07      	ldr	r4, [pc, #28]	; (8058c <ButtonSwitch_ISR_Handler+0x2c>)
   80570:	47a0      	blx	r4
	if(getShellStatus() == ST_MENU_IDLE) setShellStatus(ST_MENU_MENU);
   80572:	4b07      	ldr	r3, [pc, #28]	; (80590 <ButtonSwitch_ISR_Handler+0x30>)
   80574:	4798      	blx	r3
   80576:	2801      	cmp	r0, #1
   80578:	d001      	beq.n	8057e <ButtonSwitch_ISR_Handler+0x1e>
}
   8057a:	b002      	add	sp, #8
   8057c:	bd10      	pop	{r4, pc}
	if(getShellStatus() == ST_MENU_IDLE) setShellStatus(ST_MENU_MENU);
   8057e:	2002      	movs	r0, #2
   80580:	4b04      	ldr	r3, [pc, #16]	; (80594 <ButtonSwitch_ISR_Handler+0x34>)
   80582:	4798      	blx	r3
}
   80584:	e7f9      	b.n	8057a <ButtonSwitch_ISR_Handler+0x1a>
   80586:	bf00      	nop
   80588:	0008039d 	.word	0x0008039d
   8058c:	00083519 	.word	0x00083519
   80590:	00082e71 	.word	0x00082e71
   80594:	00082e7d 	.word	0x00082e7d

00080598 <ButtonSelect_ISR_Handler>:
{
   80598:	b510      	push	{r4, lr}
   8059a:	b082      	sub	sp, #8
	PushTask(Menu, MENU_SELECT_BUTTON,0,0);
   8059c:	2300      	movs	r3, #0
   8059e:	9300      	str	r3, [sp, #0]
   805a0:	2266      	movs	r2, #102	; 0x66
   805a2:	4907      	ldr	r1, [pc, #28]	; (805c0 <ButtonSelect_ISR_Handler+0x28>)
   805a4:	4610      	mov	r0, r2
   805a6:	4c07      	ldr	r4, [pc, #28]	; (805c4 <ButtonSelect_ISR_Handler+0x2c>)
   805a8:	47a0      	blx	r4
	if(getShellStatus() == ST_MENU_IDLE) setShellStatus(ST_MENU_MENU);
   805aa:	4b07      	ldr	r3, [pc, #28]	; (805c8 <ButtonSelect_ISR_Handler+0x30>)
   805ac:	4798      	blx	r3
   805ae:	2801      	cmp	r0, #1
   805b0:	d001      	beq.n	805b6 <ButtonSelect_ISR_Handler+0x1e>
}
   805b2:	b002      	add	sp, #8
   805b4:	bd10      	pop	{r4, pc}
	if(getShellStatus() == ST_MENU_IDLE) setShellStatus(ST_MENU_MENU);
   805b6:	2002      	movs	r0, #2
   805b8:	4b04      	ldr	r3, [pc, #16]	; (805cc <ButtonSelect_ISR_Handler+0x34>)
   805ba:	4798      	blx	r3
}
   805bc:	e7f9      	b.n	805b2 <ButtonSelect_ISR_Handler+0x1a>
   805be:	bf00      	nop
   805c0:	0008039d 	.word	0x0008039d
   805c4:	00083519 	.word	0x00083519
   805c8:	00082e71 	.word	0x00082e71
   805cc:	00082e7d 	.word	0x00082e7d

000805d0 <ButtonBack_ISR_Handler>:
{
   805d0:	b510      	push	{r4, lr}
   805d2:	b082      	sub	sp, #8
	PushTask(Menu, MENU_BACK_BUTTON,0,0);
   805d4:	2300      	movs	r3, #0
   805d6:	9300      	str	r3, [sp, #0]
   805d8:	2267      	movs	r2, #103	; 0x67
   805da:	4907      	ldr	r1, [pc, #28]	; (805f8 <ButtonBack_ISR_Handler+0x28>)
   805dc:	2066      	movs	r0, #102	; 0x66
   805de:	4c07      	ldr	r4, [pc, #28]	; (805fc <ButtonBack_ISR_Handler+0x2c>)
   805e0:	47a0      	blx	r4
	if(getShellStatus() == ST_MENU_IDLE) setShellStatus(ST_MENU_MENU);
   805e2:	4b07      	ldr	r3, [pc, #28]	; (80600 <ButtonBack_ISR_Handler+0x30>)
   805e4:	4798      	blx	r3
   805e6:	2801      	cmp	r0, #1
   805e8:	d001      	beq.n	805ee <ButtonBack_ISR_Handler+0x1e>
}
   805ea:	b002      	add	sp, #8
   805ec:	bd10      	pop	{r4, pc}
	if(getShellStatus() == ST_MENU_IDLE) setShellStatus(ST_MENU_MENU);
   805ee:	2002      	movs	r0, #2
   805f0:	4b04      	ldr	r3, [pc, #16]	; (80604 <ButtonBack_ISR_Handler+0x34>)
   805f2:	4798      	blx	r3
}
   805f4:	e7f9      	b.n	805ea <ButtonBack_ISR_Handler+0x1a>
   805f6:	bf00      	nop
   805f8:	0008039d 	.word	0x0008039d
   805fc:	00083519 	.word	0x00083519
   80600:	00082e71 	.word	0x00082e71
   80604:	00082e7d 	.word	0x00082e7d

00080608 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8060c:	4604      	mov	r4, r0
   8060e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80610:	4b0e      	ldr	r3, [pc, #56]	; (8064c <pio_handler_process+0x44>)
   80612:	4798      	blx	r3
   80614:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80616:	4620      	mov	r0, r4
   80618:	4b0d      	ldr	r3, [pc, #52]	; (80650 <pio_handler_process+0x48>)
   8061a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8061c:	4005      	ands	r5, r0
   8061e:	d013      	beq.n	80648 <pio_handler_process+0x40>
   80620:	4c0c      	ldr	r4, [pc, #48]	; (80654 <pio_handler_process+0x4c>)
   80622:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80626:	e003      	b.n	80630 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80628:	42b4      	cmp	r4, r6
   8062a:	d00d      	beq.n	80648 <pio_handler_process+0x40>
   8062c:	3410      	adds	r4, #16
		while (status != 0) {
   8062e:	b15d      	cbz	r5, 80648 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80630:	6820      	ldr	r0, [r4, #0]
   80632:	4540      	cmp	r0, r8
   80634:	d1f8      	bne.n	80628 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80636:	6861      	ldr	r1, [r4, #4]
   80638:	4229      	tst	r1, r5
   8063a:	d0f5      	beq.n	80628 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8063c:	68e3      	ldr	r3, [r4, #12]
   8063e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80640:	6863      	ldr	r3, [r4, #4]
   80642:	ea25 0503 	bic.w	r5, r5, r3
   80646:	e7ef      	b.n	80628 <pio_handler_process+0x20>
   80648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8064c:	00080835 	.word	0x00080835
   80650:	00080839 	.word	0x00080839
   80654:	20000ff0 	.word	0x20000ff0

00080658 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8065a:	4c18      	ldr	r4, [pc, #96]	; (806bc <pio_handler_set+0x64>)
   8065c:	6826      	ldr	r6, [r4, #0]
   8065e:	2e06      	cmp	r6, #6
   80660:	d829      	bhi.n	806b6 <pio_handler_set+0x5e>
   80662:	f04f 0c00 	mov.w	ip, #0
   80666:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80668:	4f15      	ldr	r7, [pc, #84]	; (806c0 <pio_handler_set+0x68>)
   8066a:	e004      	b.n	80676 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   8066c:	3401      	adds	r4, #1
   8066e:	b2e4      	uxtb	r4, r4
   80670:	46a4      	mov	ip, r4
   80672:	42a6      	cmp	r6, r4
   80674:	d309      	bcc.n	8068a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   80676:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80678:	0125      	lsls	r5, r4, #4
   8067a:	597d      	ldr	r5, [r7, r5]
   8067c:	428d      	cmp	r5, r1
   8067e:	d1f5      	bne.n	8066c <pio_handler_set+0x14>
   80680:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   80684:	686d      	ldr	r5, [r5, #4]
   80686:	4295      	cmp	r5, r2
   80688:	d1f0      	bne.n	8066c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   8068a:	4d0d      	ldr	r5, [pc, #52]	; (806c0 <pio_handler_set+0x68>)
   8068c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   80690:	eb05 040e 	add.w	r4, r5, lr
   80694:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   80698:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   8069a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   8069c:	9906      	ldr	r1, [sp, #24]
   8069e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   806a0:	3601      	adds	r6, #1
   806a2:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   806a4:	bf04      	itt	eq
   806a6:	4905      	ldreq	r1, [pc, #20]	; (806bc <pio_handler_set+0x64>)
   806a8:	600e      	streq	r6, [r1, #0]
   806aa:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   806ac:	461a      	mov	r2, r3
   806ae:	4b05      	ldr	r3, [pc, #20]	; (806c4 <pio_handler_set+0x6c>)
   806b0:	4798      	blx	r3

	return 0;
   806b2:	2000      	movs	r0, #0
   806b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   806b6:	2001      	movs	r0, #1
}
   806b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806ba:	bf00      	nop
   806bc:	20001060 	.word	0x20001060
   806c0:	20000ff0 	.word	0x20000ff0
   806c4:	00080803 	.word	0x00080803

000806c8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   806c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   806ca:	210a      	movs	r1, #10
   806cc:	4801      	ldr	r0, [pc, #4]	; (806d4 <PIOA_Handler+0xc>)
   806ce:	4b02      	ldr	r3, [pc, #8]	; (806d8 <PIOA_Handler+0x10>)
   806d0:	4798      	blx	r3
   806d2:	bd08      	pop	{r3, pc}
   806d4:	400e0c00 	.word	0x400e0c00
   806d8:	00080609 	.word	0x00080609

000806dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   806dc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   806de:	210b      	movs	r1, #11
   806e0:	4801      	ldr	r0, [pc, #4]	; (806e8 <PIOB_Handler+0xc>)
   806e2:	4b02      	ldr	r3, [pc, #8]	; (806ec <PIOB_Handler+0x10>)
   806e4:	4798      	blx	r3
   806e6:	bd08      	pop	{r3, pc}
   806e8:	400e0e00 	.word	0x400e0e00
   806ec:	00080609 	.word	0x00080609

000806f0 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   806f0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   806f2:	4812      	ldr	r0, [pc, #72]	; (8073c <sysclk_init+0x4c>)
   806f4:	4b12      	ldr	r3, [pc, #72]	; (80740 <sysclk_init+0x50>)
   806f6:	4798      	blx	r3
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   806f8:	203e      	movs	r0, #62	; 0x3e
   806fa:	4b12      	ldr	r3, [pc, #72]	; (80744 <sysclk_init+0x54>)
   806fc:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   806fe:	4c12      	ldr	r4, [pc, #72]	; (80748 <sysclk_init+0x58>)
   80700:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80702:	2800      	cmp	r0, #0
   80704:	d0fc      	beq.n	80700 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   80706:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8070a:	4b10      	ldr	r3, [pc, #64]	; (8074c <sysclk_init+0x5c>)
   8070c:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8070e:	4c10      	ldr	r4, [pc, #64]	; (80750 <sysclk_init+0x60>)
   80710:	47a0      	blx	r4
   80712:	2800      	cmp	r0, #0
   80714:	d0fc      	beq.n	80710 <sysclk_init+0x20>
		uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80716:	4b0f      	ldr	r3, [pc, #60]	; (80754 <sysclk_init+0x64>)
   80718:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8071a:	4a0f      	ldr	r2, [pc, #60]	; (80758 <sysclk_init+0x68>)
   8071c:	4b0f      	ldr	r3, [pc, #60]	; (8075c <sysclk_init+0x6c>)
   8071e:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80720:	4c0f      	ldr	r4, [pc, #60]	; (80760 <sysclk_init+0x70>)
   80722:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80724:	2800      	cmp	r0, #0
   80726:	d0fc      	beq.n	80722 <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80728:	2010      	movs	r0, #16
   8072a:	4b0e      	ldr	r3, [pc, #56]	; (80764 <sysclk_init+0x74>)
   8072c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8072e:	4b0e      	ldr	r3, [pc, #56]	; (80768 <sysclk_init+0x78>)
   80730:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80732:	4802      	ldr	r0, [pc, #8]	; (8073c <sysclk_init+0x4c>)
   80734:	4b02      	ldr	r3, [pc, #8]	; (80740 <sysclk_init+0x50>)
   80736:	4798      	blx	r3
   80738:	bd10      	pop	{r4, pc}
   8073a:	bf00      	nop
   8073c:	05b8d800 	.word	0x05b8d800
   80740:	200000b5 	.word	0x200000b5
   80744:	00080a25 	.word	0x00080a25
   80748:	00080a4d 	.word	0x00080a4d
   8074c:	00080a6d 	.word	0x00080a6d
   80750:	00080a5d 	.word	0x00080a5d
   80754:	00080a8d 	.word	0x00080a8d
   80758:	200f3f01 	.word	0x200f3f01
   8075c:	400e0400 	.word	0x400e0400
   80760:	00080a9d 	.word	0x00080a9d
   80764:	0008097d 	.word	0x0008097d
   80768:	00081051 	.word	0x00081051

0008076c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8076c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8076e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80772:	d016      	beq.n	807a2 <pio_set_peripheral+0x36>
   80774:	d80b      	bhi.n	8078e <pio_set_peripheral+0x22>
   80776:	b149      	cbz	r1, 8078c <pio_set_peripheral+0x20>
   80778:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8077c:	d105      	bne.n	8078a <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8077e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80780:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80782:	400b      	ands	r3, r1
   80784:	ea23 0302 	bic.w	r3, r3, r2
   80788:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8078a:	6042      	str	r2, [r0, #4]
   8078c:	4770      	bx	lr
	switch (ul_type) {
   8078e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80792:	d0fb      	beq.n	8078c <pio_set_peripheral+0x20>
   80794:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80798:	d0f8      	beq.n	8078c <pio_set_peripheral+0x20>
   8079a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8079e:	d1f4      	bne.n	8078a <pio_set_peripheral+0x1e>
   807a0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   807a2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   807a4:	4313      	orrs	r3, r2
   807a6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   807a8:	e7ef      	b.n	8078a <pio_set_peripheral+0x1e>

000807aa <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   807aa:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   807ac:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   807b0:	bf14      	ite	ne
   807b2:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   807b4:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   807b6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   807ba:	bf14      	ite	ne
   807bc:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   807be:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   807c0:	f012 0f02 	tst.w	r2, #2
   807c4:	d107      	bne.n	807d6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   807c6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   807ca:	bf18      	it	ne
   807cc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   807d0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   807d2:	6001      	str	r1, [r0, #0]
   807d4:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   807d6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   807da:	e7f9      	b.n	807d0 <pio_set_input+0x26>

000807dc <pio_set_output>:
{
   807dc:	b410      	push	{r4}
   807de:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   807e0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   807e2:	b944      	cbnz	r4, 807f6 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   807e4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   807e6:	b143      	cbz	r3, 807fa <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   807e8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   807ea:	b942      	cbnz	r2, 807fe <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   807ec:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   807ee:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   807f0:	6001      	str	r1, [r0, #0]
}
   807f2:	bc10      	pop	{r4}
   807f4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   807f6:	6641      	str	r1, [r0, #100]	; 0x64
   807f8:	e7f5      	b.n	807e6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   807fa:	6541      	str	r1, [r0, #84]	; 0x54
   807fc:	e7f5      	b.n	807ea <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   807fe:	6301      	str	r1, [r0, #48]	; 0x30
   80800:	e7f5      	b.n	807ee <pio_set_output+0x12>

00080802 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   80802:	f012 0f10 	tst.w	r2, #16
   80806:	d010      	beq.n	8082a <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   80808:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8080c:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   80810:	bf14      	ite	ne
   80812:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   80816:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   8081a:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   8081e:	bf14      	ite	ne
   80820:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   80824:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80828:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   8082a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   8082e:	4770      	bx	lr

00080830 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   80830:	6401      	str	r1, [r0, #64]	; 0x40
   80832:	4770      	bx	lr

00080834 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80834:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80836:	4770      	bx	lr

00080838 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80838:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8083a:	4770      	bx	lr

0008083c <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8083c:	0943      	lsrs	r3, r0, #5
   8083e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80842:	f203 7306 	addw	r3, r3, #1798	; 0x706
   80846:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   80848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8084a:	f000 001f 	and.w	r0, r0, #31
   8084e:	fa23 f000 	lsr.w	r0, r3, r0
}
   80852:	f000 0001 	and.w	r0, r0, #1
   80856:	4770      	bx	lr

00080858 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80858:	0943      	lsrs	r3, r0, #5
   8085a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8085e:	f203 7306 	addw	r3, r3, #1798	; 0x706
   80862:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80864:	f000 001f 	and.w	r0, r0, #31
   80868:	2201      	movs	r2, #1
   8086a:	fa02 f000 	lsl.w	r0, r2, r0
   8086e:	6318      	str	r0, [r3, #48]	; 0x30
   80870:	4770      	bx	lr

00080872 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80872:	0943      	lsrs	r3, r0, #5
   80874:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80878:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8087c:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8087e:	f000 001f 	and.w	r0, r0, #31
   80882:	2201      	movs	r2, #1
   80884:	fa02 f000 	lsl.w	r0, r2, r0
   80888:	6358      	str	r0, [r3, #52]	; 0x34
   8088a:	4770      	bx	lr

0008088c <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8088c:	0943      	lsrs	r3, r0, #5
   8088e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80892:	f203 7306 	addw	r3, r3, #1798	; 0x706
   80896:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   80898:	6b99      	ldr	r1, [r3, #56]	; 0x38
   8089a:	f000 021f 	and.w	r2, r0, #31
   8089e:	2001      	movs	r0, #1
   808a0:	4090      	lsls	r0, r2
   808a2:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   808a4:	bf14      	ite	ne
   808a6:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   808a8:	6318      	streq	r0, [r3, #48]	; 0x30
   808aa:	4770      	bx	lr

000808ac <pio_configure_pin>:
{
   808ac:	b570      	push	{r4, r5, r6, lr}
   808ae:	b082      	sub	sp, #8
   808b0:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   808b2:	0943      	lsrs	r3, r0, #5
   808b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   808b8:	f203 7306 	addw	r3, r3, #1798	; 0x706
   808bc:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   808be:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   808c2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   808c6:	d031      	beq.n	8092c <pio_configure_pin+0x80>
   808c8:	d816      	bhi.n	808f8 <pio_configure_pin+0x4c>
   808ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   808ce:	d01b      	beq.n	80908 <pio_configure_pin+0x5c>
   808d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   808d4:	d116      	bne.n	80904 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   808d6:	f000 001f 	and.w	r0, r0, #31
   808da:	2601      	movs	r6, #1
   808dc:	4086      	lsls	r6, r0
   808de:	4632      	mov	r2, r6
   808e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   808e4:	4620      	mov	r0, r4
   808e6:	4b22      	ldr	r3, [pc, #136]	; (80970 <pio_configure_pin+0xc4>)
   808e8:	4798      	blx	r3
	if (ul_pull_up_enable) {
   808ea:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   808ee:	bf14      	ite	ne
   808f0:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   808f2:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   808f4:	2001      	movs	r0, #1
   808f6:	e017      	b.n	80928 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   808f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   808fc:	d021      	beq.n	80942 <pio_configure_pin+0x96>
   808fe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80902:	d01e      	beq.n	80942 <pio_configure_pin+0x96>
		return 0;
   80904:	2000      	movs	r0, #0
   80906:	e00f      	b.n	80928 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80908:	f000 001f 	and.w	r0, r0, #31
   8090c:	2601      	movs	r6, #1
   8090e:	4086      	lsls	r6, r0
   80910:	4632      	mov	r2, r6
   80912:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80916:	4620      	mov	r0, r4
   80918:	4b15      	ldr	r3, [pc, #84]	; (80970 <pio_configure_pin+0xc4>)
   8091a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8091c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80920:	bf14      	ite	ne
   80922:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80924:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80926:	2001      	movs	r0, #1
}
   80928:	b002      	add	sp, #8
   8092a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8092c:	f000 011f 	and.w	r1, r0, #31
   80930:	2601      	movs	r6, #1
   80932:	462a      	mov	r2, r5
   80934:	fa06 f101 	lsl.w	r1, r6, r1
   80938:	4620      	mov	r0, r4
   8093a:	4b0e      	ldr	r3, [pc, #56]	; (80974 <pio_configure_pin+0xc8>)
   8093c:	4798      	blx	r3
	return 1;
   8093e:	4630      	mov	r0, r6
		break;
   80940:	e7f2      	b.n	80928 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80942:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80946:	f000 011f 	and.w	r1, r0, #31
   8094a:	2601      	movs	r6, #1
   8094c:	ea05 0306 	and.w	r3, r5, r6
   80950:	9300      	str	r3, [sp, #0]
   80952:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80956:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8095a:	bf14      	ite	ne
   8095c:	2200      	movne	r2, #0
   8095e:	2201      	moveq	r2, #1
   80960:	fa06 f101 	lsl.w	r1, r6, r1
   80964:	4620      	mov	r0, r4
   80966:	4c04      	ldr	r4, [pc, #16]	; (80978 <pio_configure_pin+0xcc>)
   80968:	47a0      	blx	r4
	return 1;
   8096a:	4630      	mov	r0, r6
		break;
   8096c:	e7dc      	b.n	80928 <pio_configure_pin+0x7c>
   8096e:	bf00      	nop
   80970:	0008076d 	.word	0x0008076d
   80974:	000807ab 	.word	0x000807ab
   80978:	000807dd 	.word	0x000807dd

0008097c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8097c:	4a17      	ldr	r2, [pc, #92]	; (809dc <pmc_switch_mck_to_pllack+0x60>)
   8097e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80984:	4318      	orrs	r0, r3
   80986:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80988:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8098a:	f013 0f08 	tst.w	r3, #8
   8098e:	d10a      	bne.n	809a6 <pmc_switch_mck_to_pllack+0x2a>
   80990:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80994:	4911      	ldr	r1, [pc, #68]	; (809dc <pmc_switch_mck_to_pllack+0x60>)
   80996:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80998:	f012 0f08 	tst.w	r2, #8
   8099c:	d103      	bne.n	809a6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8099e:	3b01      	subs	r3, #1
   809a0:	d1f9      	bne.n	80996 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   809a2:	2001      	movs	r0, #1
   809a4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   809a6:	4a0d      	ldr	r2, [pc, #52]	; (809dc <pmc_switch_mck_to_pllack+0x60>)
   809a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   809aa:	f023 0303 	bic.w	r3, r3, #3
   809ae:	f043 0302 	orr.w	r3, r3, #2
   809b2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   809b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   809b6:	f013 0f08 	tst.w	r3, #8
   809ba:	d10a      	bne.n	809d2 <pmc_switch_mck_to_pllack+0x56>
   809bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   809c0:	4906      	ldr	r1, [pc, #24]	; (809dc <pmc_switch_mck_to_pllack+0x60>)
   809c2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   809c4:	f012 0f08 	tst.w	r2, #8
   809c8:	d105      	bne.n	809d6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   809ca:	3b01      	subs	r3, #1
   809cc:	d1f9      	bne.n	809c2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   809ce:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   809d0:	4770      	bx	lr
	return 0;
   809d2:	2000      	movs	r0, #0
   809d4:	4770      	bx	lr
   809d6:	2000      	movs	r0, #0
   809d8:	4770      	bx	lr
   809da:	bf00      	nop
   809dc:	400e0400 	.word	0x400e0400

000809e0 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   809e0:	2801      	cmp	r0, #1
   809e2:	d003      	beq.n	809ec <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   809e4:	4a05      	ldr	r2, [pc, #20]	; (809fc <pmc_switch_sclk_to_32kxtal+0x1c>)
   809e6:	4b06      	ldr	r3, [pc, #24]	; (80a00 <pmc_switch_sclk_to_32kxtal+0x20>)
   809e8:	601a      	str	r2, [r3, #0]
   809ea:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   809ec:	4a04      	ldr	r2, [pc, #16]	; (80a00 <pmc_switch_sclk_to_32kxtal+0x20>)
   809ee:	6893      	ldr	r3, [r2, #8]
   809f0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   809f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   809f8:	6093      	str	r3, [r2, #8]
   809fa:	e7f3      	b.n	809e4 <pmc_switch_sclk_to_32kxtal+0x4>
   809fc:	a5000008 	.word	0xa5000008
   80a00:	400e1210 	.word	0x400e1210

00080a04 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   80a04:	4b05      	ldr	r3, [pc, #20]	; (80a1c <pmc_osc_is_ready_32kxtal+0x18>)
   80a06:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   80a08:	f013 0f80 	tst.w	r3, #128	; 0x80
   80a0c:	bf1d      	ittte	ne
   80a0e:	4b04      	ldrne	r3, [pc, #16]	; (80a20 <pmc_osc_is_ready_32kxtal+0x1c>)
   80a10:	6e98      	ldrne	r0, [r3, #104]	; 0x68
   80a12:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
   80a16:	2000      	moveq	r0, #0
}
   80a18:	4770      	bx	lr
   80a1a:	bf00      	nop
   80a1c:	400e1210 	.word	0x400e1210
   80a20:	400e0400 	.word	0x400e0400

00080a24 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   80a24:	4a08      	ldr	r2, [pc, #32]	; (80a48 <pmc_osc_enable_main_xtal+0x24>)
   80a26:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   80a28:	f023 0303 	bic.w	r3, r3, #3
   80a2c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80a30:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80a34:	0200      	lsls	r0, r0, #8
   80a36:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80a38:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   80a3a:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80a3c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80a3e:	f013 0f01 	tst.w	r3, #1
   80a42:	d0fb      	beq.n	80a3c <pmc_osc_enable_main_xtal+0x18>
}
   80a44:	4770      	bx	lr
   80a46:	bf00      	nop
   80a48:	400e0400 	.word	0x400e0400

00080a4c <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   80a4c:	4b02      	ldr	r3, [pc, #8]	; (80a58 <pmc_osc_is_ready_main_xtal+0xc>)
   80a4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80a50:	f000 0001 	and.w	r0, r0, #1
   80a54:	4770      	bx	lr
   80a56:	bf00      	nop
   80a58:	400e0400 	.word	0x400e0400

00080a5c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80a5c:	4b02      	ldr	r3, [pc, #8]	; (80a68 <pmc_osc_is_ready_mainck+0xc>)
   80a5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80a60:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80a64:	4770      	bx	lr
   80a66:	bf00      	nop
   80a68:	400e0400 	.word	0x400e0400

00080a6c <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   80a6c:	4b06      	ldr	r3, [pc, #24]	; (80a88 <pmc_mainck_osc_select+0x1c>)
   80a6e:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   80a70:	b930      	cbnz	r0, 80a80 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   80a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   80a76:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80a7a:	4a03      	ldr	r2, [pc, #12]	; (80a88 <pmc_mainck_osc_select+0x1c>)
   80a7c:	6213      	str	r3, [r2, #32]
   80a7e:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   80a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   80a84:	e7f7      	b.n	80a76 <pmc_mainck_osc_select+0xa>
   80a86:	bf00      	nop
   80a88:	400e0400 	.word	0x400e0400

00080a8c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80a8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80a90:	4b01      	ldr	r3, [pc, #4]	; (80a98 <pmc_disable_pllack+0xc>)
   80a92:	629a      	str	r2, [r3, #40]	; 0x28
   80a94:	4770      	bx	lr
   80a96:	bf00      	nop
   80a98:	400e0400 	.word	0x400e0400

00080a9c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80a9c:	4b02      	ldr	r3, [pc, #8]	; (80aa8 <pmc_is_locked_pllack+0xc>)
   80a9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80aa0:	f000 0002 	and.w	r0, r0, #2
   80aa4:	4770      	bx	lr
   80aa6:	bf00      	nop
   80aa8:	400e0400 	.word	0x400e0400

00080aac <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80aac:	281d      	cmp	r0, #29
   80aae:	d80e      	bhi.n	80ace <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   80ab0:	281f      	cmp	r0, #31
   80ab2:	d80e      	bhi.n	80ad2 <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80ab4:	4b09      	ldr	r3, [pc, #36]	; (80adc <pmc_enable_periph_clk+0x30>)
   80ab6:	699a      	ldr	r2, [r3, #24]
   80ab8:	2301      	movs	r3, #1
   80aba:	4083      	lsls	r3, r0
   80abc:	4393      	bics	r3, r2
   80abe:	d00a      	beq.n	80ad6 <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80ac0:	2301      	movs	r3, #1
   80ac2:	fa03 f000 	lsl.w	r0, r3, r0
   80ac6:	4b05      	ldr	r3, [pc, #20]	; (80adc <pmc_enable_periph_clk+0x30>)
   80ac8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80aca:	2000      	movs	r0, #0
   80acc:	4770      	bx	lr
		return 1;
   80ace:	2001      	movs	r0, #1
   80ad0:	4770      	bx	lr
	return 0;
   80ad2:	2000      	movs	r0, #0
   80ad4:	4770      	bx	lr
   80ad6:	2000      	movs	r0, #0
}
   80ad8:	4770      	bx	lr
   80ada:	bf00      	nop
   80adc:	400e0400 	.word	0x400e0400

00080ae0 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   80ae0:	4770      	bx	lr
	...

00080ae4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   80ae4:	4b0b      	ldr	r3, [pc, #44]	; (80b14 <cpu_irq_enter_critical+0x30>)
   80ae6:	681b      	ldr	r3, [r3, #0]
   80ae8:	b92b      	cbnz	r3, 80af6 <cpu_irq_enter_critical+0x12>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80aea:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   80aee:	b13b      	cbz	r3, 80b00 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   80af0:	2200      	movs	r2, #0
   80af2:	4b09      	ldr	r3, [pc, #36]	; (80b18 <cpu_irq_enter_critical+0x34>)
   80af4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   80af6:	4a07      	ldr	r2, [pc, #28]	; (80b14 <cpu_irq_enter_critical+0x30>)
   80af8:	6813      	ldr	r3, [r2, #0]
   80afa:	3301      	adds	r3, #1
   80afc:	6013      	str	r3, [r2, #0]
   80afe:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   80b00:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80b02:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   80b06:	2200      	movs	r2, #0
   80b08:	4b04      	ldr	r3, [pc, #16]	; (80b1c <cpu_irq_enter_critical+0x38>)
   80b0a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   80b0c:	2201      	movs	r2, #1
   80b0e:	4b02      	ldr	r3, [pc, #8]	; (80b18 <cpu_irq_enter_critical+0x34>)
   80b10:	701a      	strb	r2, [r3, #0]
   80b12:	e7f0      	b.n	80af6 <cpu_irq_enter_critical+0x12>
   80b14:	20001064 	.word	0x20001064
   80b18:	20001068 	.word	0x20001068
   80b1c:	20000124 	.word	0x20000124

00080b20 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   80b20:	4b07      	ldr	r3, [pc, #28]	; (80b40 <cpu_irq_leave_critical+0x20>)
   80b22:	681a      	ldr	r2, [r3, #0]
   80b24:	3a01      	subs	r2, #1
   80b26:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   80b28:	681b      	ldr	r3, [r3, #0]
   80b2a:	b943      	cbnz	r3, 80b3e <cpu_irq_leave_critical+0x1e>
   80b2c:	4b05      	ldr	r3, [pc, #20]	; (80b44 <cpu_irq_leave_critical+0x24>)
   80b2e:	781b      	ldrb	r3, [r3, #0]
   80b30:	b12b      	cbz	r3, 80b3e <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   80b32:	2201      	movs	r2, #1
   80b34:	4b04      	ldr	r3, [pc, #16]	; (80b48 <cpu_irq_leave_critical+0x28>)
   80b36:	701a      	strb	r2, [r3, #0]
   80b38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80b3c:	b662      	cpsie	i
   80b3e:	4770      	bx	lr
   80b40:	20001064 	.word	0x20001064
   80b44:	20001068 	.word	0x20001068
   80b48:	20000124 	.word	0x20000124

00080b4c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80b4c:	b4f0      	push	{r4, r5, r6, r7}
   80b4e:	b08c      	sub	sp, #48	; 0x30
   80b50:	4607      	mov	r7, r0
   80b52:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80b54:	ac01      	add	r4, sp, #4
   80b56:	4d11      	ldr	r5, [pc, #68]	; (80b9c <pwm_clocks_generate+0x50>)
   80b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80b60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80b64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   80b68:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80b6a:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80b6c:	f852 0b04 	ldr.w	r0, [r2], #4
   80b70:	fbb6 f0f0 	udiv	r0, r6, r0
   80b74:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80b78:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   80b7c:	d907      	bls.n	80b8e <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
   80b7e:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80b80:	2b0b      	cmp	r3, #11
   80b82:	d1f3      	bne.n	80b6c <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   80b84:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   80b88:	b00c      	add	sp, #48	; 0x30
   80b8a:	bcf0      	pop	{r4, r5, r6, r7}
   80b8c:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80b8e:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
   80b90:	bf94      	ite	ls
   80b92:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
   80b96:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
   80b9a:	e7f5      	b.n	80b88 <pwm_clocks_generate+0x3c>
   80b9c:	00088a24 	.word	0x00088a24

00080ba0 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80ba0:	b570      	push	{r4, r5, r6, lr}
   80ba2:	4606      	mov	r6, r0
   80ba4:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80ba6:	680c      	ldr	r4, [r1, #0]
   80ba8:	b144      	cbz	r4, 80bbc <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80baa:	6889      	ldr	r1, [r1, #8]
   80bac:	4620      	mov	r0, r4
   80bae:	4b0c      	ldr	r3, [pc, #48]	; (80be0 <pwm_init+0x40>)
   80bb0:	4798      	blx	r3
   80bb2:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80bb8:	4298      	cmp	r0, r3
   80bba:	d00c      	beq.n	80bd6 <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80bbc:	6868      	ldr	r0, [r5, #4]
   80bbe:	b140      	cbz	r0, 80bd2 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80bc0:	68a9      	ldr	r1, [r5, #8]
   80bc2:	4b07      	ldr	r3, [pc, #28]	; (80be0 <pwm_init+0x40>)
   80bc4:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80bca:	4298      	cmp	r0, r3
   80bcc:	d005      	beq.n	80bda <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80bce:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80bd2:	6034      	str	r4, [r6, #0]
#endif
	return 0;
   80bd4:	2400      	movs	r4, #0
}
   80bd6:	4620      	mov	r0, r4
   80bd8:	bd70      	pop	{r4, r5, r6, pc}
			return result;
   80bda:	4604      	mov	r4, r0
   80bdc:	e7fb      	b.n	80bd6 <pwm_init+0x36>
   80bde:	bf00      	nop
   80be0:	00080b4d 	.word	0x00080b4d

00080be4 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80be4:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80be6:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80be8:	684b      	ldr	r3, [r1, #4]
   80bea:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   80bee:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80bf0:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
   80bf2:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80bf4:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
   80bf6:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80bf8:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80bfc:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80c02:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80c04:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80c08:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80c0a:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
   80c0e:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80c12:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80c16:	68cb      	ldr	r3, [r1, #12]
   80c18:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80c1c:	690b      	ldr	r3, [r1, #16]
   80c1e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80c22:	7d8b      	ldrb	r3, [r1, #22]
   80c24:	b13b      	cbz	r3, 80c36 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80c26:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80c28:	8b4b      	ldrh	r3, [r1, #26]
   80c2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80c2e:	eb00 1442 	add.w	r4, r0, r2, lsl #5
   80c32:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80c36:	6c85      	ldr	r5, [r0, #72]	; 0x48
   80c38:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   80c3c:	4093      	lsls	r3, r2
   80c3e:	43db      	mvns	r3, r3
   80c40:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80c42:	7fcc      	ldrb	r4, [r1, #31]
   80c44:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80c48:	7f8c      	ldrb	r4, [r1, #30]
   80c4a:	4094      	lsls	r4, r2
   80c4c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80c50:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80c52:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80c54:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80c56:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80c58:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
   80c5c:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80c60:	f891 4020 	ldrb.w	r4, [r1, #32]
   80c64:	4094      	lsls	r4, r2
   80c66:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80c6a:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80c6c:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80c6e:	2301      	movs	r3, #1
   80c70:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
   80c72:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80c76:	b31c      	cbz	r4, 80cc0 <pwm_channel_init+0xdc>
		p_pwm->PWM_SCM |= channel;
   80c78:	6a04      	ldr	r4, [r0, #32]
   80c7a:	431c      	orrs	r4, r3
   80c7c:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80c7e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80c82:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80c84:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80c86:	bf0c      	ite	eq
   80c88:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80c8a:	439c      	bicne	r4, r3
   80c8c:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80c8e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80c92:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80c94:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80c96:	bf0c      	ite	eq
   80c98:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80c9c:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
   80ca0:	6683      	str	r3, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
   80ca2:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
   80ca4:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
   80ca6:	23ff      	movs	r3, #255	; 0xff
   80ca8:	4093      	lsls	r3, r2
   80caa:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80cae:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   80cb2:	fa03 f202 	lsl.w	r2, r3, r2
   80cb6:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
   80cb8:	66c2      	str	r2, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   80cba:	2000      	movs	r0, #0
   80cbc:	bc70      	pop	{r4, r5, r6}
   80cbe:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80cc0:	6a04      	ldr	r4, [r0, #32]
   80cc2:	ea24 0403 	bic.w	r4, r4, r3
   80cc6:	6204      	str	r4, [r0, #32]
   80cc8:	e7d9      	b.n	80c7e <pwm_channel_init+0x9a>

00080cca <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80cca:	2301      	movs	r3, #1
   80ccc:	fa03 f101 	lsl.w	r1, r3, r1
   80cd0:	6041      	str	r1, [r0, #4]
   80cd2:	4770      	bx	lr

00080cd4 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80cd4:	2301      	movs	r3, #1
   80cd6:	fa03 f101 	lsl.w	r1, r3, r1
   80cda:	6081      	str	r1, [r0, #8]
   80cdc:	4770      	bx	lr
	...

00080ce0 <rstc_start_software_reset>:
		Rstc *p_rstc)
{
#if (SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST;
#else
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
   80ce0:	4b01      	ldr	r3, [pc, #4]	; (80ce8 <rstc_start_software_reset+0x8>)
   80ce2:	6003      	str	r3, [r0, #0]
   80ce4:	4770      	bx	lr
   80ce6:	bf00      	nop
   80ce8:	a5000005 	.word	0xa5000005

00080cec <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
   80cec:	6201      	str	r1, [r0, #32]
   80cee:	4770      	bx	lr

00080cf0 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
   80cf0:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
   80cf2:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   80cf4:	6884      	ldr	r4, [r0, #8]
   80cf6:	42a5      	cmp	r5, r4
   80cf8:	d003      	beq.n	80d02 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
   80cfa:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   80cfc:	6884      	ldr	r4, [r0, #8]
   80cfe:	42ac      	cmp	r4, r5
   80d00:	d1fb      	bne.n	80cfa <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
   80d02:	b161      	cbz	r1, 80d1e <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80d04:	f3c4 5001 	ubfx	r0, r4, #20, #2
   80d08:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   80d0c:	f3c4 4003 	ubfx	r0, r4, #16, #4
   80d10:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
   80d14:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
   80d18:	bf18      	it	ne
   80d1a:	300c      	addne	r0, #12
   80d1c:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
   80d1e:	b142      	cbz	r2, 80d32 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
   80d20:	f3c4 3102 	ubfx	r1, r4, #12, #3
   80d24:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80d28:	f3c4 2003 	ubfx	r0, r4, #8, #4
   80d2c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   80d30:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
   80d32:	b143      	cbz	r3, 80d46 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80d34:	f3c4 1202 	ubfx	r2, r4, #4, #3
   80d38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80d3c:	f004 040f 	and.w	r4, r4, #15
   80d40:	eb04 0442 	add.w	r4, r4, r2, lsl #1
   80d44:	601c      	str	r4, [r3, #0]
	}
}
   80d46:	bc30      	pop	{r4, r5}
   80d48:	4770      	bx	lr
	...

00080d4c <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
   80d4c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
   80d4e:	6844      	ldr	r4, [r0, #4]
   80d50:	f014 0f01 	tst.w	r4, #1
   80d54:	d005      	beq.n	80d62 <rtc_set_time+0x16>
		if (ul_hour > 12) {
   80d56:	290c      	cmp	r1, #12
   80d58:	d93d      	bls.n	80dd6 <rtc_set_time+0x8a>
			ul_hour -= 12;
   80d5a:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
   80d5c:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   80d60:	e000      	b.n	80d64 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
   80d62:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   80d64:	4c1d      	ldr	r4, [pc, #116]	; (80ddc <rtc_set_time+0x90>)
   80d66:	fba4 5603 	umull	r5, r6, r4, r3
   80d6a:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
   80d6c:	eb06 0586 	add.w	r5, r6, r6, lsl #2
   80d70:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
   80d74:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
   80d78:	fba4 6502 	umull	r6, r5, r4, r2
   80d7c:	08ed      	lsrs	r5, r5, #3
   80d7e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
   80d82:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   80d86:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
   80d8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   80d8e:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
   80d90:	fba4 4201 	umull	r4, r2, r4, r1
   80d94:	08d2      	lsrs	r2, r2, #3
   80d96:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
   80d9a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80d9e:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   80da2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   80da6:	6983      	ldr	r3, [r0, #24]
   80da8:	f013 0f04 	tst.w	r3, #4
   80dac:	d0fb      	beq.n	80da6 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
   80dae:	6803      	ldr	r3, [r0, #0]
   80db0:	f043 0301 	orr.w	r3, r3, #1
   80db4:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   80db6:	6983      	ldr	r3, [r0, #24]
   80db8:	f013 0f01 	tst.w	r3, #1
   80dbc:	d0fb      	beq.n	80db6 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   80dbe:	2301      	movs	r3, #1
   80dc0:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
   80dc2:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
   80dc4:	6803      	ldr	r3, [r0, #0]
   80dc6:	f023 0301 	bic.w	r3, r3, #1
   80dca:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
   80dcc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   80dce:	f000 0001 	and.w	r0, r0, #1
   80dd2:	bcf0      	pop	{r4, r5, r6, r7}
   80dd4:	4770      	bx	lr
	uint32_t ul_time = 0;
   80dd6:	2700      	movs	r7, #0
   80dd8:	e7c4      	b.n	80d64 <rtc_set_time+0x18>
   80dda:	bf00      	nop
   80ddc:	cccccccd 	.word	0xcccccccd

00080de0 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
   80de0:	b4f0      	push	{r4, r5, r6, r7}
   80de2:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
   80de4:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   80de6:	68c4      	ldr	r4, [r0, #12]
   80de8:	42a5      	cmp	r5, r4
   80dea:	d003      	beq.n	80df4 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
   80dec:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   80dee:	68c4      	ldr	r4, [r0, #12]
   80df0:	42ac      	cmp	r4, r5
   80df2:	d1fb      	bne.n	80dec <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
   80df4:	b199      	cbz	r1, 80e1e <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80df6:	f3c4 3003 	ubfx	r0, r4, #12, #4
   80dfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80dfe:	f3c4 2703 	ubfx	r7, r4, #8, #4
   80e02:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80e06:	f3c4 1002 	ubfx	r0, r4, #4, #3
   80e0a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   80e0e:	f004 000f 	and.w	r0, r4, #15
   80e12:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80e16:	2564      	movs	r5, #100	; 0x64
   80e18:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
   80e1c:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
   80e1e:	b142      	cbz	r2, 80e32 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80e20:	f3c4 5000 	ubfx	r0, r4, #20, #1
   80e24:	0081      	lsls	r1, r0, #2
   80e26:	4408      	add	r0, r1
   80e28:	f3c4 4103 	ubfx	r1, r4, #16, #4
   80e2c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
   80e30:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
   80e32:	b143      	cbz	r3, 80e46 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80e34:	f3c4 7201 	ubfx	r2, r4, #28, #2
   80e38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80e3c:	f3c4 6103 	ubfx	r1, r4, #24, #4
   80e40:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   80e44:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
   80e46:	b116      	cbz	r6, 80e4e <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
   80e48:	f3c4 5442 	ubfx	r4, r4, #21, #3
   80e4c:	6034      	str	r4, [r6, #0]
	}
}
   80e4e:	bcf0      	pop	{r4, r5, r6, r7}
   80e50:	4770      	bx	lr
	...

00080e54 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
   80e54:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80e56:	4d2a      	ldr	r5, [pc, #168]	; (80f00 <rtc_set_date+0xac>)
   80e58:	fba5 4603 	umull	r4, r6, r5, r3
   80e5c:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
   80e5e:	9c03      	ldr	r4, [sp, #12]
   80e60:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80e62:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
   80e66:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   80e6a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80e6e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
   80e72:	fba5 6402 	umull	r6, r4, r5, r2
   80e76:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80e78:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
   80e7c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   80e80:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80e84:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
   80e88:	4b1e      	ldr	r3, [pc, #120]	; (80f04 <rtc_set_date+0xb0>)
   80e8a:	fba3 4301 	umull	r4, r3, r3, r1
   80e8e:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80e90:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
   80e94:	4b1c      	ldr	r3, [pc, #112]	; (80f08 <rtc_set_date+0xb4>)
   80e96:	fba3 4301 	umull	r4, r3, r3, r1
   80e9a:	095b      	lsrs	r3, r3, #5
   80e9c:	fba5 6403 	umull	r6, r4, r5, r3
   80ea0:	08e4      	lsrs	r4, r4, #3
   80ea2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   80ea6:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80eaa:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
   80eac:	fba5 4301 	umull	r4, r3, r5, r1
   80eb0:	08db      	lsrs	r3, r3, #3
   80eb2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   80eb6:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80eba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
   80ebe:	fba5 1503 	umull	r1, r5, r5, r3
   80ec2:	08ed      	lsrs	r5, r5, #3
   80ec4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   80ec8:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80ecc:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   80ed0:	6983      	ldr	r3, [r0, #24]
   80ed2:	f013 0f04 	tst.w	r3, #4
   80ed6:	d0fb      	beq.n	80ed0 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
   80ed8:	6803      	ldr	r3, [r0, #0]
   80eda:	f043 0302 	orr.w	r3, r3, #2
   80ede:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   80ee0:	6983      	ldr	r3, [r0, #24]
   80ee2:	f013 0f01 	tst.w	r3, #1
   80ee6:	d0fb      	beq.n	80ee0 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   80ee8:	2301      	movs	r3, #1
   80eea:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
   80eec:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
   80eee:	6803      	ldr	r3, [r0, #0]
   80ef0:	f023 0302 	bic.w	r3, r3, #2
   80ef4:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
   80ef6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   80ef8:	f000 0002 	and.w	r0, r0, #2
   80efc:	bc70      	pop	{r4, r5, r6}
   80efe:	4770      	bx	lr
   80f00:	cccccccd 	.word	0xcccccccd
   80f04:	10624dd3 	.word	0x10624dd3
   80f08:	51eb851f 	.word	0x51eb851f

00080f0c <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
   80f0c:	61c1      	str	r1, [r0, #28]
   80f0e:	4770      	bx	lr

00080f10 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80f10:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80f12:	0189      	lsls	r1, r1, #6
   80f14:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80f16:	2402      	movs	r4, #2
   80f18:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80f1a:	f04f 31ff 	mov.w	r1, #4294967295
   80f1e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80f20:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80f22:	605a      	str	r2, [r3, #4]
}
   80f24:	bc10      	pop	{r4}
   80f26:	4770      	bx	lr

00080f28 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80f28:	0189      	lsls	r1, r1, #6
   80f2a:	2305      	movs	r3, #5
   80f2c:	5043      	str	r3, [r0, r1]
   80f2e:	4770      	bx	lr

00080f30 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   80f30:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80f34:	614a      	str	r2, [r1, #20]
   80f36:	4770      	bx	lr

00080f38 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80f38:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80f3c:	61ca      	str	r2, [r1, #28]
   80f3e:	4770      	bx	lr

00080f40 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80f40:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   80f44:	624a      	str	r2, [r1, #36]	; 0x24
   80f46:	4770      	bx	lr

00080f48 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80f48:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   80f4c:	6a08      	ldr	r0, [r1, #32]
}
   80f4e:	4770      	bx	lr

00080f50 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80f50:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80f52:	23ac      	movs	r3, #172	; 0xac
   80f54:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80f56:	680b      	ldr	r3, [r1, #0]
   80f58:	684a      	ldr	r2, [r1, #4]
   80f5a:	fbb3 f3f2 	udiv	r3, r3, r2
   80f5e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80f60:	1e5c      	subs	r4, r3, #1
   80f62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80f66:	4294      	cmp	r4, r2
   80f68:	d80b      	bhi.n	80f82 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80f6a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80f6c:	688b      	ldr	r3, [r1, #8]
   80f6e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80f70:	f240 2302 	movw	r3, #514	; 0x202
   80f74:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80f78:	2350      	movs	r3, #80	; 0x50
   80f7a:	6003      	str	r3, [r0, #0]

	return 0;
   80f7c:	2000      	movs	r0, #0
}
   80f7e:	bc10      	pop	{r4}
   80f80:	4770      	bx	lr
		return 1;
   80f82:	2001      	movs	r0, #1
   80f84:	e7fb      	b.n	80f7e <uart_init+0x2e>

00080f86 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
   80f86:	6081      	str	r1, [r0, #8]
   80f88:	4770      	bx	lr

00080f8a <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
   80f8a:	60c1      	str	r1, [r0, #12]
   80f8c:	4770      	bx	lr

00080f8e <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
   80f8e:	6940      	ldr	r0, [r0, #20]
}
   80f90:	4770      	bx	lr

00080f92 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
   80f92:	6940      	ldr	r0, [r0, #20]
}
   80f94:	f000 0001 	and.w	r0, r0, #1
   80f98:	4770      	bx	lr

00080f9a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80f9a:	6943      	ldr	r3, [r0, #20]
   80f9c:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80fa0:	bf1d      	ittte	ne
   80fa2:	6983      	ldrne	r3, [r0, #24]
   80fa4:	700b      	strbne	r3, [r1, #0]
	return 0;
   80fa6:	2000      	movne	r0, #0
		return 1;
   80fa8:	2001      	moveq	r0, #1
}
   80faa:	4770      	bx	lr

00080fac <wdt_disable>:
/**
 * \brief Disable the watchdog editTimer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   80fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80fb0:	6043      	str	r3, [r0, #4]
   80fb2:	4770      	bx	lr

00080fb4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80fb4:	e7fe      	b.n	80fb4 <Dummy_Handler>
	...

00080fb8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80fb8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80fba:	4b1c      	ldr	r3, [pc, #112]	; (8102c <Reset_Handler+0x74>)
   80fbc:	4a1c      	ldr	r2, [pc, #112]	; (81030 <Reset_Handler+0x78>)
   80fbe:	429a      	cmp	r2, r3
   80fc0:	d010      	beq.n	80fe4 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80fc2:	4b1c      	ldr	r3, [pc, #112]	; (81034 <Reset_Handler+0x7c>)
   80fc4:	4a19      	ldr	r2, [pc, #100]	; (8102c <Reset_Handler+0x74>)
   80fc6:	429a      	cmp	r2, r3
   80fc8:	d20c      	bcs.n	80fe4 <Reset_Handler+0x2c>
   80fca:	3b01      	subs	r3, #1
   80fcc:	1a9b      	subs	r3, r3, r2
   80fce:	f023 0303 	bic.w	r3, r3, #3
   80fd2:	3304      	adds	r3, #4
   80fd4:	4413      	add	r3, r2
   80fd6:	4916      	ldr	r1, [pc, #88]	; (81030 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80fd8:	f851 0b04 	ldr.w	r0, [r1], #4
   80fdc:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80fe0:	429a      	cmp	r2, r3
   80fe2:	d1f9      	bne.n	80fd8 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80fe4:	4b14      	ldr	r3, [pc, #80]	; (81038 <Reset_Handler+0x80>)
   80fe6:	4a15      	ldr	r2, [pc, #84]	; (8103c <Reset_Handler+0x84>)
   80fe8:	429a      	cmp	r2, r3
   80fea:	d20a      	bcs.n	81002 <Reset_Handler+0x4a>
   80fec:	3b01      	subs	r3, #1
   80fee:	1a9b      	subs	r3, r3, r2
   80ff0:	f023 0303 	bic.w	r3, r3, #3
   80ff4:	3304      	adds	r3, #4
   80ff6:	4413      	add	r3, r2
		*pDest++ = 0;
   80ff8:	2100      	movs	r1, #0
   80ffa:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80ffe:	4293      	cmp	r3, r2
   81000:	d1fb      	bne.n	80ffa <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81002:	4b0f      	ldr	r3, [pc, #60]	; (81040 <Reset_Handler+0x88>)
   81004:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81008:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8100c:	490d      	ldr	r1, [pc, #52]	; (81044 <Reset_Handler+0x8c>)
   8100e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   81010:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81014:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
   81018:	d203      	bcs.n	81022 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8101a:	688b      	ldr	r3, [r1, #8]
   8101c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81020:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81022:	4b09      	ldr	r3, [pc, #36]	; (81048 <Reset_Handler+0x90>)
   81024:	4798      	blx	r3

	/* Branch to main function */
	main();
   81026:	4b09      	ldr	r3, [pc, #36]	; (8104c <Reset_Handler+0x94>)
   81028:	4798      	blx	r3
   8102a:	e7fe      	b.n	8102a <Reset_Handler+0x72>
   8102c:	20000000 	.word	0x20000000
   81030:	00089a54 	.word	0x00089a54
   81034:	20000fd4 	.word	0x20000fd4
   81038:	20001838 	.word	0x20001838
   8103c:	20000fd4 	.word	0x20000fd4
   81040:	00080000 	.word	0x00080000
   81044:	e000ed00 	.word	0xe000ed00
   81048:	00083d85 	.word	0x00083d85
   8104c:	00083815 	.word	0x00083815

00081050 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81050:	4b3d      	ldr	r3, [pc, #244]	; (81148 <SystemCoreClockUpdate+0xf8>)
   81052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81054:	f003 0303 	and.w	r3, r3, #3
   81058:	2b03      	cmp	r3, #3
   8105a:	d80e      	bhi.n	8107a <SystemCoreClockUpdate+0x2a>
   8105c:	e8df f003 	tbb	[pc, r3]
   81060:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81064:	4b39      	ldr	r3, [pc, #228]	; (8114c <SystemCoreClockUpdate+0xfc>)
   81066:	695b      	ldr	r3, [r3, #20]
   81068:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8106c:	bf14      	ite	ne
   8106e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81072:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81076:	4b36      	ldr	r3, [pc, #216]	; (81150 <SystemCoreClockUpdate+0x100>)
   81078:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8107a:	4b33      	ldr	r3, [pc, #204]	; (81148 <SystemCoreClockUpdate+0xf8>)
   8107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8107e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81082:	2b70      	cmp	r3, #112	; 0x70
   81084:	d057      	beq.n	81136 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81086:	4b30      	ldr	r3, [pc, #192]	; (81148 <SystemCoreClockUpdate+0xf8>)
   81088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8108a:	4931      	ldr	r1, [pc, #196]	; (81150 <SystemCoreClockUpdate+0x100>)
   8108c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   81090:	680b      	ldr	r3, [r1, #0]
   81092:	40d3      	lsrs	r3, r2
   81094:	600b      	str	r3, [r1, #0]
   81096:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81098:	4b2b      	ldr	r3, [pc, #172]	; (81148 <SystemCoreClockUpdate+0xf8>)
   8109a:	6a1b      	ldr	r3, [r3, #32]
   8109c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   810a0:	d003      	beq.n	810aa <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   810a2:	4a2c      	ldr	r2, [pc, #176]	; (81154 <SystemCoreClockUpdate+0x104>)
   810a4:	4b2a      	ldr	r3, [pc, #168]	; (81150 <SystemCoreClockUpdate+0x100>)
   810a6:	601a      	str	r2, [r3, #0]
   810a8:	e7e7      	b.n	8107a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   810aa:	4a2b      	ldr	r2, [pc, #172]	; (81158 <SystemCoreClockUpdate+0x108>)
   810ac:	4b28      	ldr	r3, [pc, #160]	; (81150 <SystemCoreClockUpdate+0x100>)
   810ae:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   810b0:	4b25      	ldr	r3, [pc, #148]	; (81148 <SystemCoreClockUpdate+0xf8>)
   810b2:	6a1b      	ldr	r3, [r3, #32]
   810b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   810b8:	2b10      	cmp	r3, #16
   810ba:	d005      	beq.n	810c8 <SystemCoreClockUpdate+0x78>
   810bc:	2b20      	cmp	r3, #32
   810be:	d1dc      	bne.n	8107a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   810c0:	4a24      	ldr	r2, [pc, #144]	; (81154 <SystemCoreClockUpdate+0x104>)
   810c2:	4b23      	ldr	r3, [pc, #140]	; (81150 <SystemCoreClockUpdate+0x100>)
   810c4:	601a      	str	r2, [r3, #0]
				break;
   810c6:	e7d8      	b.n	8107a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   810c8:	4a24      	ldr	r2, [pc, #144]	; (8115c <SystemCoreClockUpdate+0x10c>)
   810ca:	4b21      	ldr	r3, [pc, #132]	; (81150 <SystemCoreClockUpdate+0x100>)
   810cc:	601a      	str	r2, [r3, #0]
				break;
   810ce:	e7d4      	b.n	8107a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   810d0:	4b1d      	ldr	r3, [pc, #116]	; (81148 <SystemCoreClockUpdate+0xf8>)
   810d2:	6a1b      	ldr	r3, [r3, #32]
   810d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   810d8:	d00c      	beq.n	810f4 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   810da:	4a1e      	ldr	r2, [pc, #120]	; (81154 <SystemCoreClockUpdate+0x104>)
   810dc:	4b1c      	ldr	r3, [pc, #112]	; (81150 <SystemCoreClockUpdate+0x100>)
   810de:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   810e0:	4b19      	ldr	r3, [pc, #100]	; (81148 <SystemCoreClockUpdate+0xf8>)
   810e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   810e4:	f003 0303 	and.w	r3, r3, #3
   810e8:	2b02      	cmp	r3, #2
   810ea:	d016      	beq.n	8111a <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   810ec:	4a1c      	ldr	r2, [pc, #112]	; (81160 <SystemCoreClockUpdate+0x110>)
   810ee:	4b18      	ldr	r3, [pc, #96]	; (81150 <SystemCoreClockUpdate+0x100>)
   810f0:	601a      	str	r2, [r3, #0]
   810f2:	e7c2      	b.n	8107a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   810f4:	4a18      	ldr	r2, [pc, #96]	; (81158 <SystemCoreClockUpdate+0x108>)
   810f6:	4b16      	ldr	r3, [pc, #88]	; (81150 <SystemCoreClockUpdate+0x100>)
   810f8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   810fa:	4b13      	ldr	r3, [pc, #76]	; (81148 <SystemCoreClockUpdate+0xf8>)
   810fc:	6a1b      	ldr	r3, [r3, #32]
   810fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81102:	2b10      	cmp	r3, #16
   81104:	d005      	beq.n	81112 <SystemCoreClockUpdate+0xc2>
   81106:	2b20      	cmp	r3, #32
   81108:	d1ea      	bne.n	810e0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   8110a:	4a12      	ldr	r2, [pc, #72]	; (81154 <SystemCoreClockUpdate+0x104>)
   8110c:	4b10      	ldr	r3, [pc, #64]	; (81150 <SystemCoreClockUpdate+0x100>)
   8110e:	601a      	str	r2, [r3, #0]
				break;
   81110:	e7e6      	b.n	810e0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   81112:	4a12      	ldr	r2, [pc, #72]	; (8115c <SystemCoreClockUpdate+0x10c>)
   81114:	4b0e      	ldr	r3, [pc, #56]	; (81150 <SystemCoreClockUpdate+0x100>)
   81116:	601a      	str	r2, [r3, #0]
				break;
   81118:	e7e2      	b.n	810e0 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8111a:	4a0b      	ldr	r2, [pc, #44]	; (81148 <SystemCoreClockUpdate+0xf8>)
   8111c:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   8111e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81120:	480b      	ldr	r0, [pc, #44]	; (81150 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81122:	f3c1 410a 	ubfx	r1, r1, #16, #11
   81126:	6803      	ldr	r3, [r0, #0]
   81128:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   8112c:	b2d2      	uxtb	r2, r2
   8112e:	fbb3 f3f2 	udiv	r3, r3, r2
   81132:	6003      	str	r3, [r0, #0]
   81134:	e7a1      	b.n	8107a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   81136:	4a06      	ldr	r2, [pc, #24]	; (81150 <SystemCoreClockUpdate+0x100>)
   81138:	6813      	ldr	r3, [r2, #0]
   8113a:	490a      	ldr	r1, [pc, #40]	; (81164 <SystemCoreClockUpdate+0x114>)
   8113c:	fba1 1303 	umull	r1, r3, r1, r3
   81140:	085b      	lsrs	r3, r3, #1
   81142:	6013      	str	r3, [r2, #0]
   81144:	4770      	bx	lr
   81146:	bf00      	nop
   81148:	400e0400 	.word	0x400e0400
   8114c:	400e1210 	.word	0x400e1210
   81150:	20000128 	.word	0x20000128
   81154:	00b71b00 	.word	0x00b71b00
   81158:	003d0900 	.word	0x003d0900
   8115c:	007a1200 	.word	0x007a1200
   81160:	0e4e1c00 	.word	0x0e4e1c00
   81164:	aaaaaaab 	.word	0xaaaaaaab

00081168 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81168:	4b0a      	ldr	r3, [pc, #40]	; (81194 <_sbrk+0x2c>)
   8116a:	681b      	ldr	r3, [r3, #0]
   8116c:	b153      	cbz	r3, 81184 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8116e:	4b09      	ldr	r3, [pc, #36]	; (81194 <_sbrk+0x2c>)
   81170:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81172:	181a      	adds	r2, r3, r0
   81174:	4908      	ldr	r1, [pc, #32]	; (81198 <_sbrk+0x30>)
   81176:	4291      	cmp	r1, r2
   81178:	db08      	blt.n	8118c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8117a:	4610      	mov	r0, r2
   8117c:	4a05      	ldr	r2, [pc, #20]	; (81194 <_sbrk+0x2c>)
   8117e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81180:	4618      	mov	r0, r3
   81182:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81184:	4a05      	ldr	r2, [pc, #20]	; (8119c <_sbrk+0x34>)
   81186:	4b03      	ldr	r3, [pc, #12]	; (81194 <_sbrk+0x2c>)
   81188:	601a      	str	r2, [r3, #0]
   8118a:	e7f0      	b.n	8116e <_sbrk+0x6>
		return (caddr_t) -1;	
   8118c:	f04f 30ff 	mov.w	r0, #4294967295
}
   81190:	4770      	bx	lr
   81192:	bf00      	nop
   81194:	2000106c 	.word	0x2000106c
   81198:	20083ffc 	.word	0x20083ffc
   8119c:	20084000 	.word	0x20084000

000811a0 <Test>:
	PH_CMD_RELAIS_1,
	PH_CMD_RELAIS_2
};

void Test(uint32_t sc, uint32_t phase)
{
   811a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   811a4:	b084      	sub	sp, #16
   811a6:	9103      	str	r1, [sp, #12]
	switch(sc)
   811a8:	2864      	cmp	r0, #100	; 0x64
   811aa:	f000 80dc 	beq.w	81366 <Test+0x1c6>
   811ae:	2866      	cmp	r0, #102	; 0x66
   811b0:	f040 8123 	bne.w	813fa <Test+0x25a>
		phase<<=8;
		phase&=0xFF00;
		phase|=PH_CMD_MOSFET;
		//no break;
	case TEST_RUN:
		sprintf(buf,"\r\nPH:%d--%d\r\n",*((char*)&phase+1),*((char*)&phase+0));
   811b4:	f89d 700d 	ldrb.w	r7, [sp, #13]
   811b8:	4c9c      	ldr	r4, [pc, #624]	; (8142c <Test+0x28c>)
   811ba:	f89d 300c 	ldrb.w	r3, [sp, #12]
   811be:	463a      	mov	r2, r7
   811c0:	499b      	ldr	r1, [pc, #620]	; (81430 <Test+0x290>)
   811c2:	4620      	mov	r0, r4
   811c4:	4d9b      	ldr	r5, [pc, #620]	; (81434 <Test+0x294>)
   811c6:	47a8      	blx	r5
		Putstr(buf);
   811c8:	4621      	mov	r1, r4
   811ca:	2067      	movs	r0, #103	; 0x67
   811cc:	4c9a      	ldr	r4, [pc, #616]	; (81438 <Test+0x298>)
   811ce:	47a0      	blx	r4

		Putstr(PENE_OUVERT_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_OUVERT)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   811d0:	499a      	ldr	r1, [pc, #616]	; (8143c <Test+0x29c>)
   811d2:	2067      	movs	r0, #103	; 0x67
   811d4:	47a0      	blx	r4
   811d6:	4d9a      	ldr	r5, [pc, #616]	; (81440 <Test+0x2a0>)
   811d8:	4629      	mov	r1, r5
   811da:	2067      	movs	r0, #103	; 0x67
   811dc:	47a0      	blx	r4
   811de:	200e      	movs	r0, #14
   811e0:	4b98      	ldr	r3, [pc, #608]	; (81444 <Test+0x2a4>)
   811e2:	4798      	blx	r3
   811e4:	2800      	cmp	r0, #0
   811e6:	f040 80c9 	bne.w	8137c <Test+0x1dc>
   811ea:	4997      	ldr	r1, [pc, #604]	; (81448 <Test+0x2a8>)
   811ec:	2067      	movs	r0, #103	; 0x67
   811ee:	47a0      	blx	r4
   811f0:	4c96      	ldr	r4, [pc, #600]	; (8144c <Test+0x2ac>)
   811f2:	4621      	mov	r1, r4
   811f4:	2067      	movs	r0, #103	; 0x67
   811f6:	4e90      	ldr	r6, [pc, #576]	; (81438 <Test+0x298>)
   811f8:	47b0      	blx	r6
		Putstr(PENE_FERME_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_FERME)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   811fa:	4995      	ldr	r1, [pc, #596]	; (81450 <Test+0x2b0>)
   811fc:	2067      	movs	r0, #103	; 0x67
   811fe:	47b0      	blx	r6
   81200:	4629      	mov	r1, r5
   81202:	2067      	movs	r0, #103	; 0x67
   81204:	47b0      	blx	r6
   81206:	200f      	movs	r0, #15
   81208:	4b8e      	ldr	r3, [pc, #568]	; (81444 <Test+0x2a4>)
   8120a:	4798      	blx	r3
   8120c:	2800      	cmp	r0, #0
   8120e:	f040 80ba 	bne.w	81386 <Test+0x1e6>
   81212:	498d      	ldr	r1, [pc, #564]	; (81448 <Test+0x2a8>)
   81214:	2067      	movs	r0, #103	; 0x67
   81216:	47b0      	blx	r6
   81218:	4621      	mov	r1, r4
   8121a:	2067      	movs	r0, #103	; 0x67
   8121c:	f8df 8218 	ldr.w	r8, [pc, #536]	; 81438 <Test+0x298>
   81220:	47c0      	blx	r8
		Putstr(IN_ILS_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_ILS)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   81222:	498c      	ldr	r1, [pc, #560]	; (81454 <Test+0x2b4>)
   81224:	2067      	movs	r0, #103	; 0x67
   81226:	47c0      	blx	r8
   81228:	4e8b      	ldr	r6, [pc, #556]	; (81458 <Test+0x2b8>)
   8122a:	4631      	mov	r1, r6
   8122c:	2067      	movs	r0, #103	; 0x67
   8122e:	47c0      	blx	r8
   81230:	2010      	movs	r0, #16
   81232:	4b84      	ldr	r3, [pc, #528]	; (81444 <Test+0x2a4>)
   81234:	4798      	blx	r3
   81236:	2800      	cmp	r0, #0
   81238:	f040 80aa 	bne.w	81390 <Test+0x1f0>
   8123c:	4982      	ldr	r1, [pc, #520]	; (81448 <Test+0x2a8>)
   8123e:	2067      	movs	r0, #103	; 0x67
   81240:	47c0      	blx	r8
   81242:	4621      	mov	r1, r4
   81244:	2067      	movs	r0, #103	; 0x67
   81246:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 81438 <Test+0x298>
   8124a:	47c0      	blx	r8
		Putstr(IN_SV_NAME);					Putstr("\t\t: ");	gpio_pin_is_low(IN_SV)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   8124c:	4983      	ldr	r1, [pc, #524]	; (8145c <Test+0x2bc>)
   8124e:	2067      	movs	r0, #103	; 0x67
   81250:	47c0      	blx	r8
   81252:	4631      	mov	r1, r6
   81254:	2067      	movs	r0, #103	; 0x67
   81256:	47c0      	blx	r8
   81258:	2011      	movs	r0, #17
   8125a:	4b7a      	ldr	r3, [pc, #488]	; (81444 <Test+0x2a4>)
   8125c:	4798      	blx	r3
   8125e:	2800      	cmp	r0, #0
   81260:	f040 809b 	bne.w	8139a <Test+0x1fa>
   81264:	4978      	ldr	r1, [pc, #480]	; (81448 <Test+0x2a8>)
   81266:	2067      	movs	r0, #103	; 0x67
   81268:	47c0      	blx	r8
   8126a:	4621      	mov	r1, r4
   8126c:	2067      	movs	r0, #103	; 0x67
   8126e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 81438 <Test+0x298>
   81272:	47c0      	blx	r8
		Putstr(IN_RADAR_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_RADAR)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   81274:	497a      	ldr	r1, [pc, #488]	; (81460 <Test+0x2c0>)
   81276:	2067      	movs	r0, #103	; 0x67
   81278:	47c0      	blx	r8
   8127a:	4631      	mov	r1, r6
   8127c:	2067      	movs	r0, #103	; 0x67
   8127e:	47c0      	blx	r8
   81280:	2018      	movs	r0, #24
   81282:	4b70      	ldr	r3, [pc, #448]	; (81444 <Test+0x2a4>)
   81284:	4798      	blx	r3
   81286:	2800      	cmp	r0, #0
   81288:	f040 808c 	bne.w	813a4 <Test+0x204>
   8128c:	496e      	ldr	r1, [pc, #440]	; (81448 <Test+0x2a8>)
   8128e:	2067      	movs	r0, #103	; 0x67
   81290:	47c0      	blx	r8
   81292:	4621      	mov	r1, r4
   81294:	2067      	movs	r0, #103	; 0x67
   81296:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 81438 <Test+0x298>
   8129a:	47c0      	blx	r8
		Putstr(IN_DVU_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_DVU)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   8129c:	4971      	ldr	r1, [pc, #452]	; (81464 <Test+0x2c4>)
   8129e:	2067      	movs	r0, #103	; 0x67
   812a0:	47c0      	blx	r8
   812a2:	4631      	mov	r1, r6
   812a4:	2067      	movs	r0, #103	; 0x67
   812a6:	47c0      	blx	r8
   812a8:	2019      	movs	r0, #25
   812aa:	4b66      	ldr	r3, [pc, #408]	; (81444 <Test+0x2a4>)
   812ac:	4798      	blx	r3
   812ae:	2800      	cmp	r0, #0
   812b0:	d17d      	bne.n	813ae <Test+0x20e>
   812b2:	4965      	ldr	r1, [pc, #404]	; (81448 <Test+0x2a8>)
   812b4:	2067      	movs	r0, #103	; 0x67
   812b6:	47c0      	blx	r8
   812b8:	4621      	mov	r1, r4
   812ba:	2067      	movs	r0, #103	; 0x67
   812bc:	4e5e      	ldr	r6, [pc, #376]	; (81438 <Test+0x298>)
   812be:	47b0      	blx	r6
		Putstr(IN_PREMIERE_ENTREE_NAME);	Putstr("\t: ");		gpio_pin_is_low(IN_PREMIERE_ENTREE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   812c0:	4969      	ldr	r1, [pc, #420]	; (81468 <Test+0x2c8>)
   812c2:	2067      	movs	r0, #103	; 0x67
   812c4:	47b0      	blx	r6
   812c6:	4629      	mov	r1, r5
   812c8:	2067      	movs	r0, #103	; 0x67
   812ca:	47b0      	blx	r6
   812cc:	201a      	movs	r0, #26
   812ce:	4b5d      	ldr	r3, [pc, #372]	; (81444 <Test+0x2a4>)
   812d0:	4798      	blx	r3
   812d2:	2800      	cmp	r0, #0
   812d4:	d170      	bne.n	813b8 <Test+0x218>
   812d6:	495c      	ldr	r1, [pc, #368]	; (81448 <Test+0x2a8>)
   812d8:	2067      	movs	r0, #103	; 0x67
   812da:	47b0      	blx	r6
   812dc:	4621      	mov	r1, r4
   812de:	2067      	movs	r0, #103	; 0x67
   812e0:	4e55      	ldr	r6, [pc, #340]	; (81438 <Test+0x298>)
   812e2:	47b0      	blx	r6
		Putstr(IN_DVU_GENERAL_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_DVU_GENERAL)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   812e4:	4961      	ldr	r1, [pc, #388]	; (8146c <Test+0x2cc>)
   812e6:	2067      	movs	r0, #103	; 0x67
   812e8:	47b0      	blx	r6
   812ea:	4629      	mov	r1, r5
   812ec:	2067      	movs	r0, #103	; 0x67
   812ee:	47b0      	blx	r6
   812f0:	201b      	movs	r0, #27
   812f2:	4b54      	ldr	r3, [pc, #336]	; (81444 <Test+0x2a4>)
   812f4:	4798      	blx	r3
   812f6:	2800      	cmp	r0, #0
   812f8:	d163      	bne.n	813c2 <Test+0x222>
   812fa:	4953      	ldr	r1, [pc, #332]	; (81448 <Test+0x2a8>)
   812fc:	2067      	movs	r0, #103	; 0x67
   812fe:	47b0      	blx	r6
   81300:	4621      	mov	r1, r4
   81302:	2067      	movs	r0, #103	; 0x67
   81304:	4e4c      	ldr	r6, [pc, #304]	; (81438 <Test+0x298>)
   81306:	47b0      	blx	r6
		Putstr(IN_ENTREE_LIBRE_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_LIBRE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   81308:	4959      	ldr	r1, [pc, #356]	; (81470 <Test+0x2d0>)
   8130a:	2067      	movs	r0, #103	; 0x67
   8130c:	47b0      	blx	r6
   8130e:	4629      	mov	r1, r5
   81310:	2067      	movs	r0, #103	; 0x67
   81312:	47b0      	blx	r6
   81314:	201c      	movs	r0, #28
   81316:	4b4b      	ldr	r3, [pc, #300]	; (81444 <Test+0x2a4>)
   81318:	4798      	blx	r3
   8131a:	2800      	cmp	r0, #0
   8131c:	d156      	bne.n	813cc <Test+0x22c>
   8131e:	494a      	ldr	r1, [pc, #296]	; (81448 <Test+0x2a8>)
   81320:	2067      	movs	r0, #103	; 0x67
   81322:	47b0      	blx	r6
   81324:	4621      	mov	r1, r4
   81326:	2067      	movs	r0, #103	; 0x67
   81328:	4e43      	ldr	r6, [pc, #268]	; (81438 <Test+0x298>)
   8132a:	47b0      	blx	r6
		Putstr(IN_ENTREE_OPTION_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_OPTION)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   8132c:	4951      	ldr	r1, [pc, #324]	; (81474 <Test+0x2d4>)
   8132e:	2067      	movs	r0, #103	; 0x67
   81330:	47b0      	blx	r6
   81332:	4629      	mov	r1, r5
   81334:	2067      	movs	r0, #103	; 0x67
   81336:	47b0      	blx	r6
   81338:	201d      	movs	r0, #29
   8133a:	4b42      	ldr	r3, [pc, #264]	; (81444 <Test+0x2a4>)
   8133c:	4798      	blx	r3
   8133e:	2800      	cmp	r0, #0
   81340:	d149      	bne.n	813d6 <Test+0x236>
   81342:	4941      	ldr	r1, [pc, #260]	; (81448 <Test+0x2a8>)
   81344:	2067      	movs	r0, #103	; 0x67
   81346:	47b0      	blx	r6
   81348:	4621      	mov	r1, r4
   8134a:	2067      	movs	r0, #103	; 0x67
   8134c:	4b3a      	ldr	r3, [pc, #232]	; (81438 <Test+0x298>)
   8134e:	4798      	blx	r3

		switch(mBitsMsk(phase,0xFF))
   81350:	f89d 300c 	ldrb.w	r3, [sp, #12]
   81354:	3b01      	subs	r3, #1
   81356:	2b04      	cmp	r3, #4
   81358:	f200 80a1 	bhi.w	8149e <Test+0x2fe>
   8135c:	e8df f003 	tbb	[pc, r3]
   81360:	5e575040 	.word	0x5e575040
   81364:	98          	.byte	0x98
   81365:	00          	.byte	0x00
		Putstr("\r\nTest started...\r\n");
   81366:	4944      	ldr	r1, [pc, #272]	; (81478 <Test+0x2d8>)
   81368:	2067      	movs	r0, #103	; 0x67
   8136a:	4b33      	ldr	r3, [pc, #204]	; (81438 <Test+0x298>)
   8136c:	4798      	blx	r3
		phase<<=8;
   8136e:	9b03      	ldr	r3, [sp, #12]
   81370:	021b      	lsls	r3, r3, #8
		phase&=0xFF00;
   81372:	b29b      	uxth	r3, r3
		phase|=PH_CMD_MOSFET;
   81374:	f043 0301 	orr.w	r3, r3, #1
   81378:	9303      	str	r3, [sp, #12]
   8137a:	e71b      	b.n	811b4 <Test+0x14>
		Putstr(PENE_OUVERT_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_OUVERT)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   8137c:	493f      	ldr	r1, [pc, #252]	; (8147c <Test+0x2dc>)
   8137e:	2067      	movs	r0, #103	; 0x67
   81380:	4b2d      	ldr	r3, [pc, #180]	; (81438 <Test+0x298>)
   81382:	4798      	blx	r3
   81384:	e734      	b.n	811f0 <Test+0x50>
		Putstr(PENE_FERME_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_FERME)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   81386:	493d      	ldr	r1, [pc, #244]	; (8147c <Test+0x2dc>)
   81388:	2067      	movs	r0, #103	; 0x67
   8138a:	4b2b      	ldr	r3, [pc, #172]	; (81438 <Test+0x298>)
   8138c:	4798      	blx	r3
   8138e:	e743      	b.n	81218 <Test+0x78>
		Putstr(IN_ILS_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_ILS)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   81390:	493a      	ldr	r1, [pc, #232]	; (8147c <Test+0x2dc>)
   81392:	2067      	movs	r0, #103	; 0x67
   81394:	4b28      	ldr	r3, [pc, #160]	; (81438 <Test+0x298>)
   81396:	4798      	blx	r3
   81398:	e753      	b.n	81242 <Test+0xa2>
		Putstr(IN_SV_NAME);					Putstr("\t\t: ");	gpio_pin_is_low(IN_SV)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   8139a:	4938      	ldr	r1, [pc, #224]	; (8147c <Test+0x2dc>)
   8139c:	2067      	movs	r0, #103	; 0x67
   8139e:	4b26      	ldr	r3, [pc, #152]	; (81438 <Test+0x298>)
   813a0:	4798      	blx	r3
   813a2:	e762      	b.n	8126a <Test+0xca>
		Putstr(IN_RADAR_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_RADAR)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   813a4:	4935      	ldr	r1, [pc, #212]	; (8147c <Test+0x2dc>)
   813a6:	2067      	movs	r0, #103	; 0x67
   813a8:	4b23      	ldr	r3, [pc, #140]	; (81438 <Test+0x298>)
   813aa:	4798      	blx	r3
   813ac:	e771      	b.n	81292 <Test+0xf2>
		Putstr(IN_DVU_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_DVU)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   813ae:	4933      	ldr	r1, [pc, #204]	; (8147c <Test+0x2dc>)
   813b0:	2067      	movs	r0, #103	; 0x67
   813b2:	4b21      	ldr	r3, [pc, #132]	; (81438 <Test+0x298>)
   813b4:	4798      	blx	r3
   813b6:	e77f      	b.n	812b8 <Test+0x118>
		Putstr(IN_PREMIERE_ENTREE_NAME);	Putstr("\t: ");		gpio_pin_is_low(IN_PREMIERE_ENTREE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   813b8:	4930      	ldr	r1, [pc, #192]	; (8147c <Test+0x2dc>)
   813ba:	2067      	movs	r0, #103	; 0x67
   813bc:	4b1e      	ldr	r3, [pc, #120]	; (81438 <Test+0x298>)
   813be:	4798      	blx	r3
   813c0:	e78c      	b.n	812dc <Test+0x13c>
		Putstr(IN_DVU_GENERAL_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_DVU_GENERAL)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   813c2:	492e      	ldr	r1, [pc, #184]	; (8147c <Test+0x2dc>)
   813c4:	2067      	movs	r0, #103	; 0x67
   813c6:	4b1c      	ldr	r3, [pc, #112]	; (81438 <Test+0x298>)
   813c8:	4798      	blx	r3
   813ca:	e799      	b.n	81300 <Test+0x160>
		Putstr(IN_ENTREE_LIBRE_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_LIBRE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   813cc:	492b      	ldr	r1, [pc, #172]	; (8147c <Test+0x2dc>)
   813ce:	2067      	movs	r0, #103	; 0x67
   813d0:	4b19      	ldr	r3, [pc, #100]	; (81438 <Test+0x298>)
   813d2:	4798      	blx	r3
   813d4:	e7a6      	b.n	81324 <Test+0x184>
		Putstr(IN_ENTREE_OPTION_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_OPTION)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   813d6:	4929      	ldr	r1, [pc, #164]	; (8147c <Test+0x2dc>)
   813d8:	2067      	movs	r0, #103	; 0x67
   813da:	4b17      	ldr	r3, [pc, #92]	; (81438 <Test+0x298>)
   813dc:	4798      	blx	r3
   813de:	e7b3      	b.n	81348 <Test+0x1a8>
		{
		case PH_CMD_MOSFET:
			gpio_set_pin_high(CMD_MOSFET);
   813e0:	2020      	movs	r0, #32
   813e2:	4b27      	ldr	r3, [pc, #156]	; (81480 <Test+0x2e0>)
   813e4:	4798      	blx	r3
		}
		break;
	default:
		return;
	}
	PushTask(Test,TEST_RUN,++phase,1000);
   813e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   813ea:	9300      	str	r3, [sp, #0]
   813ec:	9b03      	ldr	r3, [sp, #12]
   813ee:	3301      	adds	r3, #1
   813f0:	2266      	movs	r2, #102	; 0x66
   813f2:	4924      	ldr	r1, [pc, #144]	; (81484 <Test+0x2e4>)
   813f4:	4610      	mov	r0, r2
   813f6:	4c24      	ldr	r4, [pc, #144]	; (81488 <Test+0x2e8>)
   813f8:	47a0      	blx	r4
}
   813fa:	b004      	add	sp, #16
   813fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_set_pin_low(CMD_MOSFET);
   81400:	2020      	movs	r0, #32
   81402:	4b22      	ldr	r3, [pc, #136]	; (8148c <Test+0x2ec>)
   81404:	4798      	blx	r3
			gpio_set_pin_high(CMD_MOT_SERRURE);
   81406:	2021      	movs	r0, #33	; 0x21
   81408:	4b1d      	ldr	r3, [pc, #116]	; (81480 <Test+0x2e0>)
   8140a:	4798      	blx	r3
			break;
   8140c:	e7eb      	b.n	813e6 <Test+0x246>
			gpio_set_pin_low(CMD_MOT_SERRURE);
   8140e:	2021      	movs	r0, #33	; 0x21
   81410:	4b1e      	ldr	r3, [pc, #120]	; (8148c <Test+0x2ec>)
   81412:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS);
   81414:	2022      	movs	r0, #34	; 0x22
   81416:	4b1a      	ldr	r3, [pc, #104]	; (81480 <Test+0x2e0>)
   81418:	4798      	blx	r3
			break;
   8141a:	e7e4      	b.n	813e6 <Test+0x246>
			gpio_set_pin_low(CMD_RELAIS);
   8141c:	2022      	movs	r0, #34	; 0x22
   8141e:	4b1b      	ldr	r3, [pc, #108]	; (8148c <Test+0x2ec>)
   81420:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS_1);
   81422:	2023      	movs	r0, #35	; 0x23
   81424:	4b16      	ldr	r3, [pc, #88]	; (81480 <Test+0x2e0>)
   81426:	4798      	blx	r3
			break;
   81428:	e7dd      	b.n	813e6 <Test+0x246>
   8142a:	bf00      	nop
   8142c:	200012a4 	.word	0x200012a4
   81430:	00088a70 	.word	0x00088a70
   81434:	00083e71 	.word	0x00083e71
   81438:	000832dd 	.word	0x000832dd
   8143c:	00088a80 	.word	0x00088a80
   81440:	00088a8c 	.word	0x00088a8c
   81444:	0008083d 	.word	0x0008083d
   81448:	00088a90 	.word	0x00088a90
   8144c:	00088ccc 	.word	0x00088ccc
   81450:	00088a98 	.word	0x00088a98
   81454:	00088aa4 	.word	0x00088aa4
   81458:	00088aa8 	.word	0x00088aa8
   8145c:	00088ab0 	.word	0x00088ab0
   81460:	00088ab4 	.word	0x00088ab4
   81464:	00088abc 	.word	0x00088abc
   81468:	00088ac0 	.word	0x00088ac0
   8146c:	00088ad0 	.word	0x00088ad0
   81470:	00088adc 	.word	0x00088adc
   81474:	00088aec 	.word	0x00088aec
   81478:	00088a5c 	.word	0x00088a5c
   8147c:	00088a94 	.word	0x00088a94
   81480:	00080859 	.word	0x00080859
   81484:	000811a1 	.word	0x000811a1
   81488:	00083519 	.word	0x00083519
   8148c:	00080873 	.word	0x00080873
			gpio_set_pin_low(CMD_RELAIS_1);
   81490:	2023      	movs	r0, #35	; 0x23
   81492:	4b13      	ldr	r3, [pc, #76]	; (814e0 <Test+0x340>)
   81494:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS_2);
   81496:	2024      	movs	r0, #36	; 0x24
   81498:	4b12      	ldr	r3, [pc, #72]	; (814e4 <Test+0x344>)
   8149a:	4798      	blx	r3
			break;
   8149c:	e7a3      	b.n	813e6 <Test+0x246>
			gpio_set_pin_low(CMD_MOSFET);
   8149e:	2020      	movs	r0, #32
   814a0:	4c0f      	ldr	r4, [pc, #60]	; (814e0 <Test+0x340>)
   814a2:	47a0      	blx	r4
			gpio_set_pin_low(CMD_MOT_SERRURE);
   814a4:	2021      	movs	r0, #33	; 0x21
   814a6:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS);
   814a8:	2022      	movs	r0, #34	; 0x22
   814aa:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS_1);
   814ac:	2023      	movs	r0, #35	; 0x23
   814ae:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS_2);
   814b0:	2024      	movs	r0, #36	; 0x24
   814b2:	47a0      	blx	r4
			if(*((char*)&phase+1))
   814b4:	b127      	cbz	r7, 814c0 <Test+0x320>
				if(--(*((char*)&phase+1)))
   814b6:	3f01      	subs	r7, #1
   814b8:	b2ff      	uxtb	r7, r7
   814ba:	f88d 700d 	strb.w	r7, [sp, #13]
   814be:	b927      	cbnz	r7, 814ca <Test+0x32a>
			Putstr("\r\nTest terminated...\r\n");
   814c0:	4909      	ldr	r1, [pc, #36]	; (814e8 <Test+0x348>)
   814c2:	2067      	movs	r0, #103	; 0x67
   814c4:	4b09      	ldr	r3, [pc, #36]	; (814ec <Test+0x34c>)
   814c6:	4798      	blx	r3
			return;
   814c8:	e797      	b.n	813fa <Test+0x25a>
					PushTask(Test,TEST_NEW,phase>>8,0);
   814ca:	2300      	movs	r3, #0
   814cc:	9300      	str	r3, [sp, #0]
   814ce:	9b03      	ldr	r3, [sp, #12]
   814d0:	0a1b      	lsrs	r3, r3, #8
   814d2:	2264      	movs	r2, #100	; 0x64
   814d4:	4906      	ldr	r1, [pc, #24]	; (814f0 <Test+0x350>)
   814d6:	2066      	movs	r0, #102	; 0x66
   814d8:	4c06      	ldr	r4, [pc, #24]	; (814f4 <Test+0x354>)
   814da:	47a0      	blx	r4
   814dc:	e7f0      	b.n	814c0 <Test+0x320>
   814de:	bf00      	nop
   814e0:	00080873 	.word	0x00080873
   814e4:	00080859 	.word	0x00080859
   814e8:	00088afc 	.word	0x00088afc
   814ec:	000832dd 	.word	0x000832dd
   814f0:	000811a1 	.word	0x000811a1
   814f4:	00083519 	.word	0x00083519

000814f8 <stop>:
	}
	mstrtokRestore();
}

void stop(uint32_t sc, void*pParam)
{
   814f8:	b510      	push	{r4, lr}
	char *pToken;
	switch(sc)
   814fa:	f242 6316 	movw	r3, #9750	; 0x2616
   814fe:	4298      	cmp	r0, r3
   81500:	d01e      	beq.n	81540 <stop+0x48>
//#else
		//gpio_set_pin_high(BUZZER_PWR);
//#endif
		break;
	default:
		pToken = mstrtok(NULL," \r\n");
   81502:	491c      	ldr	r1, [pc, #112]	; (81574 <stop+0x7c>)
   81504:	2000      	movs	r0, #0
   81506:	4b1c      	ldr	r3, [pc, #112]	; (81578 <stop+0x80>)
   81508:	4798      	blx	r3
		if(pToken)
   8150a:	4604      	mov	r4, r0
   8150c:	b1a8      	cbz	r0, 8153a <stop+0x42>
		{
			switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   8150e:	4b1b      	ldr	r3, [pc, #108]	; (8157c <stop+0x84>)
   81510:	4798      	blx	r3
   81512:	4601      	mov	r1, r0
   81514:	4620      	mov	r0, r4
   81516:	4b1a      	ldr	r3, [pc, #104]	; (81580 <stop+0x88>)
   81518:	4798      	blx	r3
   8151a:	f242 6316 	movw	r3, #9750	; 0x2616
   8151e:	4298      	cmp	r0, r3
   81520:	d020      	beq.n	81564 <stop+0x6c>
   81522:	d912      	bls.n	8154a <stop+0x52>
   81524:	f243 132b 	movw	r3, #12587	; 0x312b
   81528:	4298      	cmp	r0, r3
   8152a:	d017      	beq.n	8155c <stop+0x64>
   8152c:	f24c 6398 	movw	r3, #50840	; 0xc698
   81530:	4298      	cmp	r0, r3
   81532:	d102      	bne.n	8153a <stop+0x42>
			{
			case 0xC698:	//lcd
				Lcd(LCD_DEL);
   81534:	2065      	movs	r0, #101	; 0x65
   81536:	4b13      	ldr	r3, [pc, #76]	; (81584 <stop+0x8c>)
   81538:	4798      	blx	r3
				break;
			default:
				break;
			}
		}
		mstrtokRestore();
   8153a:	4b13      	ldr	r3, [pc, #76]	; (81588 <stop+0x90>)
   8153c:	4798      	blx	r3
   8153e:	bd10      	pop	{r4, pc}
		Putstr("\r\nBuzzer off...\r\n");
   81540:	4912      	ldr	r1, [pc, #72]	; (8158c <stop+0x94>)
   81542:	2067      	movs	r0, #103	; 0x67
   81544:	4b12      	ldr	r3, [pc, #72]	; (81590 <stop+0x98>)
   81546:	4798      	blx	r3
		break;
   81548:	bd10      	pop	{r4, pc}
			switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   8154a:	f240 6334 	movw	r3, #1588	; 0x634
   8154e:	4298      	cmp	r0, r3
   81550:	d1f3      	bne.n	8153a <stop+0x42>
				LcdBacklight(false);
   81552:	2100      	movs	r1, #0
   81554:	2066      	movs	r0, #102	; 0x66
   81556:	4b0b      	ldr	r3, [pc, #44]	; (81584 <stop+0x8c>)
   81558:	4798      	blx	r3
				break;
   8155a:	e7ee      	b.n	8153a <stop+0x42>
				gpio_set_pin_high(BLUETOOTH_PWR);
   8155c:	2035      	movs	r0, #53	; 0x35
   8155e:	4b0d      	ldr	r3, [pc, #52]	; (81594 <stop+0x9c>)
   81560:	4798      	blx	r3
				break;
   81562:	e7ea      	b.n	8153a <stop+0x42>
				Putstr("\r\nBuzzer off...\r\n");
   81564:	4909      	ldr	r1, [pc, #36]	; (8158c <stop+0x94>)
   81566:	2067      	movs	r0, #103	; 0x67
   81568:	4b09      	ldr	r3, [pc, #36]	; (81590 <stop+0x98>)
   8156a:	4798      	blx	r3
				gpio_set_pin_low(BUZZER_PWR);
   8156c:	2030      	movs	r0, #48	; 0x30
   8156e:	4b0a      	ldr	r3, [pc, #40]	; (81598 <stop+0xa0>)
   81570:	4798      	blx	r3
				break;
   81572:	e7e2      	b.n	8153a <stop+0x42>
   81574:	00088b70 	.word	0x00088b70
   81578:	00083785 	.word	0x00083785
   8157c:	00083ebd 	.word	0x00083ebd
   81580:	0008176d 	.word	0x0008176d
   81584:	00081cd5 	.word	0x00081cd5
   81588:	00083741 	.word	0x00083741
   8158c:	00088b5c 	.word	0x00088b5c
   81590:	000832dd 	.word	0x000832dd
   81594:	00080859 	.word	0x00080859
   81598:	00080873 	.word	0x00080873

0008159c <start>:
{
   8159c:	b570      	push	{r4, r5, r6, lr}
   8159e:	b090      	sub	sp, #64	; 0x40
	pToken = mstrtok(NULL," \r\n");
   815a0:	4957      	ldr	r1, [pc, #348]	; (81700 <start+0x164>)
   815a2:	2000      	movs	r0, #0
   815a4:	4b57      	ldr	r3, [pc, #348]	; (81704 <start+0x168>)
   815a6:	4798      	blx	r3
	if(pToken)
   815a8:	2800      	cmp	r0, #0
   815aa:	f000 8094 	beq.w	816d6 <start+0x13a>
   815ae:	4604      	mov	r4, r0
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   815b0:	4b55      	ldr	r3, [pc, #340]	; (81708 <start+0x16c>)
   815b2:	4798      	blx	r3
   815b4:	4601      	mov	r1, r0
   815b6:	4620      	mov	r0, r4
   815b8:	4b54      	ldr	r3, [pc, #336]	; (8170c <start+0x170>)
   815ba:	4798      	blx	r3
   815bc:	f243 132b 	movw	r3, #12587	; 0x312b
   815c0:	4298      	cmp	r0, r3
   815c2:	f000 8093 	beq.w	816ec <start+0x150>
   815c6:	d851      	bhi.n	8166c <start+0xd0>
   815c8:	f240 6334 	movw	r3, #1588	; 0x634
   815cc:	4298      	cmp	r0, r3
   815ce:	f000 8086 	beq.w	816de <start+0x142>
   815d2:	f242 6316 	movw	r3, #9750	; 0x2616
   815d6:	4298      	cmp	r0, r3
   815d8:	d17d      	bne.n	816d6 <start+0x13a>
			mstrtokRestore();
   815da:	4b4d      	ldr	r3, [pc, #308]	; (81710 <start+0x174>)
   815dc:	4798      	blx	r3
			pToken = mstrtok(NULL," \r\n");
   815de:	4948      	ldr	r1, [pc, #288]	; (81700 <start+0x164>)
   815e0:	2000      	movs	r0, #0
   815e2:	4b48      	ldr	r3, [pc, #288]	; (81704 <start+0x168>)
   815e4:	4798      	blx	r3
			pParam=atoi((char*)pToken);
   815e6:	4b4b      	ldr	r3, [pc, #300]	; (81714 <start+0x178>)
   815e8:	4798      	blx	r3
			if(pParam)
   815ea:	4606      	mov	r6, r0
   815ec:	2800      	cmp	r0, #0
   815ee:	d072      	beq.n	816d6 <start+0x13a>
				Putstr("\r\nBuzzer on for ");
   815f0:	4949      	ldr	r1, [pc, #292]	; (81718 <start+0x17c>)
   815f2:	2067      	movs	r0, #103	; 0x67
   815f4:	4c49      	ldr	r4, [pc, #292]	; (8171c <start+0x180>)
   815f6:	47a0      	blx	r4
				sprintf(buf,"%d ms...\r\n",(int)pParam);
   815f8:	4d49      	ldr	r5, [pc, #292]	; (81720 <start+0x184>)
   815fa:	4632      	mov	r2, r6
   815fc:	4949      	ldr	r1, [pc, #292]	; (81724 <start+0x188>)
   815fe:	4628      	mov	r0, r5
   81600:	4b49      	ldr	r3, [pc, #292]	; (81728 <start+0x18c>)
   81602:	4798      	blx	r3
				Putstr(buf);
   81604:	4629      	mov	r1, r5
   81606:	2067      	movs	r0, #103	; 0x67
   81608:	47a0      	blx	r4
				gpio_configure_pin(BUZZER_PWR,BUZZER_FLAGS);
   8160a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8160e:	2030      	movs	r0, #48	; 0x30
   81610:	4b46      	ldr	r3, [pc, #280]	; (8172c <start+0x190>)
   81612:	4798      	blx	r3
					const pwm_clock_t clockSetting ={
   81614:	4b46      	ldr	r3, [pc, #280]	; (81730 <start+0x194>)
   81616:	ad03      	add	r5, sp, #12
   81618:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   8161c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
					pmc_enable_periph_clk(ID_PWM);
   81620:	2019      	movs	r0, #25
   81622:	4b44      	ldr	r3, [pc, #272]	; (81734 <start+0x198>)
   81624:	4798      	blx	r3
					pwm_channel_disable(PWM,PWM_CHANNEL_3);
   81626:	4c44      	ldr	r4, [pc, #272]	; (81738 <start+0x19c>)
   81628:	2103      	movs	r1, #3
   8162a:	4620      	mov	r0, r4
   8162c:	4b43      	ldr	r3, [pc, #268]	; (8173c <start+0x1a0>)
   8162e:	4798      	blx	r3
					pwm_init(PWM,(pwm_clock_t*)&clockSetting);
   81630:	4629      	mov	r1, r5
   81632:	4620      	mov	r0, r4
   81634:	4b42      	ldr	r3, [pc, #264]	; (81740 <start+0x1a4>)
   81636:	4798      	blx	r3
					pwmChannelInstance.ul_prescaler=PWM_CMR_CPRE_CLKB;
   81638:	230c      	movs	r3, #12
   8163a:	9307      	str	r3, [sp, #28]
					pwmChannelInstance.ul_period=100;
   8163c:	2364      	movs	r3, #100	; 0x64
   8163e:	930a      	str	r3, [sp, #40]	; 0x28
					pwmChannelInstance.ul_duty=50;
   81640:	2332      	movs	r3, #50	; 0x32
   81642:	9309      	str	r3, [sp, #36]	; 0x24
					pwmChannelInstance.channel=PWM_CHANNEL_3;
   81644:	2503      	movs	r5, #3
   81646:	a910      	add	r1, sp, #64	; 0x40
   81648:	f841 5d28 	str.w	r5, [r1, #-40]!
					pwm_channel_init(PWM,&pwmChannelInstance);
   8164c:	4620      	mov	r0, r4
   8164e:	4b3d      	ldr	r3, [pc, #244]	; (81744 <start+0x1a8>)
   81650:	4798      	blx	r3
					pwm_channel_enable(PWM,PWM_CHANNEL_3);
   81652:	4629      	mov	r1, r5
   81654:	4620      	mov	r0, r4
   81656:	4b3c      	ldr	r3, [pc, #240]	; (81748 <start+0x1ac>)
   81658:	4798      	blx	r3
				PushTask(stop,0x2616,0,(uint32_t)pParam);
   8165a:	9600      	str	r6, [sp, #0]
   8165c:	2300      	movs	r3, #0
   8165e:	f242 6216 	movw	r2, #9750	; 0x2616
   81662:	493a      	ldr	r1, [pc, #232]	; (8174c <start+0x1b0>)
   81664:	2066      	movs	r0, #102	; 0x66
   81666:	4c3a      	ldr	r4, [pc, #232]	; (81750 <start+0x1b4>)
   81668:	47a0      	blx	r4
   8166a:	e034      	b.n	816d6 <start+0x13a>
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   8166c:	f24c 6398 	movw	r3, #50840	; 0xc698
   81670:	4298      	cmp	r0, r3
   81672:	d021      	beq.n	816b8 <start+0x11c>
   81674:	f64d 432e 	movw	r3, #56366	; 0xdc2e
   81678:	4298      	cmp	r0, r3
   8167a:	d12c      	bne.n	816d6 <start+0x13a>
			mstrtokRestore();
   8167c:	4b24      	ldr	r3, [pc, #144]	; (81710 <start+0x174>)
   8167e:	4798      	blx	r3
			pToken = mstrtok(NULL," \r\n");
   81680:	491f      	ldr	r1, [pc, #124]	; (81700 <start+0x164>)
   81682:	2000      	movs	r0, #0
   81684:	4b1f      	ldr	r3, [pc, #124]	; (81704 <start+0x168>)
   81686:	4798      	blx	r3
			if(pToken)
   81688:	2800      	cmp	r0, #0
   8168a:	d02d      	beq.n	816e8 <start+0x14c>
				 sc=atoi((char*)pToken);
   8168c:	4b21      	ldr	r3, [pc, #132]	; (81714 <start+0x178>)
   8168e:	4798      	blx	r3
   81690:	4604      	mov	r4, r0
				 sprintf(buf,"\r\nNbTest: %d\r\n",(int)sc);
   81692:	4d23      	ldr	r5, [pc, #140]	; (81720 <start+0x184>)
   81694:	4602      	mov	r2, r0
   81696:	492f      	ldr	r1, [pc, #188]	; (81754 <start+0x1b8>)
   81698:	4628      	mov	r0, r5
   8169a:	4b23      	ldr	r3, [pc, #140]	; (81728 <start+0x18c>)
   8169c:	4798      	blx	r3
				 Putstr(buf);
   8169e:	4629      	mov	r1, r5
   816a0:	2067      	movs	r0, #103	; 0x67
   816a2:	4b1e      	ldr	r3, [pc, #120]	; (8171c <start+0x180>)
   816a4:	4798      	blx	r3
			PushTask(Test,TEST_NEW,sc,0);
   816a6:	2300      	movs	r3, #0
   816a8:	9300      	str	r3, [sp, #0]
   816aa:	4623      	mov	r3, r4
   816ac:	2264      	movs	r2, #100	; 0x64
   816ae:	492a      	ldr	r1, [pc, #168]	; (81758 <start+0x1bc>)
   816b0:	2066      	movs	r0, #102	; 0x66
   816b2:	4c27      	ldr	r4, [pc, #156]	; (81750 <start+0x1b4>)
   816b4:	47a0      	blx	r4
			break;
   816b6:	e00e      	b.n	816d6 <start+0x13a>
			Lcd(LCD_DEL);
   816b8:	2065      	movs	r0, #101	; 0x65
   816ba:	4c28      	ldr	r4, [pc, #160]	; (8175c <start+0x1c0>)
   816bc:	47a0      	blx	r4
			Lcd(LCD_NEW);
   816be:	2064      	movs	r0, #100	; 0x64
   816c0:	47a0      	blx	r4
			LcdPutstr("CPU.ACX  ATSAM3U4C",2,1);
   816c2:	2301      	movs	r3, #1
   816c4:	2202      	movs	r2, #2
   816c6:	4926      	ldr	r1, [pc, #152]	; (81760 <start+0x1c4>)
   816c8:	2067      	movs	r0, #103	; 0x67
   816ca:	47a0      	blx	r4
			LcdPutstr("www.a-2-s.net",3,4);
   816cc:	2304      	movs	r3, #4
   816ce:	2203      	movs	r2, #3
   816d0:	4924      	ldr	r1, [pc, #144]	; (81764 <start+0x1c8>)
   816d2:	2067      	movs	r0, #103	; 0x67
   816d4:	47a0      	blx	r4
	mstrtokRestore();
   816d6:	4b0e      	ldr	r3, [pc, #56]	; (81710 <start+0x174>)
   816d8:	4798      	blx	r3
}
   816da:	b010      	add	sp, #64	; 0x40
   816dc:	bd70      	pop	{r4, r5, r6, pc}
			LcdBacklight(true);
   816de:	2101      	movs	r1, #1
   816e0:	2066      	movs	r0, #102	; 0x66
   816e2:	4b1e      	ldr	r3, [pc, #120]	; (8175c <start+0x1c0>)
   816e4:	4798      	blx	r3
			break;
   816e6:	e7f6      	b.n	816d6 <start+0x13a>
				sc=1;
   816e8:	2401      	movs	r4, #1
   816ea:	e7dc      	b.n	816a6 <start+0x10a>
			gpio_configure_pin(BLUETOOTH_PWR,BLUETOOTH_FLAGS);
   816ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   816f0:	2035      	movs	r0, #53	; 0x35
   816f2:	4b0e      	ldr	r3, [pc, #56]	; (8172c <start+0x190>)
   816f4:	4798      	blx	r3
			gpio_set_pin_low(BLUETOOTH_PWR);
   816f6:	2035      	movs	r0, #53	; 0x35
   816f8:	4b1b      	ldr	r3, [pc, #108]	; (81768 <start+0x1cc>)
   816fa:	4798      	blx	r3
			break;
   816fc:	e7eb      	b.n	816d6 <start+0x13a>
   816fe:	bf00      	nop
   81700:	00088b70 	.word	0x00088b70
   81704:	00083785 	.word	0x00083785
   81708:	00083ebd 	.word	0x00083ebd
   8170c:	0008176d 	.word	0x0008176d
   81710:	00083741 	.word	0x00083741
   81714:	00083d7d 	.word	0x00083d7d
   81718:	00088b3c 	.word	0x00088b3c
   8171c:	000832dd 	.word	0x000832dd
   81720:	200012a4 	.word	0x200012a4
   81724:	00088b50 	.word	0x00088b50
   81728:	00083e71 	.word	0x00083e71
   8172c:	000808ad 	.word	0x000808ad
   81730:	00088a50 	.word	0x00088a50
   81734:	00080aad 	.word	0x00080aad
   81738:	4008c000 	.word	0x4008c000
   8173c:	00080cd5 	.word	0x00080cd5
   81740:	00080ba1 	.word	0x00080ba1
   81744:	00080be5 	.word	0x00080be5
   81748:	00080ccb 	.word	0x00080ccb
   8174c:	000814f9 	.word	0x000814f9
   81750:	00083519 	.word	0x00083519
   81754:	00088b2c 	.word	0x00088b2c
   81758:	000811a1 	.word	0x000811a1
   8175c:	00081cd5 	.word	0x00081cd5
   81760:	000887f8 	.word	0x000887f8
   81764:	0008880c 	.word	0x0008880c
   81768:	00080873 	.word	0x00080873

0008176c <CRC16MODBUSFRAME>:
   8176c:	b189      	cbz	r1, 81792 <CRC16MODBUSFRAME+0x26>
   8176e:	b410      	push	{r4}
   81770:	1841      	adds	r1, r0, r1
   81772:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81776:	4c09      	ldr	r4, [pc, #36]	; (8179c <CRC16MODBUSFRAME+0x30>)
   81778:	f810 3b01 	ldrb.w	r3, [r0], #1
   8177c:	4053      	eors	r3, r2
   8177e:	b2db      	uxtb	r3, r3
   81780:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   81784:	ea83 2212 	eor.w	r2, r3, r2, lsr #8
   81788:	4281      	cmp	r1, r0
   8178a:	d1f5      	bne.n	81778 <CRC16MODBUSFRAME+0xc>
   8178c:	4610      	mov	r0, r2
   8178e:	bc10      	pop	{r4}
   81790:	4770      	bx	lr
   81792:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81796:	4610      	mov	r0, r2
   81798:	4770      	bx	lr
   8179a:	bf00      	nop
   8179c:	2000012c 	.word	0x2000012c

000817a0 <CRC16MODBUS>:
   817a0:	4048      	eors	r0, r1
   817a2:	b2c0      	uxtb	r0, r0
   817a4:	4b02      	ldr	r3, [pc, #8]	; (817b0 <CRC16MODBUS+0x10>)
   817a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   817aa:	ea80 2011 	eor.w	r0, r0, r1, lsr #8
   817ae:	4770      	bx	lr
   817b0:	2000012c 	.word	0x2000012c

000817b4 <Error>:




void Error(uint32_t sc, ...)
{
   817b4:	b40f      	push	{r0, r1, r2, r3}
   817b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   817ba:	b672      	cpsid	i
   817bc:	f3bf 8f5f 	dmb	sy
	uint32_t i,k;
#define er sc
	cpu_irq_disable();
   817c0:	2200      	movs	r2, #0
   817c2:	4b65      	ldr	r3, [pc, #404]	; (81958 <Error+0x1a4>)
   817c4:	701a      	strb	r2, [r3, #0]
	gpio_configure_pin(ERROR_LED, ERROR_LED_FLAGS);
   817c6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   817ca:	2033      	movs	r0, #51	; 0x33
   817cc:	4b63      	ldr	r3, [pc, #396]	; (8195c <Error+0x1a8>)
   817ce:	4798      	blx	r3
   817d0:	f04f 0805 	mov.w	r8, #5
//#if HEART_LED_ACTIVE_LEVEL==1	
	
	for(k=0;k<5;k++)
	{
		gpio_set_pin_high(ERROR_LED);
		delay_ms(3000);
   817d4:	4c62      	ldr	r4, [pc, #392]	; (81960 <Error+0x1ac>)
			delay_ms(1500);
			gpio_set_pin_low(ERROR_LED);
		}
		else
		{
			for(i=0;i<(er/10)*2;i++)
   817d6:	4f63      	ldr	r7, [pc, #396]	; (81964 <Error+0x1b0>)
   817d8:	e031      	b.n	8183e <Error+0x8a>
			gpio_set_pin_high(ERROR_LED);
   817da:	2033      	movs	r0, #51	; 0x33
   817dc:	4b62      	ldr	r3, [pc, #392]	; (81968 <Error+0x1b4>)
   817de:	4798      	blx	r3
			delay_ms(1500);
   817e0:	4862      	ldr	r0, [pc, #392]	; (8196c <Error+0x1b8>)
   817e2:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   817e4:	2033      	movs	r0, #51	; 0x33
   817e6:	4b62      	ldr	r3, [pc, #392]	; (81970 <Error+0x1bc>)
   817e8:	4798      	blx	r3
   817ea:	e048      	b.n	8187e <Error+0xca>
		}
		delay_ms(800);

		if((er%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   817ec:	2033      	movs	r0, #51	; 0x33
   817ee:	4b5e      	ldr	r3, [pc, #376]	; (81968 <Error+0x1b4>)
   817f0:	4798      	blx	r3
			delay_ms(1500);
   817f2:	485e      	ldr	r0, [pc, #376]	; (8196c <Error+0x1b8>)
   817f4:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   817f6:	2033      	movs	r0, #51	; 0x33
   817f8:	4b5d      	ldr	r3, [pc, #372]	; (81970 <Error+0x1bc>)
   817fa:	4798      	blx	r3
   817fc:	e057      	b.n	818ae <Error+0xfa>
		delay_ms(1000);
#undef er
#define _param	pa1
		if((_param/100)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   817fe:	2033      	movs	r0, #51	; 0x33
   81800:	4b59      	ldr	r3, [pc, #356]	; (81968 <Error+0x1b4>)
   81802:	4798      	blx	r3
			delay_ms(1500);
   81804:	4859      	ldr	r0, [pc, #356]	; (8196c <Error+0x1b8>)
   81806:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   81808:	2033      	movs	r0, #51	; 0x33
   8180a:	4b59      	ldr	r3, [pc, #356]	; (81970 <Error+0x1bc>)
   8180c:	4798      	blx	r3
   8180e:	e067      	b.n	818e0 <Error+0x12c>
		}
		delay_ms(800);

		if(((_param/10)%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   81810:	2033      	movs	r0, #51	; 0x33
   81812:	4b55      	ldr	r3, [pc, #340]	; (81968 <Error+0x1b4>)
   81814:	4798      	blx	r3
			delay_ms(1500);
   81816:	4855      	ldr	r0, [pc, #340]	; (8196c <Error+0x1b8>)
   81818:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   8181a:	2033      	movs	r0, #51	; 0x33
   8181c:	4b54      	ldr	r3, [pc, #336]	; (81970 <Error+0x1bc>)
   8181e:	4798      	blx	r3
   81820:	e079      	b.n	81916 <Error+0x162>
		delay_ms(800);


		if((_param%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   81822:	2033      	movs	r0, #51	; 0x33
   81824:	4b50      	ldr	r3, [pc, #320]	; (81968 <Error+0x1b4>)
   81826:	4798      	blx	r3
			delay_ms(1500);
   81828:	4850      	ldr	r0, [pc, #320]	; (8196c <Error+0x1b8>)
   8182a:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   8182c:	2033      	movs	r0, #51	; 0x33
   8182e:	4b50      	ldr	r3, [pc, #320]	; (81970 <Error+0x1bc>)
   81830:	4798      	blx	r3
				gpio_toggle_pin(ERROR_LED);
				delay_ms(200);
			}
		}
		
		delay_ms(1000);
   81832:	4850      	ldr	r0, [pc, #320]	; (81974 <Error+0x1c0>)
   81834:	47a0      	blx	r4
	for(k=0;k<5;k++)
   81836:	f1b8 0801 	subs.w	r8, r8, #1
   8183a:	f000 8086 	beq.w	8194a <Error+0x196>
		gpio_set_pin_high(ERROR_LED);
   8183e:	2033      	movs	r0, #51	; 0x33
   81840:	4b49      	ldr	r3, [pc, #292]	; (81968 <Error+0x1b4>)
   81842:	4798      	blx	r3
		delay_ms(3000);
   81844:	484c      	ldr	r0, [pc, #304]	; (81978 <Error+0x1c4>)
   81846:	47a0      	blx	r4
		gpio_set_pin_low(ERROR_LED);
   81848:	2033      	movs	r0, #51	; 0x33
   8184a:	4b49      	ldr	r3, [pc, #292]	; (81970 <Error+0x1bc>)
   8184c:	4798      	blx	r3
		delay_ms(800);
   8184e:	484b      	ldr	r0, [pc, #300]	; (8197c <Error+0x1c8>)
   81850:	47a0      	blx	r4
		if((er/10)==0)
   81852:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   81856:	f1b9 0f09 	cmp.w	r9, #9
   8185a:	d9be      	bls.n	817da <Error+0x26>
			for(i=0;i<(er/10)*2;i++)
   8185c:	fba7 2309 	umull	r2, r3, r7, r9
   81860:	08db      	lsrs	r3, r3, #3
   81862:	005e      	lsls	r6, r3, #1
   81864:	b15b      	cbz	r3, 8187e <Error+0xca>
   81866:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   81868:	f8df b120 	ldr.w	fp, [pc, #288]	; 8198c <Error+0x1d8>
				delay_ms(200);
   8186c:	f8df a120 	ldr.w	sl, [pc, #288]	; 81990 <Error+0x1dc>
				gpio_toggle_pin(ERROR_LED);
   81870:	2033      	movs	r0, #51	; 0x33
   81872:	47d8      	blx	fp
				delay_ms(200);
   81874:	4650      	mov	r0, sl
   81876:	47a0      	blx	r4
			for(i=0;i<(er/10)*2;i++)
   81878:	3501      	adds	r5, #1
   8187a:	42b5      	cmp	r5, r6
   8187c:	d1f8      	bne.n	81870 <Error+0xbc>
		delay_ms(800);
   8187e:	483f      	ldr	r0, [pc, #252]	; (8197c <Error+0x1c8>)
   81880:	47a0      	blx	r4
		if((er%10)==0)
   81882:	fba7 3609 	umull	r3, r6, r7, r9
   81886:	08f6      	lsrs	r6, r6, #3
   81888:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   8188c:	ebb9 0646 	subs.w	r6, r9, r6, lsl #1
   81890:	d0ac      	beq.n	817ec <Error+0x38>
			for(i=0;i<(er%10)*2;i++)
   81892:	0076      	lsls	r6, r6, #1
   81894:	d00b      	beq.n	818ae <Error+0xfa>
   81896:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   81898:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8198c <Error+0x1d8>
				delay_ms(200);
   8189c:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 81990 <Error+0x1dc>
				gpio_toggle_pin(ERROR_LED);
   818a0:	2033      	movs	r0, #51	; 0x33
   818a2:	47d0      	blx	sl
				delay_ms(200);
   818a4:	4648      	mov	r0, r9
   818a6:	47a0      	blx	r4
			for(i=0;i<(er%10)*2;i++)
   818a8:	3501      	adds	r5, #1
   818aa:	42b5      	cmp	r5, r6
   818ac:	d1f8      	bne.n	818a0 <Error+0xec>
		delay_ms(1000);
   818ae:	4831      	ldr	r0, [pc, #196]	; (81974 <Error+0x1c0>)
   818b0:	47a0      	blx	r4
		if((_param/100)==0)
   818b2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   818b6:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
   818ba:	d9a0      	bls.n	817fe <Error+0x4a>
			for(i=0;i<(_param/100)*2;i++)
   818bc:	4b30      	ldr	r3, [pc, #192]	; (81980 <Error+0x1cc>)
   818be:	fba3 2309 	umull	r2, r3, r3, r9
   818c2:	095b      	lsrs	r3, r3, #5
   818c4:	005e      	lsls	r6, r3, #1
   818c6:	b15b      	cbz	r3, 818e0 <Error+0x12c>
   818c8:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   818ca:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8198c <Error+0x1d8>
				delay_ms(200);
   818ce:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 81990 <Error+0x1dc>
				gpio_toggle_pin(ERROR_LED);
   818d2:	2033      	movs	r0, #51	; 0x33
   818d4:	47d8      	blx	fp
				delay_ms(200);
   818d6:	4650      	mov	r0, sl
   818d8:	47a0      	blx	r4
			for(i=0;i<(_param/100)*2;i++)
   818da:	3501      	adds	r5, #1
   818dc:	42b5      	cmp	r5, r6
   818de:	d1f8      	bne.n	818d2 <Error+0x11e>
		delay_ms(800);
   818e0:	4826      	ldr	r0, [pc, #152]	; (8197c <Error+0x1c8>)
   818e2:	47a0      	blx	r4
		if(((_param/10)%10)==0)
   818e4:	fba7 2309 	umull	r2, r3, r7, r9
   818e8:	08db      	lsrs	r3, r3, #3
   818ea:	fba7 2603 	umull	r2, r6, r7, r3
   818ee:	08f6      	lsrs	r6, r6, #3
   818f0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   818f4:	ebb3 0646 	subs.w	r6, r3, r6, lsl #1
   818f8:	d08a      	beq.n	81810 <Error+0x5c>
			for(i=0;i<((_param/10)%10)*2;i++)
   818fa:	0076      	lsls	r6, r6, #1
   818fc:	d00b      	beq.n	81916 <Error+0x162>
   818fe:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   81900:	f8df b088 	ldr.w	fp, [pc, #136]	; 8198c <Error+0x1d8>
				delay_ms(200);
   81904:	f8df a088 	ldr.w	sl, [pc, #136]	; 81990 <Error+0x1dc>
				gpio_toggle_pin(ERROR_LED);
   81908:	2033      	movs	r0, #51	; 0x33
   8190a:	47d8      	blx	fp
				delay_ms(200);
   8190c:	4650      	mov	r0, sl
   8190e:	47a0      	blx	r4
			for(i=0;i<((_param/10)%10)*2;i++)
   81910:	3501      	adds	r5, #1
   81912:	42b5      	cmp	r5, r6
   81914:	d1f8      	bne.n	81908 <Error+0x154>
		delay_ms(800);
   81916:	4819      	ldr	r0, [pc, #100]	; (8197c <Error+0x1c8>)
   81918:	47a0      	blx	r4
		if((_param%10)==0)
   8191a:	fba7 3609 	umull	r3, r6, r7, r9
   8191e:	08f6      	lsrs	r6, r6, #3
   81920:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   81924:	ebb9 0646 	subs.w	r6, r9, r6, lsl #1
   81928:	f43f af7b 	beq.w	81822 <Error+0x6e>
			for(i=0;i<(_param%10)*2;i++)
   8192c:	0076      	lsls	r6, r6, #1
   8192e:	d080      	beq.n	81832 <Error+0x7e>
   81930:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   81932:	f8df a058 	ldr.w	sl, [pc, #88]	; 8198c <Error+0x1d8>
				delay_ms(200);
   81936:	f8df 9058 	ldr.w	r9, [pc, #88]	; 81990 <Error+0x1dc>
				gpio_toggle_pin(ERROR_LED);
   8193a:	2033      	movs	r0, #51	; 0x33
   8193c:	47d0      	blx	sl
				delay_ms(200);
   8193e:	4648      	mov	r0, r9
   81940:	47a0      	blx	r4
			for(i=0;i<(_param%10)*2;i++)
   81942:	3501      	adds	r5, #1
   81944:	42b5      	cmp	r5, r6
   81946:	d1f8      	bne.n	8193a <Error+0x186>
   81948:	e773      	b.n	81832 <Error+0x7e>

#undef _param
	}
	rstc_start_software_reset(RSTC);
   8194a:	480e      	ldr	r0, [pc, #56]	; (81984 <Error+0x1d0>)
   8194c:	4b0e      	ldr	r3, [pc, #56]	; (81988 <Error+0x1d4>)
   8194e:	4798      	blx	r3
   81950:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81954:	b004      	add	sp, #16
   81956:	4770      	bx	lr
   81958:	20000124 	.word	0x20000124
   8195c:	000808ad 	.word	0x000808ad
   81960:	20000001 	.word	0x20000001
   81964:	cccccccd 	.word	0xcccccccd
   81968:	00080859 	.word	0x00080859
   8196c:	009cf293 	.word	0x009cf293
   81970:	00080873 	.word	0x00080873
   81974:	0068a1b7 	.word	0x0068a1b7
   81978:	0139e525 	.word	0x0139e525
   8197c:	0053b493 	.word	0x0053b493
   81980:	51eb851f 	.word	0x51eb851f
   81984:	400e1200 	.word	0x400e1200
   81988:	00080ce1 	.word	0x00080ce1
   8198c:	0008088d 	.word	0x0008088d
   81990:	0014ed25 	.word	0x0014ed25

00081994 <kRtc>:
#define _rtcCalr	((t_RTC_CALR*)&RTC->RTC_CALR)
#define _rtcTimr	((t_RTC_TIMR*)&RTC->RTC_TIMR)


uint32_t kRtc(uint32_t sc,...)
{
   81994:	b40f      	push	{r0, r1, r2, r3}
   81996:	b5f0      	push	{r4, r5, r6, r7, lr}
   81998:	b087      	sub	sp, #28
	uint32_t u1,u2,u3,u4;
	
	switch(sc)
   8199a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8199c:	2964      	cmp	r1, #100	; 0x64
   8199e:	d021      	beq.n	819e4 <kRtc+0x50>
   819a0:	d814      	bhi.n	819cc <kRtc+0x38>
   819a2:	2901      	cmp	r1, #1
   819a4:	f000 810e 	beq.w	81bc4 <kRtc+0x230>
   819a8:	2900      	cmp	r1, #0
   819aa:	f000 80bb 	beq.w	81b24 <kRtc+0x190>
   819ae:	2902      	cmp	r1, #2
   819b0:	d113      	bne.n	819da <kRtc+0x46>
	case _KRTC_IS_SUMMER_TIME:
#define _day	pa1
#define _date	pa2
#define _month	pa3
#define _hour	pa4
		if((_month>MARCH)&&(_month<OCTOBER)) return 1;
   819b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   819b4:	1f1a      	subs	r2, r3, #4
   819b6:	2a05      	cmp	r2, #5
   819b8:	f240 8148 	bls.w	81c4c <kRtc+0x2b8>
		else
		{
			if(_month==MARCH)
   819bc:	2b03      	cmp	r3, #3
   819be:	f000 811b 	beq.w	81bf8 <kRtc+0x264>
					{
						return (((int8_t)(_date-24)-(int8_t)_day)>0);
					}
				}
			}
			else if(_month==OCTOBER)
   819c2:	2b0a      	cmp	r3, #10
   819c4:	f000 812d 	beq.w	81c22 <kRtc+0x28e>
						return (((int8_t)(_date-24)-(int8_t)_day)<=0);
					}
				}
			}
		}
		return 0;
   819c8:	2400      	movs	r4, #0
   819ca:	e0d1      	b.n	81b70 <kRtc+0x1dc>
	switch(sc)
   819cc:	2967      	cmp	r1, #103	; 0x67
   819ce:	d040      	beq.n	81a52 <kRtc+0xbe>
   819d0:	2968      	cmp	r1, #104	; 0x68
   819d2:	f000 808d 	beq.w	81af0 <kRtc+0x15c>
   819d6:	2966      	cmp	r1, #102	; 0x66
   819d8:	d01a      	beq.n	81a10 <kRtc+0x7c>
		//no break;


	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_KRTC_SWITCH_BAD_SC,sc);
   819da:	200e      	movs	r0, #14
   819dc:	4b9e      	ldr	r3, [pc, #632]	; (81c58 <kRtc+0x2c4>)
   819de:	4798      	blx	r3
}
	return 0;
   819e0:	2400      	movs	r4, #0
   819e2:	e0c5      	b.n	81b70 <kRtc+0x1dc>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   819e4:	2000      	movs	r0, #0
   819e6:	4b9d      	ldr	r3, [pc, #628]	; (81c5c <kRtc+0x2c8>)
   819e8:	4798      	blx	r3
		while (!pmc_osc_is_ready_32kxtal());
   819ea:	4c9d      	ldr	r4, [pc, #628]	; (81c60 <kRtc+0x2cc>)
   819ec:	47a0      	blx	r4
   819ee:	2800      	cmp	r0, #0
   819f0:	d0fc      	beq.n	819ec <kRtc+0x58>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   819f2:	4b9c      	ldr	r3, [pc, #624]	; (81c64 <kRtc+0x2d0>)
   819f4:	2104      	movs	r1, #4
   819f6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   819fa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   819fe:	2210      	movs	r2, #16
   81a00:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81a04:	6019      	str	r1, [r3, #0]
		rtc_enable_interrupt(RTC,RTC_IER_SECEN);	//Second IRQ enabled
   81a06:	4898      	ldr	r0, [pc, #608]	; (81c68 <kRtc+0x2d4>)
   81a08:	4b98      	ldr	r3, [pc, #608]	; (81c6c <kRtc+0x2d8>)
   81a0a:	4798      	blx	r3
	return 0;
   81a0c:	2400      	movs	r4, #0
		break;
   81a0e:	e0af      	b.n	81b70 <kRtc+0x1dc>
		_res = rtc_set_time(RTC,_hour,_minute,_second);
   81a10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   81a14:	990d      	ldr	r1, [sp, #52]	; 0x34
   81a16:	4894      	ldr	r0, [pc, #592]	; (81c68 <kRtc+0x2d4>)
   81a18:	4c95      	ldr	r4, [pc, #596]	; (81c70 <kRtc+0x2dc>)
   81a1a:	47a0      	blx	r4
   81a1c:	4604      	mov	r4, r0
   81a1e:	900c      	str	r0, [sp, #48]	; 0x30
		if(_res	== 0)
   81a20:	2800      	cmp	r0, #0
   81a22:	f040 80a5 	bne.w	81b70 <kRtc+0x1dc>
			rtc.summerTime = _kRtcIsSummerTime(_rtcCalr->DAY,_rtcCalr->DATE,_rtcCalr->MONTH,_rtcTimr->HOUR);
   81a26:	4b93      	ldr	r3, [pc, #588]	; (81c74 <kRtc+0x2e0>)
   81a28:	7899      	ldrb	r1, [r3, #2]
   81a2a:	78da      	ldrb	r2, [r3, #3]
   81a2c:	3b04      	subs	r3, #4
   81a2e:	789b      	ldrb	r3, [r3, #2]
   81a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   81a34:	9300      	str	r3, [sp, #0]
   81a36:	f001 031f 	and.w	r3, r1, #31
   81a3a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   81a3e:	0949      	lsrs	r1, r1, #5
   81a40:	2002      	movs	r0, #2
   81a42:	f7ff ffa7 	bl	81994 <kRtc>
   81a46:	4b8c      	ldr	r3, [pc, #560]	; (81c78 <kRtc+0x2e4>)
   81a48:	781a      	ldrb	r2, [r3, #0]
   81a4a:	f360 0282 	bfi	r2, r0, #2, #1
   81a4e:	701a      	strb	r2, [r3, #0]
   81a50:	e08e      	b.n	81b70 <kRtc+0x1dc>
		if((_month==0)||(_month)>12) return -1;
   81a52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   81a54:	1e63      	subs	r3, r4, #1
   81a56:	2b0b      	cmp	r3, #11
   81a58:	d902      	bls.n	81a60 <kRtc+0xcc>
   81a5a:	f04f 34ff 	mov.w	r4, #4294967295
   81a5e:	e087      	b.n	81b70 <kRtc+0x1dc>
		if(_date>nbDaysInMonth[_month-1]+_kRtcIsLeapYear(_centyear)?1:0) return -1;
   81a60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   81a62:	4a86      	ldr	r2, [pc, #536]	; (81c7c <kRtc+0x2e8>)
   81a64:	5cd5      	ldrb	r5, [r2, r3]
   81a66:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   81a68:	4631      	mov	r1, r6
   81a6a:	2001      	movs	r0, #1
   81a6c:	f7ff ff92 	bl	81994 <kRtc>
   81a70:	4428      	add	r0, r5
   81a72:	4287      	cmp	r7, r0
   81a74:	d902      	bls.n	81a7c <kRtc+0xe8>
   81a76:	f04f 34ff 	mov.w	r4, #4294967295
   81a7a:	e079      	b.n	81b70 <kRtc+0x1dc>
		if((_centyear/100>20)||(_centyear/100<19)||(_centyear%100>99)) return -1;
   81a7c:	f2a6 736c 	subw	r3, r6, #1900	; 0x76c
   81a80:	2bc7      	cmp	r3, #199	; 0xc7
   81a82:	d902      	bls.n	81a8a <kRtc+0xf6>
   81a84:	f04f 34ff 	mov.w	r4, #4294967295
   81a88:	e072      	b.n	81b70 <kRtc+0x1dc>
   81a8a:	4d7d      	ldr	r5, [pc, #500]	; (81c80 <kRtc+0x2ec>)
   81a8c:	fba5 3506 	umull	r3, r5, r5, r6
   81a90:	096d      	lsrs	r5, r5, #5
   81a92:	2364      	movs	r3, #100	; 0x64
   81a94:	fb03 6515 	mls	r5, r3, r5, r6
   81a98:	2d63      	cmp	r5, #99	; 0x63
   81a9a:	d902      	bls.n	81aa2 <kRtc+0x10e>
   81a9c:	f04f 34ff 	mov.w	r4, #4294967295
   81aa0:	e066      	b.n	81b70 <kRtc+0x1dc>
		_day = _kRtcDayByDate(_date,_month,_centyear);
   81aa2:	4633      	mov	r3, r6
   81aa4:	4622      	mov	r2, r4
   81aa6:	4639      	mov	r1, r7
   81aa8:	2000      	movs	r0, #0
   81aaa:	f7ff ff73 	bl	81994 <kRtc>
		_res = rtc_set_date(RTC,_centyear%100,_month,_date,_day);
   81aae:	9000      	str	r0, [sp, #0]
   81ab0:	463b      	mov	r3, r7
   81ab2:	4622      	mov	r2, r4
   81ab4:	4629      	mov	r1, r5
   81ab6:	486c      	ldr	r0, [pc, #432]	; (81c68 <kRtc+0x2d4>)
   81ab8:	4c72      	ldr	r4, [pc, #456]	; (81c84 <kRtc+0x2f0>)
   81aba:	47a0      	blx	r4
   81abc:	4604      	mov	r4, r0
   81abe:	900c      	str	r0, [sp, #48]	; 0x30
		if(_res == 0)
   81ac0:	2800      	cmp	r0, #0
   81ac2:	d155      	bne.n	81b70 <kRtc+0x1dc>
			rtc.summerTime = _kRtcIsSummerTime(_rtcCalr->DAY,_rtcCalr->DATE,_rtcCalr->MONTH,_rtcTimr->HOUR);
   81ac4:	4b6b      	ldr	r3, [pc, #428]	; (81c74 <kRtc+0x2e0>)
   81ac6:	7899      	ldrb	r1, [r3, #2]
   81ac8:	78da      	ldrb	r2, [r3, #3]
   81aca:	3b04      	subs	r3, #4
   81acc:	789b      	ldrb	r3, [r3, #2]
   81ace:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   81ad2:	9300      	str	r3, [sp, #0]
   81ad4:	f001 031f 	and.w	r3, r1, #31
   81ad8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   81adc:	0949      	lsrs	r1, r1, #5
   81ade:	2002      	movs	r0, #2
   81ae0:	f7ff ff58 	bl	81994 <kRtc>
   81ae4:	4b64      	ldr	r3, [pc, #400]	; (81c78 <kRtc+0x2e4>)
   81ae6:	781a      	ldrb	r2, [r3, #0]
   81ae8:	f360 0282 	bfi	r2, r0, #2, #1
   81aec:	701a      	strb	r2, [r3, #0]
   81aee:	e03f      	b.n	81b70 <kRtc+0x1dc>
		rtc_get_date(RTC,&_year,&_month,&_date,&_day);
   81af0:	ab02      	add	r3, sp, #8
   81af2:	9300      	str	r3, [sp, #0]
   81af4:	ab03      	add	r3, sp, #12
   81af6:	aa04      	add	r2, sp, #16
   81af8:	a905      	add	r1, sp, #20
   81afa:	485b      	ldr	r0, [pc, #364]	; (81c68 <kRtc+0x2d4>)
   81afc:	4c62      	ldr	r4, [pc, #392]	; (81c88 <kRtc+0x2f4>)
   81afe:	47a0      	blx	r4
		sprintf((char*)_pStr,"%s %d %s %4d",daysOfWeek[_day-1],(int)_date,months[_month-1],(int)_year);
   81b00:	9b02      	ldr	r3, [sp, #8]
   81b02:	3b01      	subs	r3, #1
   81b04:	4a61      	ldr	r2, [pc, #388]	; (81c8c <kRtc+0x2f8>)
   81b06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   81b0a:	9b05      	ldr	r3, [sp, #20]
   81b0c:	9301      	str	r3, [sp, #4]
   81b0e:	9b04      	ldr	r3, [sp, #16]
   81b10:	3b01      	subs	r3, #1
   81b12:	495f      	ldr	r1, [pc, #380]	; (81c90 <kRtc+0x2fc>)
   81b14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   81b18:	9300      	str	r3, [sp, #0]
   81b1a:	9b03      	ldr	r3, [sp, #12]
   81b1c:	495d      	ldr	r1, [pc, #372]	; (81c94 <kRtc+0x300>)
   81b1e:	980d      	ldr	r0, [sp, #52]	; 0x34
   81b20:	4c5d      	ldr	r4, [pc, #372]	; (81c98 <kRtc+0x304>)
   81b22:	47a0      	blx	r4
		if(_month>=3)
   81b24:	990e      	ldr	r1, [sp, #56]	; 0x38
   81b26:	2902      	cmp	r1, #2
   81b28:	d928      	bls.n	81b7c <kRtc+0x1e8>
			_day = ((_month*23)/9 + _date + 4 + _centyear + _centyear/4 - _centyear/100 + _centyear/400 - 2 ) % 7 + 1;
   81b2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   81b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81b2e:	1883      	adds	r3, r0, r2
   81b30:	3302      	adds	r3, #2
   81b32:	eb03 0390 	add.w	r3, r3, r0, lsr #2
   81b36:	4a52      	ldr	r2, [pc, #328]	; (81c80 <kRtc+0x2ec>)
   81b38:	fba2 2000 	umull	r2, r0, r2, r0
   81b3c:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
   81b40:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   81b44:	ebc1 02c2 	rsb	r2, r1, r2, lsl #3
   81b48:	4954      	ldr	r1, [pc, #336]	; (81c9c <kRtc+0x308>)
   81b4a:	fba1 1202 	umull	r1, r2, r1, r2
   81b4e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   81b52:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
   81b56:	4a52      	ldr	r2, [pc, #328]	; (81ca0 <kRtc+0x30c>)
   81b58:	fba2 1203 	umull	r1, r2, r2, r3
   81b5c:	1a99      	subs	r1, r3, r2
   81b5e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   81b62:	0892      	lsrs	r2, r2, #2
   81b64:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   81b68:	1a9b      	subs	r3, r3, r2
   81b6a:	3301      	adds	r3, #1
   81b6c:	930c      	str	r3, [sp, #48]	; 0x30
		return _day; //Normally 1 to 7 !!!!
   81b6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
}
   81b70:	4620      	mov	r0, r4
   81b72:	b007      	add	sp, #28
   81b74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   81b78:	b004      	add	sp, #16
   81b7a:	4770      	bx	lr
			_day = ((_month*23)/9 + _date + 4 + _centyear + (_centyear-1)/4 - (_centyear-1)/100 + (_centyear-1)/400 ) % 7 + 1;
   81b7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81b7e:	1e50      	subs	r0, r2, #1
   81b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81b82:	4413      	add	r3, r2
   81b84:	3304      	adds	r3, #4
   81b86:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   81b8a:	ebc1 02c2 	rsb	r2, r1, r2, lsl #3
   81b8e:	4943      	ldr	r1, [pc, #268]	; (81c9c <kRtc+0x308>)
   81b90:	fba1 1202 	umull	r1, r2, r1, r2
   81b94:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   81b98:	eb03 0390 	add.w	r3, r3, r0, lsr #2
   81b9c:	4a38      	ldr	r2, [pc, #224]	; (81c80 <kRtc+0x2ec>)
   81b9e:	fba2 1200 	umull	r1, r2, r2, r0
   81ba2:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
   81ba6:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
   81baa:	4a3d      	ldr	r2, [pc, #244]	; (81ca0 <kRtc+0x30c>)
   81bac:	fba2 1203 	umull	r1, r2, r2, r3
   81bb0:	1a99      	subs	r1, r3, r2
   81bb2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   81bb6:	0892      	lsrs	r2, r2, #2
   81bb8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   81bbc:	1a9b      	subs	r3, r3, r2
   81bbe:	3301      	adds	r3, #1
   81bc0:	930c      	str	r3, [sp, #48]	; 0x30
   81bc2:	e7d4      	b.n	81b6e <kRtc+0x1da>
		return (((_centyear%4==0)&&(_centyear%100!=0)) || (_centyear%400==0));
   81bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81bc6:	f013 0f03 	tst.w	r3, #3
   81bca:	d107      	bne.n	81bdc <kRtc+0x248>
   81bcc:	4a2c      	ldr	r2, [pc, #176]	; (81c80 <kRtc+0x2ec>)
   81bce:	fba2 1203 	umull	r1, r2, r2, r3
   81bd2:	0952      	lsrs	r2, r2, #5
   81bd4:	2164      	movs	r1, #100	; 0x64
   81bd6:	fb01 3212 	mls	r2, r1, r2, r3
   81bda:	b95a      	cbnz	r2, 81bf4 <kRtc+0x260>
   81bdc:	4c28      	ldr	r4, [pc, #160]	; (81c80 <kRtc+0x2ec>)
   81bde:	fba4 2403 	umull	r2, r4, r4, r3
   81be2:	09e4      	lsrs	r4, r4, #7
   81be4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   81be8:	fb02 3414 	mls	r4, r2, r4, r3
   81bec:	fab4 f484 	clz	r4, r4
   81bf0:	0964      	lsrs	r4, r4, #5
   81bf2:	e7bd      	b.n	81b70 <kRtc+0x1dc>
   81bf4:	2401      	movs	r4, #1
   81bf6:	e7bb      	b.n	81b70 <kRtc+0x1dc>
				if(_date>=25)
   81bf8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   81bfa:	2c18      	cmp	r4, #24
   81bfc:	d928      	bls.n	81c50 <kRtc+0x2bc>
					if(_day==SUNDAY)
   81bfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81c00:	2a01      	cmp	r2, #1
   81c02:	d008      	beq.n	81c16 <kRtc+0x282>
						return (((int8_t)(_date-24)-(int8_t)_day)>0);
   81c04:	3c18      	subs	r4, #24
   81c06:	b264      	sxtb	r4, r4
   81c08:	b252      	sxtb	r2, r2
   81c0a:	1aa4      	subs	r4, r4, r2
   81c0c:	2c00      	cmp	r4, #0
   81c0e:	bfd4      	ite	le
   81c10:	2400      	movle	r4, #0
   81c12:	2401      	movgt	r4, #1
   81c14:	e7ac      	b.n	81b70 <kRtc+0x1dc>
						if(_hour>=2) return 1;
   81c16:	9c10      	ldr	r4, [sp, #64]	; 0x40
   81c18:	2c01      	cmp	r4, #1
   81c1a:	bf94      	ite	ls
   81c1c:	2400      	movls	r4, #0
   81c1e:	2401      	movhi	r4, #1
   81c20:	e7a6      	b.n	81b70 <kRtc+0x1dc>
				if(_date>=25)
   81c22:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   81c24:	2c18      	cmp	r4, #24
   81c26:	d915      	bls.n	81c54 <kRtc+0x2c0>
					if(_day==SUNDAY)
   81c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81c2a:	2a01      	cmp	r2, #1
   81c2c:	d008      	beq.n	81c40 <kRtc+0x2ac>
						return (((int8_t)(_date-24)-(int8_t)_day)<=0);
   81c2e:	3c18      	subs	r4, #24
   81c30:	b264      	sxtb	r4, r4
   81c32:	b252      	sxtb	r2, r2
   81c34:	1aa4      	subs	r4, r4, r2
   81c36:	2c00      	cmp	r4, #0
   81c38:	bfcc      	ite	gt
   81c3a:	2400      	movgt	r4, #0
   81c3c:	2401      	movle	r4, #1
   81c3e:	e797      	b.n	81b70 <kRtc+0x1dc>
						if(_hour<2) return 1;
   81c40:	9c10      	ldr	r4, [sp, #64]	; 0x40
   81c42:	2c01      	cmp	r4, #1
   81c44:	bf8c      	ite	hi
   81c46:	2400      	movhi	r4, #0
   81c48:	2401      	movls	r4, #1
   81c4a:	e791      	b.n	81b70 <kRtc+0x1dc>
		if((_month>MARCH)&&(_month<OCTOBER)) return 1;
   81c4c:	2401      	movs	r4, #1
   81c4e:	e78f      	b.n	81b70 <kRtc+0x1dc>
		return 0;
   81c50:	2400      	movs	r4, #0
   81c52:	e78d      	b.n	81b70 <kRtc+0x1dc>
   81c54:	2400      	movs	r4, #0
   81c56:	e78b      	b.n	81b70 <kRtc+0x1dc>
   81c58:	000817b5 	.word	0x000817b5
   81c5c:	000809e1 	.word	0x000809e1
   81c60:	00080a05 	.word	0x00080a05
   81c64:	e000e100 	.word	0xe000e100
   81c68:	400e1260 	.word	0x400e1260
   81c6c:	00080ced 	.word	0x00080ced
   81c70:	00080d4d 	.word	0x00080d4d
   81c74:	400e126c 	.word	0x400e126c
   81c78:	200010b8 	.word	0x200010b8
   81c7c:	00088b84 	.word	0x00088b84
   81c80:	51eb851f 	.word	0x51eb851f
   81c84:	00080e55 	.word	0x00080e55
   81c88:	00080de1 	.word	0x00080de1
   81c8c:	2000052c 	.word	0x2000052c
   81c90:	20000548 	.word	0x20000548
   81c94:	00088b74 	.word	0x00088b74
   81c98:	00083e71 	.word	0x00083e71
   81c9c:	38e38e39 	.word	0x38e38e39
   81ca0:	24924925 	.word	0x24924925

00081ca4 <RTC_Handler>:
enum{
	_SHELL_PROMPT = 4
};

void RTC_Handler(void)
{
   81ca4:	b510      	push	{r4, lr}
   81ca6:	b082      	sub	sp, #8
	rtc_clear_status(RTC,RTC_SCCR_SECCLR);
   81ca8:	2104      	movs	r1, #4
   81caa:	4806      	ldr	r0, [pc, #24]	; (81cc4 <RTC_Handler+0x20>)
   81cac:	4b06      	ldr	r3, [pc, #24]	; (81cc8 <RTC_Handler+0x24>)
   81cae:	4798      	blx	r3
	PushTask(Shell,_SHELL_PROMPT,0,0);
   81cb0:	2300      	movs	r3, #0
   81cb2:	9300      	str	r3, [sp, #0]
   81cb4:	2204      	movs	r2, #4
   81cb6:	4905      	ldr	r1, [pc, #20]	; (81ccc <RTC_Handler+0x28>)
   81cb8:	2066      	movs	r0, #102	; 0x66
   81cba:	4c05      	ldr	r4, [pc, #20]	; (81cd0 <RTC_Handler+0x2c>)
   81cbc:	47a0      	blx	r4
}
   81cbe:	b002      	add	sp, #8
   81cc0:	bd10      	pop	{r4, pc}
   81cc2:	bf00      	nop
   81cc4:	400e1260 	.word	0x400e1260
   81cc8:	00080f0d 	.word	0x00080f0d
   81ccc:	00082135 	.word	0x00082135
   81cd0:	00083519 	.word	0x00083519

00081cd4 <Lcd>:
}lcd;

#define ST_LCD_ON		0x0000001

uint32_t Lcd(uint32_t sc, ...)
{
   81cd4:	b40f      	push	{r0, r1, r2, r3}
   81cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float col;

	switch(sc)
   81cd8:	9906      	ldr	r1, [sp, #24]
   81cda:	1e4b      	subs	r3, r1, #1
   81cdc:	2b68      	cmp	r3, #104	; 0x68
   81cde:	f200 8217 	bhi.w	82110 <Lcd+0x43c>
   81ce2:	e8df f013 	tbh	[pc, r3, lsl #1]
   81ce6:	0111      	.short	0x0111
   81ce8:	016b0161 	.word	0x016b0161
   81cec:	01940182 	.word	0x01940182
   81cf0:	01ac01a0 	.word	0x01ac01a0
   81cf4:	01cf021a 	.word	0x01cf021a
   81cf8:	021501f2 	.word	0x021501f2
   81cfc:	02150215 	.word	0x02150215
   81d00:	02150215 	.word	0x02150215
   81d04:	02150215 	.word	0x02150215
   81d08:	02150215 	.word	0x02150215
   81d0c:	02150215 	.word	0x02150215
   81d10:	02150215 	.word	0x02150215
   81d14:	02150215 	.word	0x02150215
   81d18:	02150215 	.word	0x02150215
   81d1c:	02150215 	.word	0x02150215
   81d20:	02150215 	.word	0x02150215
   81d24:	02150215 	.word	0x02150215
   81d28:	02150215 	.word	0x02150215
   81d2c:	02150215 	.word	0x02150215
   81d30:	02150215 	.word	0x02150215
   81d34:	02150215 	.word	0x02150215
   81d38:	02150215 	.word	0x02150215
   81d3c:	02150215 	.word	0x02150215
   81d40:	02150215 	.word	0x02150215
   81d44:	02150215 	.word	0x02150215
   81d48:	02150215 	.word	0x02150215
   81d4c:	02150215 	.word	0x02150215
   81d50:	02150215 	.word	0x02150215
   81d54:	02150215 	.word	0x02150215
   81d58:	02150215 	.word	0x02150215
   81d5c:	02150215 	.word	0x02150215
   81d60:	02150215 	.word	0x02150215
   81d64:	02150215 	.word	0x02150215
   81d68:	02150215 	.word	0x02150215
   81d6c:	02150215 	.word	0x02150215
   81d70:	02150215 	.word	0x02150215
   81d74:	02150215 	.word	0x02150215
   81d78:	02150215 	.word	0x02150215
   81d7c:	02150215 	.word	0x02150215
   81d80:	02150215 	.word	0x02150215
   81d84:	02150215 	.word	0x02150215
   81d88:	02150215 	.word	0x02150215
   81d8c:	02150215 	.word	0x02150215
   81d90:	02150215 	.word	0x02150215
   81d94:	02150215 	.word	0x02150215
   81d98:	02150215 	.word	0x02150215
   81d9c:	02150215 	.word	0x02150215
   81da0:	02150215 	.word	0x02150215
   81da4:	02150215 	.word	0x02150215
   81da8:	02150215 	.word	0x02150215
   81dac:	00b80069 	.word	0x00b80069
   81db0:	00e20106 	.word	0x00e20106
   81db4:	017500dd 	.word	0x017500dd
	{
	case LCD_NEW:
		_LcdSetDataLineOut();
   81db8:	2009      	movs	r0, #9
   81dba:	f7ff ff8b 	bl	81cd4 <Lcd>
		gpio_configure_pin(LCD_E,			LCD_PIN_OUT_FLAGS);
   81dbe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81dc2:	2004      	movs	r0, #4
   81dc4:	4ca5      	ldr	r4, [pc, #660]	; (8205c <Lcd+0x388>)
   81dc6:	47a0      	blx	r4
		gpio_configure_pin(LCD_RWB,			LCD_PIN_OUT_FLAGS);
   81dc8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81dcc:	2005      	movs	r0, #5
   81dce:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,			LCD_PIN_OUT_FLAGS);
   81dd0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81dd4:	2006      	movs	r0, #6
   81dd6:	47a0      	blx	r4
		gpio_configure_pin(LCD_BACKLIGHT,	LCD_PIN_OUT_FLAGS);
   81dd8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81ddc:	2007      	movs	r0, #7
   81dde:	47a0      	blx	r4

		gpio_set_pin_low(LCD_E);
   81de0:	2004      	movs	r0, #4
   81de2:	4c9f      	ldr	r4, [pc, #636]	; (82060 <Lcd+0x38c>)
   81de4:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   81de6:	2006      	movs	r0, #6
   81de8:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RWB);
   81dea:	2005      	movs	r0, #5
   81dec:	47a0      	blx	r4
		gpio_set_pin_high(LCD_BACKLIGHT);
   81dee:	2007      	movs	r0, #7
   81df0:	4b9c      	ldr	r3, [pc, #624]	; (82064 <Lcd+0x390>)
   81df2:	4798      	blx	r3

		delay_ms(500);
   81df4:	489c      	ldr	r0, [pc, #624]	; (82068 <Lcd+0x394>)
   81df6:	4c9d      	ldr	r4, [pc, #628]	; (8206c <Lcd+0x398>)
   81df8:	47a0      	blx	r4

#ifdef LCD_USE_8_BIT_INTERFACE
		//8 bit data interface/////////////////////////////
		_LcdWriteInst(0x30);
   81dfa:	2130      	movs	r1, #48	; 0x30
   81dfc:	2002      	movs	r0, #2
   81dfe:	f7ff ff69 	bl	81cd4 <Lcd>
		delay_ms(6);
   81e02:	f24a 00b7 	movw	r0, #41143	; 0xa0b7
   81e06:	47a0      	blx	r4
		_LcdWriteInst(0x30);
   81e08:	2130      	movs	r1, #48	; 0x30
   81e0a:	2002      	movs	r0, #2
   81e0c:	f7ff ff62 	bl	81cd4 <Lcd>
		delay_ms(2);
   81e10:	f243 5093 	movw	r0, #13715	; 0x3593
   81e14:	47a0      	blx	r4
		_LcdWriteInst(0x30);
   81e16:	2130      	movs	r1, #48	; 0x30
   81e18:	2002      	movs	r0, #2
   81e1a:	f7ff ff5b 	bl	81cd4 <Lcd>
		delay_ms(2);
   81e1e:	f243 5093 	movw	r0, #13715	; 0x3593
   81e22:	47a0      	blx	r4
		_LcdWriteInst(0x38);	//SET FUNCTION : 8 bits interface/2 line display/5x7 dots
   81e24:	2138      	movs	r1, #56	; 0x38
   81e26:	2002      	movs	r0, #2
   81e28:	f7ff ff54 	bl	81cd4 <Lcd>
		delay_ms(10);
		_LcdWriteByte(0x20);
		delay_ms(10);
		_LcdWriteInst(0x28);	//SET FUNCTION : 4 bits interface/2 line display/5x7 dots
#endif
		_LcdWriteInst(0x08);	//DISPLAY OFF
   81e2c:	2108      	movs	r1, #8
   81e2e:	2002      	movs	r0, #2
   81e30:	f7ff ff50 	bl	81cd4 <Lcd>
		_LcdWriteInst(0x01);	//DISPLAY CLEAR
   81e34:	2101      	movs	r1, #1
   81e36:	2002      	movs	r0, #2
   81e38:	f7ff ff4c 	bl	81cd4 <Lcd>
		_LcdWriteInst(0x06);	//ENTRY MODE SET : Cursor Increase/Display is not shift
   81e3c:	2106      	movs	r1, #6
   81e3e:	2002      	movs	r0, #2
   81e40:	f7ff ff48 	bl	81cd4 <Lcd>
		_LcdWriteInst(0x0C);	//DISPLAY ON/CURSOR OFF
   81e44:	210c      	movs	r1, #12
   81e46:	2002      	movs	r0, #2
   81e48:	f7ff ff44 	bl	81cd4 <Lcd>

		lcd.status = ST_LCD_ON;
   81e4c:	2201      	movs	r2, #1
   81e4e:	4b88      	ldr	r3, [pc, #544]	; (82070 <Lcd+0x39c>)
   81e50:	601a      	str	r2, [r3, #0]

	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_LCD_SWITCH_BAD_SC,sc);
	}
	return 0;
   81e52:	2400      	movs	r4, #0
		break;
   81e54:	e162      	b.n	8211c <Lcd+0x448>
		_LcdWriteInst(0x08);	//DISPLAY OFF
   81e56:	2108      	movs	r1, #8
   81e58:	2002      	movs	r0, #2
   81e5a:	f7ff ff3b 	bl	81cd4 <Lcd>
		_LcdSetDataLineIn();
   81e5e:	200a      	movs	r0, #10
   81e60:	f7ff ff38 	bl	81cd4 <Lcd>
		gpio_configure_pin(LCD_E,			LCD_PIN_OUT_FLAGS);
   81e64:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81e68:	2004      	movs	r0, #4
   81e6a:	4c7c      	ldr	r4, [pc, #496]	; (8205c <Lcd+0x388>)
   81e6c:	47a0      	blx	r4
		gpio_configure_pin(LCD_RWB,			LCD_PIN_OUT_FLAGS);
   81e6e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81e72:	2005      	movs	r0, #5
   81e74:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,			LCD_PIN_OUT_FLAGS);
   81e76:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81e7a:	2006      	movs	r0, #6
   81e7c:	47a0      	blx	r4
		gpio_configure_pin(LCD_BACKLIGHT,	LCD_PIN_OUT_FLAGS);
   81e7e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81e82:	2007      	movs	r0, #7
   81e84:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   81e86:	2004      	movs	r0, #4
   81e88:	4c75      	ldr	r4, [pc, #468]	; (82060 <Lcd+0x38c>)
   81e8a:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   81e8c:	2006      	movs	r0, #6
   81e8e:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RWB);
   81e90:	2005      	movs	r0, #5
   81e92:	47a0      	blx	r4
		gpio_set_pin_low(LCD_BACKLIGHT);
   81e94:	2007      	movs	r0, #7
   81e96:	47a0      	blx	r4
		lcd.status=0;
   81e98:	2400      	movs	r4, #0
   81e9a:	4b75      	ldr	r3, [pc, #468]	; (82070 <Lcd+0x39c>)
   81e9c:	601c      	str	r4, [r3, #0]
		break;
   81e9e:	e13d      	b.n	8211c <Lcd+0x448>
		return (uint32_t)(mIsBitsSet(lcd.status,ST_LCD_ON));
   81ea0:	4b73      	ldr	r3, [pc, #460]	; (82070 <Lcd+0x39c>)
   81ea2:	681c      	ldr	r4, [r3, #0]
   81ea4:	f004 0401 	and.w	r4, r4, #1
   81ea8:	e138      	b.n	8211c <Lcd+0x448>
		_LcdSetCursor(_line,0);
   81eaa:	9f08      	ldr	r7, [sp, #32]
   81eac:	2200      	movs	r2, #0
   81eae:	4639      	mov	r1, r7
   81eb0:	2007      	movs	r0, #7
   81eb2:	f7ff ff0f 	bl	81cd4 <Lcd>
   81eb6:	2414      	movs	r4, #20
			_LcdWriteData(' ');
   81eb8:	2620      	movs	r6, #32
   81eba:	2503      	movs	r5, #3
   81ebc:	4631      	mov	r1, r6
   81ebe:	4628      	mov	r0, r5
   81ec0:	f7ff ff08 	bl	81cd4 <Lcd>
		for(int i=0;i<20;i++)
   81ec4:	3c01      	subs	r4, #1
   81ec6:	d1f9      	bne.n	81ebc <Lcd+0x1e8>
		_LcdSetCursor(_line,_col);
   81ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   81eca:	4639      	mov	r1, r7
   81ecc:	2007      	movs	r0, #7
   81ece:	f7ff ff01 	bl	81cd4 <Lcd>
		while(*(char*)_str)
   81ed2:	9c07      	ldr	r4, [sp, #28]
   81ed4:	7821      	ldrb	r1, [r4, #0]
   81ed6:	2900      	cmp	r1, #0
   81ed8:	f000 8125 	beq.w	82126 <Lcd+0x452>
			_LcdWriteData(*(char*)_str++);
   81edc:	2503      	movs	r5, #3
   81ede:	3401      	adds	r4, #1
   81ee0:	9407      	str	r4, [sp, #28]
   81ee2:	4628      	mov	r0, r5
   81ee4:	f7ff fef6 	bl	81cd4 <Lcd>
		while(*(char*)_str)
   81ee8:	7821      	ldrb	r1, [r4, #0]
   81eea:	2900      	cmp	r1, #0
   81eec:	d1f7      	bne.n	81ede <Lcd+0x20a>
	return 0;
   81eee:	2400      	movs	r4, #0
   81ef0:	e114      	b.n	8211c <Lcd+0x448>
		if(_onOff)
   81ef2:	9c07      	ldr	r4, [sp, #28]
   81ef4:	b124      	cbz	r4, 81f00 <Lcd+0x22c>
			gpio_set_pin_high(LCD_BACKLIGHT);
   81ef6:	2007      	movs	r0, #7
   81ef8:	4b5a      	ldr	r3, [pc, #360]	; (82064 <Lcd+0x390>)
   81efa:	4798      	blx	r3
	return 0;
   81efc:	2400      	movs	r4, #0
   81efe:	e10d      	b.n	8211c <Lcd+0x448>
			gpio_set_pin_low(LCD_BACKLIGHT);
   81f00:	2007      	movs	r0, #7
   81f02:	4b57      	ldr	r3, [pc, #348]	; (82060 <Lcd+0x38c>)
   81f04:	4798      	blx	r3
   81f06:	e109      	b.n	8211c <Lcd+0x448>
		_LcdSetDataLineOut();
   81f08:	2009      	movs	r0, #9
   81f0a:	f7ff fee3 	bl	81cd4 <Lcd>
		gpio_set_pin_low(LCD_RWB);
   81f0e:	2005      	movs	r0, #5
   81f10:	4b53      	ldr	r3, [pc, #332]	; (82060 <Lcd+0x38c>)
   81f12:	4798      	blx	r3
		_LcdEup();
   81f14:	2005      	movs	r0, #5
   81f16:	f7ff fedd 	bl	81cd4 <Lcd>
		(_byte&0x80)?gpio_set_pin_high(LCD_DB7):gpio_set_pin_low(LCD_DB7);
   81f1a:	9c07      	ldr	r4, [sp, #28]
   81f1c:	f014 0f80 	tst.w	r4, #128	; 0x80
   81f20:	f04f 0003 	mov.w	r0, #3
   81f24:	bf14      	ite	ne
   81f26:	4b4f      	ldrne	r3, [pc, #316]	; (82064 <Lcd+0x390>)
   81f28:	4b4d      	ldreq	r3, [pc, #308]	; (82060 <Lcd+0x38c>)
   81f2a:	4798      	blx	r3
		(_byte&0x40)?gpio_set_pin_high(LCD_DB6):gpio_set_pin_low(LCD_DB6);
   81f2c:	b2e4      	uxtb	r4, r4
   81f2e:	f014 0f40 	tst.w	r4, #64	; 0x40
   81f32:	f04f 0002 	mov.w	r0, #2
   81f36:	bf14      	ite	ne
   81f38:	4b4a      	ldrne	r3, [pc, #296]	; (82064 <Lcd+0x390>)
   81f3a:	4b49      	ldreq	r3, [pc, #292]	; (82060 <Lcd+0x38c>)
   81f3c:	4798      	blx	r3
		(_byte&0x20)?gpio_set_pin_high(LCD_DB5):gpio_set_pin_low(LCD_DB5);
   81f3e:	f014 0f20 	tst.w	r4, #32
   81f42:	f04f 0001 	mov.w	r0, #1
   81f46:	bf14      	ite	ne
   81f48:	4b46      	ldrne	r3, [pc, #280]	; (82064 <Lcd+0x390>)
   81f4a:	4b45      	ldreq	r3, [pc, #276]	; (82060 <Lcd+0x38c>)
   81f4c:	4798      	blx	r3
		(_byte&0x10)?gpio_set_pin_high(LCD_DB4):gpio_set_pin_low(LCD_DB4);
   81f4e:	f014 0f10 	tst.w	r4, #16
   81f52:	f04f 0000 	mov.w	r0, #0
   81f56:	bf14      	ite	ne
   81f58:	4b42      	ldrne	r3, [pc, #264]	; (82064 <Lcd+0x390>)
   81f5a:	4b41      	ldreq	r3, [pc, #260]	; (82060 <Lcd+0x38c>)
   81f5c:	4798      	blx	r3
		(_byte&0x08)?gpio_set_pin_high(LCD_DB3):gpio_set_pin_low(LCD_DB3);
   81f5e:	f014 0f08 	tst.w	r4, #8
   81f62:	f04f 002b 	mov.w	r0, #43	; 0x2b
   81f66:	bf14      	ite	ne
   81f68:	4b3e      	ldrne	r3, [pc, #248]	; (82064 <Lcd+0x390>)
   81f6a:	4b3d      	ldreq	r3, [pc, #244]	; (82060 <Lcd+0x38c>)
   81f6c:	4798      	blx	r3
		(_byte&0x04)?gpio_set_pin_high(LCD_DB2):gpio_set_pin_low(LCD_DB2);
   81f6e:	f014 0f04 	tst.w	r4, #4
   81f72:	f04f 002a 	mov.w	r0, #42	; 0x2a
   81f76:	bf14      	ite	ne
   81f78:	4b3a      	ldrne	r3, [pc, #232]	; (82064 <Lcd+0x390>)
   81f7a:	4b39      	ldreq	r3, [pc, #228]	; (82060 <Lcd+0x38c>)
   81f7c:	4798      	blx	r3
		(_byte&0x02)?gpio_set_pin_high(LCD_DB1):gpio_set_pin_low(LCD_DB1);
   81f7e:	f014 0f02 	tst.w	r4, #2
   81f82:	f04f 0029 	mov.w	r0, #41	; 0x29
   81f86:	bf14      	ite	ne
   81f88:	4b36      	ldrne	r3, [pc, #216]	; (82064 <Lcd+0x390>)
   81f8a:	4b35      	ldreq	r3, [pc, #212]	; (82060 <Lcd+0x38c>)
   81f8c:	4798      	blx	r3
		(_byte&0x01)?gpio_set_pin_high(LCD_DB0):gpio_set_pin_low(LCD_DB0);
   81f8e:	f014 0f01 	tst.w	r4, #1
   81f92:	f04f 0028 	mov.w	r0, #40	; 0x28
   81f96:	bf14      	ite	ne
   81f98:	4b32      	ldrne	r3, [pc, #200]	; (82064 <Lcd+0x390>)
   81f9a:	4b31      	ldreq	r3, [pc, #196]	; (82060 <Lcd+0x38c>)
   81f9c:	4798      	blx	r3
		_LcdEdown();
   81f9e:	2006      	movs	r0, #6
   81fa0:	f7ff fe98 	bl	81cd4 <Lcd>
	return 0;
   81fa4:	2400      	movs	r4, #0
		break;
   81fa6:	e0b9      	b.n	8211c <Lcd+0x448>
		gpio_set_pin_low(LCD_RS);
   81fa8:	2006      	movs	r0, #6
   81faa:	4b2d      	ldr	r3, [pc, #180]	; (82060 <Lcd+0x38c>)
   81fac:	4798      	blx	r3
		_LcdWriteByte(_inst);
   81fae:	f89d 101c 	ldrb.w	r1, [sp, #28]
   81fb2:	2001      	movs	r0, #1
   81fb4:	f7ff fe8e 	bl	81cd4 <Lcd>
	return 0;
   81fb8:	2400      	movs	r4, #0
		break;
   81fba:	e0af      	b.n	8211c <Lcd+0x448>
		gpio_set_pin_high(LCD_RS);
   81fbc:	2006      	movs	r0, #6
   81fbe:	4b29      	ldr	r3, [pc, #164]	; (82064 <Lcd+0x390>)
   81fc0:	4798      	blx	r3
		_LcdWriteByte(_data);
   81fc2:	f89d 101c 	ldrb.w	r1, [sp, #28]
   81fc6:	2001      	movs	r0, #1
   81fc8:	f7ff fe84 	bl	81cd4 <Lcd>
	return 0;
   81fcc:	2400      	movs	r4, #0
		break;
   81fce:	e0a5      	b.n	8211c <Lcd+0x448>
			col = 20 - _len;
   81fd0:	9807      	ldr	r0, [sp, #28]
   81fd2:	f1c0 0014 	rsb	r0, r0, #20
   81fd6:	4b27      	ldr	r3, [pc, #156]	; (82074 <Lcd+0x3a0>)
   81fd8:	4798      	blx	r3
			col = col/2;
   81fda:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   81fde:	4b26      	ldr	r3, [pc, #152]	; (82078 <Lcd+0x3a4>)
   81fe0:	4798      	blx	r3
			return col;
   81fe2:	4b26      	ldr	r3, [pc, #152]	; (8207c <Lcd+0x3a8>)
   81fe4:	4798      	blx	r3
   81fe6:	4604      	mov	r4, r0
   81fe8:	e098      	b.n	8211c <Lcd+0x448>
		delay_us(500);
   81fea:	f640 5065 	movw	r0, #3429	; 0xd65
   81fee:	4c1f      	ldr	r4, [pc, #124]	; (8206c <Lcd+0x398>)
   81ff0:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   81ff2:	2004      	movs	r0, #4
   81ff4:	4b1b      	ldr	r3, [pc, #108]	; (82064 <Lcd+0x390>)
   81ff6:	4798      	blx	r3
		delay_us(100);
   81ff8:	f240 20ae 	movw	r0, #686	; 0x2ae
   81ffc:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   81ffe:	2004      	movs	r0, #4
   82000:	4b17      	ldr	r3, [pc, #92]	; (82060 <Lcd+0x38c>)
   82002:	4798      	blx	r3
		delay_us(500);
   82004:	f640 5065 	movw	r0, #3429	; 0xd65
   82008:	47a0      	blx	r4
	return 0;
   8200a:	2400      	movs	r4, #0
		break;
   8200c:	e086      	b.n	8211c <Lcd+0x448>
		delay_us(500);
   8200e:	f640 5065 	movw	r0, #3429	; 0xd65
   82012:	4c16      	ldr	r4, [pc, #88]	; (8206c <Lcd+0x398>)
   82014:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   82016:	2004      	movs	r0, #4
   82018:	4b12      	ldr	r3, [pc, #72]	; (82064 <Lcd+0x390>)
   8201a:	4798      	blx	r3
		delay_us(50);
   8201c:	f240 1057 	movw	r0, #343	; 0x157
   82020:	47a0      	blx	r4
	return 0;
   82022:	2400      	movs	r4, #0
		break;
   82024:	e07a      	b.n	8211c <Lcd+0x448>
		delay_us(50);
   82026:	f240 1057 	movw	r0, #343	; 0x157
   8202a:	4c10      	ldr	r4, [pc, #64]	; (8206c <Lcd+0x398>)
   8202c:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   8202e:	2004      	movs	r0, #4
   82030:	4b0b      	ldr	r3, [pc, #44]	; (82060 <Lcd+0x38c>)
   82032:	4798      	blx	r3
		delay_us(500);
   82034:	f640 5065 	movw	r0, #3429	; 0xd65
   82038:	47a0      	blx	r4
	return 0;
   8203a:	2400      	movs	r4, #0
		break;
   8203c:	e06e      	b.n	8211c <Lcd+0x448>
		_LcdWriteInst((line2addr[_nLine&0x03]+_nCol)|0x80);
   8203e:	9b07      	ldr	r3, [sp, #28]
   82040:	f003 0303 	and.w	r3, r3, #3
   82044:	4a0e      	ldr	r2, [pc, #56]	; (82080 <Lcd+0x3ac>)
   82046:	5cd1      	ldrb	r1, [r2, r3]
   82048:	9b08      	ldr	r3, [sp, #32]
   8204a:	4419      	add	r1, r3
   8204c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   82050:	2002      	movs	r0, #2
   82052:	f7ff fe3f 	bl	81cd4 <Lcd>
	return 0;
   82056:	2400      	movs	r4, #0
		break;
   82058:	e060      	b.n	8211c <Lcd+0x448>
   8205a:	bf00      	nop
   8205c:	000808ad 	.word	0x000808ad
   82060:	00080873 	.word	0x00080873
   82064:	00080859 	.word	0x00080859
   82068:	003450dc 	.word	0x003450dc
   8206c:	20000001 	.word	0x20000001
   82070:	200010bc 	.word	0x200010bc
   82074:	000839ed 	.word	0x000839ed
   82078:	00083a9d 	.word	0x00083a9d
   8207c:	00083d3d 	.word	0x00083d3d
   82080:	00088c40 	.word	0x00088c40
		gpio_configure_pin(LCD_DB4,			LCD_PIN_OUT_FLAGS);
   82084:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82088:	2000      	movs	r0, #0
   8208a:	4c28      	ldr	r4, [pc, #160]	; (8212c <Lcd+0x458>)
   8208c:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB5,			LCD_PIN_OUT_FLAGS);
   8208e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82092:	2001      	movs	r0, #1
   82094:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB6,			LCD_PIN_OUT_FLAGS);
   82096:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8209a:	2002      	movs	r0, #2
   8209c:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB7,			LCD_PIN_OUT_FLAGS);
   8209e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820a2:	2003      	movs	r0, #3
   820a4:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB0,			LCD_PIN_OUT_FLAGS);
   820a6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820aa:	2028      	movs	r0, #40	; 0x28
   820ac:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB1,			LCD_PIN_OUT_FLAGS);
   820ae:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820b2:	2029      	movs	r0, #41	; 0x29
   820b4:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB2,			LCD_PIN_OUT_FLAGS);
   820b6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820ba:	202a      	movs	r0, #42	; 0x2a
   820bc:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB3,			LCD_PIN_OUT_FLAGS);
   820be:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820c2:	202b      	movs	r0, #43	; 0x2b
   820c4:	47a0      	blx	r4
	return 0;
   820c6:	2400      	movs	r4, #0
		break;
   820c8:	e028      	b.n	8211c <Lcd+0x448>
		gpio_configure_pin(LCD_DB4,			LCD_PIN_IN_FLAGS);
   820ca:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   820ce:	2000      	movs	r0, #0
   820d0:	4c16      	ldr	r4, [pc, #88]	; (8212c <Lcd+0x458>)
   820d2:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB5,			LCD_PIN_IN_FLAGS);
   820d4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   820d8:	2001      	movs	r0, #1
   820da:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB6,			LCD_PIN_IN_FLAGS);
   820dc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   820e0:	2002      	movs	r0, #2
   820e2:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB7,			LCD_PIN_IN_FLAGS);
   820e4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   820e8:	2003      	movs	r0, #3
   820ea:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB0,			LCD_PIN_IN_FLAGS);
   820ec:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   820f0:	2028      	movs	r0, #40	; 0x28
   820f2:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB1,			LCD_PIN_IN_FLAGS);
   820f4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   820f8:	2029      	movs	r0, #41	; 0x29
   820fa:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB2,			LCD_PIN_IN_FLAGS);
   820fc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82100:	202a      	movs	r0, #42	; 0x2a
   82102:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB3,			LCD_PIN_IN_FLAGS);
   82104:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82108:	202b      	movs	r0, #43	; 0x2b
   8210a:	47a0      	blx	r4
	return 0;
   8210c:	2400      	movs	r4, #0
		break;
   8210e:	e005      	b.n	8211c <Lcd+0x448>
		Error(ERROR_LCD_SWITCH_BAD_SC,sc);
   82110:	200f      	movs	r0, #15
   82112:	4b07      	ldr	r3, [pc, #28]	; (82130 <Lcd+0x45c>)
   82114:	4798      	blx	r3
	return 0;
   82116:	2400      	movs	r4, #0
   82118:	e000      	b.n	8211c <Lcd+0x448>
   8211a:	2400      	movs	r4, #0
   8211c:	4620      	mov	r0, r4
   8211e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   82122:	b004      	add	sp, #16
   82124:	4770      	bx	lr
	return 0;
   82126:	2400      	movs	r4, #0
   82128:	e7f8      	b.n	8211c <Lcd+0x448>
   8212a:	bf00      	nop
   8212c:	000808ad 	.word	0x000808ad
   82130:	000817b5 	.word	0x000817b5

00082134 <Shell>:

#define EnterEditMode()					mBitsSet(shell.status,ST_SHELL_PROMPT_DISABLED)
#define ExitEditMode()					mBitsClr(shell.status,ST_SHELL_PROMPT_DISABLED)

uint32_t Shell(uint32_t sc, ...)
{
   82134:	b40f      	push	{r0, r1, r2, r3}
   82136:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8213a:	b087      	sub	sp, #28
	uint32_t u1,u2;
	char*pSt;

	switch(sc)
   8213c:	990e      	ldr	r1, [sp, #56]	; 0x38
   8213e:	2904      	cmp	r1, #4
   82140:	f000 80a1 	beq.w	82286 <Shell+0x152>
   82144:	d940      	bls.n	821c8 <Shell+0x94>
   82146:	2906      	cmp	r1, #6
   82148:	d054      	beq.n	821f4 <Shell+0xc0>
   8214a:	d362      	bcc.n	82212 <Shell+0xde>
   8214c:	2907      	cmp	r1, #7
   8214e:	f000 85e9 	beq.w	82d24 <Shell+0xbf0>
   82152:	2964      	cmp	r1, #100	; 0x64
   82154:	f040 8666 	bne.w	82e24 <Shell+0xcf0>
	{
	case SHELL_NEW:
		shell.editTimer=shell.escapeTimer=0;
   82158:	4b9e      	ldr	r3, [pc, #632]	; (823d4 <Shell+0x2a0>)
   8215a:	2400      	movs	r4, #0
   8215c:	619c      	str	r4, [r3, #24]
   8215e:	615c      	str	r4, [r3, #20]
		shell.state=IDLE;
   82160:	771c      	strb	r4, [r3, #28]
		shell.status=ST_SHELL_SHOW_UNKNOW_CRC;
   82162:	2202      	movs	r2, #2
   82164:	801a      	strh	r2, [r3, #0]
		Lcd(LCD_NEW);
   82166:	2064      	movs	r0, #100	; 0x64
   82168:	4b9b      	ldr	r3, [pc, #620]	; (823d8 <Shell+0x2a4>)
   8216a:	4798      	blx	r3
		gpio_configure_pin(HEART_LED, HEART_LED_FLAGS);
   8216c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82170:	2034      	movs	r0, #52	; 0x34
   82172:	4d9a      	ldr	r5, [pc, #616]	; (823dc <Shell+0x2a8>)
   82174:	47a8      	blx	r5
		gpio_configure_pin(POWER_LED, POWER_LED_FLAGS);
   82176:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8217a:	2033      	movs	r0, #51	; 0x33
   8217c:	47a8      	blx	r5

#if POWER_LED_ACTIVE_LEVEL
		gpio_set_pin_low(POWER_LED);
   8217e:	2033      	movs	r0, #51	; 0x33
   82180:	4b97      	ldr	r3, [pc, #604]	; (823e0 <Shell+0x2ac>)
   82182:	4798      	blx	r3
#else
		gpio_set_pin_high(POWER_LED);
#endif
		kRtc(KRTC_NEW);
   82184:	2064      	movs	r0, #100	; 0x64
   82186:	4b97      	ldr	r3, [pc, #604]	; (823e4 <Shell+0x2b0>)
   82188:	4798      	blx	r3
		Shellcom(SHELLCOM_NEW);
   8218a:	2064      	movs	r0, #100	; 0x64
   8218c:	4b96      	ldr	r3, [pc, #600]	; (823e8 <Shell+0x2b4>)
   8218e:	4798      	blx	r3
		//LcdPutstr("Hello World!",0,0);
		//LcdPutstr("Hello World!",1,1);
		//LcdPutstr("Hello World!",2,2);
		//LcdPutstr("Hello World!",3,3);
		PushTask(Shell,_SHELL_HEART_BEAT,-1,0);
   82190:	4e96      	ldr	r6, [pc, #600]	; (823ec <Shell+0x2b8>)
   82192:	9400      	str	r4, [sp, #0]
   82194:	f04f 33ff 	mov.w	r3, #4294967295
   82198:	2201      	movs	r2, #1
   8219a:	4631      	mov	r1, r6
   8219c:	2066      	movs	r0, #102	; 0x66
   8219e:	4d94      	ldr	r5, [pc, #592]	; (823f0 <Shell+0x2bc>)
   821a0:	47a8      	blx	r5
		PushTask(Shell,_SHELL_PROMPT,0,0);
   821a2:	9400      	str	r4, [sp, #0]
   821a4:	4623      	mov	r3, r4
   821a6:	2204      	movs	r2, #4
   821a8:	4631      	mov	r1, r6
   821aa:	2066      	movs	r0, #102	; 0x66
   821ac:	47a8      	blx	r5
		PushTask(Menu,MENU_NEW,0,0);
   821ae:	9400      	str	r4, [sp, #0]
   821b0:	4623      	mov	r3, r4
   821b2:	2264      	movs	r2, #100	; 0x64
   821b4:	498f      	ldr	r1, [pc, #572]	; (823f4 <Shell+0x2c0>)
   821b6:	2066      	movs	r0, #102	; 0x66
   821b8:	47a8      	blx	r5

	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_SHELL_SWITCH_BAD_SC,sc);
	}
	return 0;
   821ba:	46a0      	mov	r8, r4
}
   821bc:	4640      	mov	r0, r8
   821be:	b007      	add	sp, #28
   821c0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   821c4:	b004      	add	sp, #16
   821c6:	4770      	bx	lr
	switch(sc)
   821c8:	2902      	cmp	r1, #2
   821ca:	f000 80a6 	beq.w	8231a <Shell+0x1e6>
   821ce:	f200 8343 	bhi.w	82858 <Shell+0x724>
   821d2:	2901      	cmp	r1, #1
   821d4:	f040 8626 	bne.w	82e24 <Shell+0xcf0>
		if(heartBeatRhythm[++k]==0) k=0;
   821d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   821da:	3301      	adds	r3, #1
   821dc:	930f      	str	r3, [sp, #60]	; 0x3c
   821de:	4a86      	ldr	r2, [pc, #536]	; (823f8 <Shell+0x2c4>)
   821e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   821e4:	2a00      	cmp	r2, #0
   821e6:	d13b      	bne.n	82260 <Shell+0x12c>
   821e8:	2300      	movs	r3, #0
   821ea:	930f      	str	r3, [sp, #60]	; 0x3c
		else gpio_set_pin_low(HEART_LED);
   821ec:	2034      	movs	r0, #52	; 0x34
   821ee:	4b7c      	ldr	r3, [pc, #496]	; (823e0 <Shell+0x2ac>)
   821f0:	4798      	blx	r3
   821f2:	e03b      	b.n	8226c <Shell+0x138>
	    while((*(char*)_pSep)&&(*(char*)_pSep!=_ch)) _pSep++;
   821f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   821f6:	781a      	ldrb	r2, [r3, #0]
   821f8:	b14a      	cbz	r2, 8220e <Shell+0xda>
   821fa:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   821fe:	428a      	cmp	r2, r1
   82200:	d005      	beq.n	8220e <Shell+0xda>
   82202:	3301      	adds	r3, #1
   82204:	9310      	str	r3, [sp, #64]	; 0x40
   82206:	781a      	ldrb	r2, [r3, #0]
   82208:	b10a      	cbz	r2, 8220e <Shell+0xda>
   8220a:	428a      	cmp	r2, r1
   8220c:	d1f9      	bne.n	82202 <Shell+0xce>
	    return (uint32_t)*(char*)_pSep;
   8220e:	4690      	mov	r8, r2
   82210:	e7d4      	b.n	821bc <Shell+0x88>
		while(len--)
   82212:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   82216:	f108 33ff 	add.w	r3, r8, #4294967295
   8221a:	9310      	str	r3, [sp, #64]	; 0x40
   8221c:	f1b8 0f00 	cmp.w	r8, #0
   82220:	d0cc      	beq.n	821bc <Shell+0x88>
			Putc(hexDigits[*(char*)str>>4]);
   82222:	4e76      	ldr	r6, [pc, #472]	; (823fc <Shell+0x2c8>)
   82224:	2566      	movs	r5, #102	; 0x66
   82226:	4c70      	ldr	r4, [pc, #448]	; (823e8 <Shell+0x2b4>)
   82228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8222a:	781b      	ldrb	r3, [r3, #0]
   8222c:	091b      	lsrs	r3, r3, #4
   8222e:	5cf1      	ldrb	r1, [r6, r3]
   82230:	4628      	mov	r0, r5
   82232:	47a0      	blx	r4
			Putc(hexDigits[*(char*)str&0x0F]);
   82234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82236:	781b      	ldrb	r3, [r3, #0]
   82238:	f003 030f 	and.w	r3, r3, #15
   8223c:	5cf1      	ldrb	r1, [r6, r3]
   8223e:	4628      	mov	r0, r5
   82240:	47a0      	blx	r4
			Putc(' ');
   82242:	2120      	movs	r1, #32
   82244:	4628      	mov	r0, r5
   82246:	47a0      	blx	r4
			str++;
   82248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8224a:	3301      	adds	r3, #1
   8224c:	930f      	str	r3, [sp, #60]	; 0x3c
		while(len--)
   8224e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   82252:	f108 33ff 	add.w	r3, r8, #4294967295
   82256:	9310      	str	r3, [sp, #64]	; 0x40
   82258:	f1b8 0f00 	cmp.w	r8, #0
   8225c:	d1e4      	bne.n	82228 <Shell+0xf4>
   8225e:	e7ad      	b.n	821bc <Shell+0x88>
		if((k%2==0)^(!HEART_LED_ACTIVE_LEVEL)) gpio_set_pin_high(HEART_LED);
   82260:	f013 0f01 	tst.w	r3, #1
   82264:	d0c2      	beq.n	821ec <Shell+0xb8>
   82266:	2034      	movs	r0, #52	; 0x34
   82268:	4b65      	ldr	r3, [pc, #404]	; (82400 <Shell+0x2cc>)
   8226a:	4798      	blx	r3
		PushTask(Shell,_SHELL_HEART_BEAT,k,heartBeatRhythm[k]);
   8226c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8226e:	4a62      	ldr	r2, [pc, #392]	; (823f8 <Shell+0x2c4>)
   82270:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82274:	9200      	str	r2, [sp, #0]
   82276:	2201      	movs	r2, #1
   82278:	495c      	ldr	r1, [pc, #368]	; (823ec <Shell+0x2b8>)
   8227a:	2066      	movs	r0, #102	; 0x66
   8227c:	4c5c      	ldr	r4, [pc, #368]	; (823f0 <Shell+0x2bc>)
   8227e:	47a0      	blx	r4
	return 0;
   82280:	f04f 0800 	mov.w	r8, #0
		break;
   82284:	e79a      	b.n	821bc <Shell+0x88>
		rtc_get_time(RTC,&_hour,&_minute,&_second);
   82286:	ab05      	add	r3, sp, #20
   82288:	aa0f      	add	r2, sp, #60	; 0x3c
   8228a:	a90e      	add	r1, sp, #56	; 0x38
   8228c:	485d      	ldr	r0, [pc, #372]	; (82404 <Shell+0x2d0>)
   8228e:	4c5e      	ldr	r4, [pc, #376]	; (82408 <Shell+0x2d4>)
   82290:	47a0      	blx	r4
		if(mIsBitsClr(shell.status,ST_SHELL_PROMPT_DISABLED))
   82292:	4b50      	ldr	r3, [pc, #320]	; (823d4 <Shell+0x2a0>)
   82294:	881b      	ldrh	r3, [r3, #0]
   82296:	f013 0f04 	tst.w	r3, #4
   8229a:	d030      	beq.n	822fe <Shell+0x1ca>
		if(IsLcdOn())
   8229c:	2068      	movs	r0, #104	; 0x68
   8229e:	4b4e      	ldr	r3, [pc, #312]	; (823d8 <Shell+0x2a4>)
   822a0:	4798      	blx	r3
   822a2:	4680      	mov	r8, r0
   822a4:	2800      	cmp	r0, #0
   822a6:	d089      	beq.n	821bc <Shell+0x88>
			sprintf(shellTmpBuf,"%02d:%02d:%02d",(int)_hour,(int)_minute,(int)_second);
   822a8:	ad0e      	add	r5, sp, #56	; 0x38
   822aa:	f855 2b04 	ldr.w	r2, [r5], #4
   822ae:	4c57      	ldr	r4, [pc, #348]	; (8240c <Shell+0x2d8>)
   822b0:	ae06      	add	r6, sp, #24
   822b2:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   822b6:	9300      	str	r3, [sp, #0]
   822b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   822ba:	4955      	ldr	r1, [pc, #340]	; (82410 <Shell+0x2dc>)
   822bc:	4620      	mov	r0, r4
   822be:	f8df 8160 	ldr.w	r8, [pc, #352]	; 82420 <Shell+0x2ec>
   822c2:	47c0      	blx	r8
			LcdPutstr(shellTmpBuf,1,6);
   822c4:	2306      	movs	r3, #6
   822c6:	2201      	movs	r2, #1
   822c8:	4621      	mov	r1, r4
   822ca:	2067      	movs	r0, #103	; 0x67
   822cc:	4f42      	ldr	r7, [pc, #264]	; (823d8 <Shell+0x2a4>)
   822ce:	47b8      	blx	r7
			rtc_get_date(RTC,&_year,&_month,&_date,&_day);
   822d0:	ab04      	add	r3, sp, #16
   822d2:	9300      	str	r3, [sp, #0]
   822d4:	4633      	mov	r3, r6
   822d6:	462a      	mov	r2, r5
   822d8:	a90e      	add	r1, sp, #56	; 0x38
   822da:	484a      	ldr	r0, [pc, #296]	; (82404 <Shell+0x2d0>)
   822dc:	4d4d      	ldr	r5, [pc, #308]	; (82414 <Shell+0x2e0>)
   822de:	47a8      	blx	r5
			sprintf(shellTmpBuf,"%02d/%02d/%04d",(int)_date,(int)_month,(int)_year);
   822e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   822e2:	9300      	str	r3, [sp, #0]
   822e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   822e6:	9a05      	ldr	r2, [sp, #20]
   822e8:	494b      	ldr	r1, [pc, #300]	; (82418 <Shell+0x2e4>)
   822ea:	4620      	mov	r0, r4
   822ec:	47c0      	blx	r8
			LcdPutstr(shellTmpBuf,0,5);
   822ee:	2305      	movs	r3, #5
   822f0:	2200      	movs	r2, #0
   822f2:	4621      	mov	r1, r4
   822f4:	2067      	movs	r0, #103	; 0x67
   822f6:	47b8      	blx	r7
	return 0;
   822f8:	f04f 0800 	mov.w	r8, #0
   822fc:	e75e      	b.n	821bc <Shell+0x88>
			sprintf(shellTmpBuf,"\r%02d:%02d:%02d",(int)_hour,(int)_minute,(int)_second);
   822fe:	4c43      	ldr	r4, [pc, #268]	; (8240c <Shell+0x2d8>)
   82300:	9b05      	ldr	r3, [sp, #20]
   82302:	9300      	str	r3, [sp, #0]
   82304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82308:	4944      	ldr	r1, [pc, #272]	; (8241c <Shell+0x2e8>)
   8230a:	4620      	mov	r0, r4
   8230c:	4d44      	ldr	r5, [pc, #272]	; (82420 <Shell+0x2ec>)
   8230e:	47a8      	blx	r5
			Putstr(shellTmpBuf);
   82310:	4621      	mov	r1, r4
   82312:	2067      	movs	r0, #103	; 0x67
   82314:	4b34      	ldr	r3, [pc, #208]	; (823e8 <Shell+0x2b4>)
   82316:	4798      	blx	r3
   82318:	e7c0      	b.n	8229c <Shell+0x168>
		switch(shell.state)
   8231a:	4b2e      	ldr	r3, [pc, #184]	; (823d4 <Shell+0x2a0>)
   8231c:	7f1b      	ldrb	r3, [r3, #28]
   8231e:	2b06      	cmp	r3, #6
   82320:	f200 828c 	bhi.w	8283c <Shell+0x708>
   82324:	e8df f013 	tbh	[pc, r3, lsl #1]
   82328:	00860007 	.word	0x00860007
   8232c:	009e0089 	.word	0x009e0089
   82330:	02750272 	.word	0x02750272
   82334:	01c2      	.short	0x01c2
			switch(_kbhitchar)
   82336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82338:	b2d3      	uxtb	r3, r2
   8233a:	3b08      	subs	r3, #8
   8233c:	2b18      	cmp	r3, #24
   8233e:	d82e      	bhi.n	8239e <Shell+0x26a>
   82340:	e8df f013 	tbh	[pc, r3, lsl #1]
   82344:	05770577 	.word	0x05770577
   82348:	002d0577 	.word	0x002d0577
   8234c:	0577002d 	.word	0x0577002d
   82350:	002d002d 	.word	0x002d002d
   82354:	002d002d 	.word	0x002d002d
   82358:	002d002d 	.word	0x002d002d
   8235c:	002d002d 	.word	0x002d002d
   82360:	002d002d 	.word	0x002d002d
   82364:	002d002d 	.word	0x002d002d
   82368:	0019002d 	.word	0x0019002d
   8236c:	002d002d 	.word	0x002d002d
   82370:	002d002d 	.word	0x002d002d
   82374:	0577      	.short	0x0577
				shell.escapeTimer=SHELL_ESC_TIMEOUT;
   82376:	4c17      	ldr	r4, [pc, #92]	; (823d4 <Shell+0x2a0>)
   82378:	f241 3388 	movw	r3, #5000	; 0x1388
   8237c:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++='\e';
   8237e:	4b29      	ldr	r3, [pc, #164]	; (82424 <Shell+0x2f0>)
   82380:	60a3      	str	r3, [r4, #8]
   82382:	201b      	movs	r0, #27
   82384:	f803 0c01 	strb.w	r0, [r3, #-1]
				shell.nEscChar=1;
   82388:	2501      	movs	r5, #1
   8238a:	81e5      	strh	r5, [r4, #14]
				shell.crc=CRC16MODBUS('\e',0xFFFF);
   8238c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   82390:	4b25      	ldr	r3, [pc, #148]	; (82428 <Shell+0x2f4>)
   82392:	4798      	blx	r3
   82394:	8220      	strh	r0, [r4, #16]
				shell.state=ESCAPE;
   82396:	7725      	strb	r5, [r4, #28]
	return 0;
   82398:	f04f 0800 	mov.w	r8, #0
				break;
   8239c:	e70e      	b.n	821bc <Shell+0x88>
				EnterEditMode();
   8239e:	4c0d      	ldr	r4, [pc, #52]	; (823d4 <Shell+0x2a0>)
   823a0:	8823      	ldrh	r3, [r4, #0]
   823a2:	f043 0304 	orr.w	r3, r3, #4
   823a6:	8023      	strh	r3, [r4, #0]
				shell.editTimer=SHELL_EDIT_TIMEOUT;
   823a8:	2364      	movs	r3, #100	; 0x64
   823aa:	6163      	str	r3, [r4, #20]
				*shell.pEdit++=_kbhitchar;
   823ac:	4b1f      	ldr	r3, [pc, #124]	; (8242c <Shell+0x2f8>)
   823ae:	6063      	str	r3, [r4, #4]
			switch(_kbhitchar)
   823b0:	f803 2c01 	strb.w	r2, [r3, #-1]
				shell.nChar=1;
   823b4:	2301      	movs	r3, #1
   823b6:	81a3      	strh	r3, [r4, #12]
				Putstr("\r\n>"); Putc(_kbhitchar);
   823b8:	491d      	ldr	r1, [pc, #116]	; (82430 <Shell+0x2fc>)
   823ba:	2067      	movs	r0, #103	; 0x67
   823bc:	4d0a      	ldr	r5, [pc, #40]	; (823e8 <Shell+0x2b4>)
   823be:	47a8      	blx	r5
   823c0:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   823c4:	2066      	movs	r0, #102	; 0x66
   823c6:	47a8      	blx	r5
				shell.state=EDITION;
   823c8:	2303      	movs	r3, #3
   823ca:	7723      	strb	r3, [r4, #28]
	return 0;
   823cc:	f04f 0800 	mov.w	r8, #0
				break;
   823d0:	e6f4      	b.n	821bc <Shell+0x88>
   823d2:	bf00      	nop
   823d4:	200011c4 	.word	0x200011c4
   823d8:	00081cd5 	.word	0x00081cd5
   823dc:	000808ad 	.word	0x000808ad
   823e0:	00080873 	.word	0x00080873
   823e4:	00081995 	.word	0x00081995
   823e8:	000832dd 	.word	0x000832dd
   823ec:	00082135 	.word	0x00082135
   823f0:	00083519 	.word	0x00083519
   823f4:	0008039d 	.word	0x0008039d
   823f8:	00088cfc 	.word	0x00088cfc
   823fc:	00088d10 	.word	0x00088d10
   82400:	00080859 	.word	0x00080859
   82404:	400e1260 	.word	0x400e1260
   82408:	00080cf1 	.word	0x00080cf1
   8240c:	20001264 	.word	0x20001264
   82410:	00088c54 	.word	0x00088c54
   82414:	00080de1 	.word	0x00080de1
   82418:	00088c64 	.word	0x00088c64
   8241c:	00088c44 	.word	0x00088c44
   82420:	00083e71 	.word	0x00083e71
   82424:	200011e5 	.word	0x200011e5
   82428:	000817a1 	.word	0x000817a1
   8242c:	200010c1 	.word	0x200010c1
   82430:	00088c74 	.word	0x00088c74
				shell.state=ESCAPE_SEQ;
   82434:	2202      	movs	r2, #2
   82436:	4b93      	ldr	r3, [pc, #588]	; (82684 <Shell+0x550>)
   82438:	771a      	strb	r2, [r3, #28]
				shell.escapeTimer=SHELL_ESC_TIMEOUT;
   8243a:	4c92      	ldr	r4, [pc, #584]	; (82684 <Shell+0x550>)
   8243c:	f241 3388 	movw	r3, #5000	; 0x1388
   82440:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++=_kbhitchar;
   82442:	68a3      	ldr	r3, [r4, #8]
   82444:	1c5a      	adds	r2, r3, #1
   82446:	60a2      	str	r2, [r4, #8]
   82448:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8244a:	701a      	strb	r2, [r3, #0]
				shell.nEscChar++;
   8244c:	89e3      	ldrh	r3, [r4, #14]
   8244e:	3301      	adds	r3, #1
   82450:	81e3      	strh	r3, [r4, #14]
				shell.crc=CRC16MODBUS(_kbhitchar,shell.crc);
   82452:	8a21      	ldrh	r1, [r4, #16]
   82454:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   82458:	4b8b      	ldr	r3, [pc, #556]	; (82688 <Shell+0x554>)
   8245a:	4798      	blx	r3
   8245c:	8220      	strh	r0, [r4, #16]
	return 0;
   8245e:	f04f 0800 	mov.w	r8, #0
			break;
   82462:	e6ab      	b.n	821bc <Shell+0x88>
			shell.editTimer=SHELL_EDIT_TIMEOUT;
   82464:	2264      	movs	r2, #100	; 0x64
   82466:	4b87      	ldr	r3, [pc, #540]	; (82684 <Shell+0x550>)
   82468:	615a      	str	r2, [r3, #20]
			switch(_kbhitchar)
   8246a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8246c:	b2d1      	uxtb	r1, r2
   8246e:	f1a1 0308 	sub.w	r3, r1, #8
   82472:	2b13      	cmp	r3, #19
   82474:	f200 8097 	bhi.w	825a6 <Shell+0x472>
   82478:	e8df f003 	tbb	[pc, r3]
   8247c:	95762038 	.word	0x95762038
   82480:	95957695 	.word	0x95957695
   82484:	95959595 	.word	0x95959595
   82488:	95959595 	.word	0x95959595
   8248c:	0a959595 	.word	0x0a959595
				shell.escapeTimer=SHELL_ESC_TIMEOUT;
   82490:	4c7c      	ldr	r4, [pc, #496]	; (82684 <Shell+0x550>)
   82492:	f241 3388 	movw	r3, #5000	; 0x1388
   82496:	61a3      	str	r3, [r4, #24]
				shell.editTimer=0;
   82498:	2500      	movs	r5, #0
   8249a:	6165      	str	r5, [r4, #20]
				*shell.pEscbuf++='\e';
   8249c:	4b7b      	ldr	r3, [pc, #492]	; (8268c <Shell+0x558>)
   8249e:	60a3      	str	r3, [r4, #8]
   824a0:	201b      	movs	r0, #27
   824a2:	f803 0c01 	strb.w	r0, [r3, #-1]
				shell.nEscChar=1;
   824a6:	2301      	movs	r3, #1
   824a8:	81e3      	strh	r3, [r4, #14]
				shell.crc=CRC16MODBUS('\e',0xFFFF);
   824aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   824ae:	4b76      	ldr	r3, [pc, #472]	; (82688 <Shell+0x554>)
   824b0:	4798      	blx	r3
   824b2:	8220      	strh	r0, [r4, #16]
				shell.state=ED_ESCAPE;
   824b4:	2304      	movs	r3, #4
   824b6:	7723      	strb	r3, [r4, #28]
	return 0;
   824b8:	46a8      	mov	r8, r5
				break;
   824ba:	e67f      	b.n	821bc <Shell+0x88>
				const char ctrl_right_arrow[]="\e[1;5C";
   824bc:	4b74      	ldr	r3, [pc, #464]	; (82690 <Shell+0x55c>)
   824be:	e893 0003 	ldmia.w	r3, {r0, r1}
   824c2:	9002      	str	r0, [sp, #8]
   824c4:	f8ad 100c 	strh.w	r1, [sp, #12]
   824c8:	0c09      	lsrs	r1, r1, #16
   824ca:	f88d 100e 	strb.w	r1, [sp, #14]
				memcpy(shellEscapeBuf,ctrl_right_arrow,6);
   824ce:	4b71      	ldr	r3, [pc, #452]	; (82694 <Shell+0x560>)
   824d0:	6018      	str	r0, [r3, #0]
   824d2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   824d6:	809a      	strh	r2, [r3, #4]
				shell.nEscChar=6;
   824d8:	4b6a      	ldr	r3, [pc, #424]	; (82684 <Shell+0x550>)
   824da:	2206      	movs	r2, #6
   824dc:	81da      	strh	r2, [r3, #14]
				shell.state=ED_ESCAPE_SEQ;
   824de:	2205      	movs	r2, #5
   824e0:	771a      	strb	r2, [r3, #28]
				shell.escapeTimer=1;	//Ask a ESC SEQUENCE timeout : treat as a "ctrl+right_arrow" key
   824e2:	2201      	movs	r2, #1
   824e4:	619a      	str	r2, [r3, #24]
	return 0;
   824e6:	f04f 0800 	mov.w	r8, #0
				break;
   824ea:	e667      	b.n	821bc <Shell+0x88>
                if(shell.nChar)
   824ec:	4b65      	ldr	r3, [pc, #404]	; (82684 <Shell+0x550>)
   824ee:	899a      	ldrh	r2, [r3, #12]
   824f0:	2a00      	cmp	r2, #0
   824f2:	f000 84a2 	beq.w	82e3a <Shell+0xd06>
	                pEnd = (uint32_t)shellEditBuf+shell.nChar;
   824f6:	4c68      	ldr	r4, [pc, #416]	; (82698 <Shell+0x564>)
   824f8:	4422      	add	r2, r4
   824fa:	920e      	str	r2, [sp, #56]	; 0x38
	                pSrc = (uint32_t)shell.pEdit;
   824fc:	685b      	ldr	r3, [r3, #4]
   824fe:	9305      	str	r3, [sp, #20]
	                while(pSrc<pEnd)
   82500:	429a      	cmp	r2, r3
   82502:	d908      	bls.n	82516 <Shell+0x3e2>
		                *(char*)(pSrc-1)=*(char*)pSrc; pSrc++;
   82504:	781a      	ldrb	r2, [r3, #0]
   82506:	f803 2c01 	strb.w	r2, [r3, #-1]
   8250a:	9b05      	ldr	r3, [sp, #20]
   8250c:	3301      	adds	r3, #1
   8250e:	9305      	str	r3, [sp, #20]
	                while(pSrc<pEnd)
   82510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82512:	429a      	cmp	r2, r3
   82514:	d8f6      	bhi.n	82504 <Shell+0x3d0>
	                *(char*)pSrc++=' ';
   82516:	2220      	movs	r2, #32
   82518:	f803 2c01 	strb.w	r2, [r3, #-1]
	                Putstr("\e[D");
   8251c:	4d5f      	ldr	r5, [pc, #380]	; (8269c <Shell+0x568>)
   8251e:	4629      	mov	r1, r5
   82520:	2067      	movs	r0, #103	; 0x67
   82522:	4e5f      	ldr	r6, [pc, #380]	; (826a0 <Shell+0x56c>)
   82524:	47b0      	blx	r6
	                shell.pEdit--; shell.nChar--;
   82526:	4a57      	ldr	r2, [pc, #348]	; (82684 <Shell+0x550>)
   82528:	6851      	ldr	r1, [r2, #4]
   8252a:	3901      	subs	r1, #1
   8252c:	6051      	str	r1, [r2, #4]
   8252e:	8993      	ldrh	r3, [r2, #12]
   82530:	3b01      	subs	r3, #1
   82532:	b29b      	uxth	r3, r3
   82534:	8193      	strh	r3, [r2, #12]
	                k=Putstrlen(shell.pEdit,shell.nChar-(shell.pEdit-shellEditBuf)+1);
   82536:	1c62      	adds	r2, r4, #1
   82538:	441a      	add	r2, r3
   8253a:	1a52      	subs	r2, r2, r1
   8253c:	2068      	movs	r0, #104	; 0x68
   8253e:	47b0      	blx	r6
   82540:	4680      	mov	r8, r0
	                while(k--) Putstr("\e[D");
   82542:	1e43      	subs	r3, r0, #1
   82544:	9305      	str	r3, [sp, #20]
   82546:	2800      	cmp	r0, #0
   82548:	f43f ae38 	beq.w	821bc <Shell+0x88>
   8254c:	2667      	movs	r6, #103	; 0x67
   8254e:	4c54      	ldr	r4, [pc, #336]	; (826a0 <Shell+0x56c>)
   82550:	4629      	mov	r1, r5
   82552:	4630      	mov	r0, r6
   82554:	47a0      	blx	r4
   82556:	f8dd 8014 	ldr.w	r8, [sp, #20]
   8255a:	f108 33ff 	add.w	r3, r8, #4294967295
   8255e:	9305      	str	r3, [sp, #20]
   82560:	f1b8 0f00 	cmp.w	r8, #0
   82564:	d1f4      	bne.n	82550 <Shell+0x41c>
   82566:	e629      	b.n	821bc <Shell+0x88>
				if(shell.nChar==0)
   82568:	4b46      	ldr	r3, [pc, #280]	; (82684 <Shell+0x550>)
   8256a:	899b      	ldrh	r3, [r3, #12]
   8256c:	b96b      	cbnz	r3, 8258a <Shell+0x456>
					ExitEditMode();
   8256e:	4b45      	ldr	r3, [pc, #276]	; (82684 <Shell+0x550>)
   82570:	881a      	ldrh	r2, [r3, #0]
   82572:	f022 0204 	bic.w	r2, r2, #4
   82576:	801a      	strh	r2, [r3, #0]
					shell.state=IDLE;
   82578:	f04f 0800 	mov.w	r8, #0
   8257c:	f883 801c 	strb.w	r8, [r3, #28]
					Putc('\r');
   82580:	210d      	movs	r1, #13
   82582:	2066      	movs	r0, #102	; 0x66
   82584:	4b46      	ldr	r3, [pc, #280]	; (826a0 <Shell+0x56c>)
   82586:	4798      	blx	r3
   82588:	e618      	b.n	821bc <Shell+0x88>
					shell.editTimer=0;
   8258a:	4b3e      	ldr	r3, [pc, #248]	; (82684 <Shell+0x550>)
   8258c:	2400      	movs	r4, #0
   8258e:	615c      	str	r4, [r3, #20]
					shell.state=EXECUTION;
   82590:	2206      	movs	r2, #6
   82592:	771a      	strb	r2, [r3, #28]
					PushTask(Shell,_SHELL_KBHIT,'\r',0);
   82594:	9400      	str	r4, [sp, #0]
   82596:	230d      	movs	r3, #13
   82598:	2202      	movs	r2, #2
   8259a:	4942      	ldr	r1, [pc, #264]	; (826a4 <Shell+0x570>)
   8259c:	2066      	movs	r0, #102	; 0x66
   8259e:	4d42      	ldr	r5, [pc, #264]	; (826a8 <Shell+0x574>)
   825a0:	47a8      	blx	r5
	return 0;
   825a2:	46a0      	mov	r8, r4
   825a4:	e60a      	b.n	821bc <Shell+0x88>
			switch(_kbhitchar)
   825a6:	b2d2      	uxtb	r2, r2
				if(shell.nChar==0)
   825a8:	4b36      	ldr	r3, [pc, #216]	; (82684 <Shell+0x550>)
   825aa:	899b      	ldrh	r3, [r3, #12]
   825ac:	b983      	cbnz	r3, 825d0 <Shell+0x49c>
					if(_kbhitchar!=0x20) //Excluding space char
   825ae:	2a20      	cmp	r2, #32
   825b0:	f000 8447 	beq.w	82e42 <Shell+0xd0e>
						Putc((*shell.pEdit++=_kbhitchar)); shell.nChar++;
   825b4:	4c33      	ldr	r4, [pc, #204]	; (82684 <Shell+0x550>)
   825b6:	6863      	ldr	r3, [r4, #4]
   825b8:	1c58      	adds	r0, r3, #1
   825ba:	6060      	str	r0, [r4, #4]
   825bc:	701a      	strb	r2, [r3, #0]
   825be:	2066      	movs	r0, #102	; 0x66
   825c0:	4b37      	ldr	r3, [pc, #220]	; (826a0 <Shell+0x56c>)
   825c2:	4798      	blx	r3
   825c4:	89a3      	ldrh	r3, [r4, #12]
   825c6:	3301      	adds	r3, #1
   825c8:	81a3      	strh	r3, [r4, #12]
	return 0;
   825ca:	f04f 0800 	mov.w	r8, #0
   825ce:	e5f5      	b.n	821bc <Shell+0x88>
				else if(shell.nChar<(SHELL_EDITBUF_LEN))
   825d0:	2bff      	cmp	r3, #255	; 0xff
   825d2:	f200 8449 	bhi.w	82e68 <Shell+0xd34>
					if(mIsBitsClr(shell.status,ST_SHELL_INSERT_MODE))
   825d6:	482b      	ldr	r0, [pc, #172]	; (82684 <Shell+0x550>)
   825d8:	8800      	ldrh	r0, [r0, #0]
   825da:	f010 0f01 	tst.w	r0, #1
   825de:	d112      	bne.n	82606 <Shell+0x4d2>
						if(shell.pEdit==shellEditBuf+shell.nChar)	shell.nChar++;
   825e0:	4828      	ldr	r0, [pc, #160]	; (82684 <Shell+0x550>)
   825e2:	6840      	ldr	r0, [r0, #4]
   825e4:	4c2c      	ldr	r4, [pc, #176]	; (82698 <Shell+0x564>)
   825e6:	441c      	add	r4, r3
   825e8:	42a0      	cmp	r0, r4
   825ea:	d102      	bne.n	825f2 <Shell+0x4be>
   825ec:	3301      	adds	r3, #1
   825ee:	4c25      	ldr	r4, [pc, #148]	; (82684 <Shell+0x550>)
   825f0:	81a3      	strh	r3, [r4, #12]
						Putc((*shell.pEdit++=_kbhitchar));
   825f2:	1c44      	adds	r4, r0, #1
   825f4:	4b23      	ldr	r3, [pc, #140]	; (82684 <Shell+0x550>)
   825f6:	605c      	str	r4, [r3, #4]
   825f8:	7002      	strb	r2, [r0, #0]
   825fa:	2066      	movs	r0, #102	; 0x66
   825fc:	4b28      	ldr	r3, [pc, #160]	; (826a0 <Shell+0x56c>)
   825fe:	4798      	blx	r3
	return 0;
   82600:	f04f 0800 	mov.w	r8, #0
   82604:	e5da      	b.n	821bc <Shell+0x88>
						if(shell.pEdit!=shellEditBuf+shell.nChar)
   82606:	4a1f      	ldr	r2, [pc, #124]	; (82684 <Shell+0x550>)
   82608:	6851      	ldr	r1, [r2, #4]
   8260a:	4a23      	ldr	r2, [pc, #140]	; (82698 <Shell+0x564>)
   8260c:	441a      	add	r2, r3
   8260e:	4291      	cmp	r1, r2
   82610:	d00f      	beq.n	82632 <Shell+0x4fe>
							pDst=(uint32_t)shellEditBuf+shell.nChar;
   82612:	4a21      	ldr	r2, [pc, #132]	; (82698 <Shell+0x564>)
   82614:	4413      	add	r3, r2
   82616:	930e      	str	r3, [sp, #56]	; 0x38
							while(pDst-1>=(uint32_t)shell.pEdit)
   82618:	1e5a      	subs	r2, r3, #1
   8261a:	4291      	cmp	r1, r2
   8261c:	d809      	bhi.n	82632 <Shell+0x4fe>
   8261e:	4919      	ldr	r1, [pc, #100]	; (82684 <Shell+0x550>)
								*(char*)pDst=*(char*)(pDst-1); pDst--;
   82620:	7812      	ldrb	r2, [r2, #0]
   82622:	701a      	strb	r2, [r3, #0]
   82624:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82626:	1e53      	subs	r3, r2, #1
   82628:	930e      	str	r3, [sp, #56]	; 0x38
							while(pDst-1>=(uint32_t)shell.pEdit)
   8262a:	3a02      	subs	r2, #2
   8262c:	6848      	ldr	r0, [r1, #4]
   8262e:	4290      	cmp	r0, r2
   82630:	d9f6      	bls.n	82620 <Shell+0x4ec>
						Putc((*shell.pEdit++=_kbhitchar)); shell.nChar++;
   82632:	4c14      	ldr	r4, [pc, #80]	; (82684 <Shell+0x550>)
   82634:	6863      	ldr	r3, [r4, #4]
   82636:	1c5a      	adds	r2, r3, #1
   82638:	6062      	str	r2, [r4, #4]
   8263a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8263c:	7019      	strb	r1, [r3, #0]
   8263e:	b2c9      	uxtb	r1, r1
   82640:	2066      	movs	r0, #102	; 0x66
   82642:	4d17      	ldr	r5, [pc, #92]	; (826a0 <Shell+0x56c>)
   82644:	47a8      	blx	r5
   82646:	89a3      	ldrh	r3, [r4, #12]
   82648:	3301      	adds	r3, #1
   8264a:	b29b      	uxth	r3, r3
   8264c:	81a3      	strh	r3, [r4, #12]
						k=Putstrlen(shell.pEdit,(shellEditBuf+shell.nChar-shell.pEdit));
   8264e:	6861      	ldr	r1, [r4, #4]
   82650:	4a11      	ldr	r2, [pc, #68]	; (82698 <Shell+0x564>)
   82652:	441a      	add	r2, r3
   82654:	1a52      	subs	r2, r2, r1
   82656:	2068      	movs	r0, #104	; 0x68
   82658:	47a8      	blx	r5
   8265a:	4680      	mov	r8, r0
						while(k--) Putstr("\e[D");
   8265c:	1e43      	subs	r3, r0, #1
   8265e:	930e      	str	r3, [sp, #56]	; 0x38
   82660:	2800      	cmp	r0, #0
   82662:	f43f adab 	beq.w	821bc <Shell+0x88>
   82666:	4e0d      	ldr	r6, [pc, #52]	; (8269c <Shell+0x568>)
   82668:	2567      	movs	r5, #103	; 0x67
   8266a:	4c0d      	ldr	r4, [pc, #52]	; (826a0 <Shell+0x56c>)
   8266c:	4631      	mov	r1, r6
   8266e:	4628      	mov	r0, r5
   82670:	47a0      	blx	r4
   82672:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   82676:	f108 33ff 	add.w	r3, r8, #4294967295
   8267a:	930e      	str	r3, [sp, #56]	; 0x38
   8267c:	f1b8 0f00 	cmp.w	r8, #0
   82680:	d1f4      	bne.n	8266c <Shell+0x538>
   82682:	e59b      	b.n	821bc <Shell+0x88>
   82684:	200011c4 	.word	0x200011c4
   82688:	000817a1 	.word	0x000817a1
   8268c:	200011e5 	.word	0x200011e5
   82690:	00088cf4 	.word	0x00088cf4
   82694:	200011e4 	.word	0x200011e4
   82698:	200010c0 	.word	0x200010c0
   8269c:	00088c78 	.word	0x00088c78
   826a0:	000832dd 	.word	0x000832dd
   826a4:	00082135 	.word	0x00082135
   826a8:	00083519 	.word	0x00083519
			k=shell.nChar-(shell.pEdit-shellEditBuf);
   826ac:	4a8e      	ldr	r2, [pc, #568]	; (828e8 <Shell+0x7b4>)
   826ae:	8993      	ldrh	r3, [r2, #12]
   826b0:	6852      	ldr	r2, [r2, #4]
   826b2:	498e      	ldr	r1, [pc, #568]	; (828ec <Shell+0x7b8>)
   826b4:	1a52      	subs	r2, r2, r1
   826b6:	1a9b      	subs	r3, r3, r2
			while(k--) Putstr("\e[C");
   826b8:	1e5a      	subs	r2, r3, #1
   826ba:	9205      	str	r2, [sp, #20]
   826bc:	b153      	cbz	r3, 826d4 <Shell+0x5a0>
   826be:	4e8c      	ldr	r6, [pc, #560]	; (828f0 <Shell+0x7bc>)
   826c0:	2567      	movs	r5, #103	; 0x67
   826c2:	4c8c      	ldr	r4, [pc, #560]	; (828f4 <Shell+0x7c0>)
   826c4:	4631      	mov	r1, r6
   826c6:	4628      	mov	r0, r5
   826c8:	47a0      	blx	r4
   826ca:	9b05      	ldr	r3, [sp, #20]
   826cc:	1e5a      	subs	r2, r3, #1
   826ce:	9205      	str	r2, [sp, #20]
   826d0:	2b00      	cmp	r3, #0
   826d2:	d1f7      	bne.n	826c4 <Shell+0x590>
			shell.pEdit=shellEditBuf+shell.nChar;
   826d4:	4d84      	ldr	r5, [pc, #528]	; (828e8 <Shell+0x7b4>)
   826d6:	89aa      	ldrh	r2, [r5, #12]
   826d8:	4c84      	ldr	r4, [pc, #528]	; (828ec <Shell+0x7b8>)
   826da:	1913      	adds	r3, r2, r4
			*shell.pEdit++='\0';
   826dc:	3301      	adds	r3, #1
   826de:	606b      	str	r3, [r5, #4]
   826e0:	2600      	movs	r6, #0
   826e2:	5516      	strb	r6, [r2, r4]
			_CleanUp_cmd_Line();
   826e4:	2007      	movs	r0, #7
   826e6:	f7ff fd25 	bl	82134 <Shell>
			shell.pEdit=shellEditBuf+shell.nChar;
   826ea:	89aa      	ldrh	r2, [r5, #12]
   826ec:	1913      	adds	r3, r2, r4
			*shell.pEdit++='\0';
   826ee:	3301      	adds	r3, #1
   826f0:	606b      	str	r3, [r5, #4]
   826f2:	5516      	strb	r6, [r2, r4]
			Putstr("\r\n/>");
   826f4:	4980      	ldr	r1, [pc, #512]	; (828f8 <Shell+0x7c4>)
   826f6:	2067      	movs	r0, #103	; 0x67
   826f8:	4d7e      	ldr	r5, [pc, #504]	; (828f4 <Shell+0x7c0>)
   826fa:	47a8      	blx	r5
			Putstr(shellEditBuf);
   826fc:	4621      	mov	r1, r4
   826fe:	2067      	movs	r0, #103	; 0x67
   82700:	47a8      	blx	r5
			mstrtokReset();
   82702:	4b7e      	ldr	r3, [pc, #504]	; (828fc <Shell+0x7c8>)
   82704:	4798      	blx	r3
			pToken=mstrtok(shellEditBuf,(char*)" \r\n");
   82706:	497e      	ldr	r1, [pc, #504]	; (82900 <Shell+0x7cc>)
   82708:	4620      	mov	r0, r4
   8270a:	4b7e      	ldr	r3, [pc, #504]	; (82904 <Shell+0x7d0>)
   8270c:	4798      	blx	r3
   8270e:	4604      	mov	r4, r0
   82710:	900e      	str	r0, [sp, #56]	; 0x38
			if(pToken)
   82712:	b968      	cbnz	r0, 82730 <Shell+0x5fc>
			Putstr("\r\n");
   82714:	497c      	ldr	r1, [pc, #496]	; (82908 <Shell+0x7d4>)
   82716:	2067      	movs	r0, #103	; 0x67
   82718:	4b76      	ldr	r3, [pc, #472]	; (828f4 <Shell+0x7c0>)
   8271a:	4798      	blx	r3
			shell.state=IDLE;
   8271c:	4b72      	ldr	r3, [pc, #456]	; (828e8 <Shell+0x7b4>)
   8271e:	f04f 0800 	mov.w	r8, #0
   82722:	f883 801c 	strb.w	r8, [r3, #28]
			ExitEditMode();
   82726:	881a      	ldrh	r2, [r3, #0]
   82728:	f022 0204 	bic.w	r2, r2, #4
   8272c:	801a      	strh	r2, [r3, #0]
			break;
   8272e:	e545      	b.n	821bc <Shell+0x88>
				shell.crc=CRC16MODBUSFRAME((unsigned char*)pToken,strlen((char*)pToken));
   82730:	4b76      	ldr	r3, [pc, #472]	; (8290c <Shell+0x7d8>)
   82732:	4798      	blx	r3
   82734:	4601      	mov	r1, r0
   82736:	4620      	mov	r0, r4
   82738:	4b75      	ldr	r3, [pc, #468]	; (82910 <Shell+0x7dc>)
   8273a:	4798      	blx	r3
   8273c:	b281      	uxth	r1, r0
   8273e:	4b6a      	ldr	r3, [pc, #424]	; (828e8 <Shell+0x7b4>)
   82740:	8219      	strh	r1, [r3, #16]
				k=0;
   82742:	9605      	str	r6, [sp, #20]
				while((commands[k].cmdCode)&&(commands[k].cmdCode!=shell.crc)) k++;
   82744:	4b73      	ldr	r3, [pc, #460]	; (82914 <Shell+0x7e0>)
   82746:	881b      	ldrh	r3, [r3, #0]
   82748:	b1f3      	cbz	r3, 82788 <Shell+0x654>
   8274a:	4299      	cmp	r1, r3
   8274c:	d01e      	beq.n	8278c <Shell+0x658>
   8274e:	2301      	movs	r3, #1
   82750:	4a70      	ldr	r2, [pc, #448]	; (82914 <Shell+0x7e0>)
   82752:	e000      	b.n	82756 <Shell+0x622>
   82754:	462b      	mov	r3, r5
   82756:	f832 4033 	ldrh.w	r4, [r2, r3, lsl #3]
   8275a:	b124      	cbz	r4, 82766 <Shell+0x632>
   8275c:	1c5d      	adds	r5, r3, #1
   8275e:	42a1      	cmp	r1, r4
   82760:	d1f8      	bne.n	82754 <Shell+0x620>
   82762:	9305      	str	r3, [sp, #20]
   82764:	e000      	b.n	82768 <Shell+0x634>
   82766:	9305      	str	r3, [sp, #20]
				if(commands[k].pCmdFunc)
   82768:	4c6a      	ldr	r4, [pc, #424]	; (82914 <Shell+0x7e0>)
   8276a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   8276e:	685d      	ldr	r5, [r3, #4]
   82770:	b175      	cbz	r5, 82790 <Shell+0x65c>
					commands[k].pCmdFunc((uint32_t)&shell,(void*)(pToken+strlen((char*)pToken)+1));
   82772:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   82774:	4620      	mov	r0, r4
   82776:	4b65      	ldr	r3, [pc, #404]	; (8290c <Shell+0x7d8>)
   82778:	4798      	blx	r3
   8277a:	1c61      	adds	r1, r4, #1
   8277c:	4401      	add	r1, r0
   8277e:	485a      	ldr	r0, [pc, #360]	; (828e8 <Shell+0x7b4>)
   82780:	47a8      	blx	r5
					mstrtokRestore();
   82782:	4b65      	ldr	r3, [pc, #404]	; (82918 <Shell+0x7e4>)
   82784:	4798      	blx	r3
   82786:	e7c5      	b.n	82714 <Shell+0x5e0>
				while((commands[k].cmdCode)&&(commands[k].cmdCode!=shell.crc)) k++;
   82788:	2300      	movs	r3, #0
   8278a:	e7ed      	b.n	82768 <Shell+0x634>
   8278c:	2300      	movs	r3, #0
   8278e:	e7eb      	b.n	82768 <Shell+0x634>
					k=0;
   82790:	2300      	movs	r3, #0
   82792:	9305      	str	r3, [sp, #20]
                    while((cmdEntries[k].cmdCode)&&(cmdEntries[k].cmdCode!=shell.crc)) k++;
   82794:	4b61      	ldr	r3, [pc, #388]	; (8291c <Shell+0x7e8>)
   82796:	881b      	ldrh	r3, [r3, #0]
   82798:	b313      	cbz	r3, 827e0 <Shell+0x6ac>
   8279a:	4299      	cmp	r1, r3
   8279c:	d022      	beq.n	827e4 <Shell+0x6b0>
   8279e:	2301      	movs	r3, #1
   827a0:	4c5e      	ldr	r4, [pc, #376]	; (8291c <Shell+0x7e8>)
   827a2:	e000      	b.n	827a6 <Shell+0x672>
   827a4:	462b      	mov	r3, r5
   827a6:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
   827aa:	b122      	cbz	r2, 827b6 <Shell+0x682>
   827ac:	1c5d      	adds	r5, r3, #1
   827ae:	4291      	cmp	r1, r2
   827b0:	d1f8      	bne.n	827a4 <Shell+0x670>
   827b2:	9305      	str	r3, [sp, #20]
   827b4:	e000      	b.n	827b8 <Shell+0x684>
   827b6:	9305      	str	r3, [sp, #20]
                    if(cmdEntries[k].pCmdFunc)
   827b8:	4958      	ldr	r1, [pc, #352]	; (8291c <Shell+0x7e8>)
   827ba:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   827be:	685d      	ldr	r5, [r3, #4]
   827c0:	b195      	cbz	r5, 827e8 <Shell+0x6b4>
	                    cmdEntries[k].pCmdFunc((uint32_t)&shell,(void*)(pToken+strlen((char*)pToken)+1));
   827c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   827c4:	4620      	mov	r0, r4
   827c6:	4b51      	ldr	r3, [pc, #324]	; (8290c <Shell+0x7d8>)
   827c8:	4798      	blx	r3
   827ca:	1c61      	adds	r1, r4, #1
   827cc:	4401      	add	r1, r0
   827ce:	4846      	ldr	r0, [pc, #280]	; (828e8 <Shell+0x7b4>)
   827d0:	47a8      	blx	r5
						mstrtokRestore();
   827d2:	4b51      	ldr	r3, [pc, #324]	; (82918 <Shell+0x7e4>)
   827d4:	4798      	blx	r3
						Putstr("\r\n");
   827d6:	494c      	ldr	r1, [pc, #304]	; (82908 <Shell+0x7d4>)
   827d8:	2067      	movs	r0, #103	; 0x67
   827da:	4b46      	ldr	r3, [pc, #280]	; (828f4 <Shell+0x7c0>)
   827dc:	4798      	blx	r3
   827de:	e799      	b.n	82714 <Shell+0x5e0>
                    while((cmdEntries[k].cmdCode)&&(cmdEntries[k].cmdCode!=shell.crc)) k++;
   827e0:	2300      	movs	r3, #0
   827e2:	e7e9      	b.n	827b8 <Shell+0x684>
   827e4:	2300      	movs	r3, #0
   827e6:	e7e7      	b.n	827b8 <Shell+0x684>
                    else if(mIsBitsSet(shell.status,ST_SHELL_SHOW_UNKNOW_CRC))
   827e8:	4b3f      	ldr	r3, [pc, #252]	; (828e8 <Shell+0x7b4>)
   827ea:	881b      	ldrh	r3, [r3, #0]
   827ec:	f013 0f02 	tst.w	r3, #2
   827f0:	d090      	beq.n	82714 <Shell+0x5e0>
	                    sprintf(shellTmpBuf,"\tunknown cmd: %04X\r\n",shell.crc);
   827f2:	4c4b      	ldr	r4, [pc, #300]	; (82920 <Shell+0x7ec>)
   827f4:	b282      	uxth	r2, r0
   827f6:	494b      	ldr	r1, [pc, #300]	; (82924 <Shell+0x7f0>)
   827f8:	4620      	mov	r0, r4
   827fa:	4b4b      	ldr	r3, [pc, #300]	; (82928 <Shell+0x7f4>)
   827fc:	4798      	blx	r3
	                    Putstr(shellTmpBuf);
   827fe:	4621      	mov	r1, r4
   82800:	2067      	movs	r0, #103	; 0x67
   82802:	4b3c      	ldr	r3, [pc, #240]	; (828f4 <Shell+0x7c0>)
   82804:	4798      	blx	r3
						mstrtokRestore();
   82806:	4b44      	ldr	r3, [pc, #272]	; (82918 <Shell+0x7e4>)
   82808:	4798      	blx	r3
   8280a:	e783      	b.n	82714 <Shell+0x5e0>
			shell.state=ED_ESCAPE_SEQ;
   8280c:	2205      	movs	r2, #5
   8280e:	4b36      	ldr	r3, [pc, #216]	; (828e8 <Shell+0x7b4>)
   82810:	771a      	strb	r2, [r3, #28]
			shell.escapeTimer=SHELL_ESC_TIMEOUT;
   82812:	4c35      	ldr	r4, [pc, #212]	; (828e8 <Shell+0x7b4>)
   82814:	f241 3388 	movw	r3, #5000	; 0x1388
   82818:	61a3      	str	r3, [r4, #24]
			*shell.pEscbuf++=_kbhitchar;
   8281a:	68a3      	ldr	r3, [r4, #8]
   8281c:	1c5a      	adds	r2, r3, #1
   8281e:	60a2      	str	r2, [r4, #8]
   82820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82822:	701a      	strb	r2, [r3, #0]
			shell.nEscChar++;
   82824:	89e3      	ldrh	r3, [r4, #14]
   82826:	3301      	adds	r3, #1
   82828:	81e3      	strh	r3, [r4, #14]
			shell.crc=CRC16MODBUS(_kbhitchar,shell.crc);
   8282a:	8a21      	ldrh	r1, [r4, #16]
   8282c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   82830:	4b3e      	ldr	r3, [pc, #248]	; (8292c <Shell+0x7f8>)
   82832:	4798      	blx	r3
   82834:	8220      	strh	r0, [r4, #16]
	return 0;
   82836:	f04f 0800 	mov.w	r8, #0
			break;
   8283a:	e4bf      	b.n	821bc <Shell+0x88>
			Putstr("\r\n\t***** case _SHELL_KBHIT: BAD case! ******\r\n");
   8283c:	493c      	ldr	r1, [pc, #240]	; (82930 <Shell+0x7fc>)
   8283e:	2067      	movs	r0, #103	; 0x67
   82840:	4b2c      	ldr	r3, [pc, #176]	; (828f4 <Shell+0x7c0>)
   82842:	4798      	blx	r3
			shell.state=IDLE;
   82844:	4b28      	ldr	r3, [pc, #160]	; (828e8 <Shell+0x7b4>)
   82846:	f04f 0800 	mov.w	r8, #0
   8284a:	f883 801c 	strb.w	r8, [r3, #28]
			ExitEditMode();
   8284e:	881a      	ldrh	r2, [r3, #0]
   82850:	f022 0204 	bic.w	r2, r2, #4
   82854:	801a      	strh	r2, [r3, #0]
			break;
   82856:	e4b1      	b.n	821bc <Shell+0x88>
		if(shell.escapeTimer)
   82858:	4b23      	ldr	r3, [pc, #140]	; (828e8 <Shell+0x7b4>)
   8285a:	699b      	ldr	r3, [r3, #24]
   8285c:	b193      	cbz	r3, 82884 <Shell+0x750>
			if(--shell.escapeTimer==0)
   8285e:	3b01      	subs	r3, #1
   82860:	4a21      	ldr	r2, [pc, #132]	; (828e8 <Shell+0x7b4>)
   82862:	6193      	str	r3, [r2, #24]
   82864:	b973      	cbnz	r3, 82884 <Shell+0x750>
				switch(shell.state)
   82866:	7f11      	ldrb	r1, [r2, #28]
   82868:	2905      	cmp	r1, #5
   8286a:	f200 8256 	bhi.w	82d1a <Shell+0xbe6>
   8286e:	e8df f011 	tbh	[pc, r1, lsl #1]
   82872:	0009      	.short	0x0009
   82874:	00170006 	.word	0x00170006
   82878:	008c0254 	.word	0x008c0254
   8287c:	0098      	.short	0x0098
					shell.state=IDLE;
   8287e:	2200      	movs	r2, #0
   82880:	4b19      	ldr	r3, [pc, #100]	; (828e8 <Shell+0x7b4>)
   82882:	771a      	strb	r2, [r3, #28]
        if(shell.editTimer)
   82884:	4b18      	ldr	r3, [pc, #96]	; (828e8 <Shell+0x7b4>)
   82886:	f8d3 8014 	ldr.w	r8, [r3, #20]
   8288a:	f1b8 0f00 	cmp.w	r8, #0
   8288e:	f43f ac95 	beq.w	821bc <Shell+0x88>
	        if(--shell.editTimer==0)
   82892:	f108 32ff 	add.w	r2, r8, #4294967295
   82896:	4b14      	ldr	r3, [pc, #80]	; (828e8 <Shell+0x7b4>)
   82898:	615a      	str	r2, [r3, #20]
	return 0;
   8289a:	f04f 0800 	mov.w	r8, #0
   8289e:	e48d      	b.n	821bc <Shell+0x88>
					shell.crc=CRC16MODBUSFRAME((unsigned char*)shellEscapeBuf,shell.nEscChar);
   828a0:	4c11      	ldr	r4, [pc, #68]	; (828e8 <Shell+0x7b4>)
   828a2:	89e1      	ldrh	r1, [r4, #14]
   828a4:	4823      	ldr	r0, [pc, #140]	; (82934 <Shell+0x800>)
   828a6:	4b1a      	ldr	r3, [pc, #104]	; (82910 <Shell+0x7dc>)
   828a8:	4798      	blx	r3
   828aa:	b280      	uxth	r0, r0
   828ac:	8220      	strh	r0, [r4, #16]
					switch(shell.crc)
   828ae:	f24c 73f5 	movw	r3, #51189	; 0xc7f5
   828b2:	4298      	cmp	r0, r3
   828b4:	d00c      	beq.n	828d0 <Shell+0x79c>
   828b6:	f24c 73fa 	movw	r3, #51194	; 0xc7fa
   828ba:	4298      	cmp	r0, r3
   828bc:	d00c      	beq.n	828d8 <Shell+0x7a4>
						if(mIsBitsSet(shell.status,ST_SHELL_SHOW_UNKNOW_CRC))
   828be:	4b0a      	ldr	r3, [pc, #40]	; (828e8 <Shell+0x7b4>)
   828c0:	881b      	ldrh	r3, [r3, #0]
   828c2:	f013 0f02 	tst.w	r3, #2
   828c6:	d14c      	bne.n	82962 <Shell+0x82e>
						shell.state=IDLE;
   828c8:	2200      	movs	r2, #0
   828ca:	4b07      	ldr	r3, [pc, #28]	; (828e8 <Shell+0x7b4>)
   828cc:	771a      	strb	r2, [r3, #28]
						break;
   828ce:	e7d9      	b.n	82884 <Shell+0x750>
						shell.state=IDLE;
   828d0:	2200      	movs	r2, #0
   828d2:	4b05      	ldr	r3, [pc, #20]	; (828e8 <Shell+0x7b4>)
   828d4:	771a      	strb	r2, [r3, #28]
						break;
   828d6:	e7d5      	b.n	82884 <Shell+0x750>
						if(shell.nChar)
   828d8:	4b03      	ldr	r3, [pc, #12]	; (828e8 <Shell+0x7b4>)
   828da:	899b      	ldrh	r3, [r3, #12]
   828dc:	bb63      	cbnz	r3, 82938 <Shell+0x804>
							shell.state=IDLE;
   828de:	2200      	movs	r2, #0
   828e0:	4b01      	ldr	r3, [pc, #4]	; (828e8 <Shell+0x7b4>)
   828e2:	771a      	strb	r2, [r3, #28]
   828e4:	e7ce      	b.n	82884 <Shell+0x750>
   828e6:	bf00      	nop
   828e8:	200011c4 	.word	0x200011c4
   828ec:	200010c0 	.word	0x200010c0
   828f0:	00088c7c 	.word	0x00088c7c
   828f4:	000832dd 	.word	0x000832dd
   828f8:	00088c80 	.word	0x00088c80
   828fc:	00083759 	.word	0x00083759
   82900:	00088b70 	.word	0x00088b70
   82904:	00083785 	.word	0x00083785
   82908:	00088ccc 	.word	0x00088ccc
   8290c:	00083ebd 	.word	0x00083ebd
   82910:	0008176d 	.word	0x0008176d
   82914:	00088b14 	.word	0x00088b14
   82918:	00083741 	.word	0x00083741
   8291c:	0008901c 	.word	0x0008901c
   82920:	20001264 	.word	0x20001264
   82924:	00088c88 	.word	0x00088c88
   82928:	00083e71 	.word	0x00083e71
   8292c:	000817a1 	.word	0x000817a1
   82930:	00088ca0 	.word	0x00088ca0
   82934:	200011e4 	.word	0x200011e4
							EnterEditMode();
   82938:	4c97      	ldr	r4, [pc, #604]	; (82b98 <Shell+0xa64>)
   8293a:	8822      	ldrh	r2, [r4, #0]
   8293c:	f042 0204 	orr.w	r2, r2, #4
   82940:	8022      	strh	r2, [r4, #0]
							shell.editTimer=SHELL_EDIT_TIMEOUT;
   82942:	2264      	movs	r2, #100	; 0x64
   82944:	6162      	str	r2, [r4, #20]
							shell.pEdit=shellEditBuf+shell.nChar;
   82946:	4e95      	ldr	r6, [pc, #596]	; (82b9c <Shell+0xa68>)
   82948:	4433      	add	r3, r6
   8294a:	6063      	str	r3, [r4, #4]
							Putstr("\r\n");
   8294c:	4994      	ldr	r1, [pc, #592]	; (82ba0 <Shell+0xa6c>)
   8294e:	2067      	movs	r0, #103	; 0x67
   82950:	4d94      	ldr	r5, [pc, #592]	; (82ba4 <Shell+0xa70>)
   82952:	47a8      	blx	r5
							Putstrlen(shellEditBuf,shell.nChar);
   82954:	89a2      	ldrh	r2, [r4, #12]
   82956:	4631      	mov	r1, r6
   82958:	2068      	movs	r0, #104	; 0x68
   8295a:	47a8      	blx	r5
							shell.state=EDITION;
   8295c:	2303      	movs	r3, #3
   8295e:	7723      	strb	r3, [r4, #28]
   82960:	e790      	b.n	82884 <Shell+0x750>
							Putstr("\r\n   ESC_SEQ: ");
   82962:	4991      	ldr	r1, [pc, #580]	; (82ba8 <Shell+0xa74>)
   82964:	2067      	movs	r0, #103	; 0x67
   82966:	4c8f      	ldr	r4, [pc, #572]	; (82ba4 <Shell+0xa70>)
   82968:	47a0      	blx	r4
							_PutAscii2Hex(shellEscapeBuf,shell.nEscChar);
   8296a:	4e8b      	ldr	r6, [pc, #556]	; (82b98 <Shell+0xa64>)
   8296c:	89f2      	ldrh	r2, [r6, #14]
   8296e:	498f      	ldr	r1, [pc, #572]	; (82bac <Shell+0xa78>)
   82970:	2005      	movs	r0, #5
   82972:	f7ff fbdf 	bl	82134 <Shell>
							sprintf(shellTmpBuf," <%04X>\r\n",shell.crc);
   82976:	4d8e      	ldr	r5, [pc, #568]	; (82bb0 <Shell+0xa7c>)
   82978:	8a32      	ldrh	r2, [r6, #16]
   8297a:	498e      	ldr	r1, [pc, #568]	; (82bb4 <Shell+0xa80>)
   8297c:	4628      	mov	r0, r5
   8297e:	4b8e      	ldr	r3, [pc, #568]	; (82bb8 <Shell+0xa84>)
   82980:	4798      	blx	r3
							Putstr(shellTmpBuf);
   82982:	4629      	mov	r1, r5
   82984:	2067      	movs	r0, #103	; 0x67
   82986:	47a0      	blx	r4
   82988:	e79e      	b.n	828c8 <Shell+0x794>
					Putstr("\e[2K\r");
   8298a:	498c      	ldr	r1, [pc, #560]	; (82bbc <Shell+0xa88>)
   8298c:	2067      	movs	r0, #103	; 0x67
   8298e:	4b85      	ldr	r3, [pc, #532]	; (82ba4 <Shell+0xa70>)
   82990:	4798      	blx	r3
					shell.state=IDLE;
   82992:	4b81      	ldr	r3, [pc, #516]	; (82b98 <Shell+0xa64>)
   82994:	2200      	movs	r2, #0
   82996:	771a      	strb	r2, [r3, #28]
					ExitEditMode();
   82998:	881a      	ldrh	r2, [r3, #0]
   8299a:	f022 0204 	bic.w	r2, r2, #4
   8299e:	801a      	strh	r2, [r3, #0]
					break;
   829a0:	e770      	b.n	82884 <Shell+0x750>
					shell.crc=CRC16MODBUSFRAME((unsigned char*)shellEscapeBuf,shell.nEscChar);
   829a2:	4c7d      	ldr	r4, [pc, #500]	; (82b98 <Shell+0xa64>)
   829a4:	89e1      	ldrh	r1, [r4, #14]
   829a6:	4881      	ldr	r0, [pc, #516]	; (82bac <Shell+0xa78>)
   829a8:	4b85      	ldr	r3, [pc, #532]	; (82bc0 <Shell+0xa8c>)
   829aa:	4798      	blx	r3
   829ac:	b280      	uxth	r0, r0
   829ae:	8220      	strh	r0, [r4, #16]
					switch(shell.crc)
   829b0:	f24c 133a 	movw	r3, #49466	; 0xc13a
   829b4:	4298      	cmp	r0, r3
   829b6:	f000 810b 	beq.w	82bd0 <Shell+0xa9c>
   829ba:	d832      	bhi.n	82a22 <Shell+0x8ee>
   829bc:	f245 33e2 	movw	r3, #21474	; 0x53e2
   829c0:	4298      	cmp	r0, r3
   829c2:	f000 80df 	beq.w	82b84 <Shell+0xa50>
   829c6:	d81d      	bhi.n	82a04 <Shell+0x8d0>
   829c8:	f240 53bb 	movw	r3, #1467	; 0x5bb
   829cc:	4298      	cmp	r0, r3
   829ce:	f000 8119 	beq.w	82c04 <Shell+0xad0>
   829d2:	f240 637b 	movw	r3, #1659	; 0x67b
   829d6:	4298      	cmp	r0, r3
   829d8:	d11d      	bne.n	82a16 <Shell+0x8e2>
						if(shell.pEdit<(shellEditBuf+shell.nChar))
   829da:	4a6f      	ldr	r2, [pc, #444]	; (82b98 <Shell+0xa64>)
   829dc:	8993      	ldrh	r3, [r2, #12]
   829de:	496f      	ldr	r1, [pc, #444]	; (82b9c <Shell+0xa68>)
   829e0:	440b      	add	r3, r1
   829e2:	6852      	ldr	r2, [r2, #4]
   829e4:	429a      	cmp	r2, r3
   829e6:	d207      	bcs.n	829f8 <Shell+0x8c4>
							Putstr("\e[C");
   829e8:	4976      	ldr	r1, [pc, #472]	; (82bc4 <Shell+0xa90>)
   829ea:	2067      	movs	r0, #103	; 0x67
   829ec:	4b6d      	ldr	r3, [pc, #436]	; (82ba4 <Shell+0xa70>)
   829ee:	4798      	blx	r3
							shell.pEdit++;
   829f0:	4a69      	ldr	r2, [pc, #420]	; (82b98 <Shell+0xa64>)
   829f2:	6853      	ldr	r3, [r2, #4]
   829f4:	3301      	adds	r3, #1
   829f6:	6053      	str	r3, [r2, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   829f8:	4b67      	ldr	r3, [pc, #412]	; (82b98 <Shell+0xa64>)
   829fa:	2264      	movs	r2, #100	; 0x64
   829fc:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   829fe:	2203      	movs	r2, #3
   82a00:	771a      	strb	r2, [r3, #28]
						break;
   82a02:	e02d      	b.n	82a60 <Shell+0x92c>
					switch(shell.crc)
   82a04:	f646 730e 	movw	r3, #28430	; 0x6f0e
   82a08:	4298      	cmp	r0, r3
   82a0a:	d035      	beq.n	82a78 <Shell+0x944>
   82a0c:	f64a 534f 	movw	r3, #44367	; 0xad4f
   82a10:	4298      	cmp	r0, r3
   82a12:	f000 8145 	beq.w	82ca0 <Shell+0xb6c>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82a16:	4b60      	ldr	r3, [pc, #384]	; (82b98 <Shell+0xa64>)
   82a18:	2264      	movs	r2, #100	; 0x64
   82a1a:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82a1c:	2203      	movs	r2, #3
   82a1e:	771a      	strb	r2, [r3, #28]
						break;
   82a20:	e01e      	b.n	82a60 <Shell+0x92c>
					switch(shell.crc)
   82a22:	f24c 63ba 	movw	r3, #50874	; 0xc6ba
   82a26:	4298      	cmp	r0, r3
   82a28:	d065      	beq.n	82af6 <Shell+0x9c2>
   82a2a:	d81d      	bhi.n	82a68 <Shell+0x934>
   82a2c:	f24c 33e3 	movw	r3, #50147	; 0xc3e3
   82a30:	4298      	cmp	r0, r3
   82a32:	d072      	beq.n	82b1a <Shell+0x9e6>
   82a34:	f24c 433a 	movw	r3, #50234	; 0xc43a
   82a38:	4298      	cmp	r0, r3
   82a3a:	d1ec      	bne.n	82a16 <Shell+0x8e2>
						if(shell.pEdit>shellEditBuf)
   82a3c:	4b56      	ldr	r3, [pc, #344]	; (82b98 <Shell+0xa64>)
   82a3e:	685a      	ldr	r2, [r3, #4]
   82a40:	4b56      	ldr	r3, [pc, #344]	; (82b9c <Shell+0xa68>)
   82a42:	429a      	cmp	r2, r3
   82a44:	d907      	bls.n	82a56 <Shell+0x922>
							Putstr("\e[D");
   82a46:	4960      	ldr	r1, [pc, #384]	; (82bc8 <Shell+0xa94>)
   82a48:	2067      	movs	r0, #103	; 0x67
   82a4a:	4b56      	ldr	r3, [pc, #344]	; (82ba4 <Shell+0xa70>)
   82a4c:	4798      	blx	r3
							shell.pEdit--;
   82a4e:	4a52      	ldr	r2, [pc, #328]	; (82b98 <Shell+0xa64>)
   82a50:	6853      	ldr	r3, [r2, #4]
   82a52:	3b01      	subs	r3, #1
   82a54:	6053      	str	r3, [r2, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82a56:	4b50      	ldr	r3, [pc, #320]	; (82b98 <Shell+0xa64>)
   82a58:	2264      	movs	r2, #100	; 0x64
   82a5a:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82a5c:	2203      	movs	r2, #3
   82a5e:	771a      	strb	r2, [r3, #28]
        if(shell.editTimer)
   82a60:	4b4d      	ldr	r3, [pc, #308]	; (82b98 <Shell+0xa64>)
   82a62:	f8d3 8014 	ldr.w	r8, [r3, #20]
   82a66:	e714      	b.n	82892 <Shell+0x75e>
					switch(shell.crc)
   82a68:	f24c 73f5 	movw	r3, #51189	; 0xc7f5
   82a6c:	4298      	cmp	r0, r3
   82a6e:	d04e      	beq.n	82b0e <Shell+0x9da>
   82a70:	f64c 43ba 	movw	r3, #52410	; 0xccba
   82a74:	4298      	cmp	r0, r3
   82a76:	d1ce      	bne.n	82a16 <Shell+0x8e2>
						if((shell.nChar&&(shell.pEdit==shellEditBuf+shell.nChar)) ||
   82a78:	4b47      	ldr	r3, [pc, #284]	; (82b98 <Shell+0xa64>)
   82a7a:	899b      	ldrh	r3, [r3, #12]
   82a7c:	b12b      	cbz	r3, 82a8a <Shell+0x956>
   82a7e:	4a47      	ldr	r2, [pc, #284]	; (82b9c <Shell+0xa68>)
   82a80:	4413      	add	r3, r2
   82a82:	4a45      	ldr	r2, [pc, #276]	; (82b98 <Shell+0xa64>)
   82a84:	6852      	ldr	r2, [r2, #4]
   82a86:	429a      	cmp	r2, r3
   82a88:	d015      	beq.n	82ab6 <Shell+0x982>
						(((shell.pEdit-1)>=shellEditBuf)&&(_IsSeparator(*(shell.pEdit-1),separators))&&(!_IsSeparator(*shell.pEdit,separators))))
   82a8a:	4b43      	ldr	r3, [pc, #268]	; (82b98 <Shell+0xa64>)
   82a8c:	685b      	ldr	r3, [r3, #4]
   82a8e:	1e59      	subs	r1, r3, #1
						if((shell.nChar&&(shell.pEdit==shellEditBuf+shell.nChar)) ||
   82a90:	4a42      	ldr	r2, [pc, #264]	; (82b9c <Shell+0xa68>)
   82a92:	4291      	cmp	r1, r2
   82a94:	d317      	bcc.n	82ac6 <Shell+0x992>
						(((shell.pEdit-1)>=shellEditBuf)&&(_IsSeparator(*(shell.pEdit-1),separators))&&(!_IsSeparator(*shell.pEdit,separators))))
   82a96:	4c4d      	ldr	r4, [pc, #308]	; (82bcc <Shell+0xa98>)
   82a98:	4622      	mov	r2, r4
   82a9a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   82a9e:	2006      	movs	r0, #6
   82aa0:	f7ff fb48 	bl	82134 <Shell>
   82aa4:	b178      	cbz	r0, 82ac6 <Shell+0x992>
   82aa6:	4b3c      	ldr	r3, [pc, #240]	; (82b98 <Shell+0xa64>)
   82aa8:	685b      	ldr	r3, [r3, #4]
   82aaa:	4622      	mov	r2, r4
   82aac:	7819      	ldrb	r1, [r3, #0]
   82aae:	2006      	movs	r0, #6
   82ab0:	f7ff fb40 	bl	82134 <Shell>
   82ab4:	b938      	cbnz	r0, 82ac6 <Shell+0x992>
							shell.pEdit--; Putstr("\e[D");
   82ab6:	4a38      	ldr	r2, [pc, #224]	; (82b98 <Shell+0xa64>)
   82ab8:	6853      	ldr	r3, [r2, #4]
   82aba:	3b01      	subs	r3, #1
   82abc:	6053      	str	r3, [r2, #4]
   82abe:	4942      	ldr	r1, [pc, #264]	; (82bc8 <Shell+0xa94>)
   82ac0:	2067      	movs	r0, #103	; 0x67
   82ac2:	4b38      	ldr	r3, [pc, #224]	; (82ba4 <Shell+0xa70>)
   82ac4:	4798      	blx	r3
						if(_IsSeparator(*shell.pEdit,separators))
   82ac6:	4d41      	ldr	r5, [pc, #260]	; (82bcc <Shell+0xa98>)
   82ac8:	4b33      	ldr	r3, [pc, #204]	; (82b98 <Shell+0xa64>)
   82aca:	685b      	ldr	r3, [r3, #4]
   82acc:	462a      	mov	r2, r5
   82ace:	7819      	ldrb	r1, [r3, #0]
   82ad0:	2006      	movs	r0, #6
   82ad2:	f7ff fb2f 	bl	82134 <Shell>
   82ad6:	2800      	cmp	r0, #0
   82ad8:	f040 80c5 	bne.w	82c66 <Shell+0xb32>
						while(((shell.pEdit-1)>=shellEditBuf)&&(!_IsSeparator(*(shell.pEdit-1),separators)))
   82adc:	4b2e      	ldr	r3, [pc, #184]	; (82b98 <Shell+0xa64>)
   82ade:	685b      	ldr	r3, [r3, #4]
   82ae0:	1e59      	subs	r1, r3, #1
   82ae2:	4a2e      	ldr	r2, [pc, #184]	; (82b9c <Shell+0xa68>)
   82ae4:	4291      	cmp	r1, r2
   82ae6:	f080 80d7 	bcs.w	82c98 <Shell+0xb64>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82aea:	4b2b      	ldr	r3, [pc, #172]	; (82b98 <Shell+0xa64>)
   82aec:	2264      	movs	r2, #100	; 0x64
   82aee:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82af0:	2203      	movs	r2, #3
   82af2:	771a      	strb	r2, [r3, #28]
						break;
   82af4:	e7b4      	b.n	82a60 <Shell+0x92c>
						Putstr("\e[2K\r");
   82af6:	4931      	ldr	r1, [pc, #196]	; (82bbc <Shell+0xa88>)
   82af8:	2067      	movs	r0, #103	; 0x67
   82afa:	4b2a      	ldr	r3, [pc, #168]	; (82ba4 <Shell+0xa70>)
   82afc:	4798      	blx	r3
						ExitEditMode();
   82afe:	4b26      	ldr	r3, [pc, #152]	; (82b98 <Shell+0xa64>)
   82b00:	881a      	ldrh	r2, [r3, #0]
   82b02:	f022 0204 	bic.w	r2, r2, #4
   82b06:	801a      	strh	r2, [r3, #0]
						shell.state=IDLE;
   82b08:	2200      	movs	r2, #0
   82b0a:	771a      	strb	r2, [r3, #28]
						break;
   82b0c:	e6ba      	b.n	82884 <Shell+0x750>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82b0e:	4b22      	ldr	r3, [pc, #136]	; (82b98 <Shell+0xa64>)
   82b10:	2264      	movs	r2, #100	; 0x64
   82b12:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82b14:	2203      	movs	r2, #3
   82b16:	771a      	strb	r2, [r3, #28]
						break;
   82b18:	e7a2      	b.n	82a60 <Shell+0x92c>
						pSrc=(uint32_t)shell.pEdit+1;
   82b1a:	4a1f      	ldr	r2, [pc, #124]	; (82b98 <Shell+0xa64>)
   82b1c:	6853      	ldr	r3, [r2, #4]
   82b1e:	3301      	adds	r3, #1
   82b20:	930e      	str	r3, [sp, #56]	; 0x38
						while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82b22:	491e      	ldr	r1, [pc, #120]	; (82b9c <Shell+0xa68>)
   82b24:	8992      	ldrh	r2, [r2, #12]
   82b26:	440a      	add	r2, r1
   82b28:	4293      	cmp	r3, r2
   82b2a:	d20a      	bcs.n	82b42 <Shell+0xa0e>
   82b2c:	481a      	ldr	r0, [pc, #104]	; (82b98 <Shell+0xa64>)
							*(char*)(pSrc-1)=*(char*)pSrc; pSrc++;
   82b2e:	781a      	ldrb	r2, [r3, #0]
   82b30:	f803 2c01 	strb.w	r2, [r3, #-1]
   82b34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82b36:	3301      	adds	r3, #1
   82b38:	930e      	str	r3, [sp, #56]	; 0x38
						while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82b3a:	8982      	ldrh	r2, [r0, #12]
   82b3c:	440a      	add	r2, r1
   82b3e:	429a      	cmp	r2, r3
   82b40:	d8f5      	bhi.n	82b2e <Shell+0x9fa>
						*(char*)(pSrc-1)=' ';
   82b42:	2220      	movs	r2, #32
   82b44:	f803 2c01 	strb.w	r2, [r3, #-1]
	                    k=Putstrlen(shell.pEdit,pSrc-(uint32_t)shell.pEdit);
   82b48:	4b13      	ldr	r3, [pc, #76]	; (82b98 <Shell+0xa64>)
   82b4a:	6859      	ldr	r1, [r3, #4]
   82b4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82b4e:	1a52      	subs	r2, r2, r1
   82b50:	2068      	movs	r0, #104	; 0x68
   82b52:	4b14      	ldr	r3, [pc, #80]	; (82ba4 <Shell+0xa70>)
   82b54:	4798      	blx	r3
		                while(k--) Putstr("\e[D");
   82b56:	1e43      	subs	r3, r0, #1
   82b58:	930e      	str	r3, [sp, #56]	; 0x38
   82b5a:	b150      	cbz	r0, 82b72 <Shell+0xa3e>
   82b5c:	4e1a      	ldr	r6, [pc, #104]	; (82bc8 <Shell+0xa94>)
   82b5e:	2567      	movs	r5, #103	; 0x67
   82b60:	4c10      	ldr	r4, [pc, #64]	; (82ba4 <Shell+0xa70>)
   82b62:	4631      	mov	r1, r6
   82b64:	4628      	mov	r0, r5
   82b66:	47a0      	blx	r4
   82b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82b6a:	1e5a      	subs	r2, r3, #1
   82b6c:	920e      	str	r2, [sp, #56]	; 0x38
   82b6e:	2b00      	cmp	r3, #0
   82b70:	d1f7      	bne.n	82b62 <Shell+0xa2e>
			            shell.nChar--;
   82b72:	4b09      	ldr	r3, [pc, #36]	; (82b98 <Shell+0xa64>)
   82b74:	899a      	ldrh	r2, [r3, #12]
   82b76:	3a01      	subs	r2, #1
   82b78:	819a      	strh	r2, [r3, #12]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82b7a:	2264      	movs	r2, #100	; 0x64
   82b7c:	615a      	str	r2, [r3, #20]
				        shell.state=EDITION;
   82b7e:	2203      	movs	r2, #3
   82b80:	771a      	strb	r2, [r3, #28]
					    break;
   82b82:	e76d      	b.n	82a60 <Shell+0x92c>
						mBitsTgl(shell.status,ST_SHELL_INSERT_MODE);
   82b84:	4b04      	ldr	r3, [pc, #16]	; (82b98 <Shell+0xa64>)
   82b86:	881a      	ldrh	r2, [r3, #0]
   82b88:	f082 0201 	eor.w	r2, r2, #1
   82b8c:	801a      	strh	r2, [r3, #0]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82b8e:	2264      	movs	r2, #100	; 0x64
   82b90:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82b92:	2203      	movs	r2, #3
   82b94:	771a      	strb	r2, [r3, #28]
						break;
   82b96:	e763      	b.n	82a60 <Shell+0x92c>
   82b98:	200011c4 	.word	0x200011c4
   82b9c:	200010c0 	.word	0x200010c0
   82ba0:	00088ccc 	.word	0x00088ccc
   82ba4:	000832dd 	.word	0x000832dd
   82ba8:	00088cd0 	.word	0x00088cd0
   82bac:	200011e4 	.word	0x200011e4
   82bb0:	20001264 	.word	0x20001264
   82bb4:	00088ce0 	.word	0x00088ce0
   82bb8:	00083e71 	.word	0x00083e71
   82bbc:	00088cec 	.word	0x00088cec
   82bc0:	0008176d 	.word	0x0008176d
   82bc4:	00088c7c 	.word	0x00088c7c
   82bc8:	00088c78 	.word	0x00088c78
   82bcc:	00088d24 	.word	0x00088d24
						k=(shell.pEdit-shellEditBuf);
   82bd0:	4b9e      	ldr	r3, [pc, #632]	; (82e4c <Shell+0xd18>)
   82bd2:	685b      	ldr	r3, [r3, #4]
   82bd4:	4a9e      	ldr	r2, [pc, #632]	; (82e50 <Shell+0xd1c>)
   82bd6:	1a9b      	subs	r3, r3, r2
						while(k--) Putstr("\e[D");
   82bd8:	1e5a      	subs	r2, r3, #1
   82bda:	920e      	str	r2, [sp, #56]	; 0x38
   82bdc:	b153      	cbz	r3, 82bf4 <Shell+0xac0>
   82bde:	4e9d      	ldr	r6, [pc, #628]	; (82e54 <Shell+0xd20>)
   82be0:	2567      	movs	r5, #103	; 0x67
   82be2:	4c9d      	ldr	r4, [pc, #628]	; (82e58 <Shell+0xd24>)
   82be4:	4631      	mov	r1, r6
   82be6:	4628      	mov	r0, r5
   82be8:	47a0      	blx	r4
   82bea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82bec:	1e5a      	subs	r2, r3, #1
   82bee:	920e      	str	r2, [sp, #56]	; 0x38
   82bf0:	2b00      	cmp	r3, #0
   82bf2:	d1f7      	bne.n	82be4 <Shell+0xab0>
						shell.pEdit=shellEditBuf;
   82bf4:	4b95      	ldr	r3, [pc, #596]	; (82e4c <Shell+0xd18>)
   82bf6:	4a96      	ldr	r2, [pc, #600]	; (82e50 <Shell+0xd1c>)
   82bf8:	605a      	str	r2, [r3, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82bfa:	2264      	movs	r2, #100	; 0x64
   82bfc:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82bfe:	2203      	movs	r2, #3
   82c00:	771a      	strb	r2, [r3, #28]
						break;
   82c02:	e72d      	b.n	82a60 <Shell+0x92c>
						k=((shellEditBuf+shell.nChar)-shell.pEdit);
   82c04:	4a91      	ldr	r2, [pc, #580]	; (82e4c <Shell+0xd18>)
   82c06:	8993      	ldrh	r3, [r2, #12]
   82c08:	4991      	ldr	r1, [pc, #580]	; (82e50 <Shell+0xd1c>)
   82c0a:	440b      	add	r3, r1
   82c0c:	6852      	ldr	r2, [r2, #4]
   82c0e:	1a9b      	subs	r3, r3, r2
						while(k--) Putstr("\e[C");
   82c10:	1e5a      	subs	r2, r3, #1
   82c12:	920e      	str	r2, [sp, #56]	; 0x38
   82c14:	b153      	cbz	r3, 82c2c <Shell+0xaf8>
   82c16:	4e91      	ldr	r6, [pc, #580]	; (82e5c <Shell+0xd28>)
   82c18:	2567      	movs	r5, #103	; 0x67
   82c1a:	4c8f      	ldr	r4, [pc, #572]	; (82e58 <Shell+0xd24>)
   82c1c:	4631      	mov	r1, r6
   82c1e:	4628      	mov	r0, r5
   82c20:	47a0      	blx	r4
   82c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82c24:	1e5a      	subs	r2, r3, #1
   82c26:	920e      	str	r2, [sp, #56]	; 0x38
   82c28:	2b00      	cmp	r3, #0
   82c2a:	d1f7      	bne.n	82c1c <Shell+0xae8>
						shell.pEdit=shellEditBuf+shell.nChar;
   82c2c:	4b87      	ldr	r3, [pc, #540]	; (82e4c <Shell+0xd18>)
   82c2e:	899a      	ldrh	r2, [r3, #12]
   82c30:	4987      	ldr	r1, [pc, #540]	; (82e50 <Shell+0xd1c>)
   82c32:	440a      	add	r2, r1
   82c34:	605a      	str	r2, [r3, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82c36:	2264      	movs	r2, #100	; 0x64
   82c38:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82c3a:	2203      	movs	r2, #3
   82c3c:	771a      	strb	r2, [r3, #28]
						break;
   82c3e:	e70f      	b.n	82a60 <Shell+0x92c>
								shell.pEdit--;
   82c40:	3b01      	subs	r3, #1
   82c42:	6063      	str	r3, [r4, #4]
								Putstr("\e[D");
   82c44:	4631      	mov	r1, r6
   82c46:	2067      	movs	r0, #103	; 0x67
   82c48:	4b83      	ldr	r3, [pc, #524]	; (82e58 <Shell+0xd24>)
   82c4a:	4798      	blx	r3
							while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit>shellEditBuf))
   82c4c:	6863      	ldr	r3, [r4, #4]
   82c4e:	462a      	mov	r2, r5
   82c50:	7819      	ldrb	r1, [r3, #0]
   82c52:	2006      	movs	r0, #6
   82c54:	f7ff fa6e 	bl	82134 <Shell>
   82c58:	2800      	cmp	r0, #0
   82c5a:	f43f af3f 	beq.w	82adc <Shell+0x9a8>
   82c5e:	6863      	ldr	r3, [r4, #4]
   82c60:	42bb      	cmp	r3, r7
   82c62:	d8ed      	bhi.n	82c40 <Shell+0xb0c>
   82c64:	e73a      	b.n	82adc <Shell+0x9a8>
   82c66:	4c79      	ldr	r4, [pc, #484]	; (82e4c <Shell+0xd18>)
   82c68:	4f79      	ldr	r7, [pc, #484]	; (82e50 <Shell+0xd1c>)
								Putstr("\e[D");
   82c6a:	4e7a      	ldr	r6, [pc, #488]	; (82e54 <Shell+0xd20>)
   82c6c:	e7ee      	b.n	82c4c <Shell+0xb18>
							shell.pEdit--;
   82c6e:	6863      	ldr	r3, [r4, #4]
   82c70:	3b01      	subs	r3, #1
   82c72:	6063      	str	r3, [r4, #4]
							Putstr("\e[D");
   82c74:	4639      	mov	r1, r7
   82c76:	2067      	movs	r0, #103	; 0x67
   82c78:	47b0      	blx	r6
						while(((shell.pEdit-1)>=shellEditBuf)&&(!_IsSeparator(*(shell.pEdit-1),separators)))
   82c7a:	6863      	ldr	r3, [r4, #4]
   82c7c:	1e59      	subs	r1, r3, #1
   82c7e:	4a74      	ldr	r2, [pc, #464]	; (82e50 <Shell+0xd1c>)
   82c80:	4291      	cmp	r1, r2
   82c82:	f4ff af32 	bcc.w	82aea <Shell+0x9b6>
   82c86:	462a      	mov	r2, r5
   82c88:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   82c8c:	2006      	movs	r0, #6
   82c8e:	f7ff fa51 	bl	82134 <Shell>
   82c92:	2800      	cmp	r0, #0
   82c94:	d0eb      	beq.n	82c6e <Shell+0xb3a>
   82c96:	e728      	b.n	82aea <Shell+0x9b6>
							shell.pEdit--;
   82c98:	4c6c      	ldr	r4, [pc, #432]	; (82e4c <Shell+0xd18>)
							Putstr("\e[D");
   82c9a:	4f6e      	ldr	r7, [pc, #440]	; (82e54 <Shell+0xd20>)
   82c9c:	4e6e      	ldr	r6, [pc, #440]	; (82e58 <Shell+0xd24>)
   82c9e:	e7f2      	b.n	82c86 <Shell+0xb52>
						if(!_IsSeparator(*shell.pEdit,separators))
   82ca0:	4d6f      	ldr	r5, [pc, #444]	; (82e60 <Shell+0xd2c>)
   82ca2:	4b6a      	ldr	r3, [pc, #424]	; (82e4c <Shell+0xd18>)
   82ca4:	685b      	ldr	r3, [r3, #4]
   82ca6:	462a      	mov	r2, r5
   82ca8:	7819      	ldrb	r1, [r3, #0]
   82caa:	2006      	movs	r0, #6
   82cac:	f7ff fa42 	bl	82134 <Shell>
   82cb0:	b1b8      	cbz	r0, 82ce2 <Shell+0xbae>
						while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   82cb2:	4c66      	ldr	r4, [pc, #408]	; (82e4c <Shell+0xd18>)
   82cb4:	4f66      	ldr	r7, [pc, #408]	; (82e50 <Shell+0xd1c>)
							Putstr("\e[C");
   82cb6:	4e69      	ldr	r6, [pc, #420]	; (82e5c <Shell+0xd28>)
   82cb8:	e01d      	b.n	82cf6 <Shell+0xbc2>
								shell.pEdit++;
   82cba:	3301      	adds	r3, #1
   82cbc:	6063      	str	r3, [r4, #4]
								Putstr("\e[C");
   82cbe:	4631      	mov	r1, r6
   82cc0:	2067      	movs	r0, #103	; 0x67
   82cc2:	4b65      	ldr	r3, [pc, #404]	; (82e58 <Shell+0xd24>)
   82cc4:	4798      	blx	r3
							while((!_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   82cc6:	6863      	ldr	r3, [r4, #4]
   82cc8:	462a      	mov	r2, r5
   82cca:	7819      	ldrb	r1, [r3, #0]
   82ccc:	2006      	movs	r0, #6
   82cce:	f7ff fa31 	bl	82134 <Shell>
   82cd2:	2800      	cmp	r0, #0
   82cd4:	d1ed      	bne.n	82cb2 <Shell+0xb7e>
   82cd6:	6863      	ldr	r3, [r4, #4]
   82cd8:	89a2      	ldrh	r2, [r4, #12]
   82cda:	443a      	add	r2, r7
   82cdc:	4293      	cmp	r3, r2
   82cde:	d3ec      	bcc.n	82cba <Shell+0xb86>
   82ce0:	e7e7      	b.n	82cb2 <Shell+0xb7e>
   82ce2:	4c5a      	ldr	r4, [pc, #360]	; (82e4c <Shell+0xd18>)
   82ce4:	4f5a      	ldr	r7, [pc, #360]	; (82e50 <Shell+0xd1c>)
								Putstr("\e[C");
   82ce6:	4e5d      	ldr	r6, [pc, #372]	; (82e5c <Shell+0xd28>)
   82ce8:	e7ed      	b.n	82cc6 <Shell+0xb92>
							shell.pEdit++;
   82cea:	3301      	adds	r3, #1
   82cec:	6063      	str	r3, [r4, #4]
							Putstr("\e[C");
   82cee:	4631      	mov	r1, r6
   82cf0:	2067      	movs	r0, #103	; 0x67
   82cf2:	4b59      	ldr	r3, [pc, #356]	; (82e58 <Shell+0xd24>)
   82cf4:	4798      	blx	r3
						while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   82cf6:	6863      	ldr	r3, [r4, #4]
   82cf8:	462a      	mov	r2, r5
   82cfa:	7819      	ldrb	r1, [r3, #0]
   82cfc:	2006      	movs	r0, #6
   82cfe:	f7ff fa19 	bl	82134 <Shell>
   82d02:	b120      	cbz	r0, 82d0e <Shell+0xbda>
   82d04:	6863      	ldr	r3, [r4, #4]
   82d06:	89a2      	ldrh	r2, [r4, #12]
   82d08:	443a      	add	r2, r7
   82d0a:	4293      	cmp	r3, r2
   82d0c:	d3ed      	bcc.n	82cea <Shell+0xbb6>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82d0e:	4b4f      	ldr	r3, [pc, #316]	; (82e4c <Shell+0xd18>)
   82d10:	2264      	movs	r2, #100	; 0x64
   82d12:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82d14:	2203      	movs	r2, #3
   82d16:	771a      	strb	r2, [r3, #28]
						break;
   82d18:	e6a2      	b.n	82a60 <Shell+0x92c>
					Error(SHELL_ESC_TIMEOUT,shell.state); //ERROR_SHELL_TIMER_ESC_BAD_SATE
   82d1a:	f241 3088 	movw	r0, #5000	; 0x1388
   82d1e:	4b51      	ldr	r3, [pc, #324]	; (82e64 <Shell+0xd30>)
   82d20:	4798      	blx	r3
   82d22:	e5af      	b.n	82884 <Shell+0x750>
		pSrc=(uint32_t)shellEditBuf;
   82d24:	4d4a      	ldr	r5, [pc, #296]	; (82e50 <Shell+0xd1c>)
   82d26:	950e      	str	r5, [sp, #56]	; 0x38
		while(_IsSeparator(*(char*)pSrc,separators)) pSrc++;
   82d28:	4e4d      	ldr	r6, [pc, #308]	; (82e60 <Shell+0xd2c>)
   82d2a:	2406      	movs	r4, #6
   82d2c:	4632      	mov	r2, r6
   82d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82d30:	7819      	ldrb	r1, [r3, #0]
   82d32:	4620      	mov	r0, r4
   82d34:	f7ff f9fe 	bl	82134 <Shell>
   82d38:	4680      	mov	r8, r0
   82d3a:	b118      	cbz	r0, 82d44 <Shell+0xc10>
   82d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82d3e:	3301      	adds	r3, #1
   82d40:	930e      	str	r3, [sp, #56]	; 0x38
   82d42:	e7f3      	b.n	82d2c <Shell+0xbf8>
		k=pSrc-(uint32_t)shellEditBuf;
   82d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82d46:	1b5a      	subs	r2, r3, r5
   82d48:	9205      	str	r2, [sp, #20]
		if(k)
   82d4a:	b19a      	cbz	r2, 82d74 <Shell+0xc40>
			shell.pEdit=shellEditBuf;
   82d4c:	4a3f      	ldr	r2, [pc, #252]	; (82e4c <Shell+0xd18>)
   82d4e:	4940      	ldr	r1, [pc, #256]	; (82e50 <Shell+0xd1c>)
   82d50:	6051      	str	r1, [r2, #4]
			while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82d52:	8992      	ldrh	r2, [r2, #12]
   82d54:	442a      	add	r2, r5
   82d56:	4293      	cmp	r3, r2
   82d58:	d20c      	bcs.n	82d74 <Shell+0xc40>
				*shell.pEdit++=*(char*)pSrc++;
   82d5a:	493c      	ldr	r1, [pc, #240]	; (82e4c <Shell+0xd18>)
   82d5c:	684a      	ldr	r2, [r1, #4]
   82d5e:	1c50      	adds	r0, r2, #1
   82d60:	6048      	str	r0, [r1, #4]
   82d62:	1c58      	adds	r0, r3, #1
   82d64:	900e      	str	r0, [sp, #56]	; 0x38
   82d66:	781b      	ldrb	r3, [r3, #0]
   82d68:	7013      	strb	r3, [r2, #0]
			while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82d6c:	898a      	ldrh	r2, [r1, #12]
   82d6e:	442a      	add	r2, r5
   82d70:	429a      	cmp	r2, r3
   82d72:	d8f3      	bhi.n	82d5c <Shell+0xc28>
		pSrc=(uint32_t)shellEditBuf+k;
   82d74:	9905      	ldr	r1, [sp, #20]
   82d76:	186b      	adds	r3, r5, r1
   82d78:	930e      	str	r3, [sp, #56]	; 0x38
		shell.nChar-=k;
   82d7a:	4a34      	ldr	r2, [pc, #208]	; (82e4c <Shell+0xd18>)
   82d7c:	8993      	ldrh	r3, [r2, #12]
   82d7e:	1a5b      	subs	r3, r3, r1
   82d80:	8193      	strh	r3, [r2, #12]
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82d82:	4614      	mov	r4, r2
			while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(!_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   82d84:	2706      	movs	r7, #6
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82d86:	e004      	b.n	82d92 <Shell+0xc5e>
			if(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82d88:	89a3      	ldrh	r3, [r4, #12]
   82d8a:	442b      	add	r3, r5
   82d8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82d8e:	4293      	cmp	r3, r2
   82d90:	d814      	bhi.n	82dbc <Shell+0xc88>
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82d94:	89a2      	ldrh	r2, [r4, #12]
   82d96:	442a      	add	r2, r5
   82d98:	429a      	cmp	r2, r3
   82d9a:	f67f aa0f 	bls.w	821bc <Shell+0x88>
			while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(!_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   82d9e:	4632      	mov	r2, r6
   82da0:	7819      	ldrb	r1, [r3, #0]
   82da2:	4638      	mov	r0, r7
   82da4:	f7ff f9c6 	bl	82134 <Shell>
   82da8:	2800      	cmp	r0, #0
   82daa:	d1ed      	bne.n	82d88 <Shell+0xc54>
   82dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82dae:	3301      	adds	r3, #1
   82db0:	930e      	str	r3, [sp, #56]	; 0x38
   82db2:	89a2      	ldrh	r2, [r4, #12]
   82db4:	442a      	add	r2, r5
   82db6:	429a      	cmp	r2, r3
   82db8:	d8f1      	bhi.n	82d9e <Shell+0xc6a>
   82dba:	e7ea      	b.n	82d92 <Shell+0xc5e>
				pSrc++; pSt=shell.pEdit=(char*)pSrc;
   82dbc:	f102 0901 	add.w	r9, r2, #1
   82dc0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   82dc4:	f8c4 9004 	str.w	r9, [r4, #4]
				while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   82dc8:	454b      	cmp	r3, r9
   82dca:	bf88      	it	hi
   82dcc:	464b      	movhi	r3, r9
   82dce:	d90c      	bls.n	82dea <Shell+0xcb6>
   82dd0:	4632      	mov	r2, r6
   82dd2:	7819      	ldrb	r1, [r3, #0]
   82dd4:	4638      	mov	r0, r7
   82dd6:	f7ff f9ad 	bl	82134 <Shell>
   82dda:	b130      	cbz	r0, 82dea <Shell+0xcb6>
   82ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82dde:	3301      	adds	r3, #1
   82de0:	930e      	str	r3, [sp, #56]	; 0x38
   82de2:	89a2      	ldrh	r2, [r4, #12]
   82de4:	442a      	add	r2, r5
   82de6:	429a      	cmp	r2, r3
   82de8:	d8f2      	bhi.n	82dd0 <Shell+0xc9c>
				k=pSrc-(uint32_t)shell.pEdit;
   82dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82dec:	6861      	ldr	r1, [r4, #4]
   82dee:	1a59      	subs	r1, r3, r1
   82df0:	9105      	str	r1, [sp, #20]
				while(k && pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82df2:	b189      	cbz	r1, 82e18 <Shell+0xce4>
   82df4:	89a2      	ldrh	r2, [r4, #12]
   82df6:	442a      	add	r2, r5
   82df8:	4293      	cmp	r3, r2
   82dfa:	d20d      	bcs.n	82e18 <Shell+0xce4>
					*shell.pEdit++=*(char*)pSrc++;
   82dfc:	6862      	ldr	r2, [r4, #4]
   82dfe:	1c51      	adds	r1, r2, #1
   82e00:	6061      	str	r1, [r4, #4]
   82e02:	1c59      	adds	r1, r3, #1
   82e04:	910e      	str	r1, [sp, #56]	; 0x38
   82e06:	781b      	ldrb	r3, [r3, #0]
   82e08:	7013      	strb	r3, [r2, #0]
				while(k && pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82e0a:	9905      	ldr	r1, [sp, #20]
   82e0c:	b121      	cbz	r1, 82e18 <Shell+0xce4>
   82e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82e10:	89a2      	ldrh	r2, [r4, #12]
   82e12:	442a      	add	r2, r5
   82e14:	429a      	cmp	r2, r3
   82e16:	d8f1      	bhi.n	82dfc <Shell+0xcc8>
				shell.nChar-=k;
   82e18:	89a3      	ldrh	r3, [r4, #12]
   82e1a:	1a59      	subs	r1, r3, r1
   82e1c:	81a1      	strh	r1, [r4, #12]
				pSrc=(uint32_t)pSt;
   82e1e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   82e22:	e7b6      	b.n	82d92 <Shell+0xc5e>
		Error(ERROR_SHELL_SWITCH_BAD_SC,sc);
   82e24:	200d      	movs	r0, #13
   82e26:	4b0f      	ldr	r3, [pc, #60]	; (82e64 <Shell+0xd30>)
   82e28:	4798      	blx	r3
	return 0;
   82e2a:	f04f 0800 	mov.w	r8, #0
   82e2e:	f7ff b9c5 	b.w	821bc <Shell+0x88>
   82e32:	f04f 0800 	mov.w	r8, #0
   82e36:	f7ff b9c1 	b.w	821bc <Shell+0x88>
   82e3a:	f04f 0800 	mov.w	r8, #0
   82e3e:	f7ff b9bd 	b.w	821bc <Shell+0x88>
   82e42:	f04f 0800 	mov.w	r8, #0
   82e46:	f7ff b9b9 	b.w	821bc <Shell+0x88>
   82e4a:	bf00      	nop
   82e4c:	200011c4 	.word	0x200011c4
   82e50:	200010c0 	.word	0x200010c0
   82e54:	00088c78 	.word	0x00088c78
   82e58:	000832dd 	.word	0x000832dd
   82e5c:	00088c7c 	.word	0x00088c7c
   82e60:	00088d24 	.word	0x00088d24
   82e64:	000817b5 	.word	0x000817b5
   82e68:	f04f 0800 	mov.w	r8, #0
   82e6c:	f7ff b9a6 	b.w	821bc <Shell+0x88>

00082e70 <getShellStatus>:

uint16_t getShellStatus()
{
	return shell.status;
}
   82e70:	4b01      	ldr	r3, [pc, #4]	; (82e78 <getShellStatus+0x8>)
   82e72:	8818      	ldrh	r0, [r3, #0]
   82e74:	4770      	bx	lr
   82e76:	bf00      	nop
   82e78:	200011c4 	.word	0x200011c4

00082e7c <setShellStatus>:

void setShellStatus(uint16_t sstatus)
{
	shell.status = sstatus;
   82e7c:	4b01      	ldr	r3, [pc, #4]	; (82e84 <setShellStatus+0x8>)
   82e7e:	8018      	strh	r0, [r3, #0]
   82e80:	4770      	bx	lr
   82e82:	bf00      	nop
   82e84:	200011c4 	.word	0x200011c4

00082e88 <_cmd_show>:
#define ST_SHELL_PROMPT_DISABLED        0x000004

char buf[256];

void _cmd_show(uint32_t sc, void*pParam)
{
   82e88:	b538      	push	{r3, r4, r5, lr}
   82e8a:	4605      	mov	r5, r0
   82e8c:	4608      	mov	r0, r1
	char *pToken;
	pToken = strtok(pParam," \r\n");
   82e8e:	490a      	ldr	r1, [pc, #40]	; (82eb8 <_cmd_show+0x30>)
   82e90:	4b0a      	ldr	r3, [pc, #40]	; (82ebc <_cmd_show+0x34>)
   82e92:	4798      	blx	r3
	if(pToken)
   82e94:	b170      	cbz	r0, 82eb4 <_cmd_show+0x2c>
   82e96:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   82e98:	4b09      	ldr	r3, [pc, #36]	; (82ec0 <_cmd_show+0x38>)
   82e9a:	4798      	blx	r3
   82e9c:	4601      	mov	r1, r0
   82e9e:	4620      	mov	r0, r4
   82ea0:	4b08      	ldr	r3, [pc, #32]	; (82ec4 <_cmd_show+0x3c>)
   82ea2:	4798      	blx	r3
   82ea4:	f245 73e5 	movw	r3, #22501	; 0x57e5
   82ea8:	4298      	cmp	r0, r3
   82eaa:	d103      	bne.n	82eb4 <_cmd_show+0x2c>
		{
		case 0x57E5:    //crc
			mBitsSet(*(uint16_t*)sc,ST_SHELL_SHOW_UNKNOW_CRC);
   82eac:	882b      	ldrh	r3, [r5, #0]
   82eae:	f043 0302 	orr.w	r3, r3, #2
   82eb2:	802b      	strh	r3, [r5, #0]
   82eb4:	bd38      	pop	{r3, r4, r5, pc}
   82eb6:	bf00      	nop
   82eb8:	00088b70 	.word	0x00088b70
   82ebc:	00083f19 	.word	0x00083f19
   82ec0:	00083ebd 	.word	0x00083ebd
   82ec4:	0008176d 	.word	0x0008176d

00082ec8 <_cmd_hide>:
		}
	}
}

void _cmd_hide(uint32_t sc, void*pParam)
{
   82ec8:	b538      	push	{r3, r4, r5, lr}
   82eca:	4605      	mov	r5, r0
   82ecc:	4608      	mov	r0, r1
	char *pToken;
	pToken = strtok(pParam," \r\n");
   82ece:	490a      	ldr	r1, [pc, #40]	; (82ef8 <_cmd_hide+0x30>)
   82ed0:	4b0a      	ldr	r3, [pc, #40]	; (82efc <_cmd_hide+0x34>)
   82ed2:	4798      	blx	r3
	if(pToken)
   82ed4:	b170      	cbz	r0, 82ef4 <_cmd_hide+0x2c>
   82ed6:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   82ed8:	4b09      	ldr	r3, [pc, #36]	; (82f00 <_cmd_hide+0x38>)
   82eda:	4798      	blx	r3
   82edc:	4601      	mov	r1, r0
   82ede:	4620      	mov	r0, r4
   82ee0:	4b08      	ldr	r3, [pc, #32]	; (82f04 <_cmd_hide+0x3c>)
   82ee2:	4798      	blx	r3
   82ee4:	f245 73e5 	movw	r3, #22501	; 0x57e5
   82ee8:	4298      	cmp	r0, r3
   82eea:	d103      	bne.n	82ef4 <_cmd_hide+0x2c>
		{
		case 0x57E5:    //crc
			mBitsClr(*(uint16_t*)sc,ST_SHELL_SHOW_UNKNOW_CRC);
   82eec:	882b      	ldrh	r3, [r5, #0]
   82eee:	f023 0302 	bic.w	r3, r3, #2
   82ef2:	802b      	strh	r3, [r5, #0]
   82ef4:	bd38      	pop	{r3, r4, r5, pc}
   82ef6:	bf00      	nop
   82ef8:	00088b70 	.word	0x00088b70
   82efc:	00083f19 	.word	0x00083f19
   82f00:	00083ebd 	.word	0x00083ebd
   82f04:	0008176d 	.word	0x0008176d

00082f08 <_cmd_start>:
		}
	}
}

void _cmd_start(uint32_t sc, void*pParam)
{
   82f08:	b538      	push	{r3, r4, r5, lr}
   82f0a:	460d      	mov	r5, r1
	Putstr(" cmd start : ");
   82f0c:	4903      	ldr	r1, [pc, #12]	; (82f1c <_cmd_start+0x14>)
   82f0e:	2067      	movs	r0, #103	; 0x67
   82f10:	4c03      	ldr	r4, [pc, #12]	; (82f20 <_cmd_start+0x18>)
   82f12:	47a0      	blx	r4
	Putstr(pParam);
   82f14:	4629      	mov	r1, r5
   82f16:	2067      	movs	r0, #103	; 0x67
   82f18:	47a0      	blx	r4
   82f1a:	bd38      	pop	{r3, r4, r5, pc}
   82f1c:	00088e5c 	.word	0x00088e5c
   82f20:	000832dd 	.word	0x000832dd

00082f24 <_cmd_cls>:
	pParam=atoi((char*)pParam);
	PushTask(_cmd_restart_proc,sc,pParam,0);
}

void _cmd_cls(uint32_t sc, void*pParam)
{
   82f24:	b508      	push	{r3, lr}
	Putstr("\e[2J");
   82f26:	4902      	ldr	r1, [pc, #8]	; (82f30 <_cmd_cls+0xc>)
   82f28:	2067      	movs	r0, #103	; 0x67
   82f2a:	4b02      	ldr	r3, [pc, #8]	; (82f34 <_cmd_cls+0x10>)
   82f2c:	4798      	blx	r3
   82f2e:	bd08      	pop	{r3, pc}
   82f30:	00088d30 	.word	0x00088d30
   82f34:	000832dd 	.word	0x000832dd

00082f38 <_cmd_set>:
{
   82f38:	b570      	push	{r4, r5, r6, lr}
	pToken = mstrtok(NULL," \r\n");
   82f3a:	493a      	ldr	r1, [pc, #232]	; (83024 <_cmd_set+0xec>)
   82f3c:	2000      	movs	r0, #0
   82f3e:	4b3a      	ldr	r3, [pc, #232]	; (83028 <_cmd_set+0xf0>)
   82f40:	4798      	blx	r3
	if(pToken)
   82f42:	2800      	cmp	r0, #0
   82f44:	d056      	beq.n	82ff4 <_cmd_set+0xbc>
   82f46:	4604      	mov	r4, r0
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   82f48:	4b38      	ldr	r3, [pc, #224]	; (8302c <_cmd_set+0xf4>)
   82f4a:	4798      	blx	r3
   82f4c:	4601      	mov	r1, r0
   82f4e:	4620      	mov	r0, r4
   82f50:	4b37      	ldr	r3, [pc, #220]	; (83030 <_cmd_set+0xf8>)
   82f52:	4798      	blx	r3
   82f54:	f247 3327 	movw	r3, #29479	; 0x7327
   82f58:	4298      	cmp	r0, r3
   82f5a:	d004      	beq.n	82f66 <_cmd_set+0x2e>
   82f5c:	f24e 13a9 	movw	r3, #57769	; 0xe1a9
   82f60:	4298      	cmp	r0, r3
   82f62:	d024      	beq.n	82fae <_cmd_set+0x76>
   82f64:	bd70      	pop	{r4, r5, r6, pc}
			pToken=mstrtok(NULL," :./\r\n");
   82f66:	4933      	ldr	r1, [pc, #204]	; (83034 <_cmd_set+0xfc>)
   82f68:	2000      	movs	r0, #0
   82f6a:	4b2f      	ldr	r3, [pc, #188]	; (83028 <_cmd_set+0xf0>)
   82f6c:	4798      	blx	r3
			if(pToken) hour=atoi((char*)pToken);
   82f6e:	b1c0      	cbz	r0, 82fa2 <_cmd_set+0x6a>
   82f70:	4b31      	ldr	r3, [pc, #196]	; (83038 <_cmd_set+0x100>)
   82f72:	4798      	blx	r3
   82f74:	b2c4      	uxtb	r4, r0
			pToken=mstrtok(NULL," :./\r\n");
   82f76:	492f      	ldr	r1, [pc, #188]	; (83034 <_cmd_set+0xfc>)
   82f78:	2000      	movs	r0, #0
   82f7a:	4b2b      	ldr	r3, [pc, #172]	; (83028 <_cmd_set+0xf0>)
   82f7c:	4798      	blx	r3
			if(pToken) minute=atoi((char*)pToken);
   82f7e:	b190      	cbz	r0, 82fa6 <_cmd_set+0x6e>
   82f80:	4b2d      	ldr	r3, [pc, #180]	; (83038 <_cmd_set+0x100>)
   82f82:	4798      	blx	r3
   82f84:	b2c5      	uxtb	r5, r0
			pToken=mstrtok(NULL," :./\r\n");
   82f86:	492b      	ldr	r1, [pc, #172]	; (83034 <_cmd_set+0xfc>)
   82f88:	2000      	movs	r0, #0
   82f8a:	4b27      	ldr	r3, [pc, #156]	; (83028 <_cmd_set+0xf0>)
   82f8c:	4798      	blx	r3
			if(pToken) second=atoi((char*)pToken);
   82f8e:	b160      	cbz	r0, 82faa <_cmd_set+0x72>
   82f90:	4b29      	ldr	r3, [pc, #164]	; (83038 <_cmd_set+0x100>)
   82f92:	4798      	blx	r3
   82f94:	b2c3      	uxtb	r3, r0
			kRtc(KRTC_SET_TIME,(uint32_t)hour,(uint32_t)minute,(uint32_t)second);
   82f96:	462a      	mov	r2, r5
   82f98:	4621      	mov	r1, r4
   82f9a:	2066      	movs	r0, #102	; 0x66
   82f9c:	4c27      	ldr	r4, [pc, #156]	; (8303c <_cmd_set+0x104>)
   82f9e:	47a0      	blx	r4
			break;
   82fa0:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t u1=0,u2=0,u3=0;
   82fa2:	2400      	movs	r4, #0
   82fa4:	e7e7      	b.n	82f76 <_cmd_set+0x3e>
   82fa6:	2500      	movs	r5, #0
   82fa8:	e7ed      	b.n	82f86 <_cmd_set+0x4e>
   82faa:	2300      	movs	r3, #0
   82fac:	e7f3      	b.n	82f96 <_cmd_set+0x5e>
			pToken=mstrtok(NULL," :./\r\n");
   82fae:	4921      	ldr	r1, [pc, #132]	; (83034 <_cmd_set+0xfc>)
   82fb0:	2000      	movs	r0, #0
   82fb2:	4b1d      	ldr	r3, [pc, #116]	; (83028 <_cmd_set+0xf0>)
   82fb4:	4798      	blx	r3
			if(pToken) date=atoi((char*)pToken);
   82fb6:	b1f0      	cbz	r0, 82ff6 <_cmd_set+0xbe>
   82fb8:	4b1f      	ldr	r3, [pc, #124]	; (83038 <_cmd_set+0x100>)
   82fba:	4798      	blx	r3
   82fbc:	b2c4      	uxtb	r4, r0
			pToken=mstrtok(NULL," :./\r\n");
   82fbe:	491d      	ldr	r1, [pc, #116]	; (83034 <_cmd_set+0xfc>)
   82fc0:	2000      	movs	r0, #0
   82fc2:	4b19      	ldr	r3, [pc, #100]	; (83028 <_cmd_set+0xf0>)
   82fc4:	4798      	blx	r3
			if(pToken) month=atoi((char*)pToken);
   82fc6:	b1c0      	cbz	r0, 82ffa <_cmd_set+0xc2>
   82fc8:	4b1b      	ldr	r3, [pc, #108]	; (83038 <_cmd_set+0x100>)
   82fca:	4798      	blx	r3
   82fcc:	b2c5      	uxtb	r5, r0
			pToken=mstrtok(NULL," :./\r\n");
   82fce:	4919      	ldr	r1, [pc, #100]	; (83034 <_cmd_set+0xfc>)
   82fd0:	2000      	movs	r0, #0
   82fd2:	4b15      	ldr	r3, [pc, #84]	; (83028 <_cmd_set+0xf0>)
   82fd4:	4798      	blx	r3
			if(pToken) centYear=atoi((char*)pToken);
   82fd6:	b190      	cbz	r0, 82ffe <_cmd_set+0xc6>
   82fd8:	4b17      	ldr	r3, [pc, #92]	; (83038 <_cmd_set+0x100>)
   82fda:	4798      	blx	r3
   82fdc:	b286      	uxth	r6, r0
			Putstr("\e[2K"); //Erase current line on terminal screen
   82fde:	4918      	ldr	r1, [pc, #96]	; (83040 <_cmd_set+0x108>)
   82fe0:	2067      	movs	r0, #103	; 0x67
   82fe2:	4b18      	ldr	r3, [pc, #96]	; (83044 <_cmd_set+0x10c>)
   82fe4:	4798      	blx	r3
			if(kRtc(KRTC_SET_DATE,(uint32_t)date,(uint32_t)month,(uint32_t)centYear)==0)
   82fe6:	4633      	mov	r3, r6
   82fe8:	462a      	mov	r2, r5
   82fea:	4621      	mov	r1, r4
   82fec:	2067      	movs	r0, #103	; 0x67
   82fee:	4c13      	ldr	r4, [pc, #76]	; (8303c <_cmd_set+0x104>)
   82ff0:	47a0      	blx	r4
   82ff2:	b130      	cbz	r0, 83002 <_cmd_set+0xca>
   82ff4:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t u1=0,u2=0,u3=0;
   82ff6:	2400      	movs	r4, #0
   82ff8:	e7e1      	b.n	82fbe <_cmd_set+0x86>
   82ffa:	2500      	movs	r5, #0
   82ffc:	e7e7      	b.n	82fce <_cmd_set+0x96>
	uint16_t u4=0;
   82ffe:	2600      	movs	r6, #0
   83000:	e7ed      	b.n	82fde <_cmd_set+0xa6>
				Putstr("\r\n");
   83002:	4d11      	ldr	r5, [pc, #68]	; (83048 <_cmd_set+0x110>)
   83004:	4629      	mov	r1, r5
   83006:	2067      	movs	r0, #103	; 0x67
   83008:	4c0e      	ldr	r4, [pc, #56]	; (83044 <_cmd_set+0x10c>)
   8300a:	47a0      	blx	r4
				kRtc(KRTC_GETF_DATE,(uint32_t)buf);
   8300c:	4e0f      	ldr	r6, [pc, #60]	; (8304c <_cmd_set+0x114>)
   8300e:	4631      	mov	r1, r6
   83010:	2068      	movs	r0, #104	; 0x68
   83012:	4b0a      	ldr	r3, [pc, #40]	; (8303c <_cmd_set+0x104>)
   83014:	4798      	blx	r3
				Putstr(buf);
   83016:	4631      	mov	r1, r6
   83018:	2067      	movs	r0, #103	; 0x67
   8301a:	47a0      	blx	r4
				Putstr("\r\n");
   8301c:	4629      	mov	r1, r5
   8301e:	2067      	movs	r0, #103	; 0x67
   83020:	47a0      	blx	r4
}
   83022:	e7e7      	b.n	82ff4 <_cmd_set+0xbc>
   83024:	00088b70 	.word	0x00088b70
   83028:	00083785 	.word	0x00083785
   8302c:	00083ebd 	.word	0x00083ebd
   83030:	0008176d 	.word	0x0008176d
   83034:	00088e4c 	.word	0x00088e4c
   83038:	00083d7d 	.word	0x00083d7d
   8303c:	00081995 	.word	0x00081995
   83040:	00088e54 	.word	0x00088e54
   83044:	000832dd 	.word	0x000832dd
   83048:	00088ccc 	.word	0x00088ccc
   8304c:	200012a4 	.word	0x200012a4

00083050 <_cmd_menu>:
{
   83050:	b510      	push	{r4, lr}
   83052:	4608      	mov	r0, r1
	pToken = (uint32_t)strtok(pParam, " \r\n");
   83054:	4915      	ldr	r1, [pc, #84]	; (830ac <_cmd_menu+0x5c>)
   83056:	4b16      	ldr	r3, [pc, #88]	; (830b0 <_cmd_menu+0x60>)
   83058:	4798      	blx	r3
	if(pToken)
   8305a:	b900      	cbnz	r0, 8305e <_cmd_menu+0xe>
   8305c:	bd10      	pop	{r4, pc}
   8305e:	4604      	mov	r4, r0
		crc = CRC16MODBUSFRAME((unsigned char*)pToken, strlen((char*)pToken));
   83060:	4b14      	ldr	r3, [pc, #80]	; (830b4 <_cmd_menu+0x64>)
   83062:	4798      	blx	r3
   83064:	4601      	mov	r1, r0
   83066:	4620      	mov	r0, r4
   83068:	4b13      	ldr	r3, [pc, #76]	; (830b8 <_cmd_menu+0x68>)
   8306a:	4798      	blx	r3
		switch(crc)
   8306c:	b280      	uxth	r0, r0
   8306e:	f648 0362 	movw	r3, #34914	; 0x8862
   83072:	4298      	cmp	r0, r3
   83074:	d012      	beq.n	8309c <_cmd_menu+0x4c>
   83076:	f648 338b 	movw	r3, #35723	; 0x8b8b
   8307a:	4298      	cmp	r0, r3
   8307c:	d008      	beq.n	83090 <_cmd_menu+0x40>
   8307e:	f241 2352 	movw	r3, #4690	; 0x1252
   83082:	4298      	cmp	r0, r3
   83084:	d00e      	beq.n	830a4 <_cmd_menu+0x54>
			Error(ERROR_SHELL_CMD_MENU_SWITCH_BAD_SC, sc);
   83086:	4621      	mov	r1, r4
   83088:	2013      	movs	r0, #19
   8308a:	4b0c      	ldr	r3, [pc, #48]	; (830bc <_cmd_menu+0x6c>)
   8308c:	4798      	blx	r3
}
   8308e:	e7e5      	b.n	8305c <_cmd_menu+0xc>
			Menu(MENU_SWITCH_BUTTON);
   83090:	2065      	movs	r0, #101	; 0x65
   83092:	4c0b      	ldr	r4, [pc, #44]	; (830c0 <_cmd_menu+0x70>)
   83094:	47a0      	blx	r4
			Menu(MENU_PROMPT);
   83096:	2069      	movs	r0, #105	; 0x69
   83098:	47a0      	blx	r4
			break;
   8309a:	bd10      	pop	{r4, pc}
			Menu(MENU_SELECT_BUTTON);
   8309c:	2066      	movs	r0, #102	; 0x66
   8309e:	4b08      	ldr	r3, [pc, #32]	; (830c0 <_cmd_menu+0x70>)
   830a0:	4798      	blx	r3
			break;
   830a2:	bd10      	pop	{r4, pc}
			Menu(MENU_INIT);
   830a4:	206b      	movs	r0, #107	; 0x6b
   830a6:	4b06      	ldr	r3, [pc, #24]	; (830c0 <_cmd_menu+0x70>)
   830a8:	4798      	blx	r3
			break;
   830aa:	bd10      	pop	{r4, pc}
   830ac:	00088b70 	.word	0x00088b70
   830b0:	00083f19 	.word	0x00083f19
   830b4:	00083ebd 	.word	0x00083ebd
   830b8:	0008176d 	.word	0x0008176d
   830bc:	000817b5 	.word	0x000817b5
   830c0:	0008039d 	.word	0x0008039d

000830c4 <_cmd_restart_proc>:
{
   830c4:	b570      	push	{r4, r5, r6, lr}
   830c6:	b082      	sub	sp, #8
   830c8:	4604      	mov	r4, r0
   830ca:	460d      	mov	r5, r1
	mBitsSet(*(uint16_t*)sc,ST_SHELL_PROMPT_DISABLED);
   830cc:	8803      	ldrh	r3, [r0, #0]
   830ce:	f043 0304 	orr.w	r3, r3, #4
   830d2:	8003      	strh	r3, [r0, #0]
	sprintf(buf,"\rSystem will restart in %i second...",(int)timeout); Putstr(buf);
   830d4:	4e0e      	ldr	r6, [pc, #56]	; (83110 <_cmd_restart_proc+0x4c>)
   830d6:	460a      	mov	r2, r1
   830d8:	490e      	ldr	r1, [pc, #56]	; (83114 <_cmd_restart_proc+0x50>)
   830da:	4630      	mov	r0, r6
   830dc:	4b0e      	ldr	r3, [pc, #56]	; (83118 <_cmd_restart_proc+0x54>)
   830de:	4798      	blx	r3
   830e0:	4631      	mov	r1, r6
   830e2:	2067      	movs	r0, #103	; 0x67
   830e4:	4b0d      	ldr	r3, [pc, #52]	; (8311c <_cmd_restart_proc+0x58>)
   830e6:	4798      	blx	r3
	if(timeout==0)
   830e8:	b935      	cbnz	r5, 830f8 <_cmd_restart_proc+0x34>
   830ea:	4b0d      	ldr	r3, [pc, #52]	; (83120 <_cmd_restart_proc+0x5c>)
		for(sc=100000;sc;sc--);
   830ec:	3b01      	subs	r3, #1
   830ee:	d1fd      	bne.n	830ec <_cmd_restart_proc+0x28>
		rstc_start_software_reset(RSTC);
   830f0:	480c      	ldr	r0, [pc, #48]	; (83124 <_cmd_restart_proc+0x60>)
   830f2:	4b0d      	ldr	r3, [pc, #52]	; (83128 <_cmd_restart_proc+0x64>)
   830f4:	4798      	blx	r3
   830f6:	e7fe      	b.n	830f6 <_cmd_restart_proc+0x32>
		PushTask(_cmd_restart_proc,sc,--timeout,1000);	
   830f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   830fc:	9300      	str	r3, [sp, #0]
   830fe:	1e6b      	subs	r3, r5, #1
   83100:	4622      	mov	r2, r4
   83102:	490a      	ldr	r1, [pc, #40]	; (8312c <_cmd_restart_proc+0x68>)
   83104:	2066      	movs	r0, #102	; 0x66
   83106:	4c0a      	ldr	r4, [pc, #40]	; (83130 <_cmd_restart_proc+0x6c>)
   83108:	47a0      	blx	r4
}
   8310a:	b002      	add	sp, #8
   8310c:	bd70      	pop	{r4, r5, r6, pc}
   8310e:	bf00      	nop
   83110:	200012a4 	.word	0x200012a4
   83114:	00088e24 	.word	0x00088e24
   83118:	00083e71 	.word	0x00083e71
   8311c:	000832dd 	.word	0x000832dd
   83120:	000186a0 	.word	0x000186a0
   83124:	400e1200 	.word	0x400e1200
   83128:	00080ce1 	.word	0x00080ce1
   8312c:	000830c5 	.word	0x000830c5
   83130:	00083519 	.word	0x00083519

00083134 <_cmd_restart>:
{
   83134:	b510      	push	{r4, lr}
   83136:	b082      	sub	sp, #8
   83138:	4604      	mov	r4, r0
	mBitsSet(*(uint16_t*)sc,ST_SHELL_PROMPT_DISABLED);
   8313a:	8803      	ldrh	r3, [r0, #0]
   8313c:	f043 0304 	orr.w	r3, r3, #4
   83140:	8003      	strh	r3, [r0, #0]
	pParam=atoi((char*)pParam);
   83142:	4608      	mov	r0, r1
   83144:	4b05      	ldr	r3, [pc, #20]	; (8315c <_cmd_restart+0x28>)
   83146:	4798      	blx	r3
	PushTask(_cmd_restart_proc,sc,pParam,0);
   83148:	2300      	movs	r3, #0
   8314a:	9300      	str	r3, [sp, #0]
   8314c:	4603      	mov	r3, r0
   8314e:	4622      	mov	r2, r4
   83150:	4903      	ldr	r1, [pc, #12]	; (83160 <_cmd_restart+0x2c>)
   83152:	2066      	movs	r0, #102	; 0x66
   83154:	4c03      	ldr	r4, [pc, #12]	; (83164 <_cmd_restart+0x30>)
   83156:	47a0      	blx	r4
}
   83158:	b002      	add	sp, #8
   8315a:	bd10      	pop	{r4, pc}
   8315c:	00083d7d 	.word	0x00083d7d
   83160:	000830c5 	.word	0x000830c5
   83164:	00083519 	.word	0x00083519

00083168 <_cmd_infos>:
	"ROM_FLASH --- ROM and Embedded Flash Memory [NVPSIZ is ROM size / NVPSIZ2 is Flash size]",
	"SRAM --- SRAM emulating ROM"
};

void _cmd_infos(uint32_t sc, void*pParam)
{
   83168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8316c:	b08b      	sub	sp, #44	; 0x2c
	chipid_data_t chipData;

	chipid_read(CHIPID,&chipData);
   8316e:	a901      	add	r1, sp, #4
   83170:	4844      	ldr	r0, [pc, #272]	; (83284 <_cmd_infos+0x11c>)
   83172:	4b45      	ldr	r3, [pc, #276]	; (83288 <_cmd_infos+0x120>)
   83174:	4798      	blx	r3
	Putstr("\r\n\t=============== CHIP IDENTIFIER INFOS ===============\r\n\n");
   83176:	4945      	ldr	r1, [pc, #276]	; (8328c <_cmd_infos+0x124>)
   83178:	2067      	movs	r0, #103	; 0x67
   8317a:	4c45      	ldr	r4, [pc, #276]	; (83290 <_cmd_infos+0x128>)
   8317c:	47a0      	blx	r4
	sprintf(buf,"\tVERSION: %c\r\n",(char)(chipData.ul_version-1)+'A');	Putstr(buf);
   8317e:	9a01      	ldr	r2, [sp, #4]
   83180:	3a01      	subs	r2, #1
   83182:	b2d2      	uxtb	r2, r2
   83184:	4f43      	ldr	r7, [pc, #268]	; (83294 <_cmd_infos+0x12c>)
   83186:	3241      	adds	r2, #65	; 0x41
   83188:	4943      	ldr	r1, [pc, #268]	; (83298 <_cmd_infos+0x130>)
   8318a:	4638      	mov	r0, r7
   8318c:	4b43      	ldr	r3, [pc, #268]	; (8329c <_cmd_infos+0x134>)
   8318e:	4798      	blx	r3
   83190:	4639      	mov	r1, r7
   83192:	2067      	movs	r0, #103	; 0x67
   83194:	47a0      	blx	r4
		Putstr("\t  EPROC: "),Putstr(eprocs[chipData.ul_eproc]);	Putstr("\r\n");
   83196:	4942      	ldr	r1, [pc, #264]	; (832a0 <_cmd_infos+0x138>)
   83198:	2067      	movs	r0, #103	; 0x67
   8319a:	47a0      	blx	r4
   8319c:	9a02      	ldr	r2, [sp, #8]
   8319e:	4b41      	ldr	r3, [pc, #260]	; (832a4 <_cmd_infos+0x13c>)
   831a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   831a4:	2067      	movs	r0, #103	; 0x67
   831a6:	47a0      	blx	r4
   831a8:	4e3f      	ldr	r6, [pc, #252]	; (832a8 <_cmd_infos+0x140>)
   831aa:	4631      	mov	r1, r6
   831ac:	2067      	movs	r0, #103	; 0x67
   831ae:	47a0      	blx	r4
		Putstr("\t NVPSIZ: "),Putstr(nvpsiz[chipData.ul_nvpsiz]);	Putstr("\r\n");
   831b0:	493e      	ldr	r1, [pc, #248]	; (832ac <_cmd_infos+0x144>)
   831b2:	2067      	movs	r0, #103	; 0x67
   831b4:	47a0      	blx	r4
   831b6:	4d3e      	ldr	r5, [pc, #248]	; (832b0 <_cmd_infos+0x148>)
   831b8:	9b03      	ldr	r3, [sp, #12]
   831ba:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   831be:	2067      	movs	r0, #103	; 0x67
   831c0:	47a0      	blx	r4
   831c2:	4631      	mov	r1, r6
   831c4:	2067      	movs	r0, #103	; 0x67
   831c6:	47a0      	blx	r4
		Putstr("\tNVPSIZ2: "),Putstr(nvpsiz[chipData.ul_nvpsiz2]);	Putstr("\r\n");
   831c8:	493a      	ldr	r1, [pc, #232]	; (832b4 <_cmd_infos+0x14c>)
   831ca:	2067      	movs	r0, #103	; 0x67
   831cc:	47a0      	blx	r4
   831ce:	9b04      	ldr	r3, [sp, #16]
   831d0:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   831d4:	2067      	movs	r0, #103	; 0x67
   831d6:	47a0      	blx	r4
   831d8:	4631      	mov	r1, r6
   831da:	2067      	movs	r0, #103	; 0x67
   831dc:	47a0      	blx	r4
		Putstr("\tSRAMSIZ: "),Putstr(sramsiz[chipData.ul_sramsiz]);	Putstr("\r\n");
   831de:	4936      	ldr	r1, [pc, #216]	; (832b8 <_cmd_infos+0x150>)
   831e0:	2067      	movs	r0, #103	; 0x67
   831e2:	47a0      	blx	r4
   831e4:	9a05      	ldr	r2, [sp, #20]
   831e6:	4b35      	ldr	r3, [pc, #212]	; (832bc <_cmd_infos+0x154>)
   831e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   831ec:	2067      	movs	r0, #103	; 0x67
   831ee:	47a0      	blx	r4
   831f0:	4631      	mov	r1, r6
   831f2:	2067      	movs	r0, #103	; 0x67
   831f4:	47a0      	blx	r4
#define k sc
		k=0;
		while(arch[k].value && (arch[k].value!=chipData.ul_arch)) k++;
   831f6:	9906      	ldr	r1, [sp, #24]
   831f8:	2919      	cmp	r1, #25
   831fa:	d038      	beq.n	8326e <_cmd_infos+0x106>
   831fc:	4b30      	ldr	r3, [pc, #192]	; (832c0 <_cmd_infos+0x158>)
   831fe:	2400      	movs	r4, #0
   83200:	3401      	adds	r4, #1
   83202:	7b1a      	ldrb	r2, [r3, #12]
   83204:	b112      	cbz	r2, 8320c <_cmd_infos+0xa4>
   83206:	330c      	adds	r3, #12
   83208:	428a      	cmp	r2, r1
   8320a:	d1f9      	bne.n	83200 <_cmd_infos+0x98>
		Putstr("\t   ARCH: "),Putstr(arch[k].name); Putstr(" --- "); Putstr(arch[k].description); Putstr("\r\n");
   8320c:	492d      	ldr	r1, [pc, #180]	; (832c4 <_cmd_infos+0x15c>)
   8320e:	2067      	movs	r0, #103	; 0x67
   83210:	4d1f      	ldr	r5, [pc, #124]	; (83290 <_cmd_infos+0x128>)
   83212:	47a8      	blx	r5
   83214:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 832c0 <_cmd_infos+0x158>
   83218:	ea4f 0944 	mov.w	r9, r4, lsl #1
   8321c:	eb09 0304 	add.w	r3, r9, r4
   83220:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   83224:	6859      	ldr	r1, [r3, #4]
   83226:	2067      	movs	r0, #103	; 0x67
   83228:	47a8      	blx	r5
   8322a:	4927      	ldr	r1, [pc, #156]	; (832c8 <_cmd_infos+0x160>)
   8322c:	2067      	movs	r0, #103	; 0x67
   8322e:	47a8      	blx	r5
   83230:	444c      	add	r4, r9
   83232:	eb08 0884 	add.w	r8, r8, r4, lsl #2
   83236:	f8d8 1008 	ldr.w	r1, [r8, #8]
   8323a:	2067      	movs	r0, #103	; 0x67
   8323c:	47a8      	blx	r5
   8323e:	4631      	mov	r1, r6
   83240:	2067      	movs	r0, #103	; 0x67
   83242:	47a8      	blx	r5
#undef k
		Putstr("\t NVPTYP: "),Putstr(nvptyp[chipData.ul_nvptyp]);	Putstr("\r\n");
   83244:	4921      	ldr	r1, [pc, #132]	; (832cc <_cmd_infos+0x164>)
   83246:	2067      	movs	r0, #103	; 0x67
   83248:	47a8      	blx	r5
   8324a:	9a07      	ldr	r2, [sp, #28]
   8324c:	4b20      	ldr	r3, [pc, #128]	; (832d0 <_cmd_infos+0x168>)
   8324e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   83252:	2067      	movs	r0, #103	; 0x67
   83254:	47a8      	blx	r5
   83256:	4631      	mov	r1, r6
   83258:	2067      	movs	r0, #103	; 0x67
   8325a:	47a8      	blx	r5
	if(chipData.ul_extflag)
   8325c:	9b08      	ldr	r3, [sp, #32]
   8325e:	b943      	cbnz	r3, 83272 <_cmd_infos+0x10a>
	{
		sprintf(buf,"\t   EXID: %08X\r\n",(unsigned int)chipData.ul_extid); Putstr(buf);
	}
	Putstr("\r\n\t=====================================================\r\n\n");
   83260:	491c      	ldr	r1, [pc, #112]	; (832d4 <_cmd_infos+0x16c>)
   83262:	2067      	movs	r0, #103	; 0x67
   83264:	4b0a      	ldr	r3, [pc, #40]	; (83290 <_cmd_infos+0x128>)
   83266:	4798      	blx	r3
}
   83268:	b00b      	add	sp, #44	; 0x2c
   8326a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		k=0;
   8326e:	2400      	movs	r4, #0
   83270:	e7cc      	b.n	8320c <_cmd_infos+0xa4>
		sprintf(buf,"\t   EXID: %08X\r\n",(unsigned int)chipData.ul_extid); Putstr(buf);
   83272:	9a09      	ldr	r2, [sp, #36]	; 0x24
   83274:	4918      	ldr	r1, [pc, #96]	; (832d8 <_cmd_infos+0x170>)
   83276:	4807      	ldr	r0, [pc, #28]	; (83294 <_cmd_infos+0x12c>)
   83278:	4b08      	ldr	r3, [pc, #32]	; (8329c <_cmd_infos+0x134>)
   8327a:	4798      	blx	r3
   8327c:	4639      	mov	r1, r7
   8327e:	2067      	movs	r0, #103	; 0x67
   83280:	47a8      	blx	r5
   83282:	e7ed      	b.n	83260 <_cmd_infos+0xf8>
   83284:	400e0740 	.word	0x400e0740
   83288:	000801f9 	.word	0x000801f9
   8328c:	00088d38 	.word	0x00088d38
   83290:	000832dd 	.word	0x000832dd
   83294:	200012a4 	.word	0x200012a4
   83298:	00088d74 	.word	0x00088d74
   8329c:	00083e71 	.word	0x00083e71
   832a0:	00088d84 	.word	0x00088d84
   832a4:	20000578 	.word	0x20000578
   832a8:	00088ccc 	.word	0x00088ccc
   832ac:	00088d90 	.word	0x00088d90
   832b0:	20000598 	.word	0x20000598
   832b4:	00088d9c 	.word	0x00088d9c
   832b8:	00088da8 	.word	0x00088da8
   832bc:	200005ec 	.word	0x200005ec
   832c0:	00088e6c 	.word	0x00088e6c
   832c4:	00088db4 	.word	0x00088db4
   832c8:	00088dc0 	.word	0x00088dc0
   832cc:	00088dc8 	.word	0x00088dc8
   832d0:	200005d8 	.word	0x200005d8
   832d4:	00088de8 	.word	0x00088de8
   832d8:	00088dd4 	.word	0x00088dd4

000832dc <Shellcom>:
	char	*pTxRead;
}shellcom;


uint32_t Shellcom(uint32_t sc, ...)
{
   832dc:	b40f      	push	{r0, r1, r2, r3}
   832de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	switch(sc)
   832e0:	9906      	ldr	r1, [sp, #24]
   832e2:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   832e6:	2b04      	cmp	r3, #4
   832e8:	f200 80b5 	bhi.w	83456 <Shellcom+0x17a>
   832ec:	e8df f013 	tbh	[pc, r3, lsl #1]
   832f0:	00b30005 	.word	0x00b30005
   832f4:	0059003a 	.word	0x0059003a
   832f8:	0086      	.short	0x0086
	{
	case SHELLCOM_NEW:
		shellcom.pTxRead=shellcom.pTxWrite=shellcomTxBuf;
   832fa:	4b59      	ldr	r3, [pc, #356]	; (83460 <Shellcom+0x184>)
   832fc:	4a59      	ldr	r2, [pc, #356]	; (83464 <Shellcom+0x188>)
   832fe:	601a      	str	r2, [r3, #0]
   83300:	605a      	str	r2, [r3, #4]
		pmc_enable_periph_clk(ID_UART);
   83302:	2008      	movs	r0, #8
   83304:	4b58      	ldr	r3, [pc, #352]	; (83468 <Shellcom+0x18c>)
   83306:	4798      	blx	r3
		pio_configure_pin(UART_TX_PIN,UART_TX_PIN_FLAGS);
   83308:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8330c:	200c      	movs	r0, #12
   8330e:	4c57      	ldr	r4, [pc, #348]	; (8346c <Shellcom+0x190>)
   83310:	47a0      	blx	r4
		pio_configure_pin(UART_RX_PIN,UART_RX_PIN_FLAGS);
   83312:	4957      	ldr	r1, [pc, #348]	; (83470 <Shellcom+0x194>)
   83314:	200b      	movs	r0, #11
   83316:	47a0      	blx	r4
		if(uart_init(UART,&uart_opt)) Error(ERROR_SHELLCOM_UART_INIT_FAILED);
   83318:	4956      	ldr	r1, [pc, #344]	; (83474 <Shellcom+0x198>)
   8331a:	4857      	ldr	r0, [pc, #348]	; (83478 <Shellcom+0x19c>)
   8331c:	4b57      	ldr	r3, [pc, #348]	; (8347c <Shellcom+0x1a0>)
   8331e:	4798      	blx	r3
   83320:	b938      	cbnz	r0, 83332 <Shellcom+0x56>
   83322:	f44f 7280 	mov.w	r2, #256	; 0x100
   83326:	4b56      	ldr	r3, [pc, #344]	; (83480 <Shellcom+0x1a4>)
   83328:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(ID_UART);
		while(uart_is_rx_ready(UART)) uart_read(UART,(uint8_t*)&sc);
   8332a:	4c53      	ldr	r4, [pc, #332]	; (83478 <Shellcom+0x19c>)
   8332c:	4e55      	ldr	r6, [pc, #340]	; (83484 <Shellcom+0x1a8>)
   8332e:	4f56      	ldr	r7, [pc, #344]	; (83488 <Shellcom+0x1ac>)
   83330:	e006      	b.n	83340 <Shellcom+0x64>
		if(uart_init(UART,&uart_opt)) Error(ERROR_SHELLCOM_UART_INIT_FAILED);
   83332:	2018      	movs	r0, #24
   83334:	4b55      	ldr	r3, [pc, #340]	; (8348c <Shellcom+0x1b0>)
   83336:	4798      	blx	r3
   83338:	e7f3      	b.n	83322 <Shellcom+0x46>
		while(uart_is_rx_ready(UART)) uart_read(UART,(uint8_t*)&sc);
   8333a:	a906      	add	r1, sp, #24
   8333c:	4620      	mov	r0, r4
   8333e:	47b8      	blx	r7
   83340:	4620      	mov	r0, r4
   83342:	47b0      	blx	r6
   83344:	4605      	mov	r5, r0
   83346:	2800      	cmp	r0, #0
   83348:	d1f7      	bne.n	8333a <Shellcom+0x5e>
		uart_get_status(UART);	
   8334a:	4c4b      	ldr	r4, [pc, #300]	; (83478 <Shellcom+0x19c>)
   8334c:	4620      	mov	r0, r4
   8334e:	4b50      	ldr	r3, [pc, #320]	; (83490 <Shellcom+0x1b4>)
   83350:	4798      	blx	r3
		uart_enable_interrupt(UART,US_IER_RXRDY);
   83352:	2101      	movs	r1, #1
   83354:	4620      	mov	r0, r4
   83356:	4b4f      	ldr	r3, [pc, #316]	; (83494 <Shellcom+0x1b8>)
   83358:	4798      	blx	r3
	default:
		Error(ERROR_SHELLCOM_SWITCH_BAD_SC, (uint32_t)sc);
	}

	return 0;
}
   8335a:	4628      	mov	r0, r5
   8335c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   83360:	b004      	add	sp, #16
   83362:	4770      	bx	lr
		*shellcom.pTxWrite++=_charData;
   83364:	4b3e      	ldr	r3, [pc, #248]	; (83460 <Shellcom+0x184>)
   83366:	681a      	ldr	r2, [r3, #0]
   83368:	1c51      	adds	r1, r2, #1
   8336a:	6019      	str	r1, [r3, #0]
   8336c:	9907      	ldr	r1, [sp, #28]
   8336e:	7011      	strb	r1, [r2, #0]
		if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   83370:	681a      	ldr	r2, [r3, #0]
   83372:	4b49      	ldr	r3, [pc, #292]	; (83498 <Shellcom+0x1bc>)
   83374:	429a      	cmp	r2, r3
   83376:	d303      	bcc.n	83380 <Shellcom+0xa4>
   83378:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
   8337c:	4b38      	ldr	r3, [pc, #224]	; (83460 <Shellcom+0x184>)
   8337e:	601a      	str	r2, [r3, #0]
		if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   83380:	4b37      	ldr	r3, [pc, #220]	; (83460 <Shellcom+0x184>)
   83382:	681a      	ldr	r2, [r3, #0]
   83384:	685b      	ldr	r3, [r3, #4]
   83386:	429a      	cmp	r2, r3
   83388:	d006      	beq.n	83398 <Shellcom+0xbc>
		uart_enable_interrupt(UART,US_IER_TXEMPTY);
   8338a:	f44f 7100 	mov.w	r1, #512	; 0x200
   8338e:	483a      	ldr	r0, [pc, #232]	; (83478 <Shellcom+0x19c>)
   83390:	4b40      	ldr	r3, [pc, #256]	; (83494 <Shellcom+0x1b8>)
   83392:	4798      	blx	r3
		return 1;
   83394:	2501      	movs	r5, #1
   83396:	e7e0      	b.n	8335a <Shellcom+0x7e>
		if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   83398:	2100      	movs	r1, #0
   8339a:	2017      	movs	r0, #23
   8339c:	4b3b      	ldr	r3, [pc, #236]	; (8348c <Shellcom+0x1b0>)
   8339e:	4798      	blx	r3
   833a0:	e7f3      	b.n	8338a <Shellcom+0xae>
		_nChar=0;
   833a2:	2300      	movs	r3, #0
   833a4:	9306      	str	r3, [sp, #24]
		while(*(char*)_pStr)
   833a6:	9b07      	ldr	r3, [sp, #28]
   833a8:	4619      	mov	r1, r3
   833aa:	781a      	ldrb	r2, [r3, #0]
   833ac:	b1fa      	cbz	r2, 833ee <Shellcom+0x112>
			*shellcom.pTxWrite++=*(char*)_pStr++; _nChar++;
   833ae:	4c2c      	ldr	r4, [pc, #176]	; (83460 <Shellcom+0x184>)
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   833b0:	4e39      	ldr	r6, [pc, #228]	; (83498 <Shellcom+0x1bc>)
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   833b2:	4d31      	ldr	r5, [pc, #196]	; (83478 <Shellcom+0x19c>)
			*shellcom.pTxWrite++=*(char*)_pStr++; _nChar++;
   833b4:	6822      	ldr	r2, [r4, #0]
   833b6:	1c50      	adds	r0, r2, #1
   833b8:	6020      	str	r0, [r4, #0]
   833ba:	3301      	adds	r3, #1
   833bc:	9307      	str	r3, [sp, #28]
   833be:	780b      	ldrb	r3, [r1, #0]
   833c0:	7013      	strb	r3, [r2, #0]
   833c2:	9b06      	ldr	r3, [sp, #24]
   833c4:	3301      	adds	r3, #1
   833c6:	9306      	str	r3, [sp, #24]
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   833c8:	6823      	ldr	r3, [r4, #0]
   833ca:	42b3      	cmp	r3, r6
   833cc:	bf24      	itt	cs
   833ce:	4b25      	ldrcs	r3, [pc, #148]	; (83464 <Shellcom+0x188>)
   833d0:	6023      	strcs	r3, [r4, #0]
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   833d2:	6822      	ldr	r2, [r4, #0]
   833d4:	6863      	ldr	r3, [r4, #4]
   833d6:	429a      	cmp	r2, r3
   833d8:	d00b      	beq.n	833f2 <Shellcom+0x116>
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   833da:	f44f 7100 	mov.w	r1, #512	; 0x200
   833de:	4628      	mov	r0, r5
   833e0:	4b2c      	ldr	r3, [pc, #176]	; (83494 <Shellcom+0x1b8>)
   833e2:	4798      	blx	r3
		while(*(char*)_pStr)
   833e4:	9b07      	ldr	r3, [sp, #28]
   833e6:	4619      	mov	r1, r3
   833e8:	781a      	ldrb	r2, [r3, #0]
   833ea:	2a00      	cmp	r2, #0
   833ec:	d1e2      	bne.n	833b4 <Shellcom+0xd8>
		return _nChar;
   833ee:	9d06      	ldr	r5, [sp, #24]
   833f0:	e7b3      	b.n	8335a <Shellcom+0x7e>
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   833f2:	2100      	movs	r1, #0
   833f4:	2017      	movs	r0, #23
   833f6:	4b25      	ldr	r3, [pc, #148]	; (8348c <Shellcom+0x1b0>)
   833f8:	4798      	blx	r3
   833fa:	e7ee      	b.n	833da <Shellcom+0xfe>
		_nChar=0;
   833fc:	2300      	movs	r3, #0
   833fe:	9306      	str	r3, [sp, #24]
		while(_strLen)
   83400:	9b08      	ldr	r3, [sp, #32]
   83402:	b30b      	cbz	r3, 83448 <Shellcom+0x16c>
			*shellcom.pTxWrite++=*(char*)_pStr++; _strLen--; _nChar++;
   83404:	4c16      	ldr	r4, [pc, #88]	; (83460 <Shellcom+0x184>)
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   83406:	4e24      	ldr	r6, [pc, #144]	; (83498 <Shellcom+0x1bc>)
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   83408:	4d1b      	ldr	r5, [pc, #108]	; (83478 <Shellcom+0x19c>)
			*shellcom.pTxWrite++=*(char*)_pStr++; _strLen--; _nChar++;
   8340a:	6823      	ldr	r3, [r4, #0]
   8340c:	1c5a      	adds	r2, r3, #1
   8340e:	6022      	str	r2, [r4, #0]
   83410:	9a07      	ldr	r2, [sp, #28]
   83412:	1c51      	adds	r1, r2, #1
   83414:	9107      	str	r1, [sp, #28]
   83416:	7812      	ldrb	r2, [r2, #0]
   83418:	701a      	strb	r2, [r3, #0]
   8341a:	9b08      	ldr	r3, [sp, #32]
   8341c:	3b01      	subs	r3, #1
   8341e:	9308      	str	r3, [sp, #32]
   83420:	9b06      	ldr	r3, [sp, #24]
   83422:	3301      	adds	r3, #1
   83424:	9306      	str	r3, [sp, #24]
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   83426:	6823      	ldr	r3, [r4, #0]
   83428:	42b3      	cmp	r3, r6
   8342a:	bf24      	itt	cs
   8342c:	4b0d      	ldrcs	r3, [pc, #52]	; (83464 <Shellcom+0x188>)
   8342e:	6023      	strcs	r3, [r4, #0]
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   83430:	6822      	ldr	r2, [r4, #0]
   83432:	6863      	ldr	r3, [r4, #4]
   83434:	429a      	cmp	r2, r3
   83436:	d009      	beq.n	8344c <Shellcom+0x170>
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   83438:	f44f 7100 	mov.w	r1, #512	; 0x200
   8343c:	4628      	mov	r0, r5
   8343e:	4b15      	ldr	r3, [pc, #84]	; (83494 <Shellcom+0x1b8>)
   83440:	4798      	blx	r3
		while(_strLen)
   83442:	9b08      	ldr	r3, [sp, #32]
   83444:	2b00      	cmp	r3, #0
   83446:	d1e0      	bne.n	8340a <Shellcom+0x12e>
		return _nChar;
   83448:	9d06      	ldr	r5, [sp, #24]
   8344a:	e786      	b.n	8335a <Shellcom+0x7e>
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   8344c:	2100      	movs	r1, #0
   8344e:	2017      	movs	r0, #23
   83450:	4b0e      	ldr	r3, [pc, #56]	; (8348c <Shellcom+0x1b0>)
   83452:	4798      	blx	r3
   83454:	e7f0      	b.n	83438 <Shellcom+0x15c>
		Error(ERROR_SHELLCOM_SWITCH_BAD_SC, (uint32_t)sc);
   83456:	200c      	movs	r0, #12
   83458:	4b0c      	ldr	r3, [pc, #48]	; (8348c <Shellcom+0x1b0>)
   8345a:	4798      	blx	r3
	return 0;
   8345c:	2500      	movs	r5, #0
   8345e:	e77c      	b.n	8335a <Shellcom+0x7e>
   83460:	200013a4 	.word	0x200013a4
   83464:	200013ac 	.word	0x200013ac
   83468:	00080aad 	.word	0x00080aad
   8346c:	000808ad 	.word	0x000808ad
   83470:	08000001 	.word	0x08000001
   83474:	00089794 	.word	0x00089794
   83478:	400e0600 	.word	0x400e0600
   8347c:	00080f51 	.word	0x00080f51
   83480:	e000e100 	.word	0xe000e100
   83484:	00080f93 	.word	0x00080f93
   83488:	00080f9b 	.word	0x00080f9b
   8348c:	000817b5 	.word	0x000817b5
   83490:	00080f8f 	.word	0x00080f8f
   83494:	00080f87 	.word	0x00080f87
   83498:	200015ac 	.word	0x200015ac

0008349c <UART_Handler>:
enum{
	_SHELL_KBHIT = 2
};

void UART_Handler()
{
   8349c:	b510      	push	{r4, lr}
   8349e:	b082      	sub	sp, #8
	uint32_t dw_status = uart_get_status(UART);
   834a0:	4816      	ldr	r0, [pc, #88]	; (834fc <UART_Handler+0x60>)
   834a2:	4b17      	ldr	r3, [pc, #92]	; (83500 <UART_Handler+0x64>)
   834a4:	4798      	blx	r3
   834a6:	4604      	mov	r4, r0
	//TX section //////////////////////////////////////////////////////////////////////////////////
	if(mIsBitsSet(dw_status,US_CSR_TXEMPTY))
   834a8:	f410 7f00 	tst.w	r0, #512	; 0x200
   834ac:	d011      	beq.n	834d2 <UART_Handler+0x36>
	{
		if(shellcom.pTxRead!=shellcom.pTxWrite)
   834ae:	4a15      	ldr	r2, [pc, #84]	; (83504 <UART_Handler+0x68>)
   834b0:	6853      	ldr	r3, [r2, #4]
   834b2:	6812      	ldr	r2, [r2, #0]
   834b4:	4293      	cmp	r3, r2
   834b6:	d011      	beq.n	834dc <UART_Handler+0x40>
		{
			UART->UART_THR = *shellcom.pTxRead++;
   834b8:	1c5a      	adds	r2, r3, #1
   834ba:	4912      	ldr	r1, [pc, #72]	; (83504 <UART_Handler+0x68>)
   834bc:	604a      	str	r2, [r1, #4]
   834be:	7819      	ldrb	r1, [r3, #0]
   834c0:	4b0e      	ldr	r3, [pc, #56]	; (834fc <UART_Handler+0x60>)
   834c2:	61d9      	str	r1, [r3, #28]
			if(shellcom.pTxRead>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxRead=shellcomTxBuf;
   834c4:	4b10      	ldr	r3, [pc, #64]	; (83508 <UART_Handler+0x6c>)
   834c6:	429a      	cmp	r2, r3
   834c8:	d303      	bcc.n	834d2 <UART_Handler+0x36>
   834ca:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
   834ce:	4b0d      	ldr	r3, [pc, #52]	; (83504 <UART_Handler+0x68>)
   834d0:	605a      	str	r2, [r3, #4]
			uart_disable_interrupt(UART,US_IER_TXEMPTY);
		}
	}

	//RX section //////////////////////////////////////////////////////////////////////////////////
	if(mIsBitsSet(dw_status,US_CSR_RXRDY))
   834d2:	f014 0f01 	tst.w	r4, #1
   834d6:	d107      	bne.n	834e8 <UART_Handler+0x4c>
	{
		PushTask(Shell,_SHELL_KBHIT,UART->UART_RHR,0);
	}
}
   834d8:	b002      	add	sp, #8
   834da:	bd10      	pop	{r4, pc}
			uart_disable_interrupt(UART,US_IER_TXEMPTY);
   834dc:	f44f 7100 	mov.w	r1, #512	; 0x200
   834e0:	4806      	ldr	r0, [pc, #24]	; (834fc <UART_Handler+0x60>)
   834e2:	4b0a      	ldr	r3, [pc, #40]	; (8350c <UART_Handler+0x70>)
   834e4:	4798      	blx	r3
   834e6:	e7f4      	b.n	834d2 <UART_Handler+0x36>
		PushTask(Shell,_SHELL_KBHIT,UART->UART_RHR,0);
   834e8:	4b04      	ldr	r3, [pc, #16]	; (834fc <UART_Handler+0x60>)
   834ea:	699b      	ldr	r3, [r3, #24]
   834ec:	2200      	movs	r2, #0
   834ee:	9200      	str	r2, [sp, #0]
   834f0:	2202      	movs	r2, #2
   834f2:	4907      	ldr	r1, [pc, #28]	; (83510 <UART_Handler+0x74>)
   834f4:	2066      	movs	r0, #102	; 0x66
   834f6:	4c07      	ldr	r4, [pc, #28]	; (83514 <UART_Handler+0x78>)
   834f8:	47a0      	blx	r4
}
   834fa:	e7ed      	b.n	834d8 <UART_Handler+0x3c>
   834fc:	400e0600 	.word	0x400e0600
   83500:	00080f8f 	.word	0x00080f8f
   83504:	200013a4 	.word	0x200013a4
   83508:	200015ac 	.word	0x200015ac
   8350c:	00080f8b 	.word	0x00080f8b
   83510:	00082135 	.word	0x00082135
   83514:	00083519 	.word	0x00083519

00083518 <Taskman>:
	_TASKMAN_DELAYED_TASK_PROC	= 1
};


uint32_t Taskman(uint32_t sc, ...)
{
   83518:	b40f      	push	{r0, r1, r2, r3}
   8351a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8351c:	b083      	sub	sp, #12
	switch(sc)
   8351e:	9908      	ldr	r1, [sp, #32]
   83520:	2964      	cmp	r1, #100	; 0x64
   83522:	d028      	beq.n	83576 <Taskman+0x5e>
   83524:	d91e      	bls.n	83564 <Taskman+0x4c>
   83526:	2966      	cmp	r1, #102	; 0x66
   83528:	d06b      	beq.n	83602 <Taskman+0xea>
   8352a:	2967      	cmp	r1, #103	; 0x67
   8352c:	f040 80cd 	bne.w	836ca <Taskman+0x1b2>
#undef _delay
#undef k
		break;

	case TASKMAN_POP:
		cpu_irq_enter_critical();
   83530:	4b68      	ldr	r3, [pc, #416]	; (836d4 <Taskman+0x1bc>)
   83532:	4798      	blx	r3
		if(taskman.pPop!=taskman.pPush)
   83534:	4a68      	ldr	r2, [pc, #416]	; (836d8 <Taskman+0x1c0>)
   83536:	6853      	ldr	r3, [r2, #4]
   83538:	6812      	ldr	r2, [r2, #0]
   8353a:	4293      	cmp	r3, r2
   8353c:	f000 80ae 	beq.w	8369c <Taskman+0x184>
		{
			t_pTaskFunc	 func;
			uint32_t pa;
			func = taskman.pPop->pFunc;
   83540:	681d      	ldr	r5, [r3, #0]
			sc = taskman.pPop->sc;
   83542:	685c      	ldr	r4, [r3, #4]
   83544:	9408      	str	r4, [sp, #32]
			pa = taskman.pPop->param;
   83546:	689e      	ldr	r6, [r3, #8]
			taskman.pPop++;
   83548:	3310      	adds	r3, #16
			if(taskman.pPop>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPop=tasks;
   8354a:	4a64      	ldr	r2, [pc, #400]	; (836dc <Taskman+0x1c4>)
   8354c:	4293      	cmp	r3, r2
   8354e:	f0c0 80a2 	bcc.w	83696 <Taskman+0x17e>
   83552:	4a63      	ldr	r2, [pc, #396]	; (836e0 <Taskman+0x1c8>)
   83554:	4b60      	ldr	r3, [pc, #384]	; (836d8 <Taskman+0x1c0>)
   83556:	605a      	str	r2, [r3, #4]
			cpu_irq_leave_critical();
   83558:	4b62      	ldr	r3, [pc, #392]	; (836e4 <Taskman+0x1cc>)
   8355a:	4798      	blx	r3
			func(sc,pa);
   8355c:	4631      	mov	r1, r6
   8355e:	4620      	mov	r0, r4
   83560:	47a8      	blx	r5
			return 0; //Must return here because of "cpu_irq_leave_critical()"
   83562:	e048      	b.n	835f6 <Taskman+0xde>
	switch(sc)
   83564:	2901      	cmp	r1, #1
   83566:	f040 80b0 	bne.w	836ca <Taskman+0x1b2>


	////////// PRIVATE SERVICES IMPLEMENTATION ///////////////////////////////////////////
	case _TASKMAN_DELAYED_TASK_PROC:
#define k sc
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   8356a:	2500      	movs	r5, #0
   8356c:	9508      	str	r5, [sp, #32]
   8356e:	4c5e      	ldr	r4, [pc, #376]	; (836e8 <Taskman+0x1d0>)
		{
			if(dTasks[k].delay)
			{
				if(--dTasks[k].delay==0)
				{
					PushTask(
   83570:	462f      	mov	r7, r5
   83572:	2666      	movs	r6, #102	; 0x66
   83574:	e09a      	b.n	836ac <Taskman+0x194>
		taskman.pPop=taskman.pPush=tasks;
   83576:	4b58      	ldr	r3, [pc, #352]	; (836d8 <Taskman+0x1c0>)
   83578:	4a59      	ldr	r2, [pc, #356]	; (836e0 <Taskman+0x1c8>)
   8357a:	601a      	str	r2, [r3, #0]
   8357c:	605a      	str	r2, [r3, #4]
   8357e:	4b5a      	ldr	r3, [pc, #360]	; (836e8 <Taskman+0x1d0>)
   83580:	f503 71a0 	add.w	r1, r3, #320	; 0x140
			dTasks[k].delay=0;
   83584:	2200      	movs	r2, #0
   83586:	60da      	str	r2, [r3, #12]
   83588:	3310      	adds	r3, #16
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   8358a:	428b      	cmp	r3, r1
   8358c:	d1fb      	bne.n	83586 <Taskman+0x6e>
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   8358e:	4b57      	ldr	r3, [pc, #348]	; (836ec <Taskman+0x1d4>)
   83590:	2202      	movs	r2, #2
   83592:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   83594:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   83596:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   83598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8359c:	6f19      	ldr	r1, [r3, #112]	; 0x70
   8359e:	f021 0102 	bic.w	r1, r1, #2
   835a2:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   835a4:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   835a6:	2016      	movs	r0, #22
   835a8:	4b51      	ldr	r3, [pc, #324]	; (836f0 <Taskman+0x1d8>)
   835aa:	4798      	blx	r3

	//Configure the PMC to enable the TC module.
	sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);

	//Init TC to waveform mode.
	tc_init(
   835ac:	4c51      	ldr	r4, [pc, #324]	; (836f4 <Taskman+0x1dc>)
   835ae:	4a52      	ldr	r2, [pc, #328]	; (836f8 <Taskman+0x1e0>)
   835b0:	2100      	movs	r1, #0
   835b2:	4620      	mov	r0, r4
   835b4:	4b51      	ldr	r3, [pc, #324]	; (836fc <Taskman+0x1e4>)
   835b6:	4798      	blx	r3

	//Configure waveform frequency and duty cycle.
	rc =	(sysclk_get_peripheral_bus_hz(TC) /
	TC_WAVEFORM_DIVISOR) /
	TC_WAVEFORM_FREQUENCY;
	tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
   835b8:	f240 22ee 	movw	r2, #750	; 0x2ee
   835bc:	2100      	movs	r1, #0
   835be:	4620      	mov	r0, r4
   835c0:	4b4f      	ldr	r3, [pc, #316]	; (83700 <Taskman+0x1e8>)
   835c2:	4798      	blx	r3

	ra = (100 - TC_WAVEFORM_DUTY_CYCLE) * rc / 100;
	tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
   835c4:	f240 220d 	movw	r2, #525	; 0x20d
   835c8:	2100      	movs	r1, #0
   835ca:	4620      	mov	r0, r4
   835cc:	4b4d      	ldr	r3, [pc, #308]	; (83704 <Taskman+0x1ec>)
   835ce:	4798      	blx	r3

	//Enable TC TC_CHANNEL_WAVEFORM
	tc_start(TC, TC_CHANNEL_WAVEFORM);
   835d0:	2100      	movs	r1, #0
   835d2:	4620      	mov	r0, r4
   835d4:	4b4c      	ldr	r3, [pc, #304]	; (83708 <Taskman+0x1f0>)
   835d6:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   835d8:	4b4c      	ldr	r3, [pc, #304]	; (8370c <Taskman+0x1f4>)
   835da:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   835de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   835e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   835e6:	2100      	movs	r1, #0
   835e8:	f883 1316 	strb.w	r1, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   835ec:	601a      	str	r2, [r3, #0]
		tc_enable_interrupt(TC, TC_CHANNEL_WAVEFORM, TC_IER_CPAS);
   835ee:	2204      	movs	r2, #4
   835f0:	4620      	mov	r0, r4
   835f2:	4b47      	ldr	r3, [pc, #284]	; (83710 <Taskman+0x1f8>)
   835f4:	4798      	blx	r3
}
   835f6:	2000      	movs	r0, #0
   835f8:	b003      	add	sp, #12
   835fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   835fe:	b004      	add	sp, #16
   83600:	4770      	bx	lr
		cpu_irq_enter_critical();
   83602:	4b34      	ldr	r3, [pc, #208]	; (836d4 <Taskman+0x1bc>)
   83604:	4798      	blx	r3
		if(_delay)
   83606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   83608:	b345      	cbz	r5, 8365c <Taskman+0x144>
			for(k=0;(k<TASKMAN_DELAYED_TASK_LIST_LEN)&&(dTasks[k].delay);k++);
   8360a:	2300      	movs	r3, #0
   8360c:	9308      	str	r3, [sp, #32]
   8360e:	4b36      	ldr	r3, [pc, #216]	; (836e8 <Taskman+0x1d0>)
   83610:	68db      	ldr	r3, [r3, #12]
   83612:	b1a3      	cbz	r3, 8363e <Taskman+0x126>
   83614:	2301      	movs	r3, #1
   83616:	9308      	str	r3, [sp, #32]
   83618:	4a33      	ldr	r2, [pc, #204]	; (836e8 <Taskman+0x1d0>)
   8361a:	2000      	movs	r0, #0
   8361c:	461c      	mov	r4, r3
   8361e:	69d1      	ldr	r1, [r2, #28]
   83620:	b151      	cbz	r1, 83638 <Taskman+0x120>
   83622:	3301      	adds	r3, #1
   83624:	3210      	adds	r2, #16
   83626:	4620      	mov	r0, r4
   83628:	2b14      	cmp	r3, #20
   8362a:	d1f8      	bne.n	8361e <Taskman+0x106>
			if(k==TASKMAN_DELAYED_TASK_LIST_LEN) Error(ERROR_TASKMAN_DELAYED_TASKLIST_FULL, (uint32_t)0);
   8362c:	2100      	movs	r1, #0
   8362e:	2016      	movs	r0, #22
   83630:	4b38      	ldr	r3, [pc, #224]	; (83714 <Taskman+0x1fc>)
   83632:	4798      	blx	r3
   83634:	2314      	movs	r3, #20
   83636:	e002      	b.n	8363e <Taskman+0x126>
   83638:	b970      	cbnz	r0, 83658 <Taskman+0x140>
   8363a:	2b14      	cmp	r3, #20
   8363c:	d0f6      	beq.n	8362c <Taskman+0x114>
			dTasks[k].pFunc=_func;
   8363e:	492a      	ldr	r1, [pc, #168]	; (836e8 <Taskman+0x1d0>)
   83640:	011b      	lsls	r3, r3, #4
   83642:	18ca      	adds	r2, r1, r3
   83644:	9809      	ldr	r0, [sp, #36]	; 0x24
   83646:	50c8      	str	r0, [r1, r3]
			dTasks[k].sc=_sc;
   83648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8364a:	6053      	str	r3, [r2, #4]
			dTasks[k].param=_param;
   8364c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8364e:	6093      	str	r3, [r2, #8]
			dTasks[k].delay=_delay;
   83650:	60d5      	str	r5, [r2, #12]
		cpu_irq_leave_critical();
   83652:	4b24      	ldr	r3, [pc, #144]	; (836e4 <Taskman+0x1cc>)
   83654:	4798      	blx	r3
		break;
   83656:	e7ce      	b.n	835f6 <Taskman+0xde>
   83658:	9308      	str	r3, [sp, #32]
   8365a:	e7ee      	b.n	8363a <Taskman+0x122>
			taskman.pPush->pFunc=_func;
   8365c:	4b1e      	ldr	r3, [pc, #120]	; (836d8 <Taskman+0x1c0>)
   8365e:	681a      	ldr	r2, [r3, #0]
   83660:	9909      	ldr	r1, [sp, #36]	; 0x24
   83662:	6011      	str	r1, [r2, #0]
			taskman.pPush->sc=_sc;
   83664:	681b      	ldr	r3, [r3, #0]
   83666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83668:	605a      	str	r2, [r3, #4]
			taskman.pPush->param=_param;
   8366a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8366c:	609a      	str	r2, [r3, #8]
			taskman.pPush++;
   8366e:	3310      	adds	r3, #16
			if(taskman.pPush>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPush=tasks;
   83670:	4a1a      	ldr	r2, [pc, #104]	; (836dc <Taskman+0x1c4>)
   83672:	4293      	cmp	r3, r2
   83674:	d20b      	bcs.n	8368e <Taskman+0x176>
			taskman.pPush++;
   83676:	4a18      	ldr	r2, [pc, #96]	; (836d8 <Taskman+0x1c0>)
   83678:	6013      	str	r3, [r2, #0]
			if(taskman.pPush==taskman.pPop) Error(ERROR_TASKMAN_TASKLIST_FULL, (uint32_t)0);
   8367a:	4b17      	ldr	r3, [pc, #92]	; (836d8 <Taskman+0x1c0>)
   8367c:	681a      	ldr	r2, [r3, #0]
   8367e:	685b      	ldr	r3, [r3, #4]
   83680:	429a      	cmp	r2, r3
   83682:	d1e6      	bne.n	83652 <Taskman+0x13a>
   83684:	2100      	movs	r1, #0
   83686:	2015      	movs	r0, #21
   83688:	4b22      	ldr	r3, [pc, #136]	; (83714 <Taskman+0x1fc>)
   8368a:	4798      	blx	r3
   8368c:	e7e1      	b.n	83652 <Taskman+0x13a>
			if(taskman.pPush>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPush=tasks;
   8368e:	4a14      	ldr	r2, [pc, #80]	; (836e0 <Taskman+0x1c8>)
   83690:	4b11      	ldr	r3, [pc, #68]	; (836d8 <Taskman+0x1c0>)
   83692:	601a      	str	r2, [r3, #0]
   83694:	e7f1      	b.n	8367a <Taskman+0x162>
			taskman.pPop++;
   83696:	4a10      	ldr	r2, [pc, #64]	; (836d8 <Taskman+0x1c0>)
   83698:	6053      	str	r3, [r2, #4]
   8369a:	e75d      	b.n	83558 <Taskman+0x40>
		cpu_irq_leave_critical();
   8369c:	4b11      	ldr	r3, [pc, #68]	; (836e4 <Taskman+0x1cc>)
   8369e:	4798      	blx	r3
		break;
   836a0:	e7a9      	b.n	835f6 <Taskman+0xde>
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   836a2:	3501      	adds	r5, #1
   836a4:	9508      	str	r5, [sp, #32]
   836a6:	3410      	adds	r4, #16
   836a8:	2d14      	cmp	r5, #20
   836aa:	d0a4      	beq.n	835f6 <Taskman+0xde>
			if(dTasks[k].delay)
   836ac:	68e3      	ldr	r3, [r4, #12]
   836ae:	2b00      	cmp	r3, #0
   836b0:	d0f7      	beq.n	836a2 <Taskman+0x18a>
				if(--dTasks[k].delay==0)
   836b2:	3b01      	subs	r3, #1
   836b4:	60e3      	str	r3, [r4, #12]
   836b6:	2b00      	cmp	r3, #0
   836b8:	d1f3      	bne.n	836a2 <Taskman+0x18a>
					PushTask(
   836ba:	68a3      	ldr	r3, [r4, #8]
   836bc:	6862      	ldr	r2, [r4, #4]
   836be:	6821      	ldr	r1, [r4, #0]
   836c0:	9700      	str	r7, [sp, #0]
   836c2:	4630      	mov	r0, r6
   836c4:	f7ff ff28 	bl	83518 <Taskman>
   836c8:	e7eb      	b.n	836a2 <Taskman+0x18a>
		Error(ERROR_TASKMAN_SWITCH_BAD_SC,  (uint32_t)sc);
   836ca:	200b      	movs	r0, #11
   836cc:	4b11      	ldr	r3, [pc, #68]	; (83714 <Taskman+0x1fc>)
   836ce:	4798      	blx	r3
   836d0:	e791      	b.n	835f6 <Taskman+0xde>
   836d2:	bf00      	nop
   836d4:	00080ae5 	.word	0x00080ae5
   836d8:	200016ec 	.word	0x200016ec
   836dc:	200016ec 	.word	0x200016ec
   836e0:	200015ac 	.word	0x200015ac
   836e4:	00080b21 	.word	0x00080b21
   836e8:	200016f4 	.word	0x200016f4
   836ec:	400e0c00 	.word	0x400e0c00
   836f0:	00080aad 	.word	0x00080aad
   836f4:	40080000 	.word	0x40080000
   836f8:	0009c003 	.word	0x0009c003
   836fc:	00080f11 	.word	0x00080f11
   83700:	00080f39 	.word	0x00080f39
   83704:	00080f31 	.word	0x00080f31
   83708:	00080f29 	.word	0x00080f29
   8370c:	e000e100 	.word	0xe000e100
   83710:	00080f41 	.word	0x00080f41
   83714:	000817b5 	.word	0x000817b5

00083718 <TC0_Handler>:
{
   83718:	b508      	push	{r3, lr}
	tc_get_status(TC, TC_CHANNEL_WAVEFORM);
   8371a:	2100      	movs	r1, #0
   8371c:	4804      	ldr	r0, [pc, #16]	; (83730 <TC0_Handler+0x18>)
   8371e:	4b05      	ldr	r3, [pc, #20]	; (83734 <TC0_Handler+0x1c>)
   83720:	4798      	blx	r3
	Taskman(_TASKMAN_DELAYED_TASK_PROC);
   83722:	2001      	movs	r0, #1
   83724:	4b04      	ldr	r3, [pc, #16]	; (83738 <TC0_Handler+0x20>)
   83726:	4798      	blx	r3
	Shell(_SHELL_editTimer);
   83728:	2003      	movs	r0, #3
   8372a:	4b04      	ldr	r3, [pc, #16]	; (8373c <TC0_Handler+0x24>)
   8372c:	4798      	blx	r3
   8372e:	bd08      	pop	{r3, pc}
   83730:	40080000 	.word	0x40080000
   83734:	00080f49 	.word	0x00080f49
   83738:	00083519 	.word	0x00083519
   8373c:	00082135 	.word	0x00082135

00083740 <mstrtokRestore>:
    return pToken;
}

void  mstrtokRestore(void)
{
    if(_pEndToken) *_pEndToken=_chEndToken;
   83740:	4b03      	ldr	r3, [pc, #12]	; (83750 <mstrtokRestore+0x10>)
   83742:	681b      	ldr	r3, [r3, #0]
   83744:	b113      	cbz	r3, 8374c <mstrtokRestore+0xc>
   83746:	4a03      	ldr	r2, [pc, #12]	; (83754 <mstrtokRestore+0x14>)
   83748:	7812      	ldrb	r2, [r2, #0]
   8374a:	701a      	strb	r2, [r3, #0]
   8374c:	4770      	bx	lr
   8374e:	bf00      	nop
   83750:	20001074 	.word	0x20001074
   83754:	20001070 	.word	0x20001070

00083758 <mstrtokReset>:
}

void  mstrtokReset(void)
{
    _chEndToken  = '\0';
   83758:	2300      	movs	r3, #0
   8375a:	4a02      	ldr	r2, [pc, #8]	; (83764 <mstrtokReset+0xc>)
   8375c:	7013      	strb	r3, [r2, #0]
    _pEndToken = NULL;
   8375e:	4a02      	ldr	r2, [pc, #8]	; (83768 <mstrtokReset+0x10>)
   83760:	6013      	str	r3, [r2, #0]
   83762:	4770      	bx	lr
   83764:	20001070 	.word	0x20001070
   83768:	20001074 	.word	0x20001074

0008376c <_IsSeparator>:
}


char _IsSeparator(char ch, const char*pSep)
{
    while(*pSep && (*pSep!=ch)) pSep++;
   8376c:	780b      	ldrb	r3, [r1, #0]
   8376e:	b13b      	cbz	r3, 83780 <_IsSeparator+0x14>
   83770:	4298      	cmp	r0, r3
   83772:	d005      	beq.n	83780 <_IsSeparator+0x14>
   83774:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   83778:	b113      	cbz	r3, 83780 <_IsSeparator+0x14>
   8377a:	4283      	cmp	r3, r0
   8377c:	d1fa      	bne.n	83774 <_IsSeparator+0x8>
   8377e:	4603      	mov	r3, r0
    return *pSep;
}
   83780:	4618      	mov	r0, r3
   83782:	4770      	bx	lr

00083784 <mstrtok>:
{
   83784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(pStr) 
   83788:	2800      	cmp	r0, #0
   8378a:	d02b      	beq.n	837e4 <mstrtok+0x60>
        pToken=pStr;
   8378c:	4a1d      	ldr	r2, [pc, #116]	; (83804 <mstrtok+0x80>)
   8378e:	6010      	str	r0, [r2, #0]
    while(*pToken && _IsSeparator(*pToken,pSep)) { pToken++; }
   83790:	4b1c      	ldr	r3, [pc, #112]	; (83804 <mstrtok+0x80>)
   83792:	681d      	ldr	r5, [r3, #0]
   83794:	782c      	ldrb	r4, [r5, #0]
   83796:	2c00      	cmp	r4, #0
   83798:	d030      	beq.n	837fc <mstrtok+0x78>
   8379a:	4688      	mov	r8, r1
   8379c:	4e1a      	ldr	r6, [pc, #104]	; (83808 <mstrtok+0x84>)
   8379e:	4f19      	ldr	r7, [pc, #100]	; (83804 <mstrtok+0x80>)
   837a0:	4641      	mov	r1, r8
   837a2:	4620      	mov	r0, r4
   837a4:	47b0      	blx	r6
   837a6:	b120      	cbz	r0, 837b2 <mstrtok+0x2e>
   837a8:	3501      	adds	r5, #1
   837aa:	603d      	str	r5, [r7, #0]
   837ac:	782c      	ldrb	r4, [r5, #0]
   837ae:	2c00      	cmp	r4, #0
   837b0:	d1f6      	bne.n	837a0 <mstrtok+0x1c>
    _pEndToken=pToken;
   837b2:	4b16      	ldr	r3, [pc, #88]	; (8380c <mstrtok+0x88>)
   837b4:	601d      	str	r5, [r3, #0]
    while(*_pEndToken && !_IsSeparator(*_pEndToken,pSep)) { _pEndToken++; }
   837b6:	782c      	ldrb	r4, [r5, #0]
   837b8:	b1f4      	cbz	r4, 837f8 <mstrtok+0x74>
   837ba:	462e      	mov	r6, r5
   837bc:	4f12      	ldr	r7, [pc, #72]	; (83808 <mstrtok+0x84>)
   837be:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8380c <mstrtok+0x88>
   837c2:	4641      	mov	r1, r8
   837c4:	4620      	mov	r0, r4
   837c6:	47b8      	blx	r7
   837c8:	b928      	cbnz	r0, 837d6 <mstrtok+0x52>
   837ca:	3601      	adds	r6, #1
   837cc:	f8c9 6000 	str.w	r6, [r9]
   837d0:	7834      	ldrb	r4, [r6, #0]
   837d2:	2c00      	cmp	r4, #0
   837d4:	d1f5      	bne.n	837c2 <mstrtok+0x3e>
    _chEndToken=*_pEndToken;
   837d6:	4b0e      	ldr	r3, [pc, #56]	; (83810 <mstrtok+0x8c>)
   837d8:	701c      	strb	r4, [r3, #0]
    *_pEndToken='\0';
   837da:	2300      	movs	r3, #0
   837dc:	7033      	strb	r3, [r6, #0]
}
   837de:	4628      	mov	r0, r5
   837e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if(_pEndToken)
   837e4:	4b09      	ldr	r3, [pc, #36]	; (8380c <mstrtok+0x88>)
   837e6:	681d      	ldr	r5, [r3, #0]
   837e8:	2d00      	cmp	r5, #0
   837ea:	d0f8      	beq.n	837de <mstrtok+0x5a>
        *_pEndToken=_chEndToken;
   837ec:	4b08      	ldr	r3, [pc, #32]	; (83810 <mstrtok+0x8c>)
   837ee:	781b      	ldrb	r3, [r3, #0]
   837f0:	702b      	strb	r3, [r5, #0]
        pToken=_pEndToken;
   837f2:	4b04      	ldr	r3, [pc, #16]	; (83804 <mstrtok+0x80>)
   837f4:	601d      	str	r5, [r3, #0]
   837f6:	e7cb      	b.n	83790 <mstrtok+0xc>
    while(*_pEndToken && !_IsSeparator(*_pEndToken,pSep)) { _pEndToken++; }
   837f8:	462e      	mov	r6, r5
   837fa:	e7ec      	b.n	837d6 <mstrtok+0x52>
    _pEndToken=pToken;
   837fc:	4b03      	ldr	r3, [pc, #12]	; (8380c <mstrtok+0x88>)
   837fe:	601d      	str	r5, [r3, #0]
    while(*pToken && _IsSeparator(*pToken,pSep)) { pToken++; }
   83800:	462e      	mov	r6, r5
   83802:	e7e8      	b.n	837d6 <mstrtok+0x52>
   83804:	20001078 	.word	0x20001078
   83808:	0008376d 	.word	0x0008376d
   8380c:	20001074 	.word	0x20001074
   83810:	20001070 	.word	0x20001070

00083814 <main>:
#define SABLIER_NEW			100



int main (void)
{
   83814:	b500      	push	{lr}
   83816:	b083      	sub	sp, #12
   83818:	b672      	cpsid	i
   8381a:	f3bf 8f5f 	dmb	sy
	//osc_enable(OSC_MAINCK_XTAL);
	/* Insert system clock initialization code here (sysclk_init()). */
	cpu_irq_disable();
   8381e:	4e10      	ldr	r6, [pc, #64]	; (83860 <main+0x4c>)
   83820:	2400      	movs	r4, #0
   83822:	7034      	strb	r4, [r6, #0]
	wdt_disable(WDT);
   83824:	480f      	ldr	r0, [pc, #60]	; (83864 <main+0x50>)
   83826:	4b10      	ldr	r3, [pc, #64]	; (83868 <main+0x54>)
   83828:	4798      	blx	r3
	sysclk_init();
   8382a:	4b10      	ldr	r3, [pc, #64]	; (8386c <main+0x58>)
   8382c:	4798      	blx	r3
	board_init();
   8382e:	4b10      	ldr	r3, [pc, #64]	; (83870 <main+0x5c>)
   83830:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	/* Insert application code here, after the board has been initialized. */
	KernelNew();
   83832:	2064      	movs	r0, #100	; 0x64
   83834:	4d0f      	ldr	r5, [pc, #60]	; (83874 <main+0x60>)
   83836:	47a8      	blx	r5
   83838:	2064      	movs	r0, #100	; 0x64
   8383a:	4b0f      	ldr	r3, [pc, #60]	; (83878 <main+0x64>)
   8383c:	4798      	blx	r3
	cpu_irq_enable();
   8383e:	2301      	movs	r3, #1
   83840:	7033      	strb	r3, [r6, #0]
   83842:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83846:	b662      	cpsie	i
	PushTask(Appli,APPLI_NEW,0,0);
   83848:	9400      	str	r4, [sp, #0]
   8384a:	4623      	mov	r3, r4
   8384c:	2264      	movs	r2, #100	; 0x64
   8384e:	490b      	ldr	r1, [pc, #44]	; (8387c <main+0x68>)
   83850:	2066      	movs	r0, #102	; 0x66
   83852:	47a8      	blx	r5
	KernelRun();
   83854:	2567      	movs	r5, #103	; 0x67
   83856:	4c07      	ldr	r4, [pc, #28]	; (83874 <main+0x60>)
   83858:	4628      	mov	r0, r5
   8385a:	47a0      	blx	r4
   8385c:	e7fc      	b.n	83858 <main+0x44>
   8385e:	bf00      	nop
   83860:	20000124 	.word	0x20000124
   83864:	400e1250 	.word	0x400e1250
   83868:	00080fad 	.word	0x00080fad
   8386c:	000806f1 	.word	0x000806f1
   83870:	00080ae1 	.word	0x00080ae1
   83874:	00083519 	.word	0x00083519
   83878:	00082135 	.word	0x00082135
   8387c:	00080129 	.word	0x00080129

00083880 <__aeabi_frsub>:
   83880:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   83884:	e002      	b.n	8388c <__addsf3>
   83886:	bf00      	nop

00083888 <__aeabi_fsub>:
   83888:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0008388c <__addsf3>:
   8388c:	0042      	lsls	r2, r0, #1
   8388e:	bf1f      	itttt	ne
   83890:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   83894:	ea92 0f03 	teqne	r2, r3
   83898:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   8389c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   838a0:	d06a      	beq.n	83978 <__addsf3+0xec>
   838a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   838a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   838aa:	bfc1      	itttt	gt
   838ac:	18d2      	addgt	r2, r2, r3
   838ae:	4041      	eorgt	r1, r0
   838b0:	4048      	eorgt	r0, r1
   838b2:	4041      	eorgt	r1, r0
   838b4:	bfb8      	it	lt
   838b6:	425b      	neglt	r3, r3
   838b8:	2b19      	cmp	r3, #25
   838ba:	bf88      	it	hi
   838bc:	4770      	bxhi	lr
   838be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   838c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   838c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   838ca:	bf18      	it	ne
   838cc:	4240      	negne	r0, r0
   838ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   838d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   838d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   838da:	bf18      	it	ne
   838dc:	4249      	negne	r1, r1
   838de:	ea92 0f03 	teq	r2, r3
   838e2:	d03f      	beq.n	83964 <__addsf3+0xd8>
   838e4:	f1a2 0201 	sub.w	r2, r2, #1
   838e8:	fa41 fc03 	asr.w	ip, r1, r3
   838ec:	eb10 000c 	adds.w	r0, r0, ip
   838f0:	f1c3 0320 	rsb	r3, r3, #32
   838f4:	fa01 f103 	lsl.w	r1, r1, r3
   838f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   838fc:	d502      	bpl.n	83904 <__addsf3+0x78>
   838fe:	4249      	negs	r1, r1
   83900:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   83904:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   83908:	d313      	bcc.n	83932 <__addsf3+0xa6>
   8390a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8390e:	d306      	bcc.n	8391e <__addsf3+0x92>
   83910:	0840      	lsrs	r0, r0, #1
   83912:	ea4f 0131 	mov.w	r1, r1, rrx
   83916:	f102 0201 	add.w	r2, r2, #1
   8391a:	2afe      	cmp	r2, #254	; 0xfe
   8391c:	d251      	bcs.n	839c2 <__addsf3+0x136>
   8391e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   83922:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   83926:	bf08      	it	eq
   83928:	f020 0001 	biceq.w	r0, r0, #1
   8392c:	ea40 0003 	orr.w	r0, r0, r3
   83930:	4770      	bx	lr
   83932:	0049      	lsls	r1, r1, #1
   83934:	eb40 0000 	adc.w	r0, r0, r0
   83938:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   8393c:	f1a2 0201 	sub.w	r2, r2, #1
   83940:	d1ed      	bne.n	8391e <__addsf3+0x92>
   83942:	fab0 fc80 	clz	ip, r0
   83946:	f1ac 0c08 	sub.w	ip, ip, #8
   8394a:	ebb2 020c 	subs.w	r2, r2, ip
   8394e:	fa00 f00c 	lsl.w	r0, r0, ip
   83952:	bfaa      	itet	ge
   83954:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   83958:	4252      	neglt	r2, r2
   8395a:	4318      	orrge	r0, r3
   8395c:	bfbc      	itt	lt
   8395e:	40d0      	lsrlt	r0, r2
   83960:	4318      	orrlt	r0, r3
   83962:	4770      	bx	lr
   83964:	f092 0f00 	teq	r2, #0
   83968:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   8396c:	bf06      	itte	eq
   8396e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   83972:	3201      	addeq	r2, #1
   83974:	3b01      	subne	r3, #1
   83976:	e7b5      	b.n	838e4 <__addsf3+0x58>
   83978:	ea4f 0341 	mov.w	r3, r1, lsl #1
   8397c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   83980:	bf18      	it	ne
   83982:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   83986:	d021      	beq.n	839cc <__addsf3+0x140>
   83988:	ea92 0f03 	teq	r2, r3
   8398c:	d004      	beq.n	83998 <__addsf3+0x10c>
   8398e:	f092 0f00 	teq	r2, #0
   83992:	bf08      	it	eq
   83994:	4608      	moveq	r0, r1
   83996:	4770      	bx	lr
   83998:	ea90 0f01 	teq	r0, r1
   8399c:	bf1c      	itt	ne
   8399e:	2000      	movne	r0, #0
   839a0:	4770      	bxne	lr
   839a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   839a6:	d104      	bne.n	839b2 <__addsf3+0x126>
   839a8:	0040      	lsls	r0, r0, #1
   839aa:	bf28      	it	cs
   839ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   839b0:	4770      	bx	lr
   839b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   839b6:	bf3c      	itt	cc
   839b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   839bc:	4770      	bxcc	lr
   839be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   839c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   839c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   839ca:	4770      	bx	lr
   839cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   839d0:	bf16      	itet	ne
   839d2:	4608      	movne	r0, r1
   839d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   839d8:	4601      	movne	r1, r0
   839da:	0242      	lsls	r2, r0, #9
   839dc:	bf06      	itte	eq
   839de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   839e2:	ea90 0f01 	teqeq	r0, r1
   839e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   839ea:	4770      	bx	lr

000839ec <__aeabi_ui2f>:
   839ec:	f04f 0300 	mov.w	r3, #0
   839f0:	e004      	b.n	839fc <__aeabi_i2f+0x8>
   839f2:	bf00      	nop

000839f4 <__aeabi_i2f>:
   839f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   839f8:	bf48      	it	mi
   839fa:	4240      	negmi	r0, r0
   839fc:	ea5f 0c00 	movs.w	ip, r0
   83a00:	bf08      	it	eq
   83a02:	4770      	bxeq	lr
   83a04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   83a08:	4601      	mov	r1, r0
   83a0a:	f04f 0000 	mov.w	r0, #0
   83a0e:	e01c      	b.n	83a4a <__aeabi_l2f+0x2a>

00083a10 <__aeabi_ul2f>:
   83a10:	ea50 0201 	orrs.w	r2, r0, r1
   83a14:	bf08      	it	eq
   83a16:	4770      	bxeq	lr
   83a18:	f04f 0300 	mov.w	r3, #0
   83a1c:	e00a      	b.n	83a34 <__aeabi_l2f+0x14>
   83a1e:	bf00      	nop

00083a20 <__aeabi_l2f>:
   83a20:	ea50 0201 	orrs.w	r2, r0, r1
   83a24:	bf08      	it	eq
   83a26:	4770      	bxeq	lr
   83a28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   83a2c:	d502      	bpl.n	83a34 <__aeabi_l2f+0x14>
   83a2e:	4240      	negs	r0, r0
   83a30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83a34:	ea5f 0c01 	movs.w	ip, r1
   83a38:	bf02      	ittt	eq
   83a3a:	4684      	moveq	ip, r0
   83a3c:	4601      	moveq	r1, r0
   83a3e:	2000      	moveq	r0, #0
   83a40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   83a44:	bf08      	it	eq
   83a46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   83a4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   83a4e:	fabc f28c 	clz	r2, ip
   83a52:	3a08      	subs	r2, #8
   83a54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   83a58:	db10      	blt.n	83a7c <__aeabi_l2f+0x5c>
   83a5a:	fa01 fc02 	lsl.w	ip, r1, r2
   83a5e:	4463      	add	r3, ip
   83a60:	fa00 fc02 	lsl.w	ip, r0, r2
   83a64:	f1c2 0220 	rsb	r2, r2, #32
   83a68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83a6c:	fa20 f202 	lsr.w	r2, r0, r2
   83a70:	eb43 0002 	adc.w	r0, r3, r2
   83a74:	bf08      	it	eq
   83a76:	f020 0001 	biceq.w	r0, r0, #1
   83a7a:	4770      	bx	lr
   83a7c:	f102 0220 	add.w	r2, r2, #32
   83a80:	fa01 fc02 	lsl.w	ip, r1, r2
   83a84:	f1c2 0220 	rsb	r2, r2, #32
   83a88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   83a8c:	fa21 f202 	lsr.w	r2, r1, r2
   83a90:	eb43 0002 	adc.w	r0, r3, r2
   83a94:	bf08      	it	eq
   83a96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   83a9a:	4770      	bx	lr

00083a9c <__aeabi_fmul>:
   83a9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83aa0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   83aa4:	bf1e      	ittt	ne
   83aa6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   83aaa:	ea92 0f0c 	teqne	r2, ip
   83aae:	ea93 0f0c 	teqne	r3, ip
   83ab2:	d06f      	beq.n	83b94 <__aeabi_fmul+0xf8>
   83ab4:	441a      	add	r2, r3
   83ab6:	ea80 0c01 	eor.w	ip, r0, r1
   83aba:	0240      	lsls	r0, r0, #9
   83abc:	bf18      	it	ne
   83abe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   83ac2:	d01e      	beq.n	83b02 <__aeabi_fmul+0x66>
   83ac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   83ac8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   83acc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   83ad0:	fba0 3101 	umull	r3, r1, r0, r1
   83ad4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   83ad8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   83adc:	bf3e      	ittt	cc
   83ade:	0049      	lslcc	r1, r1, #1
   83ae0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   83ae4:	005b      	lslcc	r3, r3, #1
   83ae6:	ea40 0001 	orr.w	r0, r0, r1
   83aea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   83aee:	2afd      	cmp	r2, #253	; 0xfd
   83af0:	d81d      	bhi.n	83b2e <__aeabi_fmul+0x92>
   83af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   83af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   83afa:	bf08      	it	eq
   83afc:	f020 0001 	biceq.w	r0, r0, #1
   83b00:	4770      	bx	lr
   83b02:	f090 0f00 	teq	r0, #0
   83b06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   83b0a:	bf08      	it	eq
   83b0c:	0249      	lsleq	r1, r1, #9
   83b0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   83b12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   83b16:	3a7f      	subs	r2, #127	; 0x7f
   83b18:	bfc2      	ittt	gt
   83b1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   83b1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   83b22:	4770      	bxgt	lr
   83b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83b28:	f04f 0300 	mov.w	r3, #0
   83b2c:	3a01      	subs	r2, #1
   83b2e:	dc5d      	bgt.n	83bec <__aeabi_fmul+0x150>
   83b30:	f112 0f19 	cmn.w	r2, #25
   83b34:	bfdc      	itt	le
   83b36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   83b3a:	4770      	bxle	lr
   83b3c:	f1c2 0200 	rsb	r2, r2, #0
   83b40:	0041      	lsls	r1, r0, #1
   83b42:	fa21 f102 	lsr.w	r1, r1, r2
   83b46:	f1c2 0220 	rsb	r2, r2, #32
   83b4a:	fa00 fc02 	lsl.w	ip, r0, r2
   83b4e:	ea5f 0031 	movs.w	r0, r1, rrx
   83b52:	f140 0000 	adc.w	r0, r0, #0
   83b56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   83b5a:	bf08      	it	eq
   83b5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   83b60:	4770      	bx	lr
   83b62:	f092 0f00 	teq	r2, #0
   83b66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   83b6a:	bf02      	ittt	eq
   83b6c:	0040      	lsleq	r0, r0, #1
   83b6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   83b72:	3a01      	subeq	r2, #1
   83b74:	d0f9      	beq.n	83b6a <__aeabi_fmul+0xce>
   83b76:	ea40 000c 	orr.w	r0, r0, ip
   83b7a:	f093 0f00 	teq	r3, #0
   83b7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   83b82:	bf02      	ittt	eq
   83b84:	0049      	lsleq	r1, r1, #1
   83b86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   83b8a:	3b01      	subeq	r3, #1
   83b8c:	d0f9      	beq.n	83b82 <__aeabi_fmul+0xe6>
   83b8e:	ea41 010c 	orr.w	r1, r1, ip
   83b92:	e78f      	b.n	83ab4 <__aeabi_fmul+0x18>
   83b94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   83b98:	ea92 0f0c 	teq	r2, ip
   83b9c:	bf18      	it	ne
   83b9e:	ea93 0f0c 	teqne	r3, ip
   83ba2:	d00a      	beq.n	83bba <__aeabi_fmul+0x11e>
   83ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   83ba8:	bf18      	it	ne
   83baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   83bae:	d1d8      	bne.n	83b62 <__aeabi_fmul+0xc6>
   83bb0:	ea80 0001 	eor.w	r0, r0, r1
   83bb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   83bb8:	4770      	bx	lr
   83bba:	f090 0f00 	teq	r0, #0
   83bbe:	bf17      	itett	ne
   83bc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   83bc4:	4608      	moveq	r0, r1
   83bc6:	f091 0f00 	teqne	r1, #0
   83bca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   83bce:	d014      	beq.n	83bfa <__aeabi_fmul+0x15e>
   83bd0:	ea92 0f0c 	teq	r2, ip
   83bd4:	d101      	bne.n	83bda <__aeabi_fmul+0x13e>
   83bd6:	0242      	lsls	r2, r0, #9
   83bd8:	d10f      	bne.n	83bfa <__aeabi_fmul+0x15e>
   83bda:	ea93 0f0c 	teq	r3, ip
   83bde:	d103      	bne.n	83be8 <__aeabi_fmul+0x14c>
   83be0:	024b      	lsls	r3, r1, #9
   83be2:	bf18      	it	ne
   83be4:	4608      	movne	r0, r1
   83be6:	d108      	bne.n	83bfa <__aeabi_fmul+0x15e>
   83be8:	ea80 0001 	eor.w	r0, r0, r1
   83bec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   83bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   83bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83bf8:	4770      	bx	lr
   83bfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   83bfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   83c02:	4770      	bx	lr

00083c04 <__aeabi_fdiv>:
   83c04:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83c08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   83c0c:	bf1e      	ittt	ne
   83c0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   83c12:	ea92 0f0c 	teqne	r2, ip
   83c16:	ea93 0f0c 	teqne	r3, ip
   83c1a:	d069      	beq.n	83cf0 <__aeabi_fdiv+0xec>
   83c1c:	eba2 0203 	sub.w	r2, r2, r3
   83c20:	ea80 0c01 	eor.w	ip, r0, r1
   83c24:	0249      	lsls	r1, r1, #9
   83c26:	ea4f 2040 	mov.w	r0, r0, lsl #9
   83c2a:	d037      	beq.n	83c9c <__aeabi_fdiv+0x98>
   83c2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   83c30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   83c34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   83c38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   83c3c:	428b      	cmp	r3, r1
   83c3e:	bf38      	it	cc
   83c40:	005b      	lslcc	r3, r3, #1
   83c42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   83c46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   83c4a:	428b      	cmp	r3, r1
   83c4c:	bf24      	itt	cs
   83c4e:	1a5b      	subcs	r3, r3, r1
   83c50:	ea40 000c 	orrcs.w	r0, r0, ip
   83c54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   83c58:	bf24      	itt	cs
   83c5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   83c5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83c62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   83c66:	bf24      	itt	cs
   83c68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   83c6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83c70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   83c74:	bf24      	itt	cs
   83c76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   83c7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83c7e:	011b      	lsls	r3, r3, #4
   83c80:	bf18      	it	ne
   83c82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   83c86:	d1e0      	bne.n	83c4a <__aeabi_fdiv+0x46>
   83c88:	2afd      	cmp	r2, #253	; 0xfd
   83c8a:	f63f af50 	bhi.w	83b2e <__aeabi_fmul+0x92>
   83c8e:	428b      	cmp	r3, r1
   83c90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   83c94:	bf08      	it	eq
   83c96:	f020 0001 	biceq.w	r0, r0, #1
   83c9a:	4770      	bx	lr
   83c9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   83ca0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   83ca4:	327f      	adds	r2, #127	; 0x7f
   83ca6:	bfc2      	ittt	gt
   83ca8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   83cac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   83cb0:	4770      	bxgt	lr
   83cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83cb6:	f04f 0300 	mov.w	r3, #0
   83cba:	3a01      	subs	r2, #1
   83cbc:	e737      	b.n	83b2e <__aeabi_fmul+0x92>
   83cbe:	f092 0f00 	teq	r2, #0
   83cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   83cc6:	bf02      	ittt	eq
   83cc8:	0040      	lsleq	r0, r0, #1
   83cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   83cce:	3a01      	subeq	r2, #1
   83cd0:	d0f9      	beq.n	83cc6 <__aeabi_fdiv+0xc2>
   83cd2:	ea40 000c 	orr.w	r0, r0, ip
   83cd6:	f093 0f00 	teq	r3, #0
   83cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   83cde:	bf02      	ittt	eq
   83ce0:	0049      	lsleq	r1, r1, #1
   83ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   83ce6:	3b01      	subeq	r3, #1
   83ce8:	d0f9      	beq.n	83cde <__aeabi_fdiv+0xda>
   83cea:	ea41 010c 	orr.w	r1, r1, ip
   83cee:	e795      	b.n	83c1c <__aeabi_fdiv+0x18>
   83cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   83cf4:	ea92 0f0c 	teq	r2, ip
   83cf8:	d108      	bne.n	83d0c <__aeabi_fdiv+0x108>
   83cfa:	0242      	lsls	r2, r0, #9
   83cfc:	f47f af7d 	bne.w	83bfa <__aeabi_fmul+0x15e>
   83d00:	ea93 0f0c 	teq	r3, ip
   83d04:	f47f af70 	bne.w	83be8 <__aeabi_fmul+0x14c>
   83d08:	4608      	mov	r0, r1
   83d0a:	e776      	b.n	83bfa <__aeabi_fmul+0x15e>
   83d0c:	ea93 0f0c 	teq	r3, ip
   83d10:	d104      	bne.n	83d1c <__aeabi_fdiv+0x118>
   83d12:	024b      	lsls	r3, r1, #9
   83d14:	f43f af4c 	beq.w	83bb0 <__aeabi_fmul+0x114>
   83d18:	4608      	mov	r0, r1
   83d1a:	e76e      	b.n	83bfa <__aeabi_fmul+0x15e>
   83d1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   83d20:	bf18      	it	ne
   83d22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   83d26:	d1ca      	bne.n	83cbe <__aeabi_fdiv+0xba>
   83d28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   83d2c:	f47f af5c 	bne.w	83be8 <__aeabi_fmul+0x14c>
   83d30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   83d34:	f47f af3c 	bne.w	83bb0 <__aeabi_fmul+0x114>
   83d38:	e75f      	b.n	83bfa <__aeabi_fmul+0x15e>
   83d3a:	bf00      	nop

00083d3c <__aeabi_f2uiz>:
   83d3c:	0042      	lsls	r2, r0, #1
   83d3e:	d20e      	bcs.n	83d5e <__aeabi_f2uiz+0x22>
   83d40:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   83d44:	d30b      	bcc.n	83d5e <__aeabi_f2uiz+0x22>
   83d46:	f04f 039e 	mov.w	r3, #158	; 0x9e
   83d4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   83d4e:	d409      	bmi.n	83d64 <__aeabi_f2uiz+0x28>
   83d50:	ea4f 2300 	mov.w	r3, r0, lsl #8
   83d54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83d58:	fa23 f002 	lsr.w	r0, r3, r2
   83d5c:	4770      	bx	lr
   83d5e:	f04f 0000 	mov.w	r0, #0
   83d62:	4770      	bx	lr
   83d64:	f112 0f61 	cmn.w	r2, #97	; 0x61
   83d68:	d101      	bne.n	83d6e <__aeabi_f2uiz+0x32>
   83d6a:	0242      	lsls	r2, r0, #9
   83d6c:	d102      	bne.n	83d74 <__aeabi_f2uiz+0x38>
   83d6e:	f04f 30ff 	mov.w	r0, #4294967295
   83d72:	4770      	bx	lr
   83d74:	f04f 0000 	mov.w	r0, #0
   83d78:	4770      	bx	lr
   83d7a:	bf00      	nop

00083d7c <atoi>:
   83d7c:	220a      	movs	r2, #10
   83d7e:	2100      	movs	r1, #0
   83d80:	f000 b998 	b.w	840b4 <strtol>

00083d84 <__libc_init_array>:
   83d84:	b570      	push	{r4, r5, r6, lr}
   83d86:	4e0f      	ldr	r6, [pc, #60]	; (83dc4 <__libc_init_array+0x40>)
   83d88:	4d0f      	ldr	r5, [pc, #60]	; (83dc8 <__libc_init_array+0x44>)
   83d8a:	1b76      	subs	r6, r6, r5
   83d8c:	10b6      	asrs	r6, r6, #2
   83d8e:	bf18      	it	ne
   83d90:	2400      	movne	r4, #0
   83d92:	d005      	beq.n	83da0 <__libc_init_array+0x1c>
   83d94:	3401      	adds	r4, #1
   83d96:	f855 3b04 	ldr.w	r3, [r5], #4
   83d9a:	4798      	blx	r3
   83d9c:	42a6      	cmp	r6, r4
   83d9e:	d1f9      	bne.n	83d94 <__libc_init_array+0x10>
   83da0:	4e0a      	ldr	r6, [pc, #40]	; (83dcc <__libc_init_array+0x48>)
   83da2:	4d0b      	ldr	r5, [pc, #44]	; (83dd0 <__libc_init_array+0x4c>)
   83da4:	f005 fe40 	bl	89a28 <_init>
   83da8:	1b76      	subs	r6, r6, r5
   83daa:	10b6      	asrs	r6, r6, #2
   83dac:	bf18      	it	ne
   83dae:	2400      	movne	r4, #0
   83db0:	d006      	beq.n	83dc0 <__libc_init_array+0x3c>
   83db2:	3401      	adds	r4, #1
   83db4:	f855 3b04 	ldr.w	r3, [r5], #4
   83db8:	4798      	blx	r3
   83dba:	42a6      	cmp	r6, r4
   83dbc:	d1f9      	bne.n	83db2 <__libc_init_array+0x2e>
   83dbe:	bd70      	pop	{r4, r5, r6, pc}
   83dc0:	bd70      	pop	{r4, r5, r6, pc}
   83dc2:	bf00      	nop
   83dc4:	00089a34 	.word	0x00089a34
   83dc8:	00089a34 	.word	0x00089a34
   83dcc:	00089a3c 	.word	0x00089a3c
   83dd0:	00089a34 	.word	0x00089a34

00083dd4 <memset>:
   83dd4:	b470      	push	{r4, r5, r6}
   83dd6:	0786      	lsls	r6, r0, #30
   83dd8:	d046      	beq.n	83e68 <memset+0x94>
   83dda:	1e54      	subs	r4, r2, #1
   83ddc:	2a00      	cmp	r2, #0
   83dde:	d041      	beq.n	83e64 <memset+0x90>
   83de0:	b2ca      	uxtb	r2, r1
   83de2:	4603      	mov	r3, r0
   83de4:	e002      	b.n	83dec <memset+0x18>
   83de6:	f114 34ff 	adds.w	r4, r4, #4294967295
   83dea:	d33b      	bcc.n	83e64 <memset+0x90>
   83dec:	f803 2b01 	strb.w	r2, [r3], #1
   83df0:	079d      	lsls	r5, r3, #30
   83df2:	d1f8      	bne.n	83de6 <memset+0x12>
   83df4:	2c03      	cmp	r4, #3
   83df6:	d92e      	bls.n	83e56 <memset+0x82>
   83df8:	b2cd      	uxtb	r5, r1
   83dfa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83dfe:	2c0f      	cmp	r4, #15
   83e00:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83e04:	d919      	bls.n	83e3a <memset+0x66>
   83e06:	4626      	mov	r6, r4
   83e08:	f103 0210 	add.w	r2, r3, #16
   83e0c:	3e10      	subs	r6, #16
   83e0e:	2e0f      	cmp	r6, #15
   83e10:	f842 5c10 	str.w	r5, [r2, #-16]
   83e14:	f842 5c0c 	str.w	r5, [r2, #-12]
   83e18:	f842 5c08 	str.w	r5, [r2, #-8]
   83e1c:	f842 5c04 	str.w	r5, [r2, #-4]
   83e20:	f102 0210 	add.w	r2, r2, #16
   83e24:	d8f2      	bhi.n	83e0c <memset+0x38>
   83e26:	f1a4 0210 	sub.w	r2, r4, #16
   83e2a:	f022 020f 	bic.w	r2, r2, #15
   83e2e:	f004 040f 	and.w	r4, r4, #15
   83e32:	3210      	adds	r2, #16
   83e34:	2c03      	cmp	r4, #3
   83e36:	4413      	add	r3, r2
   83e38:	d90d      	bls.n	83e56 <memset+0x82>
   83e3a:	461e      	mov	r6, r3
   83e3c:	4622      	mov	r2, r4
   83e3e:	3a04      	subs	r2, #4
   83e40:	2a03      	cmp	r2, #3
   83e42:	f846 5b04 	str.w	r5, [r6], #4
   83e46:	d8fa      	bhi.n	83e3e <memset+0x6a>
   83e48:	1f22      	subs	r2, r4, #4
   83e4a:	f022 0203 	bic.w	r2, r2, #3
   83e4e:	3204      	adds	r2, #4
   83e50:	4413      	add	r3, r2
   83e52:	f004 0403 	and.w	r4, r4, #3
   83e56:	b12c      	cbz	r4, 83e64 <memset+0x90>
   83e58:	b2c9      	uxtb	r1, r1
   83e5a:	441c      	add	r4, r3
   83e5c:	f803 1b01 	strb.w	r1, [r3], #1
   83e60:	429c      	cmp	r4, r3
   83e62:	d1fb      	bne.n	83e5c <memset+0x88>
   83e64:	bc70      	pop	{r4, r5, r6}
   83e66:	4770      	bx	lr
   83e68:	4614      	mov	r4, r2
   83e6a:	4603      	mov	r3, r0
   83e6c:	e7c2      	b.n	83df4 <memset+0x20>
   83e6e:	bf00      	nop

00083e70 <sprintf>:
   83e70:	b40e      	push	{r1, r2, r3}
   83e72:	4601      	mov	r1, r0
   83e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   83e76:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   83e7a:	f44f 7702 	mov.w	r7, #520	; 0x208
   83e7e:	f64f 76ff 	movw	r6, #65535	; 0xffff
   83e82:	b09c      	sub	sp, #112	; 0x70
   83e84:	ac21      	add	r4, sp, #132	; 0x84
   83e86:	f854 2b04 	ldr.w	r2, [r4], #4
   83e8a:	4b0b      	ldr	r3, [pc, #44]	; (83eb8 <sprintf+0x48>)
   83e8c:	9102      	str	r1, [sp, #8]
   83e8e:	9106      	str	r1, [sp, #24]
   83e90:	6818      	ldr	r0, [r3, #0]
   83e92:	a902      	add	r1, sp, #8
   83e94:	4623      	mov	r3, r4
   83e96:	9401      	str	r4, [sp, #4]
   83e98:	f8ad 7014 	strh.w	r7, [sp, #20]
   83e9c:	9504      	str	r5, [sp, #16]
   83e9e:	9507      	str	r5, [sp, #28]
   83ea0:	f8ad 6016 	strh.w	r6, [sp, #22]
   83ea4:	f000 f91c 	bl	840e0 <_svfprintf_r>
   83ea8:	2200      	movs	r2, #0
   83eaa:	9b02      	ldr	r3, [sp, #8]
   83eac:	701a      	strb	r2, [r3, #0]
   83eae:	b01c      	add	sp, #112	; 0x70
   83eb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   83eb4:	b003      	add	sp, #12
   83eb6:	4770      	bx	lr
   83eb8:	2000062c 	.word	0x2000062c

00083ebc <strlen>:
   83ebc:	f020 0103 	bic.w	r1, r0, #3
   83ec0:	f010 0003 	ands.w	r0, r0, #3
   83ec4:	f1c0 0000 	rsb	r0, r0, #0
   83ec8:	f851 3b04 	ldr.w	r3, [r1], #4
   83ecc:	f100 0c04 	add.w	ip, r0, #4
   83ed0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83ed4:	f06f 0200 	mvn.w	r2, #0
   83ed8:	bf1c      	itt	ne
   83eda:	fa22 f20c 	lsrne.w	r2, r2, ip
   83ede:	4313      	orrne	r3, r2
   83ee0:	f04f 0c01 	mov.w	ip, #1
   83ee4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83ee8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83eec:	eba3 020c 	sub.w	r2, r3, ip
   83ef0:	ea22 0203 	bic.w	r2, r2, r3
   83ef4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83ef8:	bf04      	itt	eq
   83efa:	f851 3b04 	ldreq.w	r3, [r1], #4
   83efe:	3004      	addeq	r0, #4
   83f00:	d0f4      	beq.n	83eec <strlen+0x30>
   83f02:	f1c2 0100 	rsb	r1, r2, #0
   83f06:	ea02 0201 	and.w	r2, r2, r1
   83f0a:	fab2 f282 	clz	r2, r2
   83f0e:	f1c2 021f 	rsb	r2, r2, #31
   83f12:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83f16:	4770      	bx	lr

00083f18 <strtok>:
   83f18:	4a02      	ldr	r2, [pc, #8]	; (83f24 <strtok+0xc>)
   83f1a:	2301      	movs	r3, #1
   83f1c:	6812      	ldr	r2, [r2, #0]
   83f1e:	325c      	adds	r2, #92	; 0x5c
   83f20:	f000 b802 	b.w	83f28 <__strtok_r>
   83f24:	2000062c 	.word	0x2000062c

00083f28 <__strtok_r>:
   83f28:	b4f0      	push	{r4, r5, r6, r7}
   83f2a:	b318      	cbz	r0, 83f74 <__strtok_r+0x4c>
   83f2c:	4607      	mov	r7, r0
   83f2e:	460d      	mov	r5, r1
   83f30:	f817 6b01 	ldrb.w	r6, [r7], #1
   83f34:	e001      	b.n	83f3a <__strtok_r+0x12>
   83f36:	42a6      	cmp	r6, r4
   83f38:	d017      	beq.n	83f6a <__strtok_r+0x42>
   83f3a:	f815 4b01 	ldrb.w	r4, [r5], #1
   83f3e:	2c00      	cmp	r4, #0
   83f40:	d1f9      	bne.n	83f36 <__strtok_r+0xe>
   83f42:	b1e6      	cbz	r6, 83f7e <__strtok_r+0x56>
   83f44:	460c      	mov	r4, r1
   83f46:	f817 5b01 	ldrb.w	r5, [r7], #1
   83f4a:	e001      	b.n	83f50 <__strtok_r+0x28>
   83f4c:	2b00      	cmp	r3, #0
   83f4e:	d0f9      	beq.n	83f44 <__strtok_r+0x1c>
   83f50:	f814 3b01 	ldrb.w	r3, [r4], #1
   83f54:	429d      	cmp	r5, r3
   83f56:	d1f9      	bne.n	83f4c <__strtok_r+0x24>
   83f58:	b155      	cbz	r5, 83f70 <__strtok_r+0x48>
   83f5a:	2300      	movs	r3, #0
   83f5c:	f807 3c01 	strb.w	r3, [r7, #-1]
   83f60:	4606      	mov	r6, r0
   83f62:	6017      	str	r7, [r2, #0]
   83f64:	4630      	mov	r0, r6
   83f66:	bcf0      	pop	{r4, r5, r6, r7}
   83f68:	4770      	bx	lr
   83f6a:	b153      	cbz	r3, 83f82 <__strtok_r+0x5a>
   83f6c:	4638      	mov	r0, r7
   83f6e:	e7dd      	b.n	83f2c <__strtok_r+0x4>
   83f70:	462f      	mov	r7, r5
   83f72:	e7f5      	b.n	83f60 <__strtok_r+0x38>
   83f74:	6810      	ldr	r0, [r2, #0]
   83f76:	2800      	cmp	r0, #0
   83f78:	d1d8      	bne.n	83f2c <__strtok_r+0x4>
   83f7a:	4606      	mov	r6, r0
   83f7c:	e7f2      	b.n	83f64 <__strtok_r+0x3c>
   83f7e:	6016      	str	r6, [r2, #0]
   83f80:	e7f0      	b.n	83f64 <__strtok_r+0x3c>
   83f82:	6017      	str	r7, [r2, #0]
   83f84:	4606      	mov	r6, r0
   83f86:	7003      	strb	r3, [r0, #0]
   83f88:	e7ec      	b.n	83f64 <__strtok_r+0x3c>
   83f8a:	bf00      	nop

00083f8c <_strtol_l.isra.0>:
   83f8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83f90:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   83f94:	460f      	mov	r7, r1
   83f96:	4680      	mov	r8, r0
   83f98:	4616      	mov	r6, r2
   83f9a:	461d      	mov	r5, r3
   83f9c:	468a      	mov	sl, r1
   83f9e:	e000      	b.n	83fa2 <_strtol_l.isra.0+0x16>
   83fa0:	46a2      	mov	sl, r4
   83fa2:	4654      	mov	r4, sl
   83fa4:	4648      	mov	r0, r9
   83fa6:	f814 bb01 	ldrb.w	fp, [r4], #1
   83faa:	f002 faf5 	bl	86598 <__locale_ctype_ptr_l>
   83fae:	4458      	add	r0, fp
   83fb0:	7842      	ldrb	r2, [r0, #1]
   83fb2:	f012 0208 	ands.w	r2, r2, #8
   83fb6:	d1f3      	bne.n	83fa0 <_strtol_l.isra.0+0x14>
   83fb8:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   83fbc:	d04f      	beq.n	8405e <_strtol_l.isra.0+0xd2>
   83fbe:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   83fc2:	bf04      	itt	eq
   83fc4:	f894 b000 	ldrbeq.w	fp, [r4]
   83fc8:	f10a 0402 	addeq.w	r4, sl, #2
   83fcc:	b11d      	cbz	r5, 83fd6 <_strtol_l.isra.0+0x4a>
   83fce:	2d10      	cmp	r5, #16
   83fd0:	d056      	beq.n	84080 <_strtol_l.isra.0+0xf4>
   83fd2:	46ac      	mov	ip, r5
   83fd4:	e004      	b.n	83fe0 <_strtol_l.isra.0+0x54>
   83fd6:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   83fda:	d060      	beq.n	8409e <_strtol_l.isra.0+0x112>
   83fdc:	250a      	movs	r5, #10
   83fde:	46ac      	mov	ip, r5
   83fe0:	2a00      	cmp	r2, #0
   83fe2:	bf0c      	ite	eq
   83fe4:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   83fe8:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   83fec:	2100      	movs	r1, #0
   83fee:	fbb9 fefc 	udiv	lr, r9, ip
   83ff2:	4608      	mov	r0, r1
   83ff4:	fb0c 9a1e 	mls	sl, ip, lr, r9
   83ff8:	e005      	b.n	84006 <_strtol_l.isra.0+0x7a>
   83ffa:	d029      	beq.n	84050 <_strtol_l.isra.0+0xc4>
   83ffc:	2101      	movs	r1, #1
   83ffe:	fb0c 3000 	mla	r0, ip, r0, r3
   84002:	f814 bb01 	ldrb.w	fp, [r4], #1
   84006:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   8400a:	2b09      	cmp	r3, #9
   8400c:	d905      	bls.n	8401a <_strtol_l.isra.0+0x8e>
   8400e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   84012:	2b19      	cmp	r3, #25
   84014:	d80b      	bhi.n	8402e <_strtol_l.isra.0+0xa2>
   84016:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   8401a:	429d      	cmp	r5, r3
   8401c:	dd0f      	ble.n	8403e <_strtol_l.isra.0+0xb2>
   8401e:	f1b1 3fff 	cmp.w	r1, #4294967295
   84022:	d0ee      	beq.n	84002 <_strtol_l.isra.0+0x76>
   84024:	4586      	cmp	lr, r0
   84026:	d2e8      	bcs.n	83ffa <_strtol_l.isra.0+0x6e>
   84028:	f04f 31ff 	mov.w	r1, #4294967295
   8402c:	e7e9      	b.n	84002 <_strtol_l.isra.0+0x76>
   8402e:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   84032:	2b19      	cmp	r3, #25
   84034:	d803      	bhi.n	8403e <_strtol_l.isra.0+0xb2>
   84036:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   8403a:	429d      	cmp	r5, r3
   8403c:	dcef      	bgt.n	8401e <_strtol_l.isra.0+0x92>
   8403e:	1c4b      	adds	r3, r1, #1
   84040:	d013      	beq.n	8406a <_strtol_l.isra.0+0xde>
   84042:	b102      	cbz	r2, 84046 <_strtol_l.isra.0+0xba>
   84044:	4240      	negs	r0, r0
   84046:	b146      	cbz	r6, 8405a <_strtol_l.isra.0+0xce>
   84048:	b9c1      	cbnz	r1, 8407c <_strtol_l.isra.0+0xf0>
   8404a:	6037      	str	r7, [r6, #0]
   8404c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84050:	459a      	cmp	sl, r3
   84052:	dad3      	bge.n	83ffc <_strtol_l.isra.0+0x70>
   84054:	f04f 31ff 	mov.w	r1, #4294967295
   84058:	e7d3      	b.n	84002 <_strtol_l.isra.0+0x76>
   8405a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8405e:	f894 b000 	ldrb.w	fp, [r4]
   84062:	2201      	movs	r2, #1
   84064:	f10a 0402 	add.w	r4, sl, #2
   84068:	e7b0      	b.n	83fcc <_strtol_l.isra.0+0x40>
   8406a:	2322      	movs	r3, #34	; 0x22
   8406c:	f8c8 3000 	str.w	r3, [r8]
   84070:	b1ee      	cbz	r6, 840ae <_strtol_l.isra.0+0x122>
   84072:	1e67      	subs	r7, r4, #1
   84074:	4648      	mov	r0, r9
   84076:	6037      	str	r7, [r6, #0]
   84078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8407c:	4681      	mov	r9, r0
   8407e:	e7f8      	b.n	84072 <_strtol_l.isra.0+0xe6>
   84080:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   84084:	d1a5      	bne.n	83fd2 <_strtol_l.isra.0+0x46>
   84086:	7823      	ldrb	r3, [r4, #0]
   84088:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   8408c:	2b58      	cmp	r3, #88	; 0x58
   8408e:	d1a0      	bne.n	83fd2 <_strtol_l.isra.0+0x46>
   84090:	f04f 0c10 	mov.w	ip, #16
   84094:	f894 b001 	ldrb.w	fp, [r4, #1]
   84098:	4665      	mov	r5, ip
   8409a:	3402      	adds	r4, #2
   8409c:	e7a0      	b.n	83fe0 <_strtol_l.isra.0+0x54>
   8409e:	7823      	ldrb	r3, [r4, #0]
   840a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   840a4:	2b58      	cmp	r3, #88	; 0x58
   840a6:	d0f3      	beq.n	84090 <_strtol_l.isra.0+0x104>
   840a8:	2508      	movs	r5, #8
   840aa:	46ac      	mov	ip, r5
   840ac:	e798      	b.n	83fe0 <_strtol_l.isra.0+0x54>
   840ae:	4648      	mov	r0, r9
   840b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000840b4 <strtol>:
   840b4:	4b08      	ldr	r3, [pc, #32]	; (840d8 <strtol+0x24>)
   840b6:	b570      	push	{r4, r5, r6, lr}
   840b8:	681d      	ldr	r5, [r3, #0]
   840ba:	4e08      	ldr	r6, [pc, #32]	; (840dc <strtol+0x28>)
   840bc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   840be:	b082      	sub	sp, #8
   840c0:	2c00      	cmp	r4, #0
   840c2:	bf08      	it	eq
   840c4:	4634      	moveq	r4, r6
   840c6:	4613      	mov	r3, r2
   840c8:	9400      	str	r4, [sp, #0]
   840ca:	460a      	mov	r2, r1
   840cc:	4601      	mov	r1, r0
   840ce:	4628      	mov	r0, r5
   840d0:	f7ff ff5c 	bl	83f8c <_strtol_l.isra.0>
   840d4:	b002      	add	sp, #8
   840d6:	bd70      	pop	{r4, r5, r6, pc}
   840d8:	2000062c 	.word	0x2000062c
   840dc:	20000a58 	.word	0x20000a58

000840e0 <_svfprintf_r>:
   840e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   840e4:	b0c3      	sub	sp, #268	; 0x10c
   840e6:	460c      	mov	r4, r1
   840e8:	910b      	str	r1, [sp, #44]	; 0x2c
   840ea:	4692      	mov	sl, r2
   840ec:	930f      	str	r3, [sp, #60]	; 0x3c
   840ee:	900c      	str	r0, [sp, #48]	; 0x30
   840f0:	f002 fa56 	bl	865a0 <_localeconv_r>
   840f4:	6803      	ldr	r3, [r0, #0]
   840f6:	4618      	mov	r0, r3
   840f8:	931a      	str	r3, [sp, #104]	; 0x68
   840fa:	f7ff fedf 	bl	83ebc <strlen>
   840fe:	89a3      	ldrh	r3, [r4, #12]
   84100:	9019      	str	r0, [sp, #100]	; 0x64
   84102:	0619      	lsls	r1, r3, #24
   84104:	d503      	bpl.n	8410e <_svfprintf_r+0x2e>
   84106:	6923      	ldr	r3, [r4, #16]
   84108:	2b00      	cmp	r3, #0
   8410a:	f001 8031 	beq.w	85170 <_svfprintf_r+0x1090>
   8410e:	2300      	movs	r3, #0
   84110:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   84114:	46c8      	mov	r8, r9
   84116:	9314      	str	r3, [sp, #80]	; 0x50
   84118:	9313      	str	r3, [sp, #76]	; 0x4c
   8411a:	9315      	str	r3, [sp, #84]	; 0x54
   8411c:	9318      	str	r3, [sp, #96]	; 0x60
   8411e:	931b      	str	r3, [sp, #108]	; 0x6c
   84120:	9309      	str	r3, [sp, #36]	; 0x24
   84122:	9316      	str	r3, [sp, #88]	; 0x58
   84124:	9317      	str	r3, [sp, #92]	; 0x5c
   84126:	9327      	str	r3, [sp, #156]	; 0x9c
   84128:	9326      	str	r3, [sp, #152]	; 0x98
   8412a:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   8412e:	f89a 3000 	ldrb.w	r3, [sl]
   84132:	4654      	mov	r4, sl
   84134:	b1eb      	cbz	r3, 84172 <_svfprintf_r+0x92>
   84136:	2b25      	cmp	r3, #37	; 0x25
   84138:	d102      	bne.n	84140 <_svfprintf_r+0x60>
   8413a:	e01a      	b.n	84172 <_svfprintf_r+0x92>
   8413c:	2b25      	cmp	r3, #37	; 0x25
   8413e:	d003      	beq.n	84148 <_svfprintf_r+0x68>
   84140:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   84144:	2b00      	cmp	r3, #0
   84146:	d1f9      	bne.n	8413c <_svfprintf_r+0x5c>
   84148:	eba4 050a 	sub.w	r5, r4, sl
   8414c:	b18d      	cbz	r5, 84172 <_svfprintf_r+0x92>
   8414e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84150:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84152:	3301      	adds	r3, #1
   84154:	442a      	add	r2, r5
   84156:	2b07      	cmp	r3, #7
   84158:	f8c8 a000 	str.w	sl, [r8]
   8415c:	f8c8 5004 	str.w	r5, [r8, #4]
   84160:	9227      	str	r2, [sp, #156]	; 0x9c
   84162:	9326      	str	r3, [sp, #152]	; 0x98
   84164:	f300 808a 	bgt.w	8427c <_svfprintf_r+0x19c>
   84168:	f108 0808 	add.w	r8, r8, #8
   8416c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8416e:	442b      	add	r3, r5
   84170:	9309      	str	r3, [sp, #36]	; 0x24
   84172:	7823      	ldrb	r3, [r4, #0]
   84174:	2b00      	cmp	r3, #0
   84176:	f000 8089 	beq.w	8428c <_svfprintf_r+0x1ac>
   8417a:	2300      	movs	r3, #0
   8417c:	f04f 30ff 	mov.w	r0, #4294967295
   84180:	461a      	mov	r2, r3
   84182:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84186:	4619      	mov	r1, r3
   84188:	930d      	str	r3, [sp, #52]	; 0x34
   8418a:	469b      	mov	fp, r3
   8418c:	7863      	ldrb	r3, [r4, #1]
   8418e:	f104 0a01 	add.w	sl, r4, #1
   84192:	900a      	str	r0, [sp, #40]	; 0x28
   84194:	f10a 0a01 	add.w	sl, sl, #1
   84198:	f1a3 0020 	sub.w	r0, r3, #32
   8419c:	2858      	cmp	r0, #88	; 0x58
   8419e:	f200 83b6 	bhi.w	8490e <_svfprintf_r+0x82e>
   841a2:	e8df f010 	tbh	[pc, r0, lsl #1]
   841a6:	034b      	.short	0x034b
   841a8:	03b403b4 	.word	0x03b403b4
   841ac:	03b40353 	.word	0x03b40353
   841b0:	03b403b4 	.word	0x03b403b4
   841b4:	03b403b4 	.word	0x03b403b4
   841b8:	005903b4 	.word	0x005903b4
   841bc:	03b40358 	.word	0x03b40358
   841c0:	02140066 	.word	0x02140066
   841c4:	022f03b4 	.word	0x022f03b4
   841c8:	03a403a4 	.word	0x03a403a4
   841cc:	03a403a4 	.word	0x03a403a4
   841d0:	03a403a4 	.word	0x03a403a4
   841d4:	03a403a4 	.word	0x03a403a4
   841d8:	03b403a4 	.word	0x03b403a4
   841dc:	03b403b4 	.word	0x03b403b4
   841e0:	03b403b4 	.word	0x03b403b4
   841e4:	03b403b4 	.word	0x03b403b4
   841e8:	03b403b4 	.word	0x03b403b4
   841ec:	028b03b4 	.word	0x028b03b4
   841f0:	03b402d3 	.word	0x03b402d3
   841f4:	03b402d3 	.word	0x03b402d3
   841f8:	03b403b4 	.word	0x03b403b4
   841fc:	031a03b4 	.word	0x031a03b4
   84200:	03b403b4 	.word	0x03b403b4
   84204:	03b4031f 	.word	0x03b4031f
   84208:	03b403b4 	.word	0x03b403b4
   8420c:	03b403b4 	.word	0x03b403b4
   84210:	03b40234 	.word	0x03b40234
   84214:	024b03b4 	.word	0x024b03b4
   84218:	03b403b4 	.word	0x03b403b4
   8421c:	03b403b4 	.word	0x03b403b4
   84220:	03b403b4 	.word	0x03b403b4
   84224:	03b403b4 	.word	0x03b403b4
   84228:	03b403b4 	.word	0x03b403b4
   8422c:	039d0276 	.word	0x039d0276
   84230:	02d302d3 	.word	0x02d302d3
   84234:	036202d3 	.word	0x036202d3
   84238:	03b4039d 	.word	0x03b4039d
   8423c:	036703b4 	.word	0x036703b4
   84240:	037403b4 	.word	0x037403b4
   84244:	038b01dd 	.word	0x038b01dd
   84248:	03b4035d 	.word	0x03b4035d
   8424c:	03b401f2 	.word	0x03b401f2
   84250:	03b40087 	.word	0x03b40087
   84254:	033103b4 	.word	0x033103b4
   84258:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8425a:	6823      	ldr	r3, [r4, #0]
   8425c:	4618      	mov	r0, r3
   8425e:	930d      	str	r3, [sp, #52]	; 0x34
   84260:	4623      	mov	r3, r4
   84262:	2800      	cmp	r0, #0
   84264:	f103 0304 	add.w	r3, r3, #4
   84268:	930f      	str	r3, [sp, #60]	; 0x3c
   8426a:	da04      	bge.n	84276 <_svfprintf_r+0x196>
   8426c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8426e:	425b      	negs	r3, r3
   84270:	930d      	str	r3, [sp, #52]	; 0x34
   84272:	f04b 0b04 	orr.w	fp, fp, #4
   84276:	f89a 3000 	ldrb.w	r3, [sl]
   8427a:	e78b      	b.n	84194 <_svfprintf_r+0xb4>
   8427c:	aa25      	add	r2, sp, #148	; 0x94
   8427e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84280:	980c      	ldr	r0, [sp, #48]	; 0x30
   84282:	f003 f821 	bl	872c8 <__ssprint_r>
   84286:	b940      	cbnz	r0, 8429a <_svfprintf_r+0x1ba>
   84288:	46c8      	mov	r8, r9
   8428a:	e76f      	b.n	8416c <_svfprintf_r+0x8c>
   8428c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8428e:	b123      	cbz	r3, 8429a <_svfprintf_r+0x1ba>
   84290:	980c      	ldr	r0, [sp, #48]	; 0x30
   84292:	aa25      	add	r2, sp, #148	; 0x94
   84294:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84296:	f003 f817 	bl	872c8 <__ssprint_r>
   8429a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8429c:	899b      	ldrh	r3, [r3, #12]
   8429e:	f013 0f40 	tst.w	r3, #64	; 0x40
   842a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   842a4:	bf18      	it	ne
   842a6:	f04f 33ff 	movne.w	r3, #4294967295
   842aa:	9309      	str	r3, [sp, #36]	; 0x24
   842ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   842ae:	b043      	add	sp, #268	; 0x10c
   842b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842b4:	f01b 0f20 	tst.w	fp, #32
   842b8:	9311      	str	r3, [sp, #68]	; 0x44
   842ba:	f040 81af 	bne.w	8461c <_svfprintf_r+0x53c>
   842be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   842c0:	f01b 0f10 	tst.w	fp, #16
   842c4:	4613      	mov	r3, r2
   842c6:	f040 8596 	bne.w	84df6 <_svfprintf_r+0xd16>
   842ca:	f01b 0f40 	tst.w	fp, #64	; 0x40
   842ce:	f000 8592 	beq.w	84df6 <_svfprintf_r+0xd16>
   842d2:	2500      	movs	r5, #0
   842d4:	2301      	movs	r3, #1
   842d6:	8814      	ldrh	r4, [r2, #0]
   842d8:	3204      	adds	r2, #4
   842da:	920f      	str	r2, [sp, #60]	; 0x3c
   842dc:	2200      	movs	r2, #0
   842de:	4617      	mov	r7, r2
   842e0:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   842e4:	990a      	ldr	r1, [sp, #40]	; 0x28
   842e6:	1c4a      	adds	r2, r1, #1
   842e8:	f000 8210 	beq.w	8470c <_svfprintf_r+0x62c>
   842ec:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   842f0:	9207      	str	r2, [sp, #28]
   842f2:	ea54 0205 	orrs.w	r2, r4, r5
   842f6:	f040 820f 	bne.w	84718 <_svfprintf_r+0x638>
   842fa:	2900      	cmp	r1, #0
   842fc:	f040 842d 	bne.w	84b5a <_svfprintf_r+0xa7a>
   84300:	2b00      	cmp	r3, #0
   84302:	f040 8535 	bne.w	84d70 <_svfprintf_r+0xc90>
   84306:	f01b 0301 	ands.w	r3, fp, #1
   8430a:	930e      	str	r3, [sp, #56]	; 0x38
   8430c:	f000 865e 	beq.w	84fcc <_svfprintf_r+0xeec>
   84310:	2330      	movs	r3, #48	; 0x30
   84312:	ae42      	add	r6, sp, #264	; 0x108
   84314:	f806 3d41 	strb.w	r3, [r6, #-65]!
   84318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8431a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8431c:	4293      	cmp	r3, r2
   8431e:	bfb8      	it	lt
   84320:	4613      	movlt	r3, r2
   84322:	9308      	str	r3, [sp, #32]
   84324:	2300      	movs	r3, #0
   84326:	9312      	str	r3, [sp, #72]	; 0x48
   84328:	b117      	cbz	r7, 84330 <_svfprintf_r+0x250>
   8432a:	9b08      	ldr	r3, [sp, #32]
   8432c:	3301      	adds	r3, #1
   8432e:	9308      	str	r3, [sp, #32]
   84330:	9b07      	ldr	r3, [sp, #28]
   84332:	f013 0302 	ands.w	r3, r3, #2
   84336:	9310      	str	r3, [sp, #64]	; 0x40
   84338:	d002      	beq.n	84340 <_svfprintf_r+0x260>
   8433a:	9b08      	ldr	r3, [sp, #32]
   8433c:	3302      	adds	r3, #2
   8433e:	9308      	str	r3, [sp, #32]
   84340:	9b07      	ldr	r3, [sp, #28]
   84342:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   84346:	f040 830e 	bne.w	84966 <_svfprintf_r+0x886>
   8434a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8434c:	9a08      	ldr	r2, [sp, #32]
   8434e:	eba3 0b02 	sub.w	fp, r3, r2
   84352:	f1bb 0f00 	cmp.w	fp, #0
   84356:	f340 8306 	ble.w	84966 <_svfprintf_r+0x886>
   8435a:	f1bb 0f10 	cmp.w	fp, #16
   8435e:	f340 87ae 	ble.w	852be <_svfprintf_r+0x11de>
   84362:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84364:	4643      	mov	r3, r8
   84366:	4621      	mov	r1, r4
   84368:	46a8      	mov	r8, r5
   8436a:	2710      	movs	r7, #16
   8436c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8436e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84370:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84372:	e006      	b.n	84382 <_svfprintf_r+0x2a2>
   84374:	f1ab 0b10 	sub.w	fp, fp, #16
   84378:	f1bb 0f10 	cmp.w	fp, #16
   8437c:	f103 0308 	add.w	r3, r3, #8
   84380:	dd18      	ble.n	843b4 <_svfprintf_r+0x2d4>
   84382:	3201      	adds	r2, #1
   84384:	48ab      	ldr	r0, [pc, #684]	; (84634 <_svfprintf_r+0x554>)
   84386:	3110      	adds	r1, #16
   84388:	2a07      	cmp	r2, #7
   8438a:	9127      	str	r1, [sp, #156]	; 0x9c
   8438c:	9226      	str	r2, [sp, #152]	; 0x98
   8438e:	e883 0081 	stmia.w	r3, {r0, r7}
   84392:	ddef      	ble.n	84374 <_svfprintf_r+0x294>
   84394:	aa25      	add	r2, sp, #148	; 0x94
   84396:	4629      	mov	r1, r5
   84398:	4620      	mov	r0, r4
   8439a:	f002 ff95 	bl	872c8 <__ssprint_r>
   8439e:	2800      	cmp	r0, #0
   843a0:	f47f af7b 	bne.w	8429a <_svfprintf_r+0x1ba>
   843a4:	f1ab 0b10 	sub.w	fp, fp, #16
   843a8:	f1bb 0f10 	cmp.w	fp, #16
   843ac:	464b      	mov	r3, r9
   843ae:	9927      	ldr	r1, [sp, #156]	; 0x9c
   843b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   843b2:	dce6      	bgt.n	84382 <_svfprintf_r+0x2a2>
   843b4:	4645      	mov	r5, r8
   843b6:	460c      	mov	r4, r1
   843b8:	4698      	mov	r8, r3
   843ba:	3201      	adds	r2, #1
   843bc:	4b9d      	ldr	r3, [pc, #628]	; (84634 <_svfprintf_r+0x554>)
   843be:	445c      	add	r4, fp
   843c0:	2a07      	cmp	r2, #7
   843c2:	9427      	str	r4, [sp, #156]	; 0x9c
   843c4:	9226      	str	r2, [sp, #152]	; 0x98
   843c6:	e888 0808 	stmia.w	r8, {r3, fp}
   843ca:	f300 82c1 	bgt.w	84950 <_svfprintf_r+0x870>
   843ce:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   843d2:	f108 0808 	add.w	r8, r8, #8
   843d6:	b187      	cbz	r7, 843fa <_svfprintf_r+0x31a>
   843d8:	2101      	movs	r1, #1
   843da:	9b26      	ldr	r3, [sp, #152]	; 0x98
   843dc:	440c      	add	r4, r1
   843de:	440b      	add	r3, r1
   843e0:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   843e4:	2b07      	cmp	r3, #7
   843e6:	9427      	str	r4, [sp, #156]	; 0x9c
   843e8:	9326      	str	r3, [sp, #152]	; 0x98
   843ea:	f8c8 1004 	str.w	r1, [r8, #4]
   843ee:	f8c8 2000 	str.w	r2, [r8]
   843f2:	f300 83c9 	bgt.w	84b88 <_svfprintf_r+0xaa8>
   843f6:	f108 0808 	add.w	r8, r8, #8
   843fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   843fc:	b17b      	cbz	r3, 8441e <_svfprintf_r+0x33e>
   843fe:	2102      	movs	r1, #2
   84400:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84402:	440c      	add	r4, r1
   84404:	3301      	adds	r3, #1
   84406:	aa1e      	add	r2, sp, #120	; 0x78
   84408:	2b07      	cmp	r3, #7
   8440a:	9427      	str	r4, [sp, #156]	; 0x9c
   8440c:	9326      	str	r3, [sp, #152]	; 0x98
   8440e:	f8c8 1004 	str.w	r1, [r8, #4]
   84412:	f8c8 2000 	str.w	r2, [r8]
   84416:	f300 840d 	bgt.w	84c34 <_svfprintf_r+0xb54>
   8441a:	f108 0808 	add.w	r8, r8, #8
   8441e:	2d80      	cmp	r5, #128	; 0x80
   84420:	f000 8301 	beq.w	84a26 <_svfprintf_r+0x946>
   84424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84426:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   84428:	1a9f      	subs	r7, r3, r2
   8442a:	2f00      	cmp	r7, #0
   8442c:	dd37      	ble.n	8449e <_svfprintf_r+0x3be>
   8442e:	2f10      	cmp	r7, #16
   84430:	f340 8675 	ble.w	8511e <_svfprintf_r+0x103e>
   84434:	4d80      	ldr	r5, [pc, #512]	; (84638 <_svfprintf_r+0x558>)
   84436:	4642      	mov	r2, r8
   84438:	4621      	mov	r1, r4
   8443a:	46b0      	mov	r8, r6
   8443c:	f04f 0b10 	mov.w	fp, #16
   84440:	462e      	mov	r6, r5
   84442:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84444:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84446:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84448:	e004      	b.n	84454 <_svfprintf_r+0x374>
   8444a:	3f10      	subs	r7, #16
   8444c:	2f10      	cmp	r7, #16
   8444e:	f102 0208 	add.w	r2, r2, #8
   84452:	dd15      	ble.n	84480 <_svfprintf_r+0x3a0>
   84454:	3301      	adds	r3, #1
   84456:	3110      	adds	r1, #16
   84458:	2b07      	cmp	r3, #7
   8445a:	9127      	str	r1, [sp, #156]	; 0x9c
   8445c:	9326      	str	r3, [sp, #152]	; 0x98
   8445e:	e882 0840 	stmia.w	r2, {r6, fp}
   84462:	ddf2      	ble.n	8444a <_svfprintf_r+0x36a>
   84464:	aa25      	add	r2, sp, #148	; 0x94
   84466:	4629      	mov	r1, r5
   84468:	4620      	mov	r0, r4
   8446a:	f002 ff2d 	bl	872c8 <__ssprint_r>
   8446e:	2800      	cmp	r0, #0
   84470:	f47f af13 	bne.w	8429a <_svfprintf_r+0x1ba>
   84474:	3f10      	subs	r7, #16
   84476:	2f10      	cmp	r7, #16
   84478:	464a      	mov	r2, r9
   8447a:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8447c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8447e:	dce9      	bgt.n	84454 <_svfprintf_r+0x374>
   84480:	4635      	mov	r5, r6
   84482:	460c      	mov	r4, r1
   84484:	4646      	mov	r6, r8
   84486:	4690      	mov	r8, r2
   84488:	3301      	adds	r3, #1
   8448a:	443c      	add	r4, r7
   8448c:	2b07      	cmp	r3, #7
   8448e:	9427      	str	r4, [sp, #156]	; 0x9c
   84490:	9326      	str	r3, [sp, #152]	; 0x98
   84492:	e888 00a0 	stmia.w	r8, {r5, r7}
   84496:	f300 836c 	bgt.w	84b72 <_svfprintf_r+0xa92>
   8449a:	f108 0808 	add.w	r8, r8, #8
   8449e:	9b07      	ldr	r3, [sp, #28]
   844a0:	05df      	lsls	r7, r3, #23
   844a2:	f100 8262 	bmi.w	8496a <_svfprintf_r+0x88a>
   844a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   844a8:	990e      	ldr	r1, [sp, #56]	; 0x38
   844aa:	3301      	adds	r3, #1
   844ac:	440c      	add	r4, r1
   844ae:	2b07      	cmp	r3, #7
   844b0:	9427      	str	r4, [sp, #156]	; 0x9c
   844b2:	f8c8 6000 	str.w	r6, [r8]
   844b6:	f8c8 1004 	str.w	r1, [r8, #4]
   844ba:	9326      	str	r3, [sp, #152]	; 0x98
   844bc:	f300 83af 	bgt.w	84c1e <_svfprintf_r+0xb3e>
   844c0:	f108 0808 	add.w	r8, r8, #8
   844c4:	9b07      	ldr	r3, [sp, #28]
   844c6:	075b      	lsls	r3, r3, #29
   844c8:	d53b      	bpl.n	84542 <_svfprintf_r+0x462>
   844ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   844cc:	9a08      	ldr	r2, [sp, #32]
   844ce:	1a9d      	subs	r5, r3, r2
   844d0:	2d00      	cmp	r5, #0
   844d2:	dd36      	ble.n	84542 <_svfprintf_r+0x462>
   844d4:	2d10      	cmp	r5, #16
   844d6:	f340 871d 	ble.w	85314 <_svfprintf_r+0x1234>
   844da:	2610      	movs	r6, #16
   844dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   844de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   844e0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   844e4:	e004      	b.n	844f0 <_svfprintf_r+0x410>
   844e6:	3d10      	subs	r5, #16
   844e8:	2d10      	cmp	r5, #16
   844ea:	f108 0808 	add.w	r8, r8, #8
   844ee:	dd16      	ble.n	8451e <_svfprintf_r+0x43e>
   844f0:	3301      	adds	r3, #1
   844f2:	4a50      	ldr	r2, [pc, #320]	; (84634 <_svfprintf_r+0x554>)
   844f4:	3410      	adds	r4, #16
   844f6:	2b07      	cmp	r3, #7
   844f8:	9427      	str	r4, [sp, #156]	; 0x9c
   844fa:	9326      	str	r3, [sp, #152]	; 0x98
   844fc:	e888 0044 	stmia.w	r8, {r2, r6}
   84500:	ddf1      	ble.n	844e6 <_svfprintf_r+0x406>
   84502:	aa25      	add	r2, sp, #148	; 0x94
   84504:	4659      	mov	r1, fp
   84506:	4638      	mov	r0, r7
   84508:	f002 fede 	bl	872c8 <__ssprint_r>
   8450c:	2800      	cmp	r0, #0
   8450e:	f47f aec4 	bne.w	8429a <_svfprintf_r+0x1ba>
   84512:	3d10      	subs	r5, #16
   84514:	2d10      	cmp	r5, #16
   84516:	46c8      	mov	r8, r9
   84518:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8451a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8451c:	dce8      	bgt.n	844f0 <_svfprintf_r+0x410>
   8451e:	3301      	adds	r3, #1
   84520:	4a44      	ldr	r2, [pc, #272]	; (84634 <_svfprintf_r+0x554>)
   84522:	442c      	add	r4, r5
   84524:	2b07      	cmp	r3, #7
   84526:	9427      	str	r4, [sp, #156]	; 0x9c
   84528:	9326      	str	r3, [sp, #152]	; 0x98
   8452a:	e888 0024 	stmia.w	r8, {r2, r5}
   8452e:	dd08      	ble.n	84542 <_svfprintf_r+0x462>
   84530:	aa25      	add	r2, sp, #148	; 0x94
   84532:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84534:	980c      	ldr	r0, [sp, #48]	; 0x30
   84536:	f002 fec7 	bl	872c8 <__ssprint_r>
   8453a:	2800      	cmp	r0, #0
   8453c:	f47f aead 	bne.w	8429a <_svfprintf_r+0x1ba>
   84540:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84542:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84544:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84546:	9908      	ldr	r1, [sp, #32]
   84548:	428a      	cmp	r2, r1
   8454a:	bfac      	ite	ge
   8454c:	189b      	addge	r3, r3, r2
   8454e:	185b      	addlt	r3, r3, r1
   84550:	9309      	str	r3, [sp, #36]	; 0x24
   84552:	2c00      	cmp	r4, #0
   84554:	f040 82f7 	bne.w	84b46 <_svfprintf_r+0xa66>
   84558:	2300      	movs	r3, #0
   8455a:	46c8      	mov	r8, r9
   8455c:	9326      	str	r3, [sp, #152]	; 0x98
   8455e:	e5e6      	b.n	8412e <_svfprintf_r+0x4e>
   84560:	9311      	str	r3, [sp, #68]	; 0x44
   84562:	f01b 0320 	ands.w	r3, fp, #32
   84566:	f040 8144 	bne.w	847f2 <_svfprintf_r+0x712>
   8456a:	f01b 0210 	ands.w	r2, fp, #16
   8456e:	f040 8462 	bne.w	84e36 <_svfprintf_r+0xd56>
   84572:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   84576:	f000 845e 	beq.w	84e36 <_svfprintf_r+0xd56>
   8457a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8457c:	4613      	mov	r3, r2
   8457e:	460a      	mov	r2, r1
   84580:	3204      	adds	r2, #4
   84582:	880c      	ldrh	r4, [r1, #0]
   84584:	2500      	movs	r5, #0
   84586:	920f      	str	r2, [sp, #60]	; 0x3c
   84588:	e6a8      	b.n	842dc <_svfprintf_r+0x1fc>
   8458a:	2500      	movs	r5, #0
   8458c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8458e:	9311      	str	r3, [sp, #68]	; 0x44
   84590:	6816      	ldr	r6, [r2, #0]
   84592:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   84596:	1d14      	adds	r4, r2, #4
   84598:	2e00      	cmp	r6, #0
   8459a:	f000 86c9 	beq.w	85330 <_svfprintf_r+0x1250>
   8459e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   845a0:	1c53      	adds	r3, r2, #1
   845a2:	f000 8617 	beq.w	851d4 <_svfprintf_r+0x10f4>
   845a6:	4629      	mov	r1, r5
   845a8:	4630      	mov	r0, r6
   845aa:	f002 fabf 	bl	86b2c <memchr>
   845ae:	2800      	cmp	r0, #0
   845b0:	f000 8709 	beq.w	853c6 <_svfprintf_r+0x12e6>
   845b4:	1b83      	subs	r3, r0, r6
   845b6:	950a      	str	r5, [sp, #40]	; 0x28
   845b8:	930e      	str	r3, [sp, #56]	; 0x38
   845ba:	940f      	str	r4, [sp, #60]	; 0x3c
   845bc:	f8cd b01c 	str.w	fp, [sp, #28]
   845c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   845c4:	9308      	str	r3, [sp, #32]
   845c6:	9512      	str	r5, [sp, #72]	; 0x48
   845c8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   845cc:	e6ac      	b.n	84328 <_svfprintf_r+0x248>
   845ce:	f89a 3000 	ldrb.w	r3, [sl]
   845d2:	f10a 0401 	add.w	r4, sl, #1
   845d6:	2b2a      	cmp	r3, #42	; 0x2a
   845d8:	f000 87bd 	beq.w	85556 <_svfprintf_r+0x1476>
   845dc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   845e0:	2809      	cmp	r0, #9
   845e2:	46a2      	mov	sl, r4
   845e4:	f200 8714 	bhi.w	85410 <_svfprintf_r+0x1330>
   845e8:	2300      	movs	r3, #0
   845ea:	461c      	mov	r4, r3
   845ec:	f81a 3b01 	ldrb.w	r3, [sl], #1
   845f0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   845f4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   845f8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   845fc:	2809      	cmp	r0, #9
   845fe:	d9f5      	bls.n	845ec <_svfprintf_r+0x50c>
   84600:	940a      	str	r4, [sp, #40]	; 0x28
   84602:	e5c9      	b.n	84198 <_svfprintf_r+0xb8>
   84604:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   84608:	f89a 3000 	ldrb.w	r3, [sl]
   8460c:	e5c2      	b.n	84194 <_svfprintf_r+0xb4>
   8460e:	f04b 0b10 	orr.w	fp, fp, #16
   84612:	f01b 0f20 	tst.w	fp, #32
   84616:	9311      	str	r3, [sp, #68]	; 0x44
   84618:	f43f ae51 	beq.w	842be <_svfprintf_r+0x1de>
   8461c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8461e:	3407      	adds	r4, #7
   84620:	f024 0307 	bic.w	r3, r4, #7
   84624:	f103 0208 	add.w	r2, r3, #8
   84628:	e9d3 4500 	ldrd	r4, r5, [r3]
   8462c:	920f      	str	r2, [sp, #60]	; 0x3c
   8462e:	2301      	movs	r3, #1
   84630:	e654      	b.n	842dc <_svfprintf_r+0x1fc>
   84632:	bf00      	nop
   84634:	000897e8 	.word	0x000897e8
   84638:	000897f8 	.word	0x000897f8
   8463c:	9311      	str	r3, [sp, #68]	; 0x44
   8463e:	2a00      	cmp	r2, #0
   84640:	f040 87a8 	bne.w	85594 <_svfprintf_r+0x14b4>
   84644:	4bbd      	ldr	r3, [pc, #756]	; (8493c <_svfprintf_r+0x85c>)
   84646:	f01b 0f20 	tst.w	fp, #32
   8464a:	9318      	str	r3, [sp, #96]	; 0x60
   8464c:	f040 80e6 	bne.w	8481c <_svfprintf_r+0x73c>
   84650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84652:	f01b 0f10 	tst.w	fp, #16
   84656:	4613      	mov	r3, r2
   84658:	f040 83d4 	bne.w	84e04 <_svfprintf_r+0xd24>
   8465c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84660:	f000 83d0 	beq.w	84e04 <_svfprintf_r+0xd24>
   84664:	2500      	movs	r5, #0
   84666:	3304      	adds	r3, #4
   84668:	8814      	ldrh	r4, [r2, #0]
   8466a:	930f      	str	r3, [sp, #60]	; 0x3c
   8466c:	f01b 0f01 	tst.w	fp, #1
   84670:	f000 80e2 	beq.w	84838 <_svfprintf_r+0x758>
   84674:	ea54 0305 	orrs.w	r3, r4, r5
   84678:	f000 80de 	beq.w	84838 <_svfprintf_r+0x758>
   8467c:	2330      	movs	r3, #48	; 0x30
   8467e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   84682:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   84686:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   8468a:	f04b 0b02 	orr.w	fp, fp, #2
   8468e:	2302      	movs	r3, #2
   84690:	e624      	b.n	842dc <_svfprintf_r+0x1fc>
   84692:	2201      	movs	r2, #1
   84694:	9311      	str	r3, [sp, #68]	; 0x44
   84696:	2300      	movs	r3, #0
   84698:	4611      	mov	r1, r2
   8469a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8469c:	9208      	str	r2, [sp, #32]
   8469e:	6802      	ldr	r2, [r0, #0]
   846a0:	461f      	mov	r7, r3
   846a2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   846a6:	930a      	str	r3, [sp, #40]	; 0x28
   846a8:	9312      	str	r3, [sp, #72]	; 0x48
   846aa:	1d03      	adds	r3, r0, #4
   846ac:	f8cd b01c 	str.w	fp, [sp, #28]
   846b0:	910e      	str	r1, [sp, #56]	; 0x38
   846b2:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   846b6:	930f      	str	r3, [sp, #60]	; 0x3c
   846b8:	ae28      	add	r6, sp, #160	; 0xa0
   846ba:	e639      	b.n	84330 <_svfprintf_r+0x250>
   846bc:	9311      	str	r3, [sp, #68]	; 0x44
   846be:	2a00      	cmp	r2, #0
   846c0:	f040 877f 	bne.w	855c2 <_svfprintf_r+0x14e2>
   846c4:	f04b 0b10 	orr.w	fp, fp, #16
   846c8:	f01b 0f20 	tst.w	fp, #32
   846cc:	f040 8471 	bne.w	84fb2 <_svfprintf_r+0xed2>
   846d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   846d2:	f01b 0f10 	tst.w	fp, #16
   846d6:	4613      	mov	r3, r2
   846d8:	f040 8399 	bne.w	84e0e <_svfprintf_r+0xd2e>
   846dc:	f01b 0f40 	tst.w	fp, #64	; 0x40
   846e0:	f000 8395 	beq.w	84e0e <_svfprintf_r+0xd2e>
   846e4:	f9b2 4000 	ldrsh.w	r4, [r2]
   846e8:	3304      	adds	r3, #4
   846ea:	17e5      	asrs	r5, r4, #31
   846ec:	930f      	str	r3, [sp, #60]	; 0x3c
   846ee:	4622      	mov	r2, r4
   846f0:	462b      	mov	r3, r5
   846f2:	2a00      	cmp	r2, #0
   846f4:	f173 0300 	sbcs.w	r3, r3, #0
   846f8:	f2c0 8394 	blt.w	84e24 <_svfprintf_r+0xd44>
   846fc:	990a      	ldr	r1, [sp, #40]	; 0x28
   846fe:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84702:	1c4a      	adds	r2, r1, #1
   84704:	f04f 0301 	mov.w	r3, #1
   84708:	f47f adf0 	bne.w	842ec <_svfprintf_r+0x20c>
   8470c:	ea54 0205 	orrs.w	r2, r4, r5
   84710:	f000 8225 	beq.w	84b5e <_svfprintf_r+0xa7e>
   84714:	f8cd b01c 	str.w	fp, [sp, #28]
   84718:	2b01      	cmp	r3, #1
   8471a:	f000 830a 	beq.w	84d32 <_svfprintf_r+0xc52>
   8471e:	2b02      	cmp	r3, #2
   84720:	f040 8298 	bne.w	84c54 <_svfprintf_r+0xb74>
   84724:	464e      	mov	r6, r9
   84726:	9818      	ldr	r0, [sp, #96]	; 0x60
   84728:	0923      	lsrs	r3, r4, #4
   8472a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8472e:	0929      	lsrs	r1, r5, #4
   84730:	f004 020f 	and.w	r2, r4, #15
   84734:	460d      	mov	r5, r1
   84736:	461c      	mov	r4, r3
   84738:	5c83      	ldrb	r3, [r0, r2]
   8473a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8473e:	ea54 0305 	orrs.w	r3, r4, r5
   84742:	d1f1      	bne.n	84728 <_svfprintf_r+0x648>
   84744:	eba9 0306 	sub.w	r3, r9, r6
   84748:	930e      	str	r3, [sp, #56]	; 0x38
   8474a:	e5e5      	b.n	84318 <_svfprintf_r+0x238>
   8474c:	9311      	str	r3, [sp, #68]	; 0x44
   8474e:	2a00      	cmp	r2, #0
   84750:	f040 8733 	bne.w	855ba <_svfprintf_r+0x14da>
   84754:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84756:	f01b 0f08 	tst.w	fp, #8
   8475a:	f104 0407 	add.w	r4, r4, #7
   8475e:	f000 84cb 	beq.w	850f8 <_svfprintf_r+0x1018>
   84762:	f024 0307 	bic.w	r3, r4, #7
   84766:	f103 0208 	add.w	r2, r3, #8
   8476a:	920f      	str	r2, [sp, #60]	; 0x3c
   8476c:	681a      	ldr	r2, [r3, #0]
   8476e:	685b      	ldr	r3, [r3, #4]
   84770:	9214      	str	r2, [sp, #80]	; 0x50
   84772:	9315      	str	r3, [sp, #84]	; 0x54
   84774:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84776:	9d14      	ldr	r5, [sp, #80]	; 0x50
   84778:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   8477c:	4628      	mov	r0, r5
   8477e:	4621      	mov	r1, r4
   84780:	f04f 32ff 	mov.w	r2, #4294967295
   84784:	4b6e      	ldr	r3, [pc, #440]	; (84940 <_svfprintf_r+0x860>)
   84786:	f003 fe51 	bl	8842c <__aeabi_dcmpun>
   8478a:	2800      	cmp	r0, #0
   8478c:	f040 8430 	bne.w	84ff0 <_svfprintf_r+0xf10>
   84790:	4628      	mov	r0, r5
   84792:	4621      	mov	r1, r4
   84794:	f04f 32ff 	mov.w	r2, #4294967295
   84798:	4b69      	ldr	r3, [pc, #420]	; (84940 <_svfprintf_r+0x860>)
   8479a:	f003 fe29 	bl	883f0 <__aeabi_dcmple>
   8479e:	2800      	cmp	r0, #0
   847a0:	f040 8426 	bne.w	84ff0 <_svfprintf_r+0xf10>
   847a4:	a814      	add	r0, sp, #80	; 0x50
   847a6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   847a8:	f003 fe18 	bl	883dc <__aeabi_dcmplt>
   847ac:	2800      	cmp	r0, #0
   847ae:	f040 85d1 	bne.w	85354 <_svfprintf_r+0x1274>
   847b2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   847b6:	2303      	movs	r3, #3
   847b8:	461a      	mov	r2, r3
   847ba:	9308      	str	r3, [sp, #32]
   847bc:	2300      	movs	r3, #0
   847be:	4619      	mov	r1, r3
   847c0:	930a      	str	r3, [sp, #40]	; 0x28
   847c2:	4e60      	ldr	r6, [pc, #384]	; (84944 <_svfprintf_r+0x864>)
   847c4:	4b60      	ldr	r3, [pc, #384]	; (84948 <_svfprintf_r+0x868>)
   847c6:	920e      	str	r2, [sp, #56]	; 0x38
   847c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   847ca:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   847ce:	9007      	str	r0, [sp, #28]
   847d0:	9112      	str	r1, [sp, #72]	; 0x48
   847d2:	2a47      	cmp	r2, #71	; 0x47
   847d4:	bfd8      	it	le
   847d6:	461e      	movle	r6, r3
   847d8:	e5a6      	b.n	84328 <_svfprintf_r+0x248>
   847da:	f04b 0b08 	orr.w	fp, fp, #8
   847de:	f89a 3000 	ldrb.w	r3, [sl]
   847e2:	e4d7      	b.n	84194 <_svfprintf_r+0xb4>
   847e4:	f04b 0b10 	orr.w	fp, fp, #16
   847e8:	9311      	str	r3, [sp, #68]	; 0x44
   847ea:	f01b 0320 	ands.w	r3, fp, #32
   847ee:	f43f aebc 	beq.w	8456a <_svfprintf_r+0x48a>
   847f2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   847f4:	3407      	adds	r4, #7
   847f6:	f024 0307 	bic.w	r3, r4, #7
   847fa:	f103 0208 	add.w	r2, r3, #8
   847fe:	e9d3 4500 	ldrd	r4, r5, [r3]
   84802:	920f      	str	r2, [sp, #60]	; 0x3c
   84804:	2300      	movs	r3, #0
   84806:	e569      	b.n	842dc <_svfprintf_r+0x1fc>
   84808:	9311      	str	r3, [sp, #68]	; 0x44
   8480a:	2a00      	cmp	r2, #0
   8480c:	f040 86be 	bne.w	8558c <_svfprintf_r+0x14ac>
   84810:	4b4e      	ldr	r3, [pc, #312]	; (8494c <_svfprintf_r+0x86c>)
   84812:	f01b 0f20 	tst.w	fp, #32
   84816:	9318      	str	r3, [sp, #96]	; 0x60
   84818:	f43f af1a 	beq.w	84650 <_svfprintf_r+0x570>
   8481c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8481e:	f01b 0f01 	tst.w	fp, #1
   84822:	f104 0407 	add.w	r4, r4, #7
   84826:	f024 0307 	bic.w	r3, r4, #7
   8482a:	f103 0208 	add.w	r2, r3, #8
   8482e:	920f      	str	r2, [sp, #60]	; 0x3c
   84830:	e9d3 4500 	ldrd	r4, r5, [r3]
   84834:	f47f af1e 	bne.w	84674 <_svfprintf_r+0x594>
   84838:	2302      	movs	r3, #2
   8483a:	e54f      	b.n	842dc <_svfprintf_r+0x1fc>
   8483c:	f89a 3000 	ldrb.w	r3, [sl]
   84840:	2900      	cmp	r1, #0
   84842:	f47f aca7 	bne.w	84194 <_svfprintf_r+0xb4>
   84846:	2201      	movs	r2, #1
   84848:	2120      	movs	r1, #32
   8484a:	e4a3      	b.n	84194 <_svfprintf_r+0xb4>
   8484c:	f04b 0b01 	orr.w	fp, fp, #1
   84850:	f89a 3000 	ldrb.w	r3, [sl]
   84854:	e49e      	b.n	84194 <_svfprintf_r+0xb4>
   84856:	f89a 3000 	ldrb.w	r3, [sl]
   8485a:	2201      	movs	r2, #1
   8485c:	212b      	movs	r1, #43	; 0x2b
   8485e:	e499      	b.n	84194 <_svfprintf_r+0xb4>
   84860:	f04b 0b20 	orr.w	fp, fp, #32
   84864:	f89a 3000 	ldrb.w	r3, [sl]
   84868:	e494      	b.n	84194 <_svfprintf_r+0xb4>
   8486a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   8486e:	f89a 3000 	ldrb.w	r3, [sl]
   84872:	e48f      	b.n	84194 <_svfprintf_r+0xb4>
   84874:	f89a 3000 	ldrb.w	r3, [sl]
   84878:	2b6c      	cmp	r3, #108	; 0x6c
   8487a:	bf03      	ittte	eq
   8487c:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   84880:	f04b 0b20 	orreq.w	fp, fp, #32
   84884:	f10a 0a01 	addeq.w	sl, sl, #1
   84888:	f04b 0b10 	orrne.w	fp, fp, #16
   8488c:	e482      	b.n	84194 <_svfprintf_r+0xb4>
   8488e:	2a00      	cmp	r2, #0
   84890:	f040 8678 	bne.w	85584 <_svfprintf_r+0x14a4>
   84894:	f01b 0f20 	tst.w	fp, #32
   84898:	f040 844f 	bne.w	8513a <_svfprintf_r+0x105a>
   8489c:	f01b 0f10 	tst.w	fp, #16
   848a0:	f040 8435 	bne.w	8510e <_svfprintf_r+0x102e>
   848a4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   848a8:	f000 8431 	beq.w	8510e <_svfprintf_r+0x102e>
   848ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   848ae:	6813      	ldr	r3, [r2, #0]
   848b0:	3204      	adds	r2, #4
   848b2:	920f      	str	r2, [sp, #60]	; 0x3c
   848b4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   848b8:	801a      	strh	r2, [r3, #0]
   848ba:	e438      	b.n	8412e <_svfprintf_r+0x4e>
   848bc:	2378      	movs	r3, #120	; 0x78
   848be:	2230      	movs	r2, #48	; 0x30
   848c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   848c2:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   848c6:	9311      	str	r3, [sp, #68]	; 0x44
   848c8:	1d03      	adds	r3, r0, #4
   848ca:	930f      	str	r3, [sp, #60]	; 0x3c
   848cc:	4b1f      	ldr	r3, [pc, #124]	; (8494c <_svfprintf_r+0x86c>)
   848ce:	6804      	ldr	r4, [r0, #0]
   848d0:	9318      	str	r3, [sp, #96]	; 0x60
   848d2:	f04b 0b02 	orr.w	fp, fp, #2
   848d6:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   848da:	2500      	movs	r5, #0
   848dc:	2302      	movs	r3, #2
   848de:	e4fd      	b.n	842dc <_svfprintf_r+0x1fc>
   848e0:	9311      	str	r3, [sp, #68]	; 0x44
   848e2:	2a00      	cmp	r2, #0
   848e4:	f43f aef0 	beq.w	846c8 <_svfprintf_r+0x5e8>
   848e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   848ec:	e6ec      	b.n	846c8 <_svfprintf_r+0x5e8>
   848ee:	2000      	movs	r0, #0
   848f0:	4604      	mov	r4, r0
   848f2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   848f6:	f81a 3b01 	ldrb.w	r3, [sl], #1
   848fa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   848fe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   84902:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84906:	2809      	cmp	r0, #9
   84908:	d9f5      	bls.n	848f6 <_svfprintf_r+0x816>
   8490a:	940d      	str	r4, [sp, #52]	; 0x34
   8490c:	e444      	b.n	84198 <_svfprintf_r+0xb8>
   8490e:	9311      	str	r3, [sp, #68]	; 0x44
   84910:	2a00      	cmp	r2, #0
   84912:	f040 8646 	bne.w	855a2 <_svfprintf_r+0x14c2>
   84916:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84918:	2a00      	cmp	r2, #0
   8491a:	f43f acb7 	beq.w	8428c <_svfprintf_r+0x1ac>
   8491e:	2300      	movs	r3, #0
   84920:	2101      	movs	r1, #1
   84922:	461f      	mov	r7, r3
   84924:	9108      	str	r1, [sp, #32]
   84926:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   8492a:	f8cd b01c 	str.w	fp, [sp, #28]
   8492e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84932:	930a      	str	r3, [sp, #40]	; 0x28
   84934:	9312      	str	r3, [sp, #72]	; 0x48
   84936:	910e      	str	r1, [sp, #56]	; 0x38
   84938:	ae28      	add	r6, sp, #160	; 0xa0
   8493a:	e4f9      	b.n	84330 <_svfprintf_r+0x250>
   8493c:	000897b4 	.word	0x000897b4
   84940:	7fefffff 	.word	0x7fefffff
   84944:	000897a8 	.word	0x000897a8
   84948:	000897a4 	.word	0x000897a4
   8494c:	000897c8 	.word	0x000897c8
   84950:	aa25      	add	r2, sp, #148	; 0x94
   84952:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84954:	980c      	ldr	r0, [sp, #48]	; 0x30
   84956:	f002 fcb7 	bl	872c8 <__ssprint_r>
   8495a:	2800      	cmp	r0, #0
   8495c:	f47f ac9d 	bne.w	8429a <_svfprintf_r+0x1ba>
   84960:	46c8      	mov	r8, r9
   84962:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84966:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84968:	e535      	b.n	843d6 <_svfprintf_r+0x2f6>
   8496a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8496c:	2b65      	cmp	r3, #101	; 0x65
   8496e:	f340 8099 	ble.w	84aa4 <_svfprintf_r+0x9c4>
   84972:	a814      	add	r0, sp, #80	; 0x50
   84974:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   84976:	f003 fd27 	bl	883c8 <__aeabi_dcmpeq>
   8497a:	2800      	cmp	r0, #0
   8497c:	f000 8192 	beq.w	84ca4 <_svfprintf_r+0xbc4>
   84980:	2101      	movs	r1, #1
   84982:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84984:	4ab4      	ldr	r2, [pc, #720]	; (84c58 <_svfprintf_r+0xb78>)
   84986:	440b      	add	r3, r1
   84988:	440c      	add	r4, r1
   8498a:	2b07      	cmp	r3, #7
   8498c:	9427      	str	r4, [sp, #156]	; 0x9c
   8498e:	9326      	str	r3, [sp, #152]	; 0x98
   84990:	f8c8 1004 	str.w	r1, [r8, #4]
   84994:	f8c8 2000 	str.w	r2, [r8]
   84998:	f300 83c5 	bgt.w	85126 <_svfprintf_r+0x1046>
   8499c:	f108 0808 	add.w	r8, r8, #8
   849a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   849a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   849a4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   849a6:	4293      	cmp	r3, r2
   849a8:	db03      	blt.n	849b2 <_svfprintf_r+0x8d2>
   849aa:	9b07      	ldr	r3, [sp, #28]
   849ac:	07dd      	lsls	r5, r3, #31
   849ae:	f57f ad89 	bpl.w	844c4 <_svfprintf_r+0x3e4>
   849b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   849b4:	9919      	ldr	r1, [sp, #100]	; 0x64
   849b6:	3301      	adds	r3, #1
   849b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   849ba:	440c      	add	r4, r1
   849bc:	2b07      	cmp	r3, #7
   849be:	f8c8 2000 	str.w	r2, [r8]
   849c2:	f8c8 1004 	str.w	r1, [r8, #4]
   849c6:	9427      	str	r4, [sp, #156]	; 0x9c
   849c8:	9326      	str	r3, [sp, #152]	; 0x98
   849ca:	f300 83c3 	bgt.w	85154 <_svfprintf_r+0x1074>
   849ce:	f108 0808 	add.w	r8, r8, #8
   849d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   849d4:	1e5e      	subs	r6, r3, #1
   849d6:	2e00      	cmp	r6, #0
   849d8:	f77f ad74 	ble.w	844c4 <_svfprintf_r+0x3e4>
   849dc:	2e10      	cmp	r6, #16
   849de:	f340 8574 	ble.w	854ca <_svfprintf_r+0x13ea>
   849e2:	4622      	mov	r2, r4
   849e4:	2710      	movs	r7, #16
   849e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   849e8:	4d9c      	ldr	r5, [pc, #624]	; (84c5c <_svfprintf_r+0xb7c>)
   849ea:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   849ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   849f0:	e005      	b.n	849fe <_svfprintf_r+0x91e>
   849f2:	f108 0808 	add.w	r8, r8, #8
   849f6:	3e10      	subs	r6, #16
   849f8:	2e10      	cmp	r6, #16
   849fa:	f340 8224 	ble.w	84e46 <_svfprintf_r+0xd66>
   849fe:	3301      	adds	r3, #1
   84a00:	3210      	adds	r2, #16
   84a02:	2b07      	cmp	r3, #7
   84a04:	9227      	str	r2, [sp, #156]	; 0x9c
   84a06:	9326      	str	r3, [sp, #152]	; 0x98
   84a08:	e888 00a0 	stmia.w	r8, {r5, r7}
   84a0c:	ddf1      	ble.n	849f2 <_svfprintf_r+0x912>
   84a0e:	aa25      	add	r2, sp, #148	; 0x94
   84a10:	4621      	mov	r1, r4
   84a12:	4658      	mov	r0, fp
   84a14:	f002 fc58 	bl	872c8 <__ssprint_r>
   84a18:	2800      	cmp	r0, #0
   84a1a:	f47f ac3e 	bne.w	8429a <_svfprintf_r+0x1ba>
   84a1e:	46c8      	mov	r8, r9
   84a20:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84a22:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a24:	e7e7      	b.n	849f6 <_svfprintf_r+0x916>
   84a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84a28:	9a08      	ldr	r2, [sp, #32]
   84a2a:	1a9f      	subs	r7, r3, r2
   84a2c:	2f00      	cmp	r7, #0
   84a2e:	f77f acf9 	ble.w	84424 <_svfprintf_r+0x344>
   84a32:	2f10      	cmp	r7, #16
   84a34:	f340 84a7 	ble.w	85386 <_svfprintf_r+0x12a6>
   84a38:	4d88      	ldr	r5, [pc, #544]	; (84c5c <_svfprintf_r+0xb7c>)
   84a3a:	4642      	mov	r2, r8
   84a3c:	4621      	mov	r1, r4
   84a3e:	46b0      	mov	r8, r6
   84a40:	f04f 0b10 	mov.w	fp, #16
   84a44:	462e      	mov	r6, r5
   84a46:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84a4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84a4c:	e004      	b.n	84a58 <_svfprintf_r+0x978>
   84a4e:	3f10      	subs	r7, #16
   84a50:	2f10      	cmp	r7, #16
   84a52:	f102 0208 	add.w	r2, r2, #8
   84a56:	dd15      	ble.n	84a84 <_svfprintf_r+0x9a4>
   84a58:	3301      	adds	r3, #1
   84a5a:	3110      	adds	r1, #16
   84a5c:	2b07      	cmp	r3, #7
   84a5e:	9127      	str	r1, [sp, #156]	; 0x9c
   84a60:	9326      	str	r3, [sp, #152]	; 0x98
   84a62:	e882 0840 	stmia.w	r2, {r6, fp}
   84a66:	ddf2      	ble.n	84a4e <_svfprintf_r+0x96e>
   84a68:	aa25      	add	r2, sp, #148	; 0x94
   84a6a:	4629      	mov	r1, r5
   84a6c:	4620      	mov	r0, r4
   84a6e:	f002 fc2b 	bl	872c8 <__ssprint_r>
   84a72:	2800      	cmp	r0, #0
   84a74:	f47f ac11 	bne.w	8429a <_svfprintf_r+0x1ba>
   84a78:	3f10      	subs	r7, #16
   84a7a:	2f10      	cmp	r7, #16
   84a7c:	464a      	mov	r2, r9
   84a7e:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84a80:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a82:	dce9      	bgt.n	84a58 <_svfprintf_r+0x978>
   84a84:	4635      	mov	r5, r6
   84a86:	460c      	mov	r4, r1
   84a88:	4646      	mov	r6, r8
   84a8a:	4690      	mov	r8, r2
   84a8c:	3301      	adds	r3, #1
   84a8e:	443c      	add	r4, r7
   84a90:	2b07      	cmp	r3, #7
   84a92:	9427      	str	r4, [sp, #156]	; 0x9c
   84a94:	9326      	str	r3, [sp, #152]	; 0x98
   84a96:	e888 00a0 	stmia.w	r8, {r5, r7}
   84a9a:	f300 829d 	bgt.w	84fd8 <_svfprintf_r+0xef8>
   84a9e:	f108 0808 	add.w	r8, r8, #8
   84aa2:	e4bf      	b.n	84424 <_svfprintf_r+0x344>
   84aa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84aa6:	2b01      	cmp	r3, #1
   84aa8:	f340 824e 	ble.w	84f48 <_svfprintf_r+0xe68>
   84aac:	2301      	movs	r3, #1
   84aae:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84ab0:	441c      	add	r4, r3
   84ab2:	441f      	add	r7, r3
   84ab4:	2f07      	cmp	r7, #7
   84ab6:	9427      	str	r4, [sp, #156]	; 0x9c
   84ab8:	f8c8 6000 	str.w	r6, [r8]
   84abc:	9726      	str	r7, [sp, #152]	; 0x98
   84abe:	f8c8 3004 	str.w	r3, [r8, #4]
   84ac2:	f300 825e 	bgt.w	84f82 <_svfprintf_r+0xea2>
   84ac6:	f108 0808 	add.w	r8, r8, #8
   84aca:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84acc:	3701      	adds	r7, #1
   84ace:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   84ad0:	4414      	add	r4, r2
   84ad2:	2f07      	cmp	r7, #7
   84ad4:	9427      	str	r4, [sp, #156]	; 0x9c
   84ad6:	9726      	str	r7, [sp, #152]	; 0x98
   84ad8:	f8c8 3000 	str.w	r3, [r8]
   84adc:	f8c8 2004 	str.w	r2, [r8, #4]
   84ae0:	f300 825b 	bgt.w	84f9a <_svfprintf_r+0xeba>
   84ae4:	f108 0808 	add.w	r8, r8, #8
   84ae8:	a814      	add	r0, sp, #80	; 0x50
   84aea:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   84aec:	f003 fc6c 	bl	883c8 <__aeabi_dcmpeq>
   84af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84af2:	2800      	cmp	r0, #0
   84af4:	f040 8141 	bne.w	84d7a <_svfprintf_r+0xc9a>
   84af8:	3b01      	subs	r3, #1
   84afa:	3701      	adds	r7, #1
   84afc:	3601      	adds	r6, #1
   84afe:	441c      	add	r4, r3
   84b00:	2f07      	cmp	r7, #7
   84b02:	f8c8 6000 	str.w	r6, [r8]
   84b06:	9726      	str	r7, [sp, #152]	; 0x98
   84b08:	9427      	str	r4, [sp, #156]	; 0x9c
   84b0a:	f8c8 3004 	str.w	r3, [r8, #4]
   84b0e:	f300 8166 	bgt.w	84dde <_svfprintf_r+0xcfe>
   84b12:	f108 0808 	add.w	r8, r8, #8
   84b16:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   84b18:	3701      	adds	r7, #1
   84b1a:	4414      	add	r4, r2
   84b1c:	ab21      	add	r3, sp, #132	; 0x84
   84b1e:	2f07      	cmp	r7, #7
   84b20:	9427      	str	r4, [sp, #156]	; 0x9c
   84b22:	9726      	str	r7, [sp, #152]	; 0x98
   84b24:	f8c8 2004 	str.w	r2, [r8, #4]
   84b28:	f8c8 3000 	str.w	r3, [r8]
   84b2c:	f77f acc8 	ble.w	844c0 <_svfprintf_r+0x3e0>
   84b30:	aa25      	add	r2, sp, #148	; 0x94
   84b32:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b34:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b36:	f002 fbc7 	bl	872c8 <__ssprint_r>
   84b3a:	2800      	cmp	r0, #0
   84b3c:	f47f abad 	bne.w	8429a <_svfprintf_r+0x1ba>
   84b40:	46c8      	mov	r8, r9
   84b42:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84b44:	e4be      	b.n	844c4 <_svfprintf_r+0x3e4>
   84b46:	aa25      	add	r2, sp, #148	; 0x94
   84b48:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b4a:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b4c:	f002 fbbc 	bl	872c8 <__ssprint_r>
   84b50:	2800      	cmp	r0, #0
   84b52:	f43f ad01 	beq.w	84558 <_svfprintf_r+0x478>
   84b56:	f7ff bba0 	b.w	8429a <_svfprintf_r+0x1ba>
   84b5a:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84b5e:	2b01      	cmp	r3, #1
   84b60:	f000 817e 	beq.w	84e60 <_svfprintf_r+0xd80>
   84b64:	2b02      	cmp	r3, #2
   84b66:	d171      	bne.n	84c4c <_svfprintf_r+0xb6c>
   84b68:	f8cd b01c 	str.w	fp, [sp, #28]
   84b6c:	2400      	movs	r4, #0
   84b6e:	2500      	movs	r5, #0
   84b70:	e5d8      	b.n	84724 <_svfprintf_r+0x644>
   84b72:	aa25      	add	r2, sp, #148	; 0x94
   84b74:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b76:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b78:	f002 fba6 	bl	872c8 <__ssprint_r>
   84b7c:	2800      	cmp	r0, #0
   84b7e:	f47f ab8c 	bne.w	8429a <_svfprintf_r+0x1ba>
   84b82:	46c8      	mov	r8, r9
   84b84:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84b86:	e48a      	b.n	8449e <_svfprintf_r+0x3be>
   84b88:	aa25      	add	r2, sp, #148	; 0x94
   84b8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b8c:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b8e:	f002 fb9b 	bl	872c8 <__ssprint_r>
   84b92:	2800      	cmp	r0, #0
   84b94:	f47f ab81 	bne.w	8429a <_svfprintf_r+0x1ba>
   84b98:	46c8      	mov	r8, r9
   84b9a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84b9c:	e42d      	b.n	843fa <_svfprintf_r+0x31a>
   84b9e:	2001      	movs	r0, #1
   84ba0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84ba2:	4a2d      	ldr	r2, [pc, #180]	; (84c58 <_svfprintf_r+0xb78>)
   84ba4:	4403      	add	r3, r0
   84ba6:	4404      	add	r4, r0
   84ba8:	2b07      	cmp	r3, #7
   84baa:	9427      	str	r4, [sp, #156]	; 0x9c
   84bac:	9326      	str	r3, [sp, #152]	; 0x98
   84bae:	f8c8 0004 	str.w	r0, [r8, #4]
   84bb2:	f8c8 2000 	str.w	r2, [r8]
   84bb6:	f340 82d8 	ble.w	8516a <_svfprintf_r+0x108a>
   84bba:	aa25      	add	r2, sp, #148	; 0x94
   84bbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84bbe:	980c      	ldr	r0, [sp, #48]	; 0x30
   84bc0:	f002 fb82 	bl	872c8 <__ssprint_r>
   84bc4:	2800      	cmp	r0, #0
   84bc6:	f47f ab68 	bne.w	8429a <_svfprintf_r+0x1ba>
   84bca:	46c8      	mov	r8, r9
   84bcc:	991f      	ldr	r1, [sp, #124]	; 0x7c
   84bce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84bd0:	b929      	cbnz	r1, 84bde <_svfprintf_r+0xafe>
   84bd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84bd4:	b91b      	cbnz	r3, 84bde <_svfprintf_r+0xafe>
   84bd6:	9b07      	ldr	r3, [sp, #28]
   84bd8:	07d8      	lsls	r0, r3, #31
   84bda:	f57f ac73 	bpl.w	844c4 <_svfprintf_r+0x3e4>
   84bde:	9819      	ldr	r0, [sp, #100]	; 0x64
   84be0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84be2:	4602      	mov	r2, r0
   84be4:	3301      	adds	r3, #1
   84be6:	4422      	add	r2, r4
   84be8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   84bea:	2b07      	cmp	r3, #7
   84bec:	9227      	str	r2, [sp, #156]	; 0x9c
   84bee:	f8c8 4000 	str.w	r4, [r8]
   84bf2:	f8c8 0004 	str.w	r0, [r8, #4]
   84bf6:	9326      	str	r3, [sp, #152]	; 0x98
   84bf8:	f300 8431 	bgt.w	8545e <_svfprintf_r+0x137e>
   84bfc:	f108 0808 	add.w	r8, r8, #8
   84c00:	2900      	cmp	r1, #0
   84c02:	f2c0 8409 	blt.w	85418 <_svfprintf_r+0x1338>
   84c06:	9913      	ldr	r1, [sp, #76]	; 0x4c
   84c08:	3301      	adds	r3, #1
   84c0a:	188c      	adds	r4, r1, r2
   84c0c:	2b07      	cmp	r3, #7
   84c0e:	9427      	str	r4, [sp, #156]	; 0x9c
   84c10:	9326      	str	r3, [sp, #152]	; 0x98
   84c12:	f8c8 6000 	str.w	r6, [r8]
   84c16:	f8c8 1004 	str.w	r1, [r8, #4]
   84c1a:	f77f ac51 	ble.w	844c0 <_svfprintf_r+0x3e0>
   84c1e:	aa25      	add	r2, sp, #148	; 0x94
   84c20:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84c22:	980c      	ldr	r0, [sp, #48]	; 0x30
   84c24:	f002 fb50 	bl	872c8 <__ssprint_r>
   84c28:	2800      	cmp	r0, #0
   84c2a:	f47f ab36 	bne.w	8429a <_svfprintf_r+0x1ba>
   84c2e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84c30:	46c8      	mov	r8, r9
   84c32:	e447      	b.n	844c4 <_svfprintf_r+0x3e4>
   84c34:	aa25      	add	r2, sp, #148	; 0x94
   84c36:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84c38:	980c      	ldr	r0, [sp, #48]	; 0x30
   84c3a:	f002 fb45 	bl	872c8 <__ssprint_r>
   84c3e:	2800      	cmp	r0, #0
   84c40:	f47f ab2b 	bne.w	8429a <_svfprintf_r+0x1ba>
   84c44:	46c8      	mov	r8, r9
   84c46:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84c48:	f7ff bbe9 	b.w	8441e <_svfprintf_r+0x33e>
   84c4c:	2400      	movs	r4, #0
   84c4e:	2500      	movs	r5, #0
   84c50:	f8cd b01c 	str.w	fp, [sp, #28]
   84c54:	4649      	mov	r1, r9
   84c56:	e004      	b.n	84c62 <_svfprintf_r+0xb82>
   84c58:	000897e4 	.word	0x000897e4
   84c5c:	000897f8 	.word	0x000897f8
   84c60:	4631      	mov	r1, r6
   84c62:	08e2      	lsrs	r2, r4, #3
   84c64:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   84c68:	08e8      	lsrs	r0, r5, #3
   84c6a:	f004 0307 	and.w	r3, r4, #7
   84c6e:	4605      	mov	r5, r0
   84c70:	4614      	mov	r4, r2
   84c72:	3330      	adds	r3, #48	; 0x30
   84c74:	ea54 0205 	orrs.w	r2, r4, r5
   84c78:	f801 3c01 	strb.w	r3, [r1, #-1]
   84c7c:	f101 36ff 	add.w	r6, r1, #4294967295
   84c80:	d1ee      	bne.n	84c60 <_svfprintf_r+0xb80>
   84c82:	9a07      	ldr	r2, [sp, #28]
   84c84:	07d2      	lsls	r2, r2, #31
   84c86:	f57f ad5d 	bpl.w	84744 <_svfprintf_r+0x664>
   84c8a:	2b30      	cmp	r3, #48	; 0x30
   84c8c:	f43f ad5a 	beq.w	84744 <_svfprintf_r+0x664>
   84c90:	2330      	movs	r3, #48	; 0x30
   84c92:	3902      	subs	r1, #2
   84c94:	f806 3c01 	strb.w	r3, [r6, #-1]
   84c98:	eba9 0301 	sub.w	r3, r9, r1
   84c9c:	930e      	str	r3, [sp, #56]	; 0x38
   84c9e:	460e      	mov	r6, r1
   84ca0:	f7ff bb3a 	b.w	84318 <_svfprintf_r+0x238>
   84ca4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   84ca6:	2900      	cmp	r1, #0
   84ca8:	f77f af79 	ble.w	84b9e <_svfprintf_r+0xabe>
   84cac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84cae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   84cb0:	4293      	cmp	r3, r2
   84cb2:	bfa8      	it	ge
   84cb4:	4613      	movge	r3, r2
   84cb6:	2b00      	cmp	r3, #0
   84cb8:	461f      	mov	r7, r3
   84cba:	dd0b      	ble.n	84cd4 <_svfprintf_r+0xbf4>
   84cbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84cbe:	443c      	add	r4, r7
   84cc0:	3301      	adds	r3, #1
   84cc2:	2b07      	cmp	r3, #7
   84cc4:	9427      	str	r4, [sp, #156]	; 0x9c
   84cc6:	e888 00c0 	stmia.w	r8, {r6, r7}
   84cca:	9326      	str	r3, [sp, #152]	; 0x98
   84ccc:	f300 82fb 	bgt.w	852c6 <_svfprintf_r+0x11e6>
   84cd0:	f108 0808 	add.w	r8, r8, #8
   84cd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84cd6:	2f00      	cmp	r7, #0
   84cd8:	bfa8      	it	ge
   84cda:	1bdb      	subge	r3, r3, r7
   84cdc:	2b00      	cmp	r3, #0
   84cde:	461f      	mov	r7, r3
   84ce0:	f340 80d7 	ble.w	84e92 <_svfprintf_r+0xdb2>
   84ce4:	2b10      	cmp	r3, #16
   84ce6:	f340 8433 	ble.w	85550 <_svfprintf_r+0x1470>
   84cea:	4dba      	ldr	r5, [pc, #744]	; (84fd4 <_svfprintf_r+0xef4>)
   84cec:	4642      	mov	r2, r8
   84cee:	4621      	mov	r1, r4
   84cf0:	46b0      	mov	r8, r6
   84cf2:	f04f 0b10 	mov.w	fp, #16
   84cf6:	462e      	mov	r6, r5
   84cf8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84cfa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84cfc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84cfe:	e004      	b.n	84d0a <_svfprintf_r+0xc2a>
   84d00:	3208      	adds	r2, #8
   84d02:	3f10      	subs	r7, #16
   84d04:	2f10      	cmp	r7, #16
   84d06:	f340 80b5 	ble.w	84e74 <_svfprintf_r+0xd94>
   84d0a:	3301      	adds	r3, #1
   84d0c:	3110      	adds	r1, #16
   84d0e:	2b07      	cmp	r3, #7
   84d10:	9127      	str	r1, [sp, #156]	; 0x9c
   84d12:	9326      	str	r3, [sp, #152]	; 0x98
   84d14:	e882 0840 	stmia.w	r2, {r6, fp}
   84d18:	ddf2      	ble.n	84d00 <_svfprintf_r+0xc20>
   84d1a:	aa25      	add	r2, sp, #148	; 0x94
   84d1c:	4629      	mov	r1, r5
   84d1e:	4620      	mov	r0, r4
   84d20:	f002 fad2 	bl	872c8 <__ssprint_r>
   84d24:	2800      	cmp	r0, #0
   84d26:	f47f aab8 	bne.w	8429a <_svfprintf_r+0x1ba>
   84d2a:	464a      	mov	r2, r9
   84d2c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84d2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84d30:	e7e7      	b.n	84d02 <_svfprintf_r+0xc22>
   84d32:	2d00      	cmp	r5, #0
   84d34:	bf08      	it	eq
   84d36:	2c0a      	cmpeq	r4, #10
   84d38:	f0c0 8090 	bcc.w	84e5c <_svfprintf_r+0xd7c>
   84d3c:	464e      	mov	r6, r9
   84d3e:	4620      	mov	r0, r4
   84d40:	4629      	mov	r1, r5
   84d42:	220a      	movs	r2, #10
   84d44:	2300      	movs	r3, #0
   84d46:	f003 fbaf 	bl	884a8 <__aeabi_uldivmod>
   84d4a:	3230      	adds	r2, #48	; 0x30
   84d4c:	f806 2d01 	strb.w	r2, [r6, #-1]!
   84d50:	4620      	mov	r0, r4
   84d52:	4629      	mov	r1, r5
   84d54:	2300      	movs	r3, #0
   84d56:	220a      	movs	r2, #10
   84d58:	f003 fba6 	bl	884a8 <__aeabi_uldivmod>
   84d5c:	4604      	mov	r4, r0
   84d5e:	460d      	mov	r5, r1
   84d60:	ea54 0305 	orrs.w	r3, r4, r5
   84d64:	d1eb      	bne.n	84d3e <_svfprintf_r+0xc5e>
   84d66:	eba9 0306 	sub.w	r3, r9, r6
   84d6a:	930e      	str	r3, [sp, #56]	; 0x38
   84d6c:	f7ff bad4 	b.w	84318 <_svfprintf_r+0x238>
   84d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84d72:	464e      	mov	r6, r9
   84d74:	930e      	str	r3, [sp, #56]	; 0x38
   84d76:	f7ff bacf 	b.w	84318 <_svfprintf_r+0x238>
   84d7a:	1e5e      	subs	r6, r3, #1
   84d7c:	2e00      	cmp	r6, #0
   84d7e:	f77f aeca 	ble.w	84b16 <_svfprintf_r+0xa36>
   84d82:	2e10      	cmp	r6, #16
   84d84:	f340 83e2 	ble.w	8554c <_svfprintf_r+0x146c>
   84d88:	4622      	mov	r2, r4
   84d8a:	f04f 0b10 	mov.w	fp, #16
   84d8e:	4d91      	ldr	r5, [pc, #580]	; (84fd4 <_svfprintf_r+0xef4>)
   84d90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84d92:	e004      	b.n	84d9e <_svfprintf_r+0xcbe>
   84d94:	3e10      	subs	r6, #16
   84d96:	2e10      	cmp	r6, #16
   84d98:	f108 0808 	add.w	r8, r8, #8
   84d9c:	dd15      	ble.n	84dca <_svfprintf_r+0xcea>
   84d9e:	3701      	adds	r7, #1
   84da0:	3210      	adds	r2, #16
   84da2:	2f07      	cmp	r7, #7
   84da4:	9227      	str	r2, [sp, #156]	; 0x9c
   84da6:	9726      	str	r7, [sp, #152]	; 0x98
   84da8:	e888 0820 	stmia.w	r8, {r5, fp}
   84dac:	ddf2      	ble.n	84d94 <_svfprintf_r+0xcb4>
   84dae:	aa25      	add	r2, sp, #148	; 0x94
   84db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84db2:	4620      	mov	r0, r4
   84db4:	f002 fa88 	bl	872c8 <__ssprint_r>
   84db8:	2800      	cmp	r0, #0
   84dba:	f47f aa6e 	bne.w	8429a <_svfprintf_r+0x1ba>
   84dbe:	3e10      	subs	r6, #16
   84dc0:	2e10      	cmp	r6, #16
   84dc2:	46c8      	mov	r8, r9
   84dc4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84dc6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84dc8:	dce9      	bgt.n	84d9e <_svfprintf_r+0xcbe>
   84dca:	4614      	mov	r4, r2
   84dcc:	3701      	adds	r7, #1
   84dce:	4434      	add	r4, r6
   84dd0:	2f07      	cmp	r7, #7
   84dd2:	9427      	str	r4, [sp, #156]	; 0x9c
   84dd4:	9726      	str	r7, [sp, #152]	; 0x98
   84dd6:	e888 0060 	stmia.w	r8, {r5, r6}
   84dda:	f77f ae9a 	ble.w	84b12 <_svfprintf_r+0xa32>
   84dde:	aa25      	add	r2, sp, #148	; 0x94
   84de0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84de2:	980c      	ldr	r0, [sp, #48]	; 0x30
   84de4:	f002 fa70 	bl	872c8 <__ssprint_r>
   84de8:	2800      	cmp	r0, #0
   84dea:	f47f aa56 	bne.w	8429a <_svfprintf_r+0x1ba>
   84dee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84df0:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84df2:	46c8      	mov	r8, r9
   84df4:	e68f      	b.n	84b16 <_svfprintf_r+0xa36>
   84df6:	3204      	adds	r2, #4
   84df8:	681c      	ldr	r4, [r3, #0]
   84dfa:	2500      	movs	r5, #0
   84dfc:	2301      	movs	r3, #1
   84dfe:	920f      	str	r2, [sp, #60]	; 0x3c
   84e00:	f7ff ba6c 	b.w	842dc <_svfprintf_r+0x1fc>
   84e04:	681c      	ldr	r4, [r3, #0]
   84e06:	3304      	adds	r3, #4
   84e08:	930f      	str	r3, [sp, #60]	; 0x3c
   84e0a:	2500      	movs	r5, #0
   84e0c:	e42e      	b.n	8466c <_svfprintf_r+0x58c>
   84e0e:	681c      	ldr	r4, [r3, #0]
   84e10:	3304      	adds	r3, #4
   84e12:	17e5      	asrs	r5, r4, #31
   84e14:	4622      	mov	r2, r4
   84e16:	930f      	str	r3, [sp, #60]	; 0x3c
   84e18:	462b      	mov	r3, r5
   84e1a:	2a00      	cmp	r2, #0
   84e1c:	f173 0300 	sbcs.w	r3, r3, #0
   84e20:	f6bf ac6c 	bge.w	846fc <_svfprintf_r+0x61c>
   84e24:	272d      	movs	r7, #45	; 0x2d
   84e26:	4264      	negs	r4, r4
   84e28:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84e2c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   84e30:	2301      	movs	r3, #1
   84e32:	f7ff ba57 	b.w	842e4 <_svfprintf_r+0x204>
   84e36:	990f      	ldr	r1, [sp, #60]	; 0x3c
   84e38:	2500      	movs	r5, #0
   84e3a:	460a      	mov	r2, r1
   84e3c:	3204      	adds	r2, #4
   84e3e:	680c      	ldr	r4, [r1, #0]
   84e40:	920f      	str	r2, [sp, #60]	; 0x3c
   84e42:	f7ff ba4b 	b.w	842dc <_svfprintf_r+0x1fc>
   84e46:	4614      	mov	r4, r2
   84e48:	3301      	adds	r3, #1
   84e4a:	4434      	add	r4, r6
   84e4c:	2b07      	cmp	r3, #7
   84e4e:	9427      	str	r4, [sp, #156]	; 0x9c
   84e50:	9326      	str	r3, [sp, #152]	; 0x98
   84e52:	e888 0060 	stmia.w	r8, {r5, r6}
   84e56:	f77f ab33 	ble.w	844c0 <_svfprintf_r+0x3e0>
   84e5a:	e6e0      	b.n	84c1e <_svfprintf_r+0xb3e>
   84e5c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84e60:	2301      	movs	r3, #1
   84e62:	ae42      	add	r6, sp, #264	; 0x108
   84e64:	3430      	adds	r4, #48	; 0x30
   84e66:	f8cd b01c 	str.w	fp, [sp, #28]
   84e6a:	f806 4d41 	strb.w	r4, [r6, #-65]!
   84e6e:	930e      	str	r3, [sp, #56]	; 0x38
   84e70:	f7ff ba52 	b.w	84318 <_svfprintf_r+0x238>
   84e74:	4635      	mov	r5, r6
   84e76:	460c      	mov	r4, r1
   84e78:	4646      	mov	r6, r8
   84e7a:	4690      	mov	r8, r2
   84e7c:	3301      	adds	r3, #1
   84e7e:	443c      	add	r4, r7
   84e80:	2b07      	cmp	r3, #7
   84e82:	9427      	str	r4, [sp, #156]	; 0x9c
   84e84:	9326      	str	r3, [sp, #152]	; 0x98
   84e86:	e888 00a0 	stmia.w	r8, {r5, r7}
   84e8a:	f300 8246 	bgt.w	8531a <_svfprintf_r+0x123a>
   84e8e:	f108 0808 	add.w	r8, r8, #8
   84e92:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84e94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84e96:	429a      	cmp	r2, r3
   84e98:	db45      	blt.n	84f26 <_svfprintf_r+0xe46>
   84e9a:	9b07      	ldr	r3, [sp, #28]
   84e9c:	07d9      	lsls	r1, r3, #31
   84e9e:	d442      	bmi.n	84f26 <_svfprintf_r+0xe46>
   84ea0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84ea2:	9812      	ldr	r0, [sp, #72]	; 0x48
   84ea4:	1a9a      	subs	r2, r3, r2
   84ea6:	1a1d      	subs	r5, r3, r0
   84ea8:	4295      	cmp	r5, r2
   84eaa:	bfa8      	it	ge
   84eac:	4615      	movge	r5, r2
   84eae:	2d00      	cmp	r5, #0
   84eb0:	dd0e      	ble.n	84ed0 <_svfprintf_r+0xdf0>
   84eb2:	9926      	ldr	r1, [sp, #152]	; 0x98
   84eb4:	4406      	add	r6, r0
   84eb6:	3101      	adds	r1, #1
   84eb8:	442c      	add	r4, r5
   84eba:	2907      	cmp	r1, #7
   84ebc:	f8c8 6000 	str.w	r6, [r8]
   84ec0:	9427      	str	r4, [sp, #156]	; 0x9c
   84ec2:	f8c8 5004 	str.w	r5, [r8, #4]
   84ec6:	9126      	str	r1, [sp, #152]	; 0x98
   84ec8:	f300 8216 	bgt.w	852f8 <_svfprintf_r+0x1218>
   84ecc:	f108 0808 	add.w	r8, r8, #8
   84ed0:	2d00      	cmp	r5, #0
   84ed2:	bfb4      	ite	lt
   84ed4:	4616      	movlt	r6, r2
   84ed6:	1b56      	subge	r6, r2, r5
   84ed8:	2e00      	cmp	r6, #0
   84eda:	f77f aaf3 	ble.w	844c4 <_svfprintf_r+0x3e4>
   84ede:	2e10      	cmp	r6, #16
   84ee0:	f340 82f3 	ble.w	854ca <_svfprintf_r+0x13ea>
   84ee4:	4622      	mov	r2, r4
   84ee6:	2710      	movs	r7, #16
   84ee8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84eea:	4d3a      	ldr	r5, [pc, #232]	; (84fd4 <_svfprintf_r+0xef4>)
   84eec:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   84ef0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84ef2:	e004      	b.n	84efe <_svfprintf_r+0xe1e>
   84ef4:	f108 0808 	add.w	r8, r8, #8
   84ef8:	3e10      	subs	r6, #16
   84efa:	2e10      	cmp	r6, #16
   84efc:	dda3      	ble.n	84e46 <_svfprintf_r+0xd66>
   84efe:	3301      	adds	r3, #1
   84f00:	3210      	adds	r2, #16
   84f02:	2b07      	cmp	r3, #7
   84f04:	9227      	str	r2, [sp, #156]	; 0x9c
   84f06:	9326      	str	r3, [sp, #152]	; 0x98
   84f08:	e888 00a0 	stmia.w	r8, {r5, r7}
   84f0c:	ddf2      	ble.n	84ef4 <_svfprintf_r+0xe14>
   84f0e:	aa25      	add	r2, sp, #148	; 0x94
   84f10:	4621      	mov	r1, r4
   84f12:	4658      	mov	r0, fp
   84f14:	f002 f9d8 	bl	872c8 <__ssprint_r>
   84f18:	2800      	cmp	r0, #0
   84f1a:	f47f a9be 	bne.w	8429a <_svfprintf_r+0x1ba>
   84f1e:	46c8      	mov	r8, r9
   84f20:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84f22:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84f24:	e7e8      	b.n	84ef8 <_svfprintf_r+0xe18>
   84f26:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84f28:	9819      	ldr	r0, [sp, #100]	; 0x64
   84f2a:	3301      	adds	r3, #1
   84f2c:	991a      	ldr	r1, [sp, #104]	; 0x68
   84f2e:	4404      	add	r4, r0
   84f30:	2b07      	cmp	r3, #7
   84f32:	9427      	str	r4, [sp, #156]	; 0x9c
   84f34:	f8c8 1000 	str.w	r1, [r8]
   84f38:	f8c8 0004 	str.w	r0, [r8, #4]
   84f3c:	9326      	str	r3, [sp, #152]	; 0x98
   84f3e:	f300 81cf 	bgt.w	852e0 <_svfprintf_r+0x1200>
   84f42:	f108 0808 	add.w	r8, r8, #8
   84f46:	e7ab      	b.n	84ea0 <_svfprintf_r+0xdc0>
   84f48:	9b07      	ldr	r3, [sp, #28]
   84f4a:	07da      	lsls	r2, r3, #31
   84f4c:	f53f adae 	bmi.w	84aac <_svfprintf_r+0x9cc>
   84f50:	2301      	movs	r3, #1
   84f52:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84f54:	441c      	add	r4, r3
   84f56:	441f      	add	r7, r3
   84f58:	2f07      	cmp	r7, #7
   84f5a:	9427      	str	r4, [sp, #156]	; 0x9c
   84f5c:	f8c8 6000 	str.w	r6, [r8]
   84f60:	9726      	str	r7, [sp, #152]	; 0x98
   84f62:	f8c8 3004 	str.w	r3, [r8, #4]
   84f66:	f77f add4 	ble.w	84b12 <_svfprintf_r+0xa32>
   84f6a:	aa25      	add	r2, sp, #148	; 0x94
   84f6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f6e:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f70:	f002 f9aa 	bl	872c8 <__ssprint_r>
   84f74:	2800      	cmp	r0, #0
   84f76:	f47f a990 	bne.w	8429a <_svfprintf_r+0x1ba>
   84f7a:	46c8      	mov	r8, r9
   84f7c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84f7e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84f80:	e5c9      	b.n	84b16 <_svfprintf_r+0xa36>
   84f82:	aa25      	add	r2, sp, #148	; 0x94
   84f84:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f86:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f88:	f002 f99e 	bl	872c8 <__ssprint_r>
   84f8c:	2800      	cmp	r0, #0
   84f8e:	f47f a984 	bne.w	8429a <_svfprintf_r+0x1ba>
   84f92:	46c8      	mov	r8, r9
   84f94:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84f96:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84f98:	e597      	b.n	84aca <_svfprintf_r+0x9ea>
   84f9a:	aa25      	add	r2, sp, #148	; 0x94
   84f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f9e:	980c      	ldr	r0, [sp, #48]	; 0x30
   84fa0:	f002 f992 	bl	872c8 <__ssprint_r>
   84fa4:	2800      	cmp	r0, #0
   84fa6:	f47f a978 	bne.w	8429a <_svfprintf_r+0x1ba>
   84faa:	46c8      	mov	r8, r9
   84fac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84fae:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84fb0:	e59a      	b.n	84ae8 <_svfprintf_r+0xa08>
   84fb2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84fb4:	3407      	adds	r4, #7
   84fb6:	f024 0407 	bic.w	r4, r4, #7
   84fba:	f104 0108 	add.w	r1, r4, #8
   84fbe:	e9d4 2300 	ldrd	r2, r3, [r4]
   84fc2:	910f      	str	r1, [sp, #60]	; 0x3c
   84fc4:	4614      	mov	r4, r2
   84fc6:	461d      	mov	r5, r3
   84fc8:	f7ff bb93 	b.w	846f2 <_svfprintf_r+0x612>
   84fcc:	464e      	mov	r6, r9
   84fce:	f7ff b9a3 	b.w	84318 <_svfprintf_r+0x238>
   84fd2:	bf00      	nop
   84fd4:	000897f8 	.word	0x000897f8
   84fd8:	aa25      	add	r2, sp, #148	; 0x94
   84fda:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84fdc:	980c      	ldr	r0, [sp, #48]	; 0x30
   84fde:	f002 f973 	bl	872c8 <__ssprint_r>
   84fe2:	2800      	cmp	r0, #0
   84fe4:	f47f a959 	bne.w	8429a <_svfprintf_r+0x1ba>
   84fe8:	46c8      	mov	r8, r9
   84fea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84fec:	f7ff ba1a 	b.w	84424 <_svfprintf_r+0x344>
   84ff0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   84ff2:	4622      	mov	r2, r4
   84ff4:	4620      	mov	r0, r4
   84ff6:	9c15      	ldr	r4, [sp, #84]	; 0x54
   84ff8:	4623      	mov	r3, r4
   84ffa:	4621      	mov	r1, r4
   84ffc:	f003 fa16 	bl	8842c <__aeabi_dcmpun>
   85000:	2800      	cmp	r0, #0
   85002:	f040 8273 	bne.w	854ec <_svfprintf_r+0x140c>
   85006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85008:	3301      	adds	r3, #1
   8500a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8500c:	f023 0320 	bic.w	r3, r3, #32
   85010:	930e      	str	r3, [sp, #56]	; 0x38
   85012:	f000 819c 	beq.w	8534e <_svfprintf_r+0x126e>
   85016:	2b47      	cmp	r3, #71	; 0x47
   85018:	f000 80d6 	beq.w	851c8 <_svfprintf_r+0x10e8>
   8501c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   85020:	9307      	str	r3, [sp, #28]
   85022:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85024:	1e1f      	subs	r7, r3, #0
   85026:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85028:	9308      	str	r3, [sp, #32]
   8502a:	bfb7      	itett	lt
   8502c:	463b      	movlt	r3, r7
   8502e:	2300      	movge	r3, #0
   85030:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   85034:	232d      	movlt	r3, #45	; 0x2d
   85036:	9310      	str	r3, [sp, #64]	; 0x40
   85038:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8503a:	2b66      	cmp	r3, #102	; 0x66
   8503c:	f000 8190 	beq.w	85360 <_svfprintf_r+0x1280>
   85040:	2b46      	cmp	r3, #70	; 0x46
   85042:	f000 80a4 	beq.w	8518e <_svfprintf_r+0x10ae>
   85046:	2002      	movs	r0, #2
   85048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8504a:	a923      	add	r1, sp, #140	; 0x8c
   8504c:	2b45      	cmp	r3, #69	; 0x45
   8504e:	bf0a      	itet	eq
   85050:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   85052:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   85054:	1c5d      	addeq	r5, r3, #1
   85056:	e88d 0021 	stmia.w	sp, {r0, r5}
   8505a:	9104      	str	r1, [sp, #16]
   8505c:	a820      	add	r0, sp, #128	; 0x80
   8505e:	a91f      	add	r1, sp, #124	; 0x7c
   85060:	463b      	mov	r3, r7
   85062:	9003      	str	r0, [sp, #12]
   85064:	9a08      	ldr	r2, [sp, #32]
   85066:	9102      	str	r1, [sp, #8]
   85068:	980c      	ldr	r0, [sp, #48]	; 0x30
   8506a:	f000 fb59 	bl	85720 <_dtoa_r>
   8506e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85070:	4606      	mov	r6, r0
   85072:	2b67      	cmp	r3, #103	; 0x67
   85074:	f040 81ba 	bne.w	853ec <_svfprintf_r+0x130c>
   85078:	f01b 0f01 	tst.w	fp, #1
   8507c:	f000 8223 	beq.w	854c6 <_svfprintf_r+0x13e6>
   85080:	1974      	adds	r4, r6, r5
   85082:	9a16      	ldr	r2, [sp, #88]	; 0x58
   85084:	9808      	ldr	r0, [sp, #32]
   85086:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   85088:	4639      	mov	r1, r7
   8508a:	f003 f99d 	bl	883c8 <__aeabi_dcmpeq>
   8508e:	2800      	cmp	r0, #0
   85090:	f040 8124 	bne.w	852dc <_svfprintf_r+0x11fc>
   85094:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   85096:	42a3      	cmp	r3, r4
   85098:	d206      	bcs.n	850a8 <_svfprintf_r+0xfc8>
   8509a:	2130      	movs	r1, #48	; 0x30
   8509c:	1c5a      	adds	r2, r3, #1
   8509e:	9223      	str	r2, [sp, #140]	; 0x8c
   850a0:	7019      	strb	r1, [r3, #0]
   850a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   850a4:	429c      	cmp	r4, r3
   850a6:	d8f9      	bhi.n	8509c <_svfprintf_r+0xfbc>
   850a8:	1b9b      	subs	r3, r3, r6
   850aa:	9313      	str	r3, [sp, #76]	; 0x4c
   850ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   850ae:	2b47      	cmp	r3, #71	; 0x47
   850b0:	f000 80a2 	beq.w	851f8 <_svfprintf_r+0x1118>
   850b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   850b6:	2b65      	cmp	r3, #101	; 0x65
   850b8:	f340 81a7 	ble.w	8540a <_svfprintf_r+0x132a>
   850bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   850be:	2b66      	cmp	r3, #102	; 0x66
   850c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   850c2:	9312      	str	r3, [sp, #72]	; 0x48
   850c4:	f000 8171 	beq.w	853aa <_svfprintf_r+0x12ca>
   850c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   850ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
   850cc:	4619      	mov	r1, r3
   850ce:	4291      	cmp	r1, r2
   850d0:	f300 815d 	bgt.w	8538e <_svfprintf_r+0x12ae>
   850d4:	f01b 0f01 	tst.w	fp, #1
   850d8:	f040 81f0 	bne.w	854bc <_svfprintf_r+0x13dc>
   850dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   850e0:	9308      	str	r3, [sp, #32]
   850e2:	2367      	movs	r3, #103	; 0x67
   850e4:	920e      	str	r2, [sp, #56]	; 0x38
   850e6:	9311      	str	r3, [sp, #68]	; 0x44
   850e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   850ea:	2b00      	cmp	r3, #0
   850ec:	d17d      	bne.n	851ea <_svfprintf_r+0x110a>
   850ee:	930a      	str	r3, [sp, #40]	; 0x28
   850f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   850f4:	f7ff b918 	b.w	84328 <_svfprintf_r+0x248>
   850f8:	f024 0407 	bic.w	r4, r4, #7
   850fc:	6823      	ldr	r3, [r4, #0]
   850fe:	9314      	str	r3, [sp, #80]	; 0x50
   85100:	6863      	ldr	r3, [r4, #4]
   85102:	9315      	str	r3, [sp, #84]	; 0x54
   85104:	f104 0308 	add.w	r3, r4, #8
   85108:	930f      	str	r3, [sp, #60]	; 0x3c
   8510a:	f7ff bb33 	b.w	84774 <_svfprintf_r+0x694>
   8510e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85110:	6813      	ldr	r3, [r2, #0]
   85112:	3204      	adds	r2, #4
   85114:	920f      	str	r2, [sp, #60]	; 0x3c
   85116:	9a09      	ldr	r2, [sp, #36]	; 0x24
   85118:	601a      	str	r2, [r3, #0]
   8511a:	f7ff b808 	b.w	8412e <_svfprintf_r+0x4e>
   8511e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85120:	4daf      	ldr	r5, [pc, #700]	; (853e0 <_svfprintf_r+0x1300>)
   85122:	f7ff b9b1 	b.w	84488 <_svfprintf_r+0x3a8>
   85126:	aa25      	add	r2, sp, #148	; 0x94
   85128:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8512a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8512c:	f002 f8cc 	bl	872c8 <__ssprint_r>
   85130:	2800      	cmp	r0, #0
   85132:	f47f a8b2 	bne.w	8429a <_svfprintf_r+0x1ba>
   85136:	46c8      	mov	r8, r9
   85138:	e432      	b.n	849a0 <_svfprintf_r+0x8c0>
   8513a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8513c:	4613      	mov	r3, r2
   8513e:	3304      	adds	r3, #4
   85140:	930f      	str	r3, [sp, #60]	; 0x3c
   85142:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85144:	6811      	ldr	r1, [r2, #0]
   85146:	17dd      	asrs	r5, r3, #31
   85148:	461a      	mov	r2, r3
   8514a:	462b      	mov	r3, r5
   8514c:	e9c1 2300 	strd	r2, r3, [r1]
   85150:	f7fe bfed 	b.w	8412e <_svfprintf_r+0x4e>
   85154:	aa25      	add	r2, sp, #148	; 0x94
   85156:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85158:	980c      	ldr	r0, [sp, #48]	; 0x30
   8515a:	f002 f8b5 	bl	872c8 <__ssprint_r>
   8515e:	2800      	cmp	r0, #0
   85160:	f47f a89b 	bne.w	8429a <_svfprintf_r+0x1ba>
   85164:	46c8      	mov	r8, r9
   85166:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85168:	e433      	b.n	849d2 <_svfprintf_r+0x8f2>
   8516a:	f108 0808 	add.w	r8, r8, #8
   8516e:	e52f      	b.n	84bd0 <_svfprintf_r+0xaf0>
   85170:	2140      	movs	r1, #64	; 0x40
   85172:	980c      	ldr	r0, [sp, #48]	; 0x30
   85174:	f001 fa22 	bl	865bc <_malloc_r>
   85178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8517a:	6010      	str	r0, [r2, #0]
   8517c:	6110      	str	r0, [r2, #16]
   8517e:	2800      	cmp	r0, #0
   85180:	f000 8213 	beq.w	855aa <_svfprintf_r+0x14ca>
   85184:	2340      	movs	r3, #64	; 0x40
   85186:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85188:	6153      	str	r3, [r2, #20]
   8518a:	f7fe bfc0 	b.w	8410e <_svfprintf_r+0x2e>
   8518e:	2003      	movs	r0, #3
   85190:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85192:	a923      	add	r1, sp, #140	; 0x8c
   85194:	e88d 0011 	stmia.w	sp, {r0, r4}
   85198:	9104      	str	r1, [sp, #16]
   8519a:	a820      	add	r0, sp, #128	; 0x80
   8519c:	a91f      	add	r1, sp, #124	; 0x7c
   8519e:	9003      	str	r0, [sp, #12]
   851a0:	9a08      	ldr	r2, [sp, #32]
   851a2:	463b      	mov	r3, r7
   851a4:	9102      	str	r1, [sp, #8]
   851a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   851a8:	f000 faba 	bl	85720 <_dtoa_r>
   851ac:	4625      	mov	r5, r4
   851ae:	4606      	mov	r6, r0
   851b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   851b2:	1974      	adds	r4, r6, r5
   851b4:	2b46      	cmp	r3, #70	; 0x46
   851b6:	f47f af64 	bne.w	85082 <_svfprintf_r+0xfa2>
   851ba:	7833      	ldrb	r3, [r6, #0]
   851bc:	2b30      	cmp	r3, #48	; 0x30
   851be:	f000 8187 	beq.w	854d0 <_svfprintf_r+0x13f0>
   851c2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   851c4:	442c      	add	r4, r5
   851c6:	e75c      	b.n	85082 <_svfprintf_r+0xfa2>
   851c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   851ca:	2b00      	cmp	r3, #0
   851cc:	bf08      	it	eq
   851ce:	2301      	moveq	r3, #1
   851d0:	930a      	str	r3, [sp, #40]	; 0x28
   851d2:	e723      	b.n	8501c <_svfprintf_r+0xf3c>
   851d4:	4630      	mov	r0, r6
   851d6:	950a      	str	r5, [sp, #40]	; 0x28
   851d8:	f7fe fe70 	bl	83ebc <strlen>
   851dc:	940f      	str	r4, [sp, #60]	; 0x3c
   851de:	900e      	str	r0, [sp, #56]	; 0x38
   851e0:	f8cd b01c 	str.w	fp, [sp, #28]
   851e4:	4603      	mov	r3, r0
   851e6:	f7ff b9eb 	b.w	845c0 <_svfprintf_r+0x4e0>
   851ea:	272d      	movs	r7, #45	; 0x2d
   851ec:	2300      	movs	r3, #0
   851ee:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   851f2:	930a      	str	r3, [sp, #40]	; 0x28
   851f4:	f7ff b899 	b.w	8432a <_svfprintf_r+0x24a>
   851f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   851fa:	461a      	mov	r2, r3
   851fc:	9312      	str	r3, [sp, #72]	; 0x48
   851fe:	3303      	adds	r3, #3
   85200:	db04      	blt.n	8520c <_svfprintf_r+0x112c>
   85202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85204:	4619      	mov	r1, r3
   85206:	4291      	cmp	r1, r2
   85208:	f6bf af5e 	bge.w	850c8 <_svfprintf_r+0xfe8>
   8520c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8520e:	3b02      	subs	r3, #2
   85210:	9311      	str	r3, [sp, #68]	; 0x44
   85212:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85214:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   85218:	3b01      	subs	r3, #1
   8521a:	2b00      	cmp	r3, #0
   8521c:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   85220:	bfb4      	ite	lt
   85222:	222d      	movlt	r2, #45	; 0x2d
   85224:	222b      	movge	r2, #43	; 0x2b
   85226:	931f      	str	r3, [sp, #124]	; 0x7c
   85228:	bfb8      	it	lt
   8522a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   8522c:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   85230:	bfb8      	it	lt
   85232:	f1c3 0301 	rsblt	r3, r3, #1
   85236:	2b09      	cmp	r3, #9
   85238:	f340 811f 	ble.w	8547a <_svfprintf_r+0x139a>
   8523c:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   85240:	4601      	mov	r1, r0
   85242:	4c68      	ldr	r4, [pc, #416]	; (853e4 <_svfprintf_r+0x1304>)
   85244:	e000      	b.n	85248 <_svfprintf_r+0x1168>
   85246:	4611      	mov	r1, r2
   85248:	fb84 5203 	smull	r5, r2, r4, r3
   8524c:	17dd      	asrs	r5, r3, #31
   8524e:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   85252:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   85256:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   8525a:	3230      	adds	r2, #48	; 0x30
   8525c:	2d09      	cmp	r5, #9
   8525e:	f801 2c01 	strb.w	r2, [r1, #-1]
   85262:	462b      	mov	r3, r5
   85264:	f101 32ff 	add.w	r2, r1, #4294967295
   85268:	dced      	bgt.n	85246 <_svfprintf_r+0x1166>
   8526a:	3330      	adds	r3, #48	; 0x30
   8526c:	3902      	subs	r1, #2
   8526e:	b2dc      	uxtb	r4, r3
   85270:	4288      	cmp	r0, r1
   85272:	f802 4c01 	strb.w	r4, [r2, #-1]
   85276:	f240 8191 	bls.w	8559c <_svfprintf_r+0x14bc>
   8527a:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   8527e:	4613      	mov	r3, r2
   85280:	e001      	b.n	85286 <_svfprintf_r+0x11a6>
   85282:	f813 4b01 	ldrb.w	r4, [r3], #1
   85286:	4283      	cmp	r3, r0
   85288:	f801 4b01 	strb.w	r4, [r1], #1
   8528c:	d1f9      	bne.n	85282 <_svfprintf_r+0x11a2>
   8528e:	3301      	adds	r3, #1
   85290:	1a9b      	subs	r3, r3, r2
   85292:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   85296:	4413      	add	r3, r2
   85298:	aa21      	add	r2, sp, #132	; 0x84
   8529a:	1a9b      	subs	r3, r3, r2
   8529c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8529e:	931b      	str	r3, [sp, #108]	; 0x6c
   852a0:	2a01      	cmp	r2, #1
   852a2:	4413      	add	r3, r2
   852a4:	930e      	str	r3, [sp, #56]	; 0x38
   852a6:	f340 8147 	ble.w	85538 <_svfprintf_r+0x1458>
   852aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   852ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
   852ae:	4413      	add	r3, r2
   852b0:	930e      	str	r3, [sp, #56]	; 0x38
   852b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   852b6:	9308      	str	r3, [sp, #32]
   852b8:	2300      	movs	r3, #0
   852ba:	9312      	str	r3, [sp, #72]	; 0x48
   852bc:	e714      	b.n	850e8 <_svfprintf_r+0x1008>
   852be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   852c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   852c2:	f7ff b87a 	b.w	843ba <_svfprintf_r+0x2da>
   852c6:	aa25      	add	r2, sp, #148	; 0x94
   852c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   852ca:	980c      	ldr	r0, [sp, #48]	; 0x30
   852cc:	f001 fffc 	bl	872c8 <__ssprint_r>
   852d0:	2800      	cmp	r0, #0
   852d2:	f47e afe2 	bne.w	8429a <_svfprintf_r+0x1ba>
   852d6:	46c8      	mov	r8, r9
   852d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   852da:	e4fb      	b.n	84cd4 <_svfprintf_r+0xbf4>
   852dc:	4623      	mov	r3, r4
   852de:	e6e3      	b.n	850a8 <_svfprintf_r+0xfc8>
   852e0:	aa25      	add	r2, sp, #148	; 0x94
   852e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   852e4:	980c      	ldr	r0, [sp, #48]	; 0x30
   852e6:	f001 ffef 	bl	872c8 <__ssprint_r>
   852ea:	2800      	cmp	r0, #0
   852ec:	f47e afd5 	bne.w	8429a <_svfprintf_r+0x1ba>
   852f0:	46c8      	mov	r8, r9
   852f2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   852f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   852f6:	e5d3      	b.n	84ea0 <_svfprintf_r+0xdc0>
   852f8:	aa25      	add	r2, sp, #148	; 0x94
   852fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   852fc:	980c      	ldr	r0, [sp, #48]	; 0x30
   852fe:	f001 ffe3 	bl	872c8 <__ssprint_r>
   85302:	2800      	cmp	r0, #0
   85304:	f47e afc9 	bne.w	8429a <_svfprintf_r+0x1ba>
   85308:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8530a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8530c:	46c8      	mov	r8, r9
   8530e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85310:	1a9a      	subs	r2, r3, r2
   85312:	e5dd      	b.n	84ed0 <_svfprintf_r+0xdf0>
   85314:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85316:	f7ff b902 	b.w	8451e <_svfprintf_r+0x43e>
   8531a:	aa25      	add	r2, sp, #148	; 0x94
   8531c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8531e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85320:	f001 ffd2 	bl	872c8 <__ssprint_r>
   85324:	2800      	cmp	r0, #0
   85326:	f47e afb8 	bne.w	8429a <_svfprintf_r+0x1ba>
   8532a:	46c8      	mov	r8, r9
   8532c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8532e:	e5b0      	b.n	84e92 <_svfprintf_r+0xdb2>
   85330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85332:	4637      	mov	r7, r6
   85334:	2b06      	cmp	r3, #6
   85336:	bf28      	it	cs
   85338:	2306      	movcs	r3, #6
   8533a:	960a      	str	r6, [sp, #40]	; 0x28
   8533c:	9612      	str	r6, [sp, #72]	; 0x48
   8533e:	9308      	str	r3, [sp, #32]
   85340:	940f      	str	r4, [sp, #60]	; 0x3c
   85342:	f8cd b01c 	str.w	fp, [sp, #28]
   85346:	930e      	str	r3, [sp, #56]	; 0x38
   85348:	4e27      	ldr	r6, [pc, #156]	; (853e8 <_svfprintf_r+0x1308>)
   8534a:	f7fe bfed 	b.w	84328 <_svfprintf_r+0x248>
   8534e:	2306      	movs	r3, #6
   85350:	930a      	str	r3, [sp, #40]	; 0x28
   85352:	e663      	b.n	8501c <_svfprintf_r+0xf3c>
   85354:	232d      	movs	r3, #45	; 0x2d
   85356:	461f      	mov	r7, r3
   85358:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8535c:	f7ff ba2b 	b.w	847b6 <_svfprintf_r+0x6d6>
   85360:	2003      	movs	r0, #3
   85362:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85364:	a923      	add	r1, sp, #140	; 0x8c
   85366:	e88d 0011 	stmia.w	sp, {r0, r4}
   8536a:	9104      	str	r1, [sp, #16]
   8536c:	a820      	add	r0, sp, #128	; 0x80
   8536e:	a91f      	add	r1, sp, #124	; 0x7c
   85370:	9003      	str	r0, [sp, #12]
   85372:	9a08      	ldr	r2, [sp, #32]
   85374:	463b      	mov	r3, r7
   85376:	9102      	str	r1, [sp, #8]
   85378:	980c      	ldr	r0, [sp, #48]	; 0x30
   8537a:	f000 f9d1 	bl	85720 <_dtoa_r>
   8537e:	4625      	mov	r5, r4
   85380:	4606      	mov	r6, r0
   85382:	1904      	adds	r4, r0, r4
   85384:	e719      	b.n	851ba <_svfprintf_r+0x10da>
   85386:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85388:	4d15      	ldr	r5, [pc, #84]	; (853e0 <_svfprintf_r+0x1300>)
   8538a:	f7ff bb7f 	b.w	84a8c <_svfprintf_r+0x9ac>
   8538e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85390:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85392:	4413      	add	r3, r2
   85394:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85396:	930e      	str	r3, [sp, #56]	; 0x38
   85398:	2a00      	cmp	r2, #0
   8539a:	f340 80c6 	ble.w	8552a <_svfprintf_r+0x144a>
   8539e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   853a2:	9308      	str	r3, [sp, #32]
   853a4:	2367      	movs	r3, #103	; 0x67
   853a6:	9311      	str	r3, [sp, #68]	; 0x44
   853a8:	e69e      	b.n	850e8 <_svfprintf_r+0x1008>
   853aa:	2b00      	cmp	r3, #0
   853ac:	f340 80e0 	ble.w	85570 <_svfprintf_r+0x1490>
   853b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   853b2:	2a00      	cmp	r2, #0
   853b4:	f040 80af 	bne.w	85516 <_svfprintf_r+0x1436>
   853b8:	f01b 0f01 	tst.w	fp, #1
   853bc:	f040 80ab 	bne.w	85516 <_svfprintf_r+0x1436>
   853c0:	9308      	str	r3, [sp, #32]
   853c2:	930e      	str	r3, [sp, #56]	; 0x38
   853c4:	e690      	b.n	850e8 <_svfprintf_r+0x1008>
   853c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   853c8:	940f      	str	r4, [sp, #60]	; 0x3c
   853ca:	9308      	str	r3, [sp, #32]
   853cc:	930e      	str	r3, [sp, #56]	; 0x38
   853ce:	900a      	str	r0, [sp, #40]	; 0x28
   853d0:	f8cd b01c 	str.w	fp, [sp, #28]
   853d4:	9012      	str	r0, [sp, #72]	; 0x48
   853d6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   853da:	f7fe bfa5 	b.w	84328 <_svfprintf_r+0x248>
   853de:	bf00      	nop
   853e0:	000897f8 	.word	0x000897f8
   853e4:	66666667 	.word	0x66666667
   853e8:	000897dc 	.word	0x000897dc
   853ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   853ee:	2b47      	cmp	r3, #71	; 0x47
   853f0:	f47f ae46 	bne.w	85080 <_svfprintf_r+0xfa0>
   853f4:	f01b 0f01 	tst.w	fp, #1
   853f8:	f47f aeda 	bne.w	851b0 <_svfprintf_r+0x10d0>
   853fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   853fe:	1b9b      	subs	r3, r3, r6
   85400:	9313      	str	r3, [sp, #76]	; 0x4c
   85402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85404:	2b47      	cmp	r3, #71	; 0x47
   85406:	f43f aef7 	beq.w	851f8 <_svfprintf_r+0x1118>
   8540a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8540c:	9312      	str	r3, [sp, #72]	; 0x48
   8540e:	e700      	b.n	85212 <_svfprintf_r+0x1132>
   85410:	2000      	movs	r0, #0
   85412:	900a      	str	r0, [sp, #40]	; 0x28
   85414:	f7fe bec0 	b.w	84198 <_svfprintf_r+0xb8>
   85418:	424f      	negs	r7, r1
   8541a:	3110      	adds	r1, #16
   8541c:	da35      	bge.n	8548a <_svfprintf_r+0x13aa>
   8541e:	2410      	movs	r4, #16
   85420:	4d6a      	ldr	r5, [pc, #424]	; (855cc <_svfprintf_r+0x14ec>)
   85422:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   85426:	e004      	b.n	85432 <_svfprintf_r+0x1352>
   85428:	f108 0808 	add.w	r8, r8, #8
   8542c:	3f10      	subs	r7, #16
   8542e:	2f10      	cmp	r7, #16
   85430:	dd2c      	ble.n	8548c <_svfprintf_r+0x13ac>
   85432:	3301      	adds	r3, #1
   85434:	3210      	adds	r2, #16
   85436:	2b07      	cmp	r3, #7
   85438:	9227      	str	r2, [sp, #156]	; 0x9c
   8543a:	9326      	str	r3, [sp, #152]	; 0x98
   8543c:	f8c8 5000 	str.w	r5, [r8]
   85440:	f8c8 4004 	str.w	r4, [r8, #4]
   85444:	ddf0      	ble.n	85428 <_svfprintf_r+0x1348>
   85446:	aa25      	add	r2, sp, #148	; 0x94
   85448:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8544a:	4658      	mov	r0, fp
   8544c:	f001 ff3c 	bl	872c8 <__ssprint_r>
   85450:	2800      	cmp	r0, #0
   85452:	f47e af22 	bne.w	8429a <_svfprintf_r+0x1ba>
   85456:	46c8      	mov	r8, r9
   85458:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8545a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8545c:	e7e6      	b.n	8542c <_svfprintf_r+0x134c>
   8545e:	aa25      	add	r2, sp, #148	; 0x94
   85460:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85462:	980c      	ldr	r0, [sp, #48]	; 0x30
   85464:	f001 ff30 	bl	872c8 <__ssprint_r>
   85468:	2800      	cmp	r0, #0
   8546a:	f47e af16 	bne.w	8429a <_svfprintf_r+0x1ba>
   8546e:	46c8      	mov	r8, r9
   85470:	991f      	ldr	r1, [sp, #124]	; 0x7c
   85472:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85474:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85476:	f7ff bbc3 	b.w	84c00 <_svfprintf_r+0xb20>
   8547a:	2230      	movs	r2, #48	; 0x30
   8547c:	4413      	add	r3, r2
   8547e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   85482:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   85486:	ab22      	add	r3, sp, #136	; 0x88
   85488:	e706      	b.n	85298 <_svfprintf_r+0x11b8>
   8548a:	4d50      	ldr	r5, [pc, #320]	; (855cc <_svfprintf_r+0x14ec>)
   8548c:	3301      	adds	r3, #1
   8548e:	443a      	add	r2, r7
   85490:	2b07      	cmp	r3, #7
   85492:	e888 00a0 	stmia.w	r8, {r5, r7}
   85496:	9227      	str	r2, [sp, #156]	; 0x9c
   85498:	9326      	str	r3, [sp, #152]	; 0x98
   8549a:	f108 0808 	add.w	r8, r8, #8
   8549e:	f77f abb2 	ble.w	84c06 <_svfprintf_r+0xb26>
   854a2:	aa25      	add	r2, sp, #148	; 0x94
   854a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   854a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   854a8:	f001 ff0e 	bl	872c8 <__ssprint_r>
   854ac:	2800      	cmp	r0, #0
   854ae:	f47e aef4 	bne.w	8429a <_svfprintf_r+0x1ba>
   854b2:	46c8      	mov	r8, r9
   854b4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   854b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   854b8:	f7ff bba5 	b.w	84c06 <_svfprintf_r+0xb26>
   854bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   854be:	9a19      	ldr	r2, [sp, #100]	; 0x64
   854c0:	4413      	add	r3, r2
   854c2:	930e      	str	r3, [sp, #56]	; 0x38
   854c4:	e76b      	b.n	8539e <_svfprintf_r+0x12be>
   854c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   854c8:	e5ee      	b.n	850a8 <_svfprintf_r+0xfc8>
   854ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   854cc:	4d3f      	ldr	r5, [pc, #252]	; (855cc <_svfprintf_r+0x14ec>)
   854ce:	e4bb      	b.n	84e48 <_svfprintf_r+0xd68>
   854d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   854d2:	9808      	ldr	r0, [sp, #32]
   854d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   854d6:	4639      	mov	r1, r7
   854d8:	f002 ff76 	bl	883c8 <__aeabi_dcmpeq>
   854dc:	2800      	cmp	r0, #0
   854de:	f47f ae70 	bne.w	851c2 <_svfprintf_r+0x10e2>
   854e2:	f1c5 0501 	rsb	r5, r5, #1
   854e6:	951f      	str	r5, [sp, #124]	; 0x7c
   854e8:	442c      	add	r4, r5
   854ea:	e5ca      	b.n	85082 <_svfprintf_r+0xfa2>
   854ec:	2303      	movs	r3, #3
   854ee:	461a      	mov	r2, r3
   854f0:	9308      	str	r3, [sp, #32]
   854f2:	2300      	movs	r3, #0
   854f4:	4619      	mov	r1, r3
   854f6:	930a      	str	r3, [sp, #40]	; 0x28
   854f8:	4e35      	ldr	r6, [pc, #212]	; (855d0 <_svfprintf_r+0x14f0>)
   854fa:	4b36      	ldr	r3, [pc, #216]	; (855d4 <_svfprintf_r+0x14f4>)
   854fc:	920e      	str	r2, [sp, #56]	; 0x38
   854fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85500:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   85504:	9007      	str	r0, [sp, #28]
   85506:	9112      	str	r1, [sp, #72]	; 0x48
   85508:	2a47      	cmp	r2, #71	; 0x47
   8550a:	bfd8      	it	le
   8550c:	461e      	movle	r6, r3
   8550e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85512:	f7fe bf09 	b.w	84328 <_svfprintf_r+0x248>
   85516:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85518:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8551a:	4413      	add	r3, r2
   8551c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8551e:	441a      	add	r2, r3
   85520:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   85524:	920e      	str	r2, [sp, #56]	; 0x38
   85526:	9308      	str	r3, [sp, #32]
   85528:	e5de      	b.n	850e8 <_svfprintf_r+0x1008>
   8552a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8552c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8552e:	f1c3 0301 	rsb	r3, r3, #1
   85532:	441a      	add	r2, r3
   85534:	4613      	mov	r3, r2
   85536:	e7c4      	b.n	854c2 <_svfprintf_r+0x13e2>
   85538:	f01b 0301 	ands.w	r3, fp, #1
   8553c:	9312      	str	r3, [sp, #72]	; 0x48
   8553e:	f47f aeb4 	bne.w	852aa <_svfprintf_r+0x11ca>
   85542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85544:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85548:	9308      	str	r3, [sp, #32]
   8554a:	e5cd      	b.n	850e8 <_svfprintf_r+0x1008>
   8554c:	4d1f      	ldr	r5, [pc, #124]	; (855cc <_svfprintf_r+0x14ec>)
   8554e:	e43d      	b.n	84dcc <_svfprintf_r+0xcec>
   85550:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85552:	4d1e      	ldr	r5, [pc, #120]	; (855cc <_svfprintf_r+0x14ec>)
   85554:	e492      	b.n	84e7c <_svfprintf_r+0xd9c>
   85556:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   85558:	f89a 3001 	ldrb.w	r3, [sl, #1]
   8555c:	6828      	ldr	r0, [r5, #0]
   8555e:	46a2      	mov	sl, r4
   85560:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   85564:	900a      	str	r0, [sp, #40]	; 0x28
   85566:	4628      	mov	r0, r5
   85568:	3004      	adds	r0, #4
   8556a:	900f      	str	r0, [sp, #60]	; 0x3c
   8556c:	f7fe be12 	b.w	84194 <_svfprintf_r+0xb4>
   85570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85572:	b913      	cbnz	r3, 8557a <_svfprintf_r+0x149a>
   85574:	f01b 0f01 	tst.w	fp, #1
   85578:	d002      	beq.n	85580 <_svfprintf_r+0x14a0>
   8557a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8557c:	3301      	adds	r3, #1
   8557e:	e7cd      	b.n	8551c <_svfprintf_r+0x143c>
   85580:	2301      	movs	r3, #1
   85582:	e71d      	b.n	853c0 <_svfprintf_r+0x12e0>
   85584:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85588:	f7ff b984 	b.w	84894 <_svfprintf_r+0x7b4>
   8558c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85590:	f7ff b93e 	b.w	84810 <_svfprintf_r+0x730>
   85594:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85598:	f7ff b854 	b.w	84644 <_svfprintf_r+0x564>
   8559c:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   855a0:	e67a      	b.n	85298 <_svfprintf_r+0x11b8>
   855a2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   855a6:	f7ff b9b6 	b.w	84916 <_svfprintf_r+0x836>
   855aa:	f04f 32ff 	mov.w	r2, #4294967295
   855ae:	230c      	movs	r3, #12
   855b0:	9209      	str	r2, [sp, #36]	; 0x24
   855b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   855b4:	6013      	str	r3, [r2, #0]
   855b6:	f7fe be79 	b.w	842ac <_svfprintf_r+0x1cc>
   855ba:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   855be:	f7ff b8c9 	b.w	84754 <_svfprintf_r+0x674>
   855c2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   855c6:	f7ff b87d 	b.w	846c4 <_svfprintf_r+0x5e4>
   855ca:	bf00      	nop
   855cc:	000897f8 	.word	0x000897f8
   855d0:	000897b0 	.word	0x000897b0
   855d4:	000897ac 	.word	0x000897ac

000855d8 <register_fini>:
   855d8:	4b02      	ldr	r3, [pc, #8]	; (855e4 <register_fini+0xc>)
   855da:	b113      	cbz	r3, 855e2 <register_fini+0xa>
   855dc:	4802      	ldr	r0, [pc, #8]	; (855e8 <register_fini+0x10>)
   855de:	f000 b805 	b.w	855ec <atexit>
   855e2:	4770      	bx	lr
   855e4:	00000000 	.word	0x00000000
   855e8:	00086565 	.word	0x00086565

000855ec <atexit>:
   855ec:	2300      	movs	r3, #0
   855ee:	4601      	mov	r1, r0
   855f0:	461a      	mov	r2, r3
   855f2:	4618      	mov	r0, r3
   855f4:	f001 bef2 	b.w	873dc <__register_exitproc>

000855f8 <quorem>:
   855f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   855fc:	6903      	ldr	r3, [r0, #16]
   855fe:	690f      	ldr	r7, [r1, #16]
   85600:	b083      	sub	sp, #12
   85602:	429f      	cmp	r7, r3
   85604:	f300 8088 	bgt.w	85718 <quorem+0x120>
   85608:	3f01      	subs	r7, #1
   8560a:	f101 0614 	add.w	r6, r1, #20
   8560e:	f100 0a14 	add.w	sl, r0, #20
   85612:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   85616:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8561a:	3301      	adds	r3, #1
   8561c:	fbb2 f8f3 	udiv	r8, r2, r3
   85620:	00bb      	lsls	r3, r7, #2
   85622:	9300      	str	r3, [sp, #0]
   85624:	eb06 0903 	add.w	r9, r6, r3
   85628:	4453      	add	r3, sl
   8562a:	9301      	str	r3, [sp, #4]
   8562c:	f1b8 0f00 	cmp.w	r8, #0
   85630:	d03b      	beq.n	856aa <quorem+0xb2>
   85632:	2300      	movs	r3, #0
   85634:	46b4      	mov	ip, r6
   85636:	461c      	mov	r4, r3
   85638:	46d6      	mov	lr, sl
   8563a:	f85c 2b04 	ldr.w	r2, [ip], #4
   8563e:	f8de 5000 	ldr.w	r5, [lr]
   85642:	fa1f fb82 	uxth.w	fp, r2
   85646:	fb08 330b 	mla	r3, r8, fp, r3
   8564a:	0c12      	lsrs	r2, r2, #16
   8564c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   85650:	fb08 bb02 	mla	fp, r8, r2, fp
   85654:	b29a      	uxth	r2, r3
   85656:	1aa2      	subs	r2, r4, r2
   85658:	b2ab      	uxth	r3, r5
   8565a:	fa1f f48b 	uxth.w	r4, fp
   8565e:	441a      	add	r2, r3
   85660:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   85664:	eb04 4422 	add.w	r4, r4, r2, asr #16
   85668:	b292      	uxth	r2, r2
   8566a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   8566e:	45e1      	cmp	r9, ip
   85670:	f84e 2b04 	str.w	r2, [lr], #4
   85674:	ea4f 4424 	mov.w	r4, r4, asr #16
   85678:	ea4f 431b 	mov.w	r3, fp, lsr #16
   8567c:	d2dd      	bcs.n	8563a <quorem+0x42>
   8567e:	9b00      	ldr	r3, [sp, #0]
   85680:	f85a 3003 	ldr.w	r3, [sl, r3]
   85684:	b98b      	cbnz	r3, 856aa <quorem+0xb2>
   85686:	9c01      	ldr	r4, [sp, #4]
   85688:	1f23      	subs	r3, r4, #4
   8568a:	459a      	cmp	sl, r3
   8568c:	d20c      	bcs.n	856a8 <quorem+0xb0>
   8568e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85692:	b94b      	cbnz	r3, 856a8 <quorem+0xb0>
   85694:	f1a4 0308 	sub.w	r3, r4, #8
   85698:	e002      	b.n	856a0 <quorem+0xa8>
   8569a:	681a      	ldr	r2, [r3, #0]
   8569c:	3b04      	subs	r3, #4
   8569e:	b91a      	cbnz	r2, 856a8 <quorem+0xb0>
   856a0:	459a      	cmp	sl, r3
   856a2:	f107 37ff 	add.w	r7, r7, #4294967295
   856a6:	d3f8      	bcc.n	8569a <quorem+0xa2>
   856a8:	6107      	str	r7, [r0, #16]
   856aa:	4604      	mov	r4, r0
   856ac:	f001 fcfc 	bl	870a8 <__mcmp>
   856b0:	2800      	cmp	r0, #0
   856b2:	db2d      	blt.n	85710 <quorem+0x118>
   856b4:	4655      	mov	r5, sl
   856b6:	2300      	movs	r3, #0
   856b8:	f108 0801 	add.w	r8, r8, #1
   856bc:	f856 1b04 	ldr.w	r1, [r6], #4
   856c0:	6828      	ldr	r0, [r5, #0]
   856c2:	b28a      	uxth	r2, r1
   856c4:	1a9a      	subs	r2, r3, r2
   856c6:	0c0b      	lsrs	r3, r1, #16
   856c8:	b281      	uxth	r1, r0
   856ca:	440a      	add	r2, r1
   856cc:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   856d0:	eb03 4322 	add.w	r3, r3, r2, asr #16
   856d4:	b292      	uxth	r2, r2
   856d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   856da:	45b1      	cmp	r9, r6
   856dc:	f845 2b04 	str.w	r2, [r5], #4
   856e0:	ea4f 4323 	mov.w	r3, r3, asr #16
   856e4:	d2ea      	bcs.n	856bc <quorem+0xc4>
   856e6:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   856ea:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   856ee:	b97a      	cbnz	r2, 85710 <quorem+0x118>
   856f0:	1f1a      	subs	r2, r3, #4
   856f2:	4592      	cmp	sl, r2
   856f4:	d20b      	bcs.n	8570e <quorem+0x116>
   856f6:	f853 2c04 	ldr.w	r2, [r3, #-4]
   856fa:	b942      	cbnz	r2, 8570e <quorem+0x116>
   856fc:	3b08      	subs	r3, #8
   856fe:	e002      	b.n	85706 <quorem+0x10e>
   85700:	681a      	ldr	r2, [r3, #0]
   85702:	3b04      	subs	r3, #4
   85704:	b91a      	cbnz	r2, 8570e <quorem+0x116>
   85706:	459a      	cmp	sl, r3
   85708:	f107 37ff 	add.w	r7, r7, #4294967295
   8570c:	d3f8      	bcc.n	85700 <quorem+0x108>
   8570e:	6127      	str	r7, [r4, #16]
   85710:	4640      	mov	r0, r8
   85712:	b003      	add	sp, #12
   85714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85718:	2000      	movs	r0, #0
   8571a:	b003      	add	sp, #12
   8571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085720 <_dtoa_r>:
   85720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85724:	6c05      	ldr	r5, [r0, #64]	; 0x40
   85726:	b09b      	sub	sp, #108	; 0x6c
   85728:	4604      	mov	r4, r0
   8572a:	4692      	mov	sl, r2
   8572c:	469b      	mov	fp, r3
   8572e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   85730:	b14d      	cbz	r5, 85746 <_dtoa_r+0x26>
   85732:	2301      	movs	r3, #1
   85734:	6c42      	ldr	r2, [r0, #68]	; 0x44
   85736:	4629      	mov	r1, r5
   85738:	4093      	lsls	r3, r2
   8573a:	60ab      	str	r3, [r5, #8]
   8573c:	606a      	str	r2, [r5, #4]
   8573e:	f001 fadb 	bl	86cf8 <_Bfree>
   85742:	2300      	movs	r3, #0
   85744:	6423      	str	r3, [r4, #64]	; 0x40
   85746:	f1bb 0f00 	cmp.w	fp, #0
   8574a:	465d      	mov	r5, fp
   8574c:	db35      	blt.n	857ba <_dtoa_r+0x9a>
   8574e:	2300      	movs	r3, #0
   85750:	6033      	str	r3, [r6, #0]
   85752:	4b9d      	ldr	r3, [pc, #628]	; (859c8 <_dtoa_r+0x2a8>)
   85754:	43ab      	bics	r3, r5
   85756:	d015      	beq.n	85784 <_dtoa_r+0x64>
   85758:	2200      	movs	r2, #0
   8575a:	2300      	movs	r3, #0
   8575c:	4650      	mov	r0, sl
   8575e:	4659      	mov	r1, fp
   85760:	f002 fe32 	bl	883c8 <__aeabi_dcmpeq>
   85764:	4680      	mov	r8, r0
   85766:	2800      	cmp	r0, #0
   85768:	d02d      	beq.n	857c6 <_dtoa_r+0xa6>
   8576a:	2301      	movs	r3, #1
   8576c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8576e:	6013      	str	r3, [r2, #0]
   85770:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85772:	2b00      	cmp	r3, #0
   85774:	f000 80bd 	beq.w	858f2 <_dtoa_r+0x1d2>
   85778:	4894      	ldr	r0, [pc, #592]	; (859cc <_dtoa_r+0x2ac>)
   8577a:	6018      	str	r0, [r3, #0]
   8577c:	3801      	subs	r0, #1
   8577e:	b01b      	add	sp, #108	; 0x6c
   85780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85784:	f242 730f 	movw	r3, #9999	; 0x270f
   85788:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8578a:	6013      	str	r3, [r2, #0]
   8578c:	f1ba 0f00 	cmp.w	sl, #0
   85790:	d10d      	bne.n	857ae <_dtoa_r+0x8e>
   85792:	f3c5 0513 	ubfx	r5, r5, #0, #20
   85796:	b955      	cbnz	r5, 857ae <_dtoa_r+0x8e>
   85798:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8579a:	488d      	ldr	r0, [pc, #564]	; (859d0 <_dtoa_r+0x2b0>)
   8579c:	2b00      	cmp	r3, #0
   8579e:	d0ee      	beq.n	8577e <_dtoa_r+0x5e>
   857a0:	f100 0308 	add.w	r3, r0, #8
   857a4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   857a6:	6013      	str	r3, [r2, #0]
   857a8:	b01b      	add	sp, #108	; 0x6c
   857aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   857ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   857b0:	4888      	ldr	r0, [pc, #544]	; (859d4 <_dtoa_r+0x2b4>)
   857b2:	2b00      	cmp	r3, #0
   857b4:	d0e3      	beq.n	8577e <_dtoa_r+0x5e>
   857b6:	1cc3      	adds	r3, r0, #3
   857b8:	e7f4      	b.n	857a4 <_dtoa_r+0x84>
   857ba:	2301      	movs	r3, #1
   857bc:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   857c0:	6033      	str	r3, [r6, #0]
   857c2:	46ab      	mov	fp, r5
   857c4:	e7c5      	b.n	85752 <_dtoa_r+0x32>
   857c6:	aa18      	add	r2, sp, #96	; 0x60
   857c8:	ab19      	add	r3, sp, #100	; 0x64
   857ca:	9201      	str	r2, [sp, #4]
   857cc:	9300      	str	r3, [sp, #0]
   857ce:	4652      	mov	r2, sl
   857d0:	465b      	mov	r3, fp
   857d2:	4620      	mov	r0, r4
   857d4:	f001 fd12 	bl	871fc <__d2b>
   857d8:	0d2b      	lsrs	r3, r5, #20
   857da:	4681      	mov	r9, r0
   857dc:	d071      	beq.n	858c2 <_dtoa_r+0x1a2>
   857de:	4650      	mov	r0, sl
   857e0:	f3cb 0213 	ubfx	r2, fp, #0, #20
   857e4:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   857e8:	9f18      	ldr	r7, [sp, #96]	; 0x60
   857ea:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   857ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   857f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   857f6:	2200      	movs	r2, #0
   857f8:	4b77      	ldr	r3, [pc, #476]	; (859d8 <_dtoa_r+0x2b8>)
   857fa:	f002 f9c9 	bl	87b90 <__aeabi_dsub>
   857fe:	a36c      	add	r3, pc, #432	; (adr r3, 859b0 <_dtoa_r+0x290>)
   85800:	e9d3 2300 	ldrd	r2, r3, [r3]
   85804:	f002 fb78 	bl	87ef8 <__aeabi_dmul>
   85808:	a36b      	add	r3, pc, #428	; (adr r3, 859b8 <_dtoa_r+0x298>)
   8580a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8580e:	f002 f9c1 	bl	87b94 <__adddf3>
   85812:	e9cd 0102 	strd	r0, r1, [sp, #8]
   85816:	4630      	mov	r0, r6
   85818:	f002 fb08 	bl	87e2c <__aeabi_i2d>
   8581c:	a368      	add	r3, pc, #416	; (adr r3, 859c0 <_dtoa_r+0x2a0>)
   8581e:	e9d3 2300 	ldrd	r2, r3, [r3]
   85822:	f002 fb69 	bl	87ef8 <__aeabi_dmul>
   85826:	4602      	mov	r2, r0
   85828:	460b      	mov	r3, r1
   8582a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8582e:	f002 f9b1 	bl	87b94 <__adddf3>
   85832:	e9cd 0104 	strd	r0, r1, [sp, #16]
   85836:	f002 fe0f 	bl	88458 <__aeabi_d2iz>
   8583a:	2200      	movs	r2, #0
   8583c:	9002      	str	r0, [sp, #8]
   8583e:	2300      	movs	r3, #0
   85840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   85844:	f002 fdca 	bl	883dc <__aeabi_dcmplt>
   85848:	2800      	cmp	r0, #0
   8584a:	f040 816d 	bne.w	85b28 <_dtoa_r+0x408>
   8584e:	9d02      	ldr	r5, [sp, #8]
   85850:	2d16      	cmp	r5, #22
   85852:	f200 8157 	bhi.w	85b04 <_dtoa_r+0x3e4>
   85856:	4961      	ldr	r1, [pc, #388]	; (859dc <_dtoa_r+0x2bc>)
   85858:	4652      	mov	r2, sl
   8585a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   8585e:	465b      	mov	r3, fp
   85860:	e9d1 0100 	ldrd	r0, r1, [r1]
   85864:	f002 fdd8 	bl	88418 <__aeabi_dcmpgt>
   85868:	2800      	cmp	r0, #0
   8586a:	f000 81be 	beq.w	85bea <_dtoa_r+0x4ca>
   8586e:	1e6b      	subs	r3, r5, #1
   85870:	9302      	str	r3, [sp, #8]
   85872:	2300      	movs	r3, #0
   85874:	930e      	str	r3, [sp, #56]	; 0x38
   85876:	1bbf      	subs	r7, r7, r6
   85878:	1e7b      	subs	r3, r7, #1
   8587a:	9308      	str	r3, [sp, #32]
   8587c:	f100 814e 	bmi.w	85b1c <_dtoa_r+0x3fc>
   85880:	2300      	movs	r3, #0
   85882:	930a      	str	r3, [sp, #40]	; 0x28
   85884:	9b02      	ldr	r3, [sp, #8]
   85886:	2b00      	cmp	r3, #0
   85888:	f2c0 813f 	blt.w	85b0a <_dtoa_r+0x3ea>
   8588c:	9a08      	ldr	r2, [sp, #32]
   8588e:	930d      	str	r3, [sp, #52]	; 0x34
   85890:	4611      	mov	r1, r2
   85892:	4419      	add	r1, r3
   85894:	2300      	movs	r3, #0
   85896:	9108      	str	r1, [sp, #32]
   85898:	930c      	str	r3, [sp, #48]	; 0x30
   8589a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8589c:	2b09      	cmp	r3, #9
   8589e:	d82a      	bhi.n	858f6 <_dtoa_r+0x1d6>
   858a0:	2b05      	cmp	r3, #5
   858a2:	f340 8658 	ble.w	86556 <_dtoa_r+0xe36>
   858a6:	2500      	movs	r5, #0
   858a8:	3b04      	subs	r3, #4
   858aa:	9324      	str	r3, [sp, #144]	; 0x90
   858ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   858ae:	3b02      	subs	r3, #2
   858b0:	2b03      	cmp	r3, #3
   858b2:	f200 863f 	bhi.w	86534 <_dtoa_r+0xe14>
   858b6:	e8df f013 	tbh	[pc, r3, lsl #1]
   858ba:	03ce      	.short	0x03ce
   858bc:	03d902c3 	.word	0x03d902c3
   858c0:	045b      	.short	0x045b
   858c2:	9f18      	ldr	r7, [sp, #96]	; 0x60
   858c4:	9e19      	ldr	r6, [sp, #100]	; 0x64
   858c6:	443e      	add	r6, r7
   858c8:	f206 4332 	addw	r3, r6, #1074	; 0x432
   858cc:	2b20      	cmp	r3, #32
   858ce:	f340 8187 	ble.w	85be0 <_dtoa_r+0x4c0>
   858d2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   858d6:	f206 4012 	addw	r0, r6, #1042	; 0x412
   858da:	409d      	lsls	r5, r3
   858dc:	fa2a f000 	lsr.w	r0, sl, r0
   858e0:	4328      	orrs	r0, r5
   858e2:	f002 fa93 	bl	87e0c <__aeabi_ui2d>
   858e6:	2301      	movs	r3, #1
   858e8:	3e01      	subs	r6, #1
   858ea:	9314      	str	r3, [sp, #80]	; 0x50
   858ec:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   858f0:	e781      	b.n	857f6 <_dtoa_r+0xd6>
   858f2:	483b      	ldr	r0, [pc, #236]	; (859e0 <_dtoa_r+0x2c0>)
   858f4:	e743      	b.n	8577e <_dtoa_r+0x5e>
   858f6:	2100      	movs	r1, #0
   858f8:	4620      	mov	r0, r4
   858fa:	6461      	str	r1, [r4, #68]	; 0x44
   858fc:	9125      	str	r1, [sp, #148]	; 0x94
   858fe:	f001 f9d5 	bl	86cac <_Balloc>
   85902:	f04f 33ff 	mov.w	r3, #4294967295
   85906:	9307      	str	r3, [sp, #28]
   85908:	930f      	str	r3, [sp, #60]	; 0x3c
   8590a:	2301      	movs	r3, #1
   8590c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   8590e:	9004      	str	r0, [sp, #16]
   85910:	6420      	str	r0, [r4, #64]	; 0x40
   85912:	9224      	str	r2, [sp, #144]	; 0x90
   85914:	930b      	str	r3, [sp, #44]	; 0x2c
   85916:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85918:	2b00      	cmp	r3, #0
   8591a:	f2c0 80d3 	blt.w	85ac4 <_dtoa_r+0x3a4>
   8591e:	9a02      	ldr	r2, [sp, #8]
   85920:	2a0e      	cmp	r2, #14
   85922:	f300 80cf 	bgt.w	85ac4 <_dtoa_r+0x3a4>
   85926:	4b2d      	ldr	r3, [pc, #180]	; (859dc <_dtoa_r+0x2bc>)
   85928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8592c:	e9d3 2300 	ldrd	r2, r3, [r3]
   85930:	e9cd 2308 	strd	r2, r3, [sp, #32]
   85934:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85936:	2b00      	cmp	r3, #0
   85938:	f2c0 83b4 	blt.w	860a4 <_dtoa_r+0x984>
   8593c:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   85940:	4650      	mov	r0, sl
   85942:	462a      	mov	r2, r5
   85944:	4633      	mov	r3, r6
   85946:	4659      	mov	r1, fp
   85948:	f002 fc00 	bl	8814c <__aeabi_ddiv>
   8594c:	f002 fd84 	bl	88458 <__aeabi_d2iz>
   85950:	4680      	mov	r8, r0
   85952:	f002 fa6b 	bl	87e2c <__aeabi_i2d>
   85956:	462a      	mov	r2, r5
   85958:	4633      	mov	r3, r6
   8595a:	f002 facd 	bl	87ef8 <__aeabi_dmul>
   8595e:	4602      	mov	r2, r0
   85960:	460b      	mov	r3, r1
   85962:	4650      	mov	r0, sl
   85964:	4659      	mov	r1, fp
   85966:	f002 f913 	bl	87b90 <__aeabi_dsub>
   8596a:	9e07      	ldr	r6, [sp, #28]
   8596c:	9f04      	ldr	r7, [sp, #16]
   8596e:	f108 0530 	add.w	r5, r8, #48	; 0x30
   85972:	2e01      	cmp	r6, #1
   85974:	703d      	strb	r5, [r7, #0]
   85976:	4602      	mov	r2, r0
   85978:	460b      	mov	r3, r1
   8597a:	f107 0501 	add.w	r5, r7, #1
   8597e:	d064      	beq.n	85a4a <_dtoa_r+0x32a>
   85980:	2200      	movs	r2, #0
   85982:	4b18      	ldr	r3, [pc, #96]	; (859e4 <_dtoa_r+0x2c4>)
   85984:	f002 fab8 	bl	87ef8 <__aeabi_dmul>
   85988:	2200      	movs	r2, #0
   8598a:	2300      	movs	r3, #0
   8598c:	4606      	mov	r6, r0
   8598e:	460f      	mov	r7, r1
   85990:	f002 fd1a 	bl	883c8 <__aeabi_dcmpeq>
   85994:	2800      	cmp	r0, #0
   85996:	f040 8082 	bne.w	85a9e <_dtoa_r+0x37e>
   8599a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8599e:	f04f 0a00 	mov.w	sl, #0
   859a2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   859a6:	f04f 0b00 	mov.w	fp, #0
   859aa:	940b      	str	r4, [sp, #44]	; 0x2c
   859ac:	e029      	b.n	85a02 <_dtoa_r+0x2e2>
   859ae:	bf00      	nop
   859b0:	636f4361 	.word	0x636f4361
   859b4:	3fd287a7 	.word	0x3fd287a7
   859b8:	8b60c8b3 	.word	0x8b60c8b3
   859bc:	3fc68a28 	.word	0x3fc68a28
   859c0:	509f79fb 	.word	0x509f79fb
   859c4:	3fd34413 	.word	0x3fd34413
   859c8:	7ff00000 	.word	0x7ff00000
   859cc:	000897e5 	.word	0x000897e5
   859d0:	00089808 	.word	0x00089808
   859d4:	00089814 	.word	0x00089814
   859d8:	3ff80000 	.word	0x3ff80000
   859dc:	00089850 	.word	0x00089850
   859e0:	000897e4 	.word	0x000897e4
   859e4:	40240000 	.word	0x40240000
   859e8:	2200      	movs	r2, #0
   859ea:	4b81      	ldr	r3, [pc, #516]	; (85bf0 <_dtoa_r+0x4d0>)
   859ec:	f002 fa84 	bl	87ef8 <__aeabi_dmul>
   859f0:	4652      	mov	r2, sl
   859f2:	465b      	mov	r3, fp
   859f4:	4606      	mov	r6, r0
   859f6:	460f      	mov	r7, r1
   859f8:	f002 fce6 	bl	883c8 <__aeabi_dcmpeq>
   859fc:	2800      	cmp	r0, #0
   859fe:	f040 83ba 	bne.w	86176 <_dtoa_r+0xa56>
   85a02:	4642      	mov	r2, r8
   85a04:	464b      	mov	r3, r9
   85a06:	4630      	mov	r0, r6
   85a08:	4639      	mov	r1, r7
   85a0a:	f002 fb9f 	bl	8814c <__aeabi_ddiv>
   85a0e:	f002 fd23 	bl	88458 <__aeabi_d2iz>
   85a12:	4604      	mov	r4, r0
   85a14:	f002 fa0a 	bl	87e2c <__aeabi_i2d>
   85a18:	4642      	mov	r2, r8
   85a1a:	464b      	mov	r3, r9
   85a1c:	f002 fa6c 	bl	87ef8 <__aeabi_dmul>
   85a20:	4602      	mov	r2, r0
   85a22:	460b      	mov	r3, r1
   85a24:	4630      	mov	r0, r6
   85a26:	4639      	mov	r1, r7
   85a28:	f002 f8b2 	bl	87b90 <__aeabi_dsub>
   85a2c:	f104 0630 	add.w	r6, r4, #48	; 0x30
   85a30:	f805 6b01 	strb.w	r6, [r5], #1
   85a34:	9e04      	ldr	r6, [sp, #16]
   85a36:	9f07      	ldr	r7, [sp, #28]
   85a38:	1bae      	subs	r6, r5, r6
   85a3a:	42be      	cmp	r6, r7
   85a3c:	4602      	mov	r2, r0
   85a3e:	460b      	mov	r3, r1
   85a40:	d1d2      	bne.n	859e8 <_dtoa_r+0x2c8>
   85a42:	46a0      	mov	r8, r4
   85a44:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85a48:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85a4a:	4610      	mov	r0, r2
   85a4c:	4619      	mov	r1, r3
   85a4e:	f002 f8a1 	bl	87b94 <__adddf3>
   85a52:	4606      	mov	r6, r0
   85a54:	460f      	mov	r7, r1
   85a56:	4602      	mov	r2, r0
   85a58:	460b      	mov	r3, r1
   85a5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85a5e:	f002 fcbd 	bl	883dc <__aeabi_dcmplt>
   85a62:	b948      	cbnz	r0, 85a78 <_dtoa_r+0x358>
   85a64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85a68:	4632      	mov	r2, r6
   85a6a:	463b      	mov	r3, r7
   85a6c:	f002 fcac 	bl	883c8 <__aeabi_dcmpeq>
   85a70:	b1a8      	cbz	r0, 85a9e <_dtoa_r+0x37e>
   85a72:	f018 0f01 	tst.w	r8, #1
   85a76:	d012      	beq.n	85a9e <_dtoa_r+0x37e>
   85a78:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   85a7c:	1e6b      	subs	r3, r5, #1
   85a7e:	9a04      	ldr	r2, [sp, #16]
   85a80:	e004      	b.n	85a8c <_dtoa_r+0x36c>
   85a82:	429a      	cmp	r2, r3
   85a84:	f000 8402 	beq.w	8628c <_dtoa_r+0xb6c>
   85a88:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   85a8c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   85a90:	f103 0501 	add.w	r5, r3, #1
   85a94:	d0f5      	beq.n	85a82 <_dtoa_r+0x362>
   85a96:	f108 0801 	add.w	r8, r8, #1
   85a9a:	f883 8000 	strb.w	r8, [r3]
   85a9e:	4649      	mov	r1, r9
   85aa0:	4620      	mov	r0, r4
   85aa2:	f001 f929 	bl	86cf8 <_Bfree>
   85aa6:	2200      	movs	r2, #0
   85aa8:	9b02      	ldr	r3, [sp, #8]
   85aaa:	702a      	strb	r2, [r5, #0]
   85aac:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85aae:	3301      	adds	r3, #1
   85ab0:	6013      	str	r3, [r2, #0]
   85ab2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85ab4:	2b00      	cmp	r3, #0
   85ab6:	f000 839f 	beq.w	861f8 <_dtoa_r+0xad8>
   85aba:	9804      	ldr	r0, [sp, #16]
   85abc:	601d      	str	r5, [r3, #0]
   85abe:	b01b      	add	sp, #108	; 0x6c
   85ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85ac6:	2a00      	cmp	r2, #0
   85ac8:	d03e      	beq.n	85b48 <_dtoa_r+0x428>
   85aca:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85acc:	2a01      	cmp	r2, #1
   85ace:	f340 8311 	ble.w	860f4 <_dtoa_r+0x9d4>
   85ad2:	9b07      	ldr	r3, [sp, #28]
   85ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85ad6:	1e5f      	subs	r7, r3, #1
   85ad8:	42ba      	cmp	r2, r7
   85ada:	f2c0 8390 	blt.w	861fe <_dtoa_r+0xade>
   85ade:	1bd7      	subs	r7, r2, r7
   85ae0:	9b07      	ldr	r3, [sp, #28]
   85ae2:	2b00      	cmp	r3, #0
   85ae4:	f2c0 848c 	blt.w	86400 <_dtoa_r+0xce0>
   85ae8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85aea:	9b07      	ldr	r3, [sp, #28]
   85aec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85aee:	2101      	movs	r1, #1
   85af0:	441a      	add	r2, r3
   85af2:	920a      	str	r2, [sp, #40]	; 0x28
   85af4:	9a08      	ldr	r2, [sp, #32]
   85af6:	4620      	mov	r0, r4
   85af8:	441a      	add	r2, r3
   85afa:	9208      	str	r2, [sp, #32]
   85afc:	f001 f998 	bl	86e30 <__i2b>
   85b00:	4606      	mov	r6, r0
   85b02:	e023      	b.n	85b4c <_dtoa_r+0x42c>
   85b04:	2301      	movs	r3, #1
   85b06:	930e      	str	r3, [sp, #56]	; 0x38
   85b08:	e6b5      	b.n	85876 <_dtoa_r+0x156>
   85b0a:	2300      	movs	r3, #0
   85b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85b0e:	930d      	str	r3, [sp, #52]	; 0x34
   85b10:	9b02      	ldr	r3, [sp, #8]
   85b12:	1ad2      	subs	r2, r2, r3
   85b14:	425b      	negs	r3, r3
   85b16:	920a      	str	r2, [sp, #40]	; 0x28
   85b18:	930c      	str	r3, [sp, #48]	; 0x30
   85b1a:	e6be      	b.n	8589a <_dtoa_r+0x17a>
   85b1c:	f1c7 0301 	rsb	r3, r7, #1
   85b20:	930a      	str	r3, [sp, #40]	; 0x28
   85b22:	2300      	movs	r3, #0
   85b24:	9308      	str	r3, [sp, #32]
   85b26:	e6ad      	b.n	85884 <_dtoa_r+0x164>
   85b28:	9d02      	ldr	r5, [sp, #8]
   85b2a:	4628      	mov	r0, r5
   85b2c:	f002 f97e 	bl	87e2c <__aeabi_i2d>
   85b30:	4602      	mov	r2, r0
   85b32:	460b      	mov	r3, r1
   85b34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   85b38:	f002 fc46 	bl	883c8 <__aeabi_dcmpeq>
   85b3c:	2800      	cmp	r0, #0
   85b3e:	f47f ae86 	bne.w	8584e <_dtoa_r+0x12e>
   85b42:	1e6b      	subs	r3, r5, #1
   85b44:	9302      	str	r3, [sp, #8]
   85b46:	e682      	b.n	8584e <_dtoa_r+0x12e>
   85b48:	ad0a      	add	r5, sp, #40	; 0x28
   85b4a:	cde0      	ldmia	r5, {r5, r6, r7}
   85b4c:	2d00      	cmp	r5, #0
   85b4e:	dd0c      	ble.n	85b6a <_dtoa_r+0x44a>
   85b50:	9908      	ldr	r1, [sp, #32]
   85b52:	2900      	cmp	r1, #0
   85b54:	460b      	mov	r3, r1
   85b56:	dd08      	ble.n	85b6a <_dtoa_r+0x44a>
   85b58:	42a9      	cmp	r1, r5
   85b5a:	bfa8      	it	ge
   85b5c:	462b      	movge	r3, r5
   85b5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85b60:	1aed      	subs	r5, r5, r3
   85b62:	1ad2      	subs	r2, r2, r3
   85b64:	1acb      	subs	r3, r1, r3
   85b66:	920a      	str	r2, [sp, #40]	; 0x28
   85b68:	9308      	str	r3, [sp, #32]
   85b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85b6c:	b1d3      	cbz	r3, 85ba4 <_dtoa_r+0x484>
   85b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85b70:	2b00      	cmp	r3, #0
   85b72:	f000 82b8 	beq.w	860e6 <_dtoa_r+0x9c6>
   85b76:	2f00      	cmp	r7, #0
   85b78:	dd10      	ble.n	85b9c <_dtoa_r+0x47c>
   85b7a:	4631      	mov	r1, r6
   85b7c:	463a      	mov	r2, r7
   85b7e:	4620      	mov	r0, r4
   85b80:	f001 f9f2 	bl	86f68 <__pow5mult>
   85b84:	464a      	mov	r2, r9
   85b86:	4601      	mov	r1, r0
   85b88:	4606      	mov	r6, r0
   85b8a:	4620      	mov	r0, r4
   85b8c:	f001 f95a 	bl	86e44 <__multiply>
   85b90:	4603      	mov	r3, r0
   85b92:	4649      	mov	r1, r9
   85b94:	4620      	mov	r0, r4
   85b96:	4699      	mov	r9, r3
   85b98:	f001 f8ae 	bl	86cf8 <_Bfree>
   85b9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85b9e:	1bda      	subs	r2, r3, r7
   85ba0:	f040 82a2 	bne.w	860e8 <_dtoa_r+0x9c8>
   85ba4:	2101      	movs	r1, #1
   85ba6:	4620      	mov	r0, r4
   85ba8:	f001 f942 	bl	86e30 <__i2b>
   85bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85bae:	4680      	mov	r8, r0
   85bb0:	2b00      	cmp	r3, #0
   85bb2:	dd1f      	ble.n	85bf4 <_dtoa_r+0x4d4>
   85bb4:	4601      	mov	r1, r0
   85bb6:	461a      	mov	r2, r3
   85bb8:	4620      	mov	r0, r4
   85bba:	f001 f9d5 	bl	86f68 <__pow5mult>
   85bbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85bc0:	4680      	mov	r8, r0
   85bc2:	2b01      	cmp	r3, #1
   85bc4:	f340 8255 	ble.w	86072 <_dtoa_r+0x952>
   85bc8:	2300      	movs	r3, #0
   85bca:	930c      	str	r3, [sp, #48]	; 0x30
   85bcc:	f8d8 3010 	ldr.w	r3, [r8, #16]
   85bd0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   85bd4:	6918      	ldr	r0, [r3, #16]
   85bd6:	f001 f8db 	bl	86d90 <__hi0bits>
   85bda:	f1c0 0020 	rsb	r0, r0, #32
   85bde:	e013      	b.n	85c08 <_dtoa_r+0x4e8>
   85be0:	f1c3 0520 	rsb	r5, r3, #32
   85be4:	fa0a f005 	lsl.w	r0, sl, r5
   85be8:	e67b      	b.n	858e2 <_dtoa_r+0x1c2>
   85bea:	900e      	str	r0, [sp, #56]	; 0x38
   85bec:	e643      	b.n	85876 <_dtoa_r+0x156>
   85bee:	bf00      	nop
   85bf0:	40240000 	.word	0x40240000
   85bf4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85bf6:	2b01      	cmp	r3, #1
   85bf8:	f340 8285 	ble.w	86106 <_dtoa_r+0x9e6>
   85bfc:	2300      	movs	r3, #0
   85bfe:	930c      	str	r3, [sp, #48]	; 0x30
   85c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85c02:	2001      	movs	r0, #1
   85c04:	2b00      	cmp	r3, #0
   85c06:	d1e1      	bne.n	85bcc <_dtoa_r+0x4ac>
   85c08:	9a08      	ldr	r2, [sp, #32]
   85c0a:	4410      	add	r0, r2
   85c0c:	f010 001f 	ands.w	r0, r0, #31
   85c10:	f000 80a1 	beq.w	85d56 <_dtoa_r+0x636>
   85c14:	f1c0 0320 	rsb	r3, r0, #32
   85c18:	2b04      	cmp	r3, #4
   85c1a:	f340 8486 	ble.w	8652a <_dtoa_r+0xe0a>
   85c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85c20:	f1c0 001c 	rsb	r0, r0, #28
   85c24:	4403      	add	r3, r0
   85c26:	930a      	str	r3, [sp, #40]	; 0x28
   85c28:	4613      	mov	r3, r2
   85c2a:	4403      	add	r3, r0
   85c2c:	4405      	add	r5, r0
   85c2e:	9308      	str	r3, [sp, #32]
   85c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85c32:	2b00      	cmp	r3, #0
   85c34:	dd05      	ble.n	85c42 <_dtoa_r+0x522>
   85c36:	4649      	mov	r1, r9
   85c38:	461a      	mov	r2, r3
   85c3a:	4620      	mov	r0, r4
   85c3c:	f001 f9e4 	bl	87008 <__lshift>
   85c40:	4681      	mov	r9, r0
   85c42:	9b08      	ldr	r3, [sp, #32]
   85c44:	2b00      	cmp	r3, #0
   85c46:	dd05      	ble.n	85c54 <_dtoa_r+0x534>
   85c48:	4641      	mov	r1, r8
   85c4a:	461a      	mov	r2, r3
   85c4c:	4620      	mov	r0, r4
   85c4e:	f001 f9db 	bl	87008 <__lshift>
   85c52:	4680      	mov	r8, r0
   85c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85c56:	2b00      	cmp	r3, #0
   85c58:	f040 8086 	bne.w	85d68 <_dtoa_r+0x648>
   85c5c:	9b07      	ldr	r3, [sp, #28]
   85c5e:	2b00      	cmp	r3, #0
   85c60:	f340 8264 	ble.w	8612c <_dtoa_r+0xa0c>
   85c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85c66:	2b00      	cmp	r3, #0
   85c68:	f000 8098 	beq.w	85d9c <_dtoa_r+0x67c>
   85c6c:	2d00      	cmp	r5, #0
   85c6e:	dd05      	ble.n	85c7c <_dtoa_r+0x55c>
   85c70:	4631      	mov	r1, r6
   85c72:	462a      	mov	r2, r5
   85c74:	4620      	mov	r0, r4
   85c76:	f001 f9c7 	bl	87008 <__lshift>
   85c7a:	4606      	mov	r6, r0
   85c7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85c7e:	2b00      	cmp	r3, #0
   85c80:	f040 8336 	bne.w	862f0 <_dtoa_r+0xbd0>
   85c84:	9608      	str	r6, [sp, #32]
   85c86:	9b07      	ldr	r3, [sp, #28]
   85c88:	9a04      	ldr	r2, [sp, #16]
   85c8a:	3b01      	subs	r3, #1
   85c8c:	18d3      	adds	r3, r2, r3
   85c8e:	930b      	str	r3, [sp, #44]	; 0x2c
   85c90:	4617      	mov	r7, r2
   85c92:	f00a 0301 	and.w	r3, sl, #1
   85c96:	46c2      	mov	sl, r8
   85c98:	f8dd b020 	ldr.w	fp, [sp, #32]
   85c9c:	930c      	str	r3, [sp, #48]	; 0x30
   85c9e:	4651      	mov	r1, sl
   85ca0:	4648      	mov	r0, r9
   85ca2:	f7ff fca9 	bl	855f8 <quorem>
   85ca6:	4631      	mov	r1, r6
   85ca8:	4605      	mov	r5, r0
   85caa:	4648      	mov	r0, r9
   85cac:	f001 f9fc 	bl	870a8 <__mcmp>
   85cb0:	465a      	mov	r2, fp
   85cb2:	9007      	str	r0, [sp, #28]
   85cb4:	4651      	mov	r1, sl
   85cb6:	4620      	mov	r0, r4
   85cb8:	f001 fa12 	bl	870e0 <__mdiff>
   85cbc:	68c2      	ldr	r2, [r0, #12]
   85cbe:	4680      	mov	r8, r0
   85cc0:	f105 0330 	add.w	r3, r5, #48	; 0x30
   85cc4:	2a00      	cmp	r2, #0
   85cc6:	f040 8229 	bne.w	8611c <_dtoa_r+0x9fc>
   85cca:	4601      	mov	r1, r0
   85ccc:	4648      	mov	r0, r9
   85cce:	930a      	str	r3, [sp, #40]	; 0x28
   85cd0:	f001 f9ea 	bl	870a8 <__mcmp>
   85cd4:	4641      	mov	r1, r8
   85cd6:	9008      	str	r0, [sp, #32]
   85cd8:	4620      	mov	r0, r4
   85cda:	f001 f80d 	bl	86cf8 <_Bfree>
   85cde:	9a08      	ldr	r2, [sp, #32]
   85ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85ce2:	b932      	cbnz	r2, 85cf2 <_dtoa_r+0x5d2>
   85ce4:	9924      	ldr	r1, [sp, #144]	; 0x90
   85ce6:	b921      	cbnz	r1, 85cf2 <_dtoa_r+0x5d2>
   85ce8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85cea:	2a00      	cmp	r2, #0
   85cec:	f000 83ee 	beq.w	864cc <_dtoa_r+0xdac>
   85cf0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85cf2:	9907      	ldr	r1, [sp, #28]
   85cf4:	2900      	cmp	r1, #0
   85cf6:	f2c0 829f 	blt.w	86238 <_dtoa_r+0xb18>
   85cfa:	d105      	bne.n	85d08 <_dtoa_r+0x5e8>
   85cfc:	9924      	ldr	r1, [sp, #144]	; 0x90
   85cfe:	b919      	cbnz	r1, 85d08 <_dtoa_r+0x5e8>
   85d00:	990c      	ldr	r1, [sp, #48]	; 0x30
   85d02:	2900      	cmp	r1, #0
   85d04:	f000 8298 	beq.w	86238 <_dtoa_r+0xb18>
   85d08:	2a00      	cmp	r2, #0
   85d0a:	f300 8305 	bgt.w	86318 <_dtoa_r+0xbf8>
   85d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85d10:	f107 0801 	add.w	r8, r7, #1
   85d14:	4297      	cmp	r7, r2
   85d16:	703b      	strb	r3, [r7, #0]
   85d18:	4645      	mov	r5, r8
   85d1a:	f000 830b 	beq.w	86334 <_dtoa_r+0xc14>
   85d1e:	4649      	mov	r1, r9
   85d20:	2300      	movs	r3, #0
   85d22:	220a      	movs	r2, #10
   85d24:	4620      	mov	r0, r4
   85d26:	f000 fff1 	bl	86d0c <__multadd>
   85d2a:	455e      	cmp	r6, fp
   85d2c:	4681      	mov	r9, r0
   85d2e:	4631      	mov	r1, r6
   85d30:	f04f 0300 	mov.w	r3, #0
   85d34:	f04f 020a 	mov.w	r2, #10
   85d38:	4620      	mov	r0, r4
   85d3a:	f000 81e9 	beq.w	86110 <_dtoa_r+0x9f0>
   85d3e:	f000 ffe5 	bl	86d0c <__multadd>
   85d42:	4659      	mov	r1, fp
   85d44:	4606      	mov	r6, r0
   85d46:	2300      	movs	r3, #0
   85d48:	220a      	movs	r2, #10
   85d4a:	4620      	mov	r0, r4
   85d4c:	f000 ffde 	bl	86d0c <__multadd>
   85d50:	4647      	mov	r7, r8
   85d52:	4683      	mov	fp, r0
   85d54:	e7a3      	b.n	85c9e <_dtoa_r+0x57e>
   85d56:	201c      	movs	r0, #28
   85d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85d5a:	4405      	add	r5, r0
   85d5c:	4403      	add	r3, r0
   85d5e:	930a      	str	r3, [sp, #40]	; 0x28
   85d60:	9b08      	ldr	r3, [sp, #32]
   85d62:	4403      	add	r3, r0
   85d64:	9308      	str	r3, [sp, #32]
   85d66:	e763      	b.n	85c30 <_dtoa_r+0x510>
   85d68:	4641      	mov	r1, r8
   85d6a:	4648      	mov	r0, r9
   85d6c:	f001 f99c 	bl	870a8 <__mcmp>
   85d70:	2800      	cmp	r0, #0
   85d72:	f6bf af73 	bge.w	85c5c <_dtoa_r+0x53c>
   85d76:	9f02      	ldr	r7, [sp, #8]
   85d78:	4649      	mov	r1, r9
   85d7a:	2300      	movs	r3, #0
   85d7c:	220a      	movs	r2, #10
   85d7e:	4620      	mov	r0, r4
   85d80:	3f01      	subs	r7, #1
   85d82:	9702      	str	r7, [sp, #8]
   85d84:	f000 ffc2 	bl	86d0c <__multadd>
   85d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85d8a:	4681      	mov	r9, r0
   85d8c:	2b00      	cmp	r3, #0
   85d8e:	f040 83b5 	bne.w	864fc <_dtoa_r+0xddc>
   85d92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85d94:	2b00      	cmp	r3, #0
   85d96:	f340 83be 	ble.w	86516 <_dtoa_r+0xdf6>
   85d9a:	9307      	str	r3, [sp, #28]
   85d9c:	f8dd a010 	ldr.w	sl, [sp, #16]
   85da0:	9f07      	ldr	r7, [sp, #28]
   85da2:	4655      	mov	r5, sl
   85da4:	e006      	b.n	85db4 <_dtoa_r+0x694>
   85da6:	4649      	mov	r1, r9
   85da8:	2300      	movs	r3, #0
   85daa:	220a      	movs	r2, #10
   85dac:	4620      	mov	r0, r4
   85dae:	f000 ffad 	bl	86d0c <__multadd>
   85db2:	4681      	mov	r9, r0
   85db4:	4641      	mov	r1, r8
   85db6:	4648      	mov	r0, r9
   85db8:	f7ff fc1e 	bl	855f8 <quorem>
   85dbc:	3030      	adds	r0, #48	; 0x30
   85dbe:	f805 0b01 	strb.w	r0, [r5], #1
   85dc2:	eba5 030a 	sub.w	r3, r5, sl
   85dc6:	42bb      	cmp	r3, r7
   85dc8:	dbed      	blt.n	85da6 <_dtoa_r+0x686>
   85dca:	9b04      	ldr	r3, [sp, #16]
   85dcc:	9a07      	ldr	r2, [sp, #28]
   85dce:	4682      	mov	sl, r0
   85dd0:	2a01      	cmp	r2, #1
   85dd2:	bfac      	ite	ge
   85dd4:	189b      	addge	r3, r3, r2
   85dd6:	3301      	addlt	r3, #1
   85dd8:	f04f 0b00 	mov.w	fp, #0
   85ddc:	461d      	mov	r5, r3
   85dde:	4649      	mov	r1, r9
   85de0:	2201      	movs	r2, #1
   85de2:	4620      	mov	r0, r4
   85de4:	f001 f910 	bl	87008 <__lshift>
   85de8:	4641      	mov	r1, r8
   85dea:	4681      	mov	r9, r0
   85dec:	f001 f95c 	bl	870a8 <__mcmp>
   85df0:	2800      	cmp	r0, #0
   85df2:	f340 823f 	ble.w	86274 <_dtoa_r+0xb54>
   85df6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   85dfa:	1e6b      	subs	r3, r5, #1
   85dfc:	9904      	ldr	r1, [sp, #16]
   85dfe:	e004      	b.n	85e0a <_dtoa_r+0x6ea>
   85e00:	428b      	cmp	r3, r1
   85e02:	f000 81ae 	beq.w	86162 <_dtoa_r+0xa42>
   85e06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   85e0a:	2a39      	cmp	r2, #57	; 0x39
   85e0c:	f103 0501 	add.w	r5, r3, #1
   85e10:	d0f6      	beq.n	85e00 <_dtoa_r+0x6e0>
   85e12:	3201      	adds	r2, #1
   85e14:	701a      	strb	r2, [r3, #0]
   85e16:	4641      	mov	r1, r8
   85e18:	4620      	mov	r0, r4
   85e1a:	f000 ff6d 	bl	86cf8 <_Bfree>
   85e1e:	2e00      	cmp	r6, #0
   85e20:	f43f ae3d 	beq.w	85a9e <_dtoa_r+0x37e>
   85e24:	f1bb 0f00 	cmp.w	fp, #0
   85e28:	d005      	beq.n	85e36 <_dtoa_r+0x716>
   85e2a:	45b3      	cmp	fp, r6
   85e2c:	d003      	beq.n	85e36 <_dtoa_r+0x716>
   85e2e:	4659      	mov	r1, fp
   85e30:	4620      	mov	r0, r4
   85e32:	f000 ff61 	bl	86cf8 <_Bfree>
   85e36:	4631      	mov	r1, r6
   85e38:	4620      	mov	r0, r4
   85e3a:	f000 ff5d 	bl	86cf8 <_Bfree>
   85e3e:	e62e      	b.n	85a9e <_dtoa_r+0x37e>
   85e40:	2300      	movs	r3, #0
   85e42:	930b      	str	r3, [sp, #44]	; 0x2c
   85e44:	9b02      	ldr	r3, [sp, #8]
   85e46:	9a25      	ldr	r2, [sp, #148]	; 0x94
   85e48:	4413      	add	r3, r2
   85e4a:	930f      	str	r3, [sp, #60]	; 0x3c
   85e4c:	3301      	adds	r3, #1
   85e4e:	2b01      	cmp	r3, #1
   85e50:	461f      	mov	r7, r3
   85e52:	461e      	mov	r6, r3
   85e54:	bfb8      	it	lt
   85e56:	2701      	movlt	r7, #1
   85e58:	9307      	str	r3, [sp, #28]
   85e5a:	2100      	movs	r1, #0
   85e5c:	2f17      	cmp	r7, #23
   85e5e:	6461      	str	r1, [r4, #68]	; 0x44
   85e60:	d90a      	bls.n	85e78 <_dtoa_r+0x758>
   85e62:	2201      	movs	r2, #1
   85e64:	2304      	movs	r3, #4
   85e66:	005b      	lsls	r3, r3, #1
   85e68:	f103 0014 	add.w	r0, r3, #20
   85e6c:	4287      	cmp	r7, r0
   85e6e:	4611      	mov	r1, r2
   85e70:	f102 0201 	add.w	r2, r2, #1
   85e74:	d2f7      	bcs.n	85e66 <_dtoa_r+0x746>
   85e76:	6461      	str	r1, [r4, #68]	; 0x44
   85e78:	4620      	mov	r0, r4
   85e7a:	f000 ff17 	bl	86cac <_Balloc>
   85e7e:	2e0e      	cmp	r6, #14
   85e80:	9004      	str	r0, [sp, #16]
   85e82:	6420      	str	r0, [r4, #64]	; 0x40
   85e84:	f63f ad47 	bhi.w	85916 <_dtoa_r+0x1f6>
   85e88:	2d00      	cmp	r5, #0
   85e8a:	f43f ad44 	beq.w	85916 <_dtoa_r+0x1f6>
   85e8e:	9902      	ldr	r1, [sp, #8]
   85e90:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   85e94:	2900      	cmp	r1, #0
   85e96:	f340 8203 	ble.w	862a0 <_dtoa_r+0xb80>
   85e9a:	4bb9      	ldr	r3, [pc, #740]	; (86180 <_dtoa_r+0xa60>)
   85e9c:	f001 020f 	and.w	r2, r1, #15
   85ea0:	110d      	asrs	r5, r1, #4
   85ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85ea6:	06e9      	lsls	r1, r5, #27
   85ea8:	e9d3 6700 	ldrd	r6, r7, [r3]
   85eac:	f140 81af 	bpl.w	8620e <_dtoa_r+0xaee>
   85eb0:	4bb4      	ldr	r3, [pc, #720]	; (86184 <_dtoa_r+0xa64>)
   85eb2:	4650      	mov	r0, sl
   85eb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   85eb8:	4659      	mov	r1, fp
   85eba:	f002 f947 	bl	8814c <__aeabi_ddiv>
   85ebe:	f04f 0a03 	mov.w	sl, #3
   85ec2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   85ec6:	f005 050f 	and.w	r5, r5, #15
   85eca:	b18d      	cbz	r5, 85ef0 <_dtoa_r+0x7d0>
   85ecc:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 86184 <_dtoa_r+0xa64>
   85ed0:	07ea      	lsls	r2, r5, #31
   85ed2:	d509      	bpl.n	85ee8 <_dtoa_r+0x7c8>
   85ed4:	e9d8 2300 	ldrd	r2, r3, [r8]
   85ed8:	4630      	mov	r0, r6
   85eda:	4639      	mov	r1, r7
   85edc:	f002 f80c 	bl	87ef8 <__aeabi_dmul>
   85ee0:	4606      	mov	r6, r0
   85ee2:	460f      	mov	r7, r1
   85ee4:	f10a 0a01 	add.w	sl, sl, #1
   85ee8:	106d      	asrs	r5, r5, #1
   85eea:	f108 0808 	add.w	r8, r8, #8
   85eee:	d1ef      	bne.n	85ed0 <_dtoa_r+0x7b0>
   85ef0:	463b      	mov	r3, r7
   85ef2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   85ef6:	4632      	mov	r2, r6
   85ef8:	f002 f928 	bl	8814c <__aeabi_ddiv>
   85efc:	4607      	mov	r7, r0
   85efe:	4688      	mov	r8, r1
   85f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85f02:	b143      	cbz	r3, 85f16 <_dtoa_r+0x7f6>
   85f04:	2200      	movs	r2, #0
   85f06:	4ba0      	ldr	r3, [pc, #640]	; (86188 <_dtoa_r+0xa68>)
   85f08:	4638      	mov	r0, r7
   85f0a:	4641      	mov	r1, r8
   85f0c:	f002 fa66 	bl	883dc <__aeabi_dcmplt>
   85f10:	2800      	cmp	r0, #0
   85f12:	f040 8287 	bne.w	86424 <_dtoa_r+0xd04>
   85f16:	4650      	mov	r0, sl
   85f18:	f001 ff88 	bl	87e2c <__aeabi_i2d>
   85f1c:	463a      	mov	r2, r7
   85f1e:	4643      	mov	r3, r8
   85f20:	f001 ffea 	bl	87ef8 <__aeabi_dmul>
   85f24:	4b99      	ldr	r3, [pc, #612]	; (8618c <_dtoa_r+0xa6c>)
   85f26:	2200      	movs	r2, #0
   85f28:	f001 fe34 	bl	87b94 <__adddf3>
   85f2c:	9b07      	ldr	r3, [sp, #28]
   85f2e:	4605      	mov	r5, r0
   85f30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   85f34:	2b00      	cmp	r3, #0
   85f36:	f000 813f 	beq.w	861b8 <_dtoa_r+0xa98>
   85f3a:	9b02      	ldr	r3, [sp, #8]
   85f3c:	9315      	str	r3, [sp, #84]	; 0x54
   85f3e:	9b07      	ldr	r3, [sp, #28]
   85f40:	9312      	str	r3, [sp, #72]	; 0x48
   85f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85f44:	2b00      	cmp	r3, #0
   85f46:	f000 81fb 	beq.w	86340 <_dtoa_r+0xc20>
   85f4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85f4c:	4b8c      	ldr	r3, [pc, #560]	; (86180 <_dtoa_r+0xa60>)
   85f4e:	2000      	movs	r0, #0
   85f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85f54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   85f58:	498d      	ldr	r1, [pc, #564]	; (86190 <_dtoa_r+0xa70>)
   85f5a:	f002 f8f7 	bl	8814c <__aeabi_ddiv>
   85f5e:	462a      	mov	r2, r5
   85f60:	4633      	mov	r3, r6
   85f62:	f001 fe15 	bl	87b90 <__aeabi_dsub>
   85f66:	4682      	mov	sl, r0
   85f68:	468b      	mov	fp, r1
   85f6a:	4638      	mov	r0, r7
   85f6c:	4641      	mov	r1, r8
   85f6e:	f002 fa73 	bl	88458 <__aeabi_d2iz>
   85f72:	4605      	mov	r5, r0
   85f74:	f001 ff5a 	bl	87e2c <__aeabi_i2d>
   85f78:	4602      	mov	r2, r0
   85f7a:	460b      	mov	r3, r1
   85f7c:	4638      	mov	r0, r7
   85f7e:	4641      	mov	r1, r8
   85f80:	f001 fe06 	bl	87b90 <__aeabi_dsub>
   85f84:	3530      	adds	r5, #48	; 0x30
   85f86:	fa5f f885 	uxtb.w	r8, r5
   85f8a:	9d04      	ldr	r5, [sp, #16]
   85f8c:	4606      	mov	r6, r0
   85f8e:	460f      	mov	r7, r1
   85f90:	f885 8000 	strb.w	r8, [r5]
   85f94:	4602      	mov	r2, r0
   85f96:	460b      	mov	r3, r1
   85f98:	4650      	mov	r0, sl
   85f9a:	4659      	mov	r1, fp
   85f9c:	3501      	adds	r5, #1
   85f9e:	f002 fa3b 	bl	88418 <__aeabi_dcmpgt>
   85fa2:	2800      	cmp	r0, #0
   85fa4:	d154      	bne.n	86050 <_dtoa_r+0x930>
   85fa6:	4632      	mov	r2, r6
   85fa8:	463b      	mov	r3, r7
   85faa:	2000      	movs	r0, #0
   85fac:	4976      	ldr	r1, [pc, #472]	; (86188 <_dtoa_r+0xa68>)
   85fae:	f001 fdef 	bl	87b90 <__aeabi_dsub>
   85fb2:	4602      	mov	r2, r0
   85fb4:	460b      	mov	r3, r1
   85fb6:	4650      	mov	r0, sl
   85fb8:	4659      	mov	r1, fp
   85fba:	f002 fa2d 	bl	88418 <__aeabi_dcmpgt>
   85fbe:	2800      	cmp	r0, #0
   85fc0:	f040 8270 	bne.w	864a4 <_dtoa_r+0xd84>
   85fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85fc6:	2a01      	cmp	r2, #1
   85fc8:	f000 8112 	beq.w	861f0 <_dtoa_r+0xad0>
   85fcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85fce:	9a04      	ldr	r2, [sp, #16]
   85fd0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   85fd4:	4413      	add	r3, r2
   85fd6:	4699      	mov	r9, r3
   85fd8:	e00f      	b.n	85ffa <_dtoa_r+0x8da>
   85fda:	4632      	mov	r2, r6
   85fdc:	463b      	mov	r3, r7
   85fde:	2000      	movs	r0, #0
   85fe0:	4969      	ldr	r1, [pc, #420]	; (86188 <_dtoa_r+0xa68>)
   85fe2:	f001 fdd5 	bl	87b90 <__aeabi_dsub>
   85fe6:	4652      	mov	r2, sl
   85fe8:	465b      	mov	r3, fp
   85fea:	f002 f9f7 	bl	883dc <__aeabi_dcmplt>
   85fee:	2800      	cmp	r0, #0
   85ff0:	f040 8256 	bne.w	864a0 <_dtoa_r+0xd80>
   85ff4:	454d      	cmp	r5, r9
   85ff6:	f000 80f9 	beq.w	861ec <_dtoa_r+0xacc>
   85ffa:	4650      	mov	r0, sl
   85ffc:	4659      	mov	r1, fp
   85ffe:	2200      	movs	r2, #0
   86000:	4b64      	ldr	r3, [pc, #400]	; (86194 <_dtoa_r+0xa74>)
   86002:	f001 ff79 	bl	87ef8 <__aeabi_dmul>
   86006:	2200      	movs	r2, #0
   86008:	4b62      	ldr	r3, [pc, #392]	; (86194 <_dtoa_r+0xa74>)
   8600a:	4682      	mov	sl, r0
   8600c:	468b      	mov	fp, r1
   8600e:	4630      	mov	r0, r6
   86010:	4639      	mov	r1, r7
   86012:	f001 ff71 	bl	87ef8 <__aeabi_dmul>
   86016:	460f      	mov	r7, r1
   86018:	4606      	mov	r6, r0
   8601a:	f002 fa1d 	bl	88458 <__aeabi_d2iz>
   8601e:	4680      	mov	r8, r0
   86020:	f001 ff04 	bl	87e2c <__aeabi_i2d>
   86024:	4602      	mov	r2, r0
   86026:	460b      	mov	r3, r1
   86028:	4630      	mov	r0, r6
   8602a:	4639      	mov	r1, r7
   8602c:	f001 fdb0 	bl	87b90 <__aeabi_dsub>
   86030:	f108 0830 	add.w	r8, r8, #48	; 0x30
   86034:	fa5f f888 	uxtb.w	r8, r8
   86038:	f805 8b01 	strb.w	r8, [r5], #1
   8603c:	4652      	mov	r2, sl
   8603e:	465b      	mov	r3, fp
   86040:	4606      	mov	r6, r0
   86042:	460f      	mov	r7, r1
   86044:	f002 f9ca 	bl	883dc <__aeabi_dcmplt>
   86048:	2800      	cmp	r0, #0
   8604a:	d0c6      	beq.n	85fda <_dtoa_r+0x8ba>
   8604c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   86050:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86052:	9302      	str	r3, [sp, #8]
   86054:	e523      	b.n	85a9e <_dtoa_r+0x37e>
   86056:	2300      	movs	r3, #0
   86058:	930b      	str	r3, [sp, #44]	; 0x2c
   8605a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8605c:	2b00      	cmp	r3, #0
   8605e:	f340 80dd 	ble.w	8621c <_dtoa_r+0xafc>
   86062:	461f      	mov	r7, r3
   86064:	461e      	mov	r6, r3
   86066:	930f      	str	r3, [sp, #60]	; 0x3c
   86068:	9307      	str	r3, [sp, #28]
   8606a:	e6f6      	b.n	85e5a <_dtoa_r+0x73a>
   8606c:	2301      	movs	r3, #1
   8606e:	930b      	str	r3, [sp, #44]	; 0x2c
   86070:	e7f3      	b.n	8605a <_dtoa_r+0x93a>
   86072:	f1ba 0f00 	cmp.w	sl, #0
   86076:	f47f ada7 	bne.w	85bc8 <_dtoa_r+0x4a8>
   8607a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8607e:	2b00      	cmp	r3, #0
   86080:	f47f adbc 	bne.w	85bfc <_dtoa_r+0x4dc>
   86084:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   86088:	0d3f      	lsrs	r7, r7, #20
   8608a:	053f      	lsls	r7, r7, #20
   8608c:	2f00      	cmp	r7, #0
   8608e:	f000 820d 	beq.w	864ac <_dtoa_r+0xd8c>
   86092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86094:	3301      	adds	r3, #1
   86096:	930a      	str	r3, [sp, #40]	; 0x28
   86098:	9b08      	ldr	r3, [sp, #32]
   8609a:	3301      	adds	r3, #1
   8609c:	9308      	str	r3, [sp, #32]
   8609e:	2301      	movs	r3, #1
   860a0:	930c      	str	r3, [sp, #48]	; 0x30
   860a2:	e5ad      	b.n	85c00 <_dtoa_r+0x4e0>
   860a4:	9b07      	ldr	r3, [sp, #28]
   860a6:	2b00      	cmp	r3, #0
   860a8:	f73f ac48 	bgt.w	8593c <_dtoa_r+0x21c>
   860ac:	f040 8222 	bne.w	864f4 <_dtoa_r+0xdd4>
   860b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   860b4:	2200      	movs	r2, #0
   860b6:	4b38      	ldr	r3, [pc, #224]	; (86198 <_dtoa_r+0xa78>)
   860b8:	f001 ff1e 	bl	87ef8 <__aeabi_dmul>
   860bc:	4652      	mov	r2, sl
   860be:	465b      	mov	r3, fp
   860c0:	f002 f9a0 	bl	88404 <__aeabi_dcmpge>
   860c4:	f8dd 801c 	ldr.w	r8, [sp, #28]
   860c8:	4646      	mov	r6, r8
   860ca:	2800      	cmp	r0, #0
   860cc:	d041      	beq.n	86152 <_dtoa_r+0xa32>
   860ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
   860d0:	9d04      	ldr	r5, [sp, #16]
   860d2:	43db      	mvns	r3, r3
   860d4:	9302      	str	r3, [sp, #8]
   860d6:	4641      	mov	r1, r8
   860d8:	4620      	mov	r0, r4
   860da:	f000 fe0d 	bl	86cf8 <_Bfree>
   860de:	2e00      	cmp	r6, #0
   860e0:	f43f acdd 	beq.w	85a9e <_dtoa_r+0x37e>
   860e4:	e6a7      	b.n	85e36 <_dtoa_r+0x716>
   860e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   860e8:	4649      	mov	r1, r9
   860ea:	4620      	mov	r0, r4
   860ec:	f000 ff3c 	bl	86f68 <__pow5mult>
   860f0:	4681      	mov	r9, r0
   860f2:	e557      	b.n	85ba4 <_dtoa_r+0x484>
   860f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   860f6:	2a00      	cmp	r2, #0
   860f8:	f000 8188 	beq.w	8640c <_dtoa_r+0xcec>
   860fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
   86100:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86102:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   86104:	e4f2      	b.n	85aec <_dtoa_r+0x3cc>
   86106:	f1ba 0f00 	cmp.w	sl, #0
   8610a:	f47f ad77 	bne.w	85bfc <_dtoa_r+0x4dc>
   8610e:	e7b4      	b.n	8607a <_dtoa_r+0x95a>
   86110:	f000 fdfc 	bl	86d0c <__multadd>
   86114:	4647      	mov	r7, r8
   86116:	4606      	mov	r6, r0
   86118:	4683      	mov	fp, r0
   8611a:	e5c0      	b.n	85c9e <_dtoa_r+0x57e>
   8611c:	4601      	mov	r1, r0
   8611e:	4620      	mov	r0, r4
   86120:	9308      	str	r3, [sp, #32]
   86122:	f000 fde9 	bl	86cf8 <_Bfree>
   86126:	2201      	movs	r2, #1
   86128:	9b08      	ldr	r3, [sp, #32]
   8612a:	e5e2      	b.n	85cf2 <_dtoa_r+0x5d2>
   8612c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8612e:	2b02      	cmp	r3, #2
   86130:	f77f ad98 	ble.w	85c64 <_dtoa_r+0x544>
   86134:	9b07      	ldr	r3, [sp, #28]
   86136:	2b00      	cmp	r3, #0
   86138:	d1c9      	bne.n	860ce <_dtoa_r+0x9ae>
   8613a:	4641      	mov	r1, r8
   8613c:	2205      	movs	r2, #5
   8613e:	4620      	mov	r0, r4
   86140:	f000 fde4 	bl	86d0c <__multadd>
   86144:	4601      	mov	r1, r0
   86146:	4680      	mov	r8, r0
   86148:	4648      	mov	r0, r9
   8614a:	f000 ffad 	bl	870a8 <__mcmp>
   8614e:	2800      	cmp	r0, #0
   86150:	ddbd      	ble.n	860ce <_dtoa_r+0x9ae>
   86152:	2331      	movs	r3, #49	; 0x31
   86154:	9a02      	ldr	r2, [sp, #8]
   86156:	9904      	ldr	r1, [sp, #16]
   86158:	3201      	adds	r2, #1
   8615a:	9202      	str	r2, [sp, #8]
   8615c:	700b      	strb	r3, [r1, #0]
   8615e:	1c4d      	adds	r5, r1, #1
   86160:	e7b9      	b.n	860d6 <_dtoa_r+0x9b6>
   86162:	2331      	movs	r3, #49	; 0x31
   86164:	9a02      	ldr	r2, [sp, #8]
   86166:	3201      	adds	r2, #1
   86168:	9202      	str	r2, [sp, #8]
   8616a:	9a04      	ldr	r2, [sp, #16]
   8616c:	7013      	strb	r3, [r2, #0]
   8616e:	e652      	b.n	85e16 <_dtoa_r+0x6f6>
   86170:	2301      	movs	r3, #1
   86172:	930b      	str	r3, [sp, #44]	; 0x2c
   86174:	e666      	b.n	85e44 <_dtoa_r+0x724>
   86176:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8617a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8617c:	e48f      	b.n	85a9e <_dtoa_r+0x37e>
   8617e:	bf00      	nop
   86180:	00089850 	.word	0x00089850
   86184:	00089828 	.word	0x00089828
   86188:	3ff00000 	.word	0x3ff00000
   8618c:	401c0000 	.word	0x401c0000
   86190:	3fe00000 	.word	0x3fe00000
   86194:	40240000 	.word	0x40240000
   86198:	40140000 	.word	0x40140000
   8619c:	4650      	mov	r0, sl
   8619e:	f001 fe45 	bl	87e2c <__aeabi_i2d>
   861a2:	463a      	mov	r2, r7
   861a4:	4643      	mov	r3, r8
   861a6:	f001 fea7 	bl	87ef8 <__aeabi_dmul>
   861aa:	2200      	movs	r2, #0
   861ac:	4bc1      	ldr	r3, [pc, #772]	; (864b4 <_dtoa_r+0xd94>)
   861ae:	f001 fcf1 	bl	87b94 <__adddf3>
   861b2:	4605      	mov	r5, r0
   861b4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   861b8:	4641      	mov	r1, r8
   861ba:	2200      	movs	r2, #0
   861bc:	4bbe      	ldr	r3, [pc, #760]	; (864b8 <_dtoa_r+0xd98>)
   861be:	4638      	mov	r0, r7
   861c0:	f001 fce6 	bl	87b90 <__aeabi_dsub>
   861c4:	462a      	mov	r2, r5
   861c6:	4633      	mov	r3, r6
   861c8:	4682      	mov	sl, r0
   861ca:	468b      	mov	fp, r1
   861cc:	f002 f924 	bl	88418 <__aeabi_dcmpgt>
   861d0:	4680      	mov	r8, r0
   861d2:	2800      	cmp	r0, #0
   861d4:	f040 8110 	bne.w	863f8 <_dtoa_r+0xcd8>
   861d8:	462a      	mov	r2, r5
   861da:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   861de:	4650      	mov	r0, sl
   861e0:	4659      	mov	r1, fp
   861e2:	f002 f8fb 	bl	883dc <__aeabi_dcmplt>
   861e6:	b118      	cbz	r0, 861f0 <_dtoa_r+0xad0>
   861e8:	4646      	mov	r6, r8
   861ea:	e770      	b.n	860ce <_dtoa_r+0x9ae>
   861ec:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   861f0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   861f4:	f7ff bb8f 	b.w	85916 <_dtoa_r+0x1f6>
   861f8:	9804      	ldr	r0, [sp, #16]
   861fa:	f7ff bac0 	b.w	8577e <_dtoa_r+0x5e>
   861fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86200:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86202:	1afb      	subs	r3, r7, r3
   86204:	441a      	add	r2, r3
   86206:	970c      	str	r7, [sp, #48]	; 0x30
   86208:	920d      	str	r2, [sp, #52]	; 0x34
   8620a:	2700      	movs	r7, #0
   8620c:	e468      	b.n	85ae0 <_dtoa_r+0x3c0>
   8620e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   86212:	f04f 0a02 	mov.w	sl, #2
   86216:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   8621a:	e656      	b.n	85eca <_dtoa_r+0x7aa>
   8621c:	2100      	movs	r1, #0
   8621e:	2301      	movs	r3, #1
   86220:	4620      	mov	r0, r4
   86222:	6461      	str	r1, [r4, #68]	; 0x44
   86224:	9325      	str	r3, [sp, #148]	; 0x94
   86226:	f000 fd41 	bl	86cac <_Balloc>
   8622a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8622c:	9004      	str	r0, [sp, #16]
   8622e:	9307      	str	r3, [sp, #28]
   86230:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86232:	6420      	str	r0, [r4, #64]	; 0x40
   86234:	930f      	str	r3, [sp, #60]	; 0x3c
   86236:	e627      	b.n	85e88 <_dtoa_r+0x768>
   86238:	2a00      	cmp	r2, #0
   8623a:	46d0      	mov	r8, sl
   8623c:	f8cd b020 	str.w	fp, [sp, #32]
   86240:	469a      	mov	sl, r3
   86242:	dd11      	ble.n	86268 <_dtoa_r+0xb48>
   86244:	4649      	mov	r1, r9
   86246:	2201      	movs	r2, #1
   86248:	4620      	mov	r0, r4
   8624a:	f000 fedd 	bl	87008 <__lshift>
   8624e:	4641      	mov	r1, r8
   86250:	4681      	mov	r9, r0
   86252:	f000 ff29 	bl	870a8 <__mcmp>
   86256:	2800      	cmp	r0, #0
   86258:	f340 8145 	ble.w	864e6 <_dtoa_r+0xdc6>
   8625c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   86260:	f000 8105 	beq.w	8646e <_dtoa_r+0xd4e>
   86264:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   86268:	46b3      	mov	fp, r6
   8626a:	f887 a000 	strb.w	sl, [r7]
   8626e:	1c7d      	adds	r5, r7, #1
   86270:	9e08      	ldr	r6, [sp, #32]
   86272:	e5d0      	b.n	85e16 <_dtoa_r+0x6f6>
   86274:	d104      	bne.n	86280 <_dtoa_r+0xb60>
   86276:	f01a 0f01 	tst.w	sl, #1
   8627a:	d001      	beq.n	86280 <_dtoa_r+0xb60>
   8627c:	e5bb      	b.n	85df6 <_dtoa_r+0x6d6>
   8627e:	4615      	mov	r5, r2
   86280:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   86284:	1e6a      	subs	r2, r5, #1
   86286:	2b30      	cmp	r3, #48	; 0x30
   86288:	d0f9      	beq.n	8627e <_dtoa_r+0xb5e>
   8628a:	e5c4      	b.n	85e16 <_dtoa_r+0x6f6>
   8628c:	2230      	movs	r2, #48	; 0x30
   8628e:	9904      	ldr	r1, [sp, #16]
   86290:	700a      	strb	r2, [r1, #0]
   86292:	9a02      	ldr	r2, [sp, #8]
   86294:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   86298:	3201      	adds	r2, #1
   8629a:	9202      	str	r2, [sp, #8]
   8629c:	f7ff bbfb 	b.w	85a96 <_dtoa_r+0x376>
   862a0:	f000 80bb 	beq.w	8641a <_dtoa_r+0xcfa>
   862a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   862a8:	9b02      	ldr	r3, [sp, #8]
   862aa:	f04f 0a02 	mov.w	sl, #2
   862ae:	425d      	negs	r5, r3
   862b0:	4b82      	ldr	r3, [pc, #520]	; (864bc <_dtoa_r+0xd9c>)
   862b2:	f005 020f 	and.w	r2, r5, #15
   862b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   862ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   862be:	f001 fe1b 	bl	87ef8 <__aeabi_dmul>
   862c2:	112d      	asrs	r5, r5, #4
   862c4:	4607      	mov	r7, r0
   862c6:	4688      	mov	r8, r1
   862c8:	f43f ae1a 	beq.w	85f00 <_dtoa_r+0x7e0>
   862cc:	4e7c      	ldr	r6, [pc, #496]	; (864c0 <_dtoa_r+0xda0>)
   862ce:	07eb      	lsls	r3, r5, #31
   862d0:	d509      	bpl.n	862e6 <_dtoa_r+0xbc6>
   862d2:	e9d6 2300 	ldrd	r2, r3, [r6]
   862d6:	4638      	mov	r0, r7
   862d8:	4641      	mov	r1, r8
   862da:	f001 fe0d 	bl	87ef8 <__aeabi_dmul>
   862de:	4607      	mov	r7, r0
   862e0:	4688      	mov	r8, r1
   862e2:	f10a 0a01 	add.w	sl, sl, #1
   862e6:	106d      	asrs	r5, r5, #1
   862e8:	f106 0608 	add.w	r6, r6, #8
   862ec:	d1ef      	bne.n	862ce <_dtoa_r+0xbae>
   862ee:	e607      	b.n	85f00 <_dtoa_r+0x7e0>
   862f0:	6871      	ldr	r1, [r6, #4]
   862f2:	4620      	mov	r0, r4
   862f4:	f000 fcda 	bl	86cac <_Balloc>
   862f8:	4605      	mov	r5, r0
   862fa:	6933      	ldr	r3, [r6, #16]
   862fc:	f106 010c 	add.w	r1, r6, #12
   86300:	3302      	adds	r3, #2
   86302:	009a      	lsls	r2, r3, #2
   86304:	300c      	adds	r0, #12
   86306:	f000 fc57 	bl	86bb8 <memcpy>
   8630a:	4629      	mov	r1, r5
   8630c:	2201      	movs	r2, #1
   8630e:	4620      	mov	r0, r4
   86310:	f000 fe7a 	bl	87008 <__lshift>
   86314:	9008      	str	r0, [sp, #32]
   86316:	e4b6      	b.n	85c86 <_dtoa_r+0x566>
   86318:	2b39      	cmp	r3, #57	; 0x39
   8631a:	f8cd b020 	str.w	fp, [sp, #32]
   8631e:	46d0      	mov	r8, sl
   86320:	f000 80a5 	beq.w	8646e <_dtoa_r+0xd4e>
   86324:	f103 0a01 	add.w	sl, r3, #1
   86328:	46b3      	mov	fp, r6
   8632a:	f887 a000 	strb.w	sl, [r7]
   8632e:	1c7d      	adds	r5, r7, #1
   86330:	9e08      	ldr	r6, [sp, #32]
   86332:	e570      	b.n	85e16 <_dtoa_r+0x6f6>
   86334:	465a      	mov	r2, fp
   86336:	46d0      	mov	r8, sl
   86338:	46b3      	mov	fp, r6
   8633a:	469a      	mov	sl, r3
   8633c:	4616      	mov	r6, r2
   8633e:	e54e      	b.n	85dde <_dtoa_r+0x6be>
   86340:	9812      	ldr	r0, [sp, #72]	; 0x48
   86342:	495e      	ldr	r1, [pc, #376]	; (864bc <_dtoa_r+0xd9c>)
   86344:	462a      	mov	r2, r5
   86346:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8634a:	4633      	mov	r3, r6
   8634c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   86350:	f001 fdd2 	bl	87ef8 <__aeabi_dmul>
   86354:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   86358:	4638      	mov	r0, r7
   8635a:	4641      	mov	r1, r8
   8635c:	f002 f87c 	bl	88458 <__aeabi_d2iz>
   86360:	4605      	mov	r5, r0
   86362:	f001 fd63 	bl	87e2c <__aeabi_i2d>
   86366:	4602      	mov	r2, r0
   86368:	460b      	mov	r3, r1
   8636a:	4638      	mov	r0, r7
   8636c:	4641      	mov	r1, r8
   8636e:	f001 fc0f 	bl	87b90 <__aeabi_dsub>
   86372:	4606      	mov	r6, r0
   86374:	9812      	ldr	r0, [sp, #72]	; 0x48
   86376:	9a04      	ldr	r2, [sp, #16]
   86378:	3530      	adds	r5, #48	; 0x30
   8637a:	2801      	cmp	r0, #1
   8637c:	7015      	strb	r5, [r2, #0]
   8637e:	460f      	mov	r7, r1
   86380:	f102 0501 	add.w	r5, r2, #1
   86384:	d026      	beq.n	863d4 <_dtoa_r+0xcb4>
   86386:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86388:	9a04      	ldr	r2, [sp, #16]
   8638a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8638e:	4413      	add	r3, r2
   86390:	f04f 0a00 	mov.w	sl, #0
   86394:	4699      	mov	r9, r3
   86396:	f8df b130 	ldr.w	fp, [pc, #304]	; 864c8 <_dtoa_r+0xda8>
   8639a:	4652      	mov	r2, sl
   8639c:	465b      	mov	r3, fp
   8639e:	4630      	mov	r0, r6
   863a0:	4639      	mov	r1, r7
   863a2:	f001 fda9 	bl	87ef8 <__aeabi_dmul>
   863a6:	460f      	mov	r7, r1
   863a8:	4606      	mov	r6, r0
   863aa:	f002 f855 	bl	88458 <__aeabi_d2iz>
   863ae:	4680      	mov	r8, r0
   863b0:	f001 fd3c 	bl	87e2c <__aeabi_i2d>
   863b4:	4602      	mov	r2, r0
   863b6:	460b      	mov	r3, r1
   863b8:	4630      	mov	r0, r6
   863ba:	4639      	mov	r1, r7
   863bc:	f001 fbe8 	bl	87b90 <__aeabi_dsub>
   863c0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   863c4:	f805 8b01 	strb.w	r8, [r5], #1
   863c8:	454d      	cmp	r5, r9
   863ca:	4606      	mov	r6, r0
   863cc:	460f      	mov	r7, r1
   863ce:	d1e4      	bne.n	8639a <_dtoa_r+0xc7a>
   863d0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   863d4:	2200      	movs	r2, #0
   863d6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   863da:	4b3a      	ldr	r3, [pc, #232]	; (864c4 <_dtoa_r+0xda4>)
   863dc:	f001 fbda 	bl	87b94 <__adddf3>
   863e0:	4632      	mov	r2, r6
   863e2:	463b      	mov	r3, r7
   863e4:	f001 fffa 	bl	883dc <__aeabi_dcmplt>
   863e8:	2800      	cmp	r0, #0
   863ea:	d046      	beq.n	8647a <_dtoa_r+0xd5a>
   863ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
   863ee:	9302      	str	r3, [sp, #8]
   863f0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   863f4:	f7ff bb42 	b.w	85a7c <_dtoa_r+0x35c>
   863f8:	f04f 0800 	mov.w	r8, #0
   863fc:	4646      	mov	r6, r8
   863fe:	e6a8      	b.n	86152 <_dtoa_r+0xa32>
   86400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86402:	9a07      	ldr	r2, [sp, #28]
   86404:	1a9d      	subs	r5, r3, r2
   86406:	2300      	movs	r3, #0
   86408:	f7ff bb70 	b.w	85aec <_dtoa_r+0x3cc>
   8640c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8640e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86410:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   86414:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   86416:	f7ff bb69 	b.w	85aec <_dtoa_r+0x3cc>
   8641a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   8641e:	f04f 0a02 	mov.w	sl, #2
   86422:	e56d      	b.n	85f00 <_dtoa_r+0x7e0>
   86424:	9b07      	ldr	r3, [sp, #28]
   86426:	2b00      	cmp	r3, #0
   86428:	f43f aeb8 	beq.w	8619c <_dtoa_r+0xa7c>
   8642c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8642e:	2b00      	cmp	r3, #0
   86430:	f77f aede 	ble.w	861f0 <_dtoa_r+0xad0>
   86434:	2200      	movs	r2, #0
   86436:	4b24      	ldr	r3, [pc, #144]	; (864c8 <_dtoa_r+0xda8>)
   86438:	4638      	mov	r0, r7
   8643a:	4641      	mov	r1, r8
   8643c:	f001 fd5c 	bl	87ef8 <__aeabi_dmul>
   86440:	4607      	mov	r7, r0
   86442:	4688      	mov	r8, r1
   86444:	f10a 0001 	add.w	r0, sl, #1
   86448:	f001 fcf0 	bl	87e2c <__aeabi_i2d>
   8644c:	463a      	mov	r2, r7
   8644e:	4643      	mov	r3, r8
   86450:	f001 fd52 	bl	87ef8 <__aeabi_dmul>
   86454:	2200      	movs	r2, #0
   86456:	4b17      	ldr	r3, [pc, #92]	; (864b4 <_dtoa_r+0xd94>)
   86458:	f001 fb9c 	bl	87b94 <__adddf3>
   8645c:	9a02      	ldr	r2, [sp, #8]
   8645e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86460:	3a01      	subs	r2, #1
   86462:	4605      	mov	r5, r0
   86464:	9215      	str	r2, [sp, #84]	; 0x54
   86466:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8646a:	9312      	str	r3, [sp, #72]	; 0x48
   8646c:	e569      	b.n	85f42 <_dtoa_r+0x822>
   8646e:	2239      	movs	r2, #57	; 0x39
   86470:	46b3      	mov	fp, r6
   86472:	703a      	strb	r2, [r7, #0]
   86474:	9e08      	ldr	r6, [sp, #32]
   86476:	1c7d      	adds	r5, r7, #1
   86478:	e4bf      	b.n	85dfa <_dtoa_r+0x6da>
   8647a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8647e:	2000      	movs	r0, #0
   86480:	4910      	ldr	r1, [pc, #64]	; (864c4 <_dtoa_r+0xda4>)
   86482:	f001 fb85 	bl	87b90 <__aeabi_dsub>
   86486:	4632      	mov	r2, r6
   86488:	463b      	mov	r3, r7
   8648a:	f001 ffc5 	bl	88418 <__aeabi_dcmpgt>
   8648e:	b908      	cbnz	r0, 86494 <_dtoa_r+0xd74>
   86490:	e6ae      	b.n	861f0 <_dtoa_r+0xad0>
   86492:	4615      	mov	r5, r2
   86494:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   86498:	1e6a      	subs	r2, r5, #1
   8649a:	2b30      	cmp	r3, #48	; 0x30
   8649c:	d0f9      	beq.n	86492 <_dtoa_r+0xd72>
   8649e:	e5d7      	b.n	86050 <_dtoa_r+0x930>
   864a0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   864a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   864a6:	9302      	str	r3, [sp, #8]
   864a8:	f7ff bae8 	b.w	85a7c <_dtoa_r+0x35c>
   864ac:	970c      	str	r7, [sp, #48]	; 0x30
   864ae:	f7ff bba7 	b.w	85c00 <_dtoa_r+0x4e0>
   864b2:	bf00      	nop
   864b4:	401c0000 	.word	0x401c0000
   864b8:	40140000 	.word	0x40140000
   864bc:	00089850 	.word	0x00089850
   864c0:	00089828 	.word	0x00089828
   864c4:	3fe00000 	.word	0x3fe00000
   864c8:	40240000 	.word	0x40240000
   864cc:	2b39      	cmp	r3, #57	; 0x39
   864ce:	f8cd b020 	str.w	fp, [sp, #32]
   864d2:	46d0      	mov	r8, sl
   864d4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   864d8:	469a      	mov	sl, r3
   864da:	d0c8      	beq.n	8646e <_dtoa_r+0xd4e>
   864dc:	f1bb 0f00 	cmp.w	fp, #0
   864e0:	f73f aec0 	bgt.w	86264 <_dtoa_r+0xb44>
   864e4:	e6c0      	b.n	86268 <_dtoa_r+0xb48>
   864e6:	f47f aebf 	bne.w	86268 <_dtoa_r+0xb48>
   864ea:	f01a 0f01 	tst.w	sl, #1
   864ee:	f43f aebb 	beq.w	86268 <_dtoa_r+0xb48>
   864f2:	e6b3      	b.n	8625c <_dtoa_r+0xb3c>
   864f4:	f04f 0800 	mov.w	r8, #0
   864f8:	4646      	mov	r6, r8
   864fa:	e5e8      	b.n	860ce <_dtoa_r+0x9ae>
   864fc:	4631      	mov	r1, r6
   864fe:	2300      	movs	r3, #0
   86500:	220a      	movs	r2, #10
   86502:	4620      	mov	r0, r4
   86504:	f000 fc02 	bl	86d0c <__multadd>
   86508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8650a:	4606      	mov	r6, r0
   8650c:	2b00      	cmp	r3, #0
   8650e:	dd07      	ble.n	86520 <_dtoa_r+0xe00>
   86510:	9307      	str	r3, [sp, #28]
   86512:	f7ff bbab 	b.w	85c6c <_dtoa_r+0x54c>
   86516:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86518:	2b02      	cmp	r3, #2
   8651a:	dc1f      	bgt.n	8655c <_dtoa_r+0xe3c>
   8651c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8651e:	e43c      	b.n	85d9a <_dtoa_r+0x67a>
   86520:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86522:	2b02      	cmp	r3, #2
   86524:	dc1a      	bgt.n	8655c <_dtoa_r+0xe3c>
   86526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86528:	e7f2      	b.n	86510 <_dtoa_r+0xdf0>
   8652a:	f43f ab81 	beq.w	85c30 <_dtoa_r+0x510>
   8652e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   86532:	e411      	b.n	85d58 <_dtoa_r+0x638>
   86534:	2500      	movs	r5, #0
   86536:	4620      	mov	r0, r4
   86538:	6465      	str	r5, [r4, #68]	; 0x44
   8653a:	4629      	mov	r1, r5
   8653c:	f000 fbb6 	bl	86cac <_Balloc>
   86540:	f04f 33ff 	mov.w	r3, #4294967295
   86544:	9307      	str	r3, [sp, #28]
   86546:	930f      	str	r3, [sp, #60]	; 0x3c
   86548:	2301      	movs	r3, #1
   8654a:	9004      	str	r0, [sp, #16]
   8654c:	9525      	str	r5, [sp, #148]	; 0x94
   8654e:	6420      	str	r0, [r4, #64]	; 0x40
   86550:	930b      	str	r3, [sp, #44]	; 0x2c
   86552:	f7ff b9e0 	b.w	85916 <_dtoa_r+0x1f6>
   86556:	2501      	movs	r5, #1
   86558:	f7ff b9a8 	b.w	858ac <_dtoa_r+0x18c>
   8655c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8655e:	9307      	str	r3, [sp, #28]
   86560:	e5e8      	b.n	86134 <_dtoa_r+0xa14>
   86562:	bf00      	nop

00086564 <__libc_fini_array>:
   86564:	b538      	push	{r3, r4, r5, lr}
   86566:	4c0a      	ldr	r4, [pc, #40]	; (86590 <__libc_fini_array+0x2c>)
   86568:	4d0a      	ldr	r5, [pc, #40]	; (86594 <__libc_fini_array+0x30>)
   8656a:	1b64      	subs	r4, r4, r5
   8656c:	10a4      	asrs	r4, r4, #2
   8656e:	d00a      	beq.n	86586 <__libc_fini_array+0x22>
   86570:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   86574:	3b01      	subs	r3, #1
   86576:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8657a:	3c01      	subs	r4, #1
   8657c:	f855 3904 	ldr.w	r3, [r5], #-4
   86580:	4798      	blx	r3
   86582:	2c00      	cmp	r4, #0
   86584:	d1f9      	bne.n	8657a <__libc_fini_array+0x16>
   86586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8658a:	f003 ba57 	b.w	89a3c <_fini>
   8658e:	bf00      	nop
   86590:	00089a4c 	.word	0x00089a4c
   86594:	00089a48 	.word	0x00089a48

00086598 <__locale_ctype_ptr_l>:
   86598:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   8659c:	4770      	bx	lr
   8659e:	bf00      	nop

000865a0 <_localeconv_r>:
   865a0:	4a04      	ldr	r2, [pc, #16]	; (865b4 <_localeconv_r+0x14>)
   865a2:	4b05      	ldr	r3, [pc, #20]	; (865b8 <_localeconv_r+0x18>)
   865a4:	6812      	ldr	r2, [r2, #0]
   865a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
   865a8:	2800      	cmp	r0, #0
   865aa:	bf08      	it	eq
   865ac:	4618      	moveq	r0, r3
   865ae:	30f0      	adds	r0, #240	; 0xf0
   865b0:	4770      	bx	lr
   865b2:	bf00      	nop
   865b4:	2000062c 	.word	0x2000062c
   865b8:	20000a58 	.word	0x20000a58

000865bc <_malloc_r>:
   865bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   865c0:	f101 060b 	add.w	r6, r1, #11
   865c4:	2e16      	cmp	r6, #22
   865c6:	b083      	sub	sp, #12
   865c8:	4605      	mov	r5, r0
   865ca:	f240 809e 	bls.w	8670a <_malloc_r+0x14e>
   865ce:	f036 0607 	bics.w	r6, r6, #7
   865d2:	f100 80bd 	bmi.w	86750 <_malloc_r+0x194>
   865d6:	42b1      	cmp	r1, r6
   865d8:	f200 80ba 	bhi.w	86750 <_malloc_r+0x194>
   865dc:	f000 fb62 	bl	86ca4 <__malloc_lock>
   865e0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   865e4:	f0c0 8285 	bcc.w	86af2 <_malloc_r+0x536>
   865e8:	0a73      	lsrs	r3, r6, #9
   865ea:	f000 80b8 	beq.w	8675e <_malloc_r+0x1a2>
   865ee:	2b04      	cmp	r3, #4
   865f0:	f200 816c 	bhi.w	868cc <_malloc_r+0x310>
   865f4:	09b3      	lsrs	r3, r6, #6
   865f6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   865fa:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   865fe:	00c1      	lsls	r1, r0, #3
   86600:	4fb8      	ldr	r7, [pc, #736]	; (868e4 <_malloc_r+0x328>)
   86602:	4439      	add	r1, r7
   86604:	684c      	ldr	r4, [r1, #4]
   86606:	3908      	subs	r1, #8
   86608:	42a1      	cmp	r1, r4
   8660a:	d106      	bne.n	8661a <_malloc_r+0x5e>
   8660c:	e00c      	b.n	86628 <_malloc_r+0x6c>
   8660e:	2a00      	cmp	r2, #0
   86610:	f280 80ab 	bge.w	8676a <_malloc_r+0x1ae>
   86614:	68e4      	ldr	r4, [r4, #12]
   86616:	42a1      	cmp	r1, r4
   86618:	d006      	beq.n	86628 <_malloc_r+0x6c>
   8661a:	6863      	ldr	r3, [r4, #4]
   8661c:	f023 0303 	bic.w	r3, r3, #3
   86620:	1b9a      	subs	r2, r3, r6
   86622:	2a0f      	cmp	r2, #15
   86624:	ddf3      	ble.n	8660e <_malloc_r+0x52>
   86626:	4670      	mov	r0, lr
   86628:	693c      	ldr	r4, [r7, #16]
   8662a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 868f8 <_malloc_r+0x33c>
   8662e:	4574      	cmp	r4, lr
   86630:	f000 819e 	beq.w	86970 <_malloc_r+0x3b4>
   86634:	6863      	ldr	r3, [r4, #4]
   86636:	f023 0303 	bic.w	r3, r3, #3
   8663a:	1b9a      	subs	r2, r3, r6
   8663c:	2a0f      	cmp	r2, #15
   8663e:	f300 8183 	bgt.w	86948 <_malloc_r+0x38c>
   86642:	2a00      	cmp	r2, #0
   86644:	f8c7 e014 	str.w	lr, [r7, #20]
   86648:	f8c7 e010 	str.w	lr, [r7, #16]
   8664c:	f280 8091 	bge.w	86772 <_malloc_r+0x1b6>
   86650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86654:	f080 8154 	bcs.w	86900 <_malloc_r+0x344>
   86658:	2201      	movs	r2, #1
   8665a:	08db      	lsrs	r3, r3, #3
   8665c:	6879      	ldr	r1, [r7, #4]
   8665e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   86662:	4413      	add	r3, r2
   86664:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   86668:	fa02 f20c 	lsl.w	r2, r2, ip
   8666c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   86670:	430a      	orrs	r2, r1
   86672:	f1ac 0108 	sub.w	r1, ip, #8
   86676:	60e1      	str	r1, [r4, #12]
   86678:	f8c4 8008 	str.w	r8, [r4, #8]
   8667c:	607a      	str	r2, [r7, #4]
   8667e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   86682:	f8c8 400c 	str.w	r4, [r8, #12]
   86686:	2401      	movs	r4, #1
   86688:	1083      	asrs	r3, r0, #2
   8668a:	409c      	lsls	r4, r3
   8668c:	4294      	cmp	r4, r2
   8668e:	d87d      	bhi.n	8678c <_malloc_r+0x1d0>
   86690:	4214      	tst	r4, r2
   86692:	d106      	bne.n	866a2 <_malloc_r+0xe6>
   86694:	f020 0003 	bic.w	r0, r0, #3
   86698:	0064      	lsls	r4, r4, #1
   8669a:	4214      	tst	r4, r2
   8669c:	f100 0004 	add.w	r0, r0, #4
   866a0:	d0fa      	beq.n	86698 <_malloc_r+0xdc>
   866a2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   866a6:	46cc      	mov	ip, r9
   866a8:	4680      	mov	r8, r0
   866aa:	f8dc 300c 	ldr.w	r3, [ip, #12]
   866ae:	459c      	cmp	ip, r3
   866b0:	d107      	bne.n	866c2 <_malloc_r+0x106>
   866b2:	e15f      	b.n	86974 <_malloc_r+0x3b8>
   866b4:	2a00      	cmp	r2, #0
   866b6:	f280 816d 	bge.w	86994 <_malloc_r+0x3d8>
   866ba:	68db      	ldr	r3, [r3, #12]
   866bc:	459c      	cmp	ip, r3
   866be:	f000 8159 	beq.w	86974 <_malloc_r+0x3b8>
   866c2:	6859      	ldr	r1, [r3, #4]
   866c4:	f021 0103 	bic.w	r1, r1, #3
   866c8:	1b8a      	subs	r2, r1, r6
   866ca:	2a0f      	cmp	r2, #15
   866cc:	ddf2      	ble.n	866b4 <_malloc_r+0xf8>
   866ce:	68dc      	ldr	r4, [r3, #12]
   866d0:	f8d3 c008 	ldr.w	ip, [r3, #8]
   866d4:	f046 0801 	orr.w	r8, r6, #1
   866d8:	4628      	mov	r0, r5
   866da:	441e      	add	r6, r3
   866dc:	f042 0501 	orr.w	r5, r2, #1
   866e0:	f8c3 8004 	str.w	r8, [r3, #4]
   866e4:	f8cc 400c 	str.w	r4, [ip, #12]
   866e8:	f8c4 c008 	str.w	ip, [r4, #8]
   866ec:	617e      	str	r6, [r7, #20]
   866ee:	613e      	str	r6, [r7, #16]
   866f0:	f8c6 e00c 	str.w	lr, [r6, #12]
   866f4:	f8c6 e008 	str.w	lr, [r6, #8]
   866f8:	6075      	str	r5, [r6, #4]
   866fa:	505a      	str	r2, [r3, r1]
   866fc:	9300      	str	r3, [sp, #0]
   866fe:	f000 fad3 	bl	86ca8 <__malloc_unlock>
   86702:	9b00      	ldr	r3, [sp, #0]
   86704:	f103 0408 	add.w	r4, r3, #8
   86708:	e01e      	b.n	86748 <_malloc_r+0x18c>
   8670a:	2910      	cmp	r1, #16
   8670c:	d820      	bhi.n	86750 <_malloc_r+0x194>
   8670e:	f000 fac9 	bl	86ca4 <__malloc_lock>
   86712:	2610      	movs	r6, #16
   86714:	2318      	movs	r3, #24
   86716:	2002      	movs	r0, #2
   86718:	4f72      	ldr	r7, [pc, #456]	; (868e4 <_malloc_r+0x328>)
   8671a:	443b      	add	r3, r7
   8671c:	685c      	ldr	r4, [r3, #4]
   8671e:	f1a3 0208 	sub.w	r2, r3, #8
   86722:	4294      	cmp	r4, r2
   86724:	f000 812f 	beq.w	86986 <_malloc_r+0x3ca>
   86728:	6863      	ldr	r3, [r4, #4]
   8672a:	68e1      	ldr	r1, [r4, #12]
   8672c:	f023 0303 	bic.w	r3, r3, #3
   86730:	4423      	add	r3, r4
   86732:	685a      	ldr	r2, [r3, #4]
   86734:	68a6      	ldr	r6, [r4, #8]
   86736:	f042 0201 	orr.w	r2, r2, #1
   8673a:	60f1      	str	r1, [r6, #12]
   8673c:	4628      	mov	r0, r5
   8673e:	608e      	str	r6, [r1, #8]
   86740:	605a      	str	r2, [r3, #4]
   86742:	f000 fab1 	bl	86ca8 <__malloc_unlock>
   86746:	3408      	adds	r4, #8
   86748:	4620      	mov	r0, r4
   8674a:	b003      	add	sp, #12
   8674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86750:	2400      	movs	r4, #0
   86752:	230c      	movs	r3, #12
   86754:	4620      	mov	r0, r4
   86756:	602b      	str	r3, [r5, #0]
   86758:	b003      	add	sp, #12
   8675a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8675e:	2040      	movs	r0, #64	; 0x40
   86760:	f44f 7100 	mov.w	r1, #512	; 0x200
   86764:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   86768:	e74a      	b.n	86600 <_malloc_r+0x44>
   8676a:	4423      	add	r3, r4
   8676c:	685a      	ldr	r2, [r3, #4]
   8676e:	68e1      	ldr	r1, [r4, #12]
   86770:	e7e0      	b.n	86734 <_malloc_r+0x178>
   86772:	4423      	add	r3, r4
   86774:	685a      	ldr	r2, [r3, #4]
   86776:	4628      	mov	r0, r5
   86778:	f042 0201 	orr.w	r2, r2, #1
   8677c:	605a      	str	r2, [r3, #4]
   8677e:	3408      	adds	r4, #8
   86780:	f000 fa92 	bl	86ca8 <__malloc_unlock>
   86784:	4620      	mov	r0, r4
   86786:	b003      	add	sp, #12
   86788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8678c:	68bc      	ldr	r4, [r7, #8]
   8678e:	6863      	ldr	r3, [r4, #4]
   86790:	f023 0803 	bic.w	r8, r3, #3
   86794:	45b0      	cmp	r8, r6
   86796:	d304      	bcc.n	867a2 <_malloc_r+0x1e6>
   86798:	eba8 0306 	sub.w	r3, r8, r6
   8679c:	2b0f      	cmp	r3, #15
   8679e:	f300 8085 	bgt.w	868ac <_malloc_r+0x2f0>
   867a2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 868fc <_malloc_r+0x340>
   867a6:	4b50      	ldr	r3, [pc, #320]	; (868e8 <_malloc_r+0x32c>)
   867a8:	f8d9 2000 	ldr.w	r2, [r9]
   867ac:	681b      	ldr	r3, [r3, #0]
   867ae:	3201      	adds	r2, #1
   867b0:	4433      	add	r3, r6
   867b2:	eb04 0a08 	add.w	sl, r4, r8
   867b6:	f000 8154 	beq.w	86a62 <_malloc_r+0x4a6>
   867ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   867be:	330f      	adds	r3, #15
   867c0:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   867c4:	f02b 0b0f 	bic.w	fp, fp, #15
   867c8:	4659      	mov	r1, fp
   867ca:	4628      	mov	r0, r5
   867cc:	f000 fd6a 	bl	872a4 <_sbrk_r>
   867d0:	1c41      	adds	r1, r0, #1
   867d2:	4602      	mov	r2, r0
   867d4:	f000 80fb 	beq.w	869ce <_malloc_r+0x412>
   867d8:	4582      	cmp	sl, r0
   867da:	f200 80f6 	bhi.w	869ca <_malloc_r+0x40e>
   867de:	4b43      	ldr	r3, [pc, #268]	; (868ec <_malloc_r+0x330>)
   867e0:	6819      	ldr	r1, [r3, #0]
   867e2:	4459      	add	r1, fp
   867e4:	6019      	str	r1, [r3, #0]
   867e6:	f000 814c 	beq.w	86a82 <_malloc_r+0x4c6>
   867ea:	f8d9 0000 	ldr.w	r0, [r9]
   867ee:	3001      	adds	r0, #1
   867f0:	bf1b      	ittet	ne
   867f2:	eba2 0a0a 	subne.w	sl, r2, sl
   867f6:	4451      	addne	r1, sl
   867f8:	f8c9 2000 	streq.w	r2, [r9]
   867fc:	6019      	strne	r1, [r3, #0]
   867fe:	f012 0107 	ands.w	r1, r2, #7
   86802:	f000 8114 	beq.w	86a2e <_malloc_r+0x472>
   86806:	f1c1 0008 	rsb	r0, r1, #8
   8680a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8680e:	4402      	add	r2, r0
   86810:	3108      	adds	r1, #8
   86812:	eb02 090b 	add.w	r9, r2, fp
   86816:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8681a:	eba1 0909 	sub.w	r9, r1, r9
   8681e:	4649      	mov	r1, r9
   86820:	4628      	mov	r0, r5
   86822:	9301      	str	r3, [sp, #4]
   86824:	9200      	str	r2, [sp, #0]
   86826:	f000 fd3d 	bl	872a4 <_sbrk_r>
   8682a:	1c43      	adds	r3, r0, #1
   8682c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   86830:	f000 8142 	beq.w	86ab8 <_malloc_r+0x4fc>
   86834:	1a80      	subs	r0, r0, r2
   86836:	4448      	add	r0, r9
   86838:	f040 0001 	orr.w	r0, r0, #1
   8683c:	6819      	ldr	r1, [r3, #0]
   8683e:	42bc      	cmp	r4, r7
   86840:	4449      	add	r1, r9
   86842:	60ba      	str	r2, [r7, #8]
   86844:	6019      	str	r1, [r3, #0]
   86846:	6050      	str	r0, [r2, #4]
   86848:	d017      	beq.n	8687a <_malloc_r+0x2be>
   8684a:	f1b8 0f0f 	cmp.w	r8, #15
   8684e:	f240 80fa 	bls.w	86a46 <_malloc_r+0x48a>
   86852:	f04f 0c05 	mov.w	ip, #5
   86856:	6862      	ldr	r2, [r4, #4]
   86858:	f1a8 000c 	sub.w	r0, r8, #12
   8685c:	f020 0007 	bic.w	r0, r0, #7
   86860:	f002 0201 	and.w	r2, r2, #1
   86864:	eb04 0e00 	add.w	lr, r4, r0
   86868:	4302      	orrs	r2, r0
   8686a:	280f      	cmp	r0, #15
   8686c:	6062      	str	r2, [r4, #4]
   8686e:	f8ce c004 	str.w	ip, [lr, #4]
   86872:	f8ce c008 	str.w	ip, [lr, #8]
   86876:	f200 8116 	bhi.w	86aa6 <_malloc_r+0x4ea>
   8687a:	4b1d      	ldr	r3, [pc, #116]	; (868f0 <_malloc_r+0x334>)
   8687c:	68bc      	ldr	r4, [r7, #8]
   8687e:	681a      	ldr	r2, [r3, #0]
   86880:	4291      	cmp	r1, r2
   86882:	bf88      	it	hi
   86884:	6019      	strhi	r1, [r3, #0]
   86886:	4b1b      	ldr	r3, [pc, #108]	; (868f4 <_malloc_r+0x338>)
   86888:	681a      	ldr	r2, [r3, #0]
   8688a:	4291      	cmp	r1, r2
   8688c:	6862      	ldr	r2, [r4, #4]
   8688e:	bf88      	it	hi
   86890:	6019      	strhi	r1, [r3, #0]
   86892:	f022 0203 	bic.w	r2, r2, #3
   86896:	4296      	cmp	r6, r2
   86898:	eba2 0306 	sub.w	r3, r2, r6
   8689c:	d801      	bhi.n	868a2 <_malloc_r+0x2e6>
   8689e:	2b0f      	cmp	r3, #15
   868a0:	dc04      	bgt.n	868ac <_malloc_r+0x2f0>
   868a2:	4628      	mov	r0, r5
   868a4:	f000 fa00 	bl	86ca8 <__malloc_unlock>
   868a8:	2400      	movs	r4, #0
   868aa:	e74d      	b.n	86748 <_malloc_r+0x18c>
   868ac:	f046 0201 	orr.w	r2, r6, #1
   868b0:	f043 0301 	orr.w	r3, r3, #1
   868b4:	4426      	add	r6, r4
   868b6:	6062      	str	r2, [r4, #4]
   868b8:	4628      	mov	r0, r5
   868ba:	60be      	str	r6, [r7, #8]
   868bc:	3408      	adds	r4, #8
   868be:	6073      	str	r3, [r6, #4]
   868c0:	f000 f9f2 	bl	86ca8 <__malloc_unlock>
   868c4:	4620      	mov	r0, r4
   868c6:	b003      	add	sp, #12
   868c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   868cc:	2b14      	cmp	r3, #20
   868ce:	d970      	bls.n	869b2 <_malloc_r+0x3f6>
   868d0:	2b54      	cmp	r3, #84	; 0x54
   868d2:	f200 80a2 	bhi.w	86a1a <_malloc_r+0x45e>
   868d6:	0b33      	lsrs	r3, r6, #12
   868d8:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   868dc:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   868e0:	00c1      	lsls	r1, r0, #3
   868e2:	e68d      	b.n	86600 <_malloc_r+0x44>
   868e4:	20000bc4 	.word	0x20000bc4
   868e8:	200010ac 	.word	0x200010ac
   868ec:	2000107c 	.word	0x2000107c
   868f0:	200010a4 	.word	0x200010a4
   868f4:	200010a8 	.word	0x200010a8
   868f8:	20000bcc 	.word	0x20000bcc
   868fc:	20000fcc 	.word	0x20000fcc
   86900:	0a5a      	lsrs	r2, r3, #9
   86902:	2a04      	cmp	r2, #4
   86904:	d95b      	bls.n	869be <_malloc_r+0x402>
   86906:	2a14      	cmp	r2, #20
   86908:	f200 80ae 	bhi.w	86a68 <_malloc_r+0x4ac>
   8690c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   86910:	00c9      	lsls	r1, r1, #3
   86912:	325b      	adds	r2, #91	; 0x5b
   86914:	eb07 0c01 	add.w	ip, r7, r1
   86918:	5879      	ldr	r1, [r7, r1]
   8691a:	f1ac 0c08 	sub.w	ip, ip, #8
   8691e:	458c      	cmp	ip, r1
   86920:	f000 8088 	beq.w	86a34 <_malloc_r+0x478>
   86924:	684a      	ldr	r2, [r1, #4]
   86926:	f022 0203 	bic.w	r2, r2, #3
   8692a:	4293      	cmp	r3, r2
   8692c:	d273      	bcs.n	86a16 <_malloc_r+0x45a>
   8692e:	6889      	ldr	r1, [r1, #8]
   86930:	458c      	cmp	ip, r1
   86932:	d1f7      	bne.n	86924 <_malloc_r+0x368>
   86934:	f8dc 300c 	ldr.w	r3, [ip, #12]
   86938:	687a      	ldr	r2, [r7, #4]
   8693a:	60e3      	str	r3, [r4, #12]
   8693c:	f8c4 c008 	str.w	ip, [r4, #8]
   86940:	609c      	str	r4, [r3, #8]
   86942:	f8cc 400c 	str.w	r4, [ip, #12]
   86946:	e69e      	b.n	86686 <_malloc_r+0xca>
   86948:	f046 0c01 	orr.w	ip, r6, #1
   8694c:	f042 0101 	orr.w	r1, r2, #1
   86950:	4426      	add	r6, r4
   86952:	f8c4 c004 	str.w	ip, [r4, #4]
   86956:	4628      	mov	r0, r5
   86958:	617e      	str	r6, [r7, #20]
   8695a:	613e      	str	r6, [r7, #16]
   8695c:	f8c6 e00c 	str.w	lr, [r6, #12]
   86960:	f8c6 e008 	str.w	lr, [r6, #8]
   86964:	6071      	str	r1, [r6, #4]
   86966:	50e2      	str	r2, [r4, r3]
   86968:	f000 f99e 	bl	86ca8 <__malloc_unlock>
   8696c:	3408      	adds	r4, #8
   8696e:	e6eb      	b.n	86748 <_malloc_r+0x18c>
   86970:	687a      	ldr	r2, [r7, #4]
   86972:	e688      	b.n	86686 <_malloc_r+0xca>
   86974:	f108 0801 	add.w	r8, r8, #1
   86978:	f018 0f03 	tst.w	r8, #3
   8697c:	f10c 0c08 	add.w	ip, ip, #8
   86980:	f47f ae93 	bne.w	866aa <_malloc_r+0xee>
   86984:	e02d      	b.n	869e2 <_malloc_r+0x426>
   86986:	68dc      	ldr	r4, [r3, #12]
   86988:	42a3      	cmp	r3, r4
   8698a:	bf08      	it	eq
   8698c:	3002      	addeq	r0, #2
   8698e:	f43f ae4b 	beq.w	86628 <_malloc_r+0x6c>
   86992:	e6c9      	b.n	86728 <_malloc_r+0x16c>
   86994:	461c      	mov	r4, r3
   86996:	4419      	add	r1, r3
   86998:	684a      	ldr	r2, [r1, #4]
   8699a:	68db      	ldr	r3, [r3, #12]
   8699c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   869a0:	f042 0201 	orr.w	r2, r2, #1
   869a4:	604a      	str	r2, [r1, #4]
   869a6:	4628      	mov	r0, r5
   869a8:	60f3      	str	r3, [r6, #12]
   869aa:	609e      	str	r6, [r3, #8]
   869ac:	f000 f97c 	bl	86ca8 <__malloc_unlock>
   869b0:	e6ca      	b.n	86748 <_malloc_r+0x18c>
   869b2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   869b6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   869ba:	00c1      	lsls	r1, r0, #3
   869bc:	e620      	b.n	86600 <_malloc_r+0x44>
   869be:	099a      	lsrs	r2, r3, #6
   869c0:	f102 0139 	add.w	r1, r2, #57	; 0x39
   869c4:	00c9      	lsls	r1, r1, #3
   869c6:	3238      	adds	r2, #56	; 0x38
   869c8:	e7a4      	b.n	86914 <_malloc_r+0x358>
   869ca:	42bc      	cmp	r4, r7
   869cc:	d054      	beq.n	86a78 <_malloc_r+0x4bc>
   869ce:	68bc      	ldr	r4, [r7, #8]
   869d0:	6862      	ldr	r2, [r4, #4]
   869d2:	f022 0203 	bic.w	r2, r2, #3
   869d6:	e75e      	b.n	86896 <_malloc_r+0x2da>
   869d8:	f859 3908 	ldr.w	r3, [r9], #-8
   869dc:	4599      	cmp	r9, r3
   869de:	f040 8086 	bne.w	86aee <_malloc_r+0x532>
   869e2:	f010 0f03 	tst.w	r0, #3
   869e6:	f100 30ff 	add.w	r0, r0, #4294967295
   869ea:	d1f5      	bne.n	869d8 <_malloc_r+0x41c>
   869ec:	687b      	ldr	r3, [r7, #4]
   869ee:	ea23 0304 	bic.w	r3, r3, r4
   869f2:	607b      	str	r3, [r7, #4]
   869f4:	0064      	lsls	r4, r4, #1
   869f6:	429c      	cmp	r4, r3
   869f8:	f63f aec8 	bhi.w	8678c <_malloc_r+0x1d0>
   869fc:	2c00      	cmp	r4, #0
   869fe:	f43f aec5 	beq.w	8678c <_malloc_r+0x1d0>
   86a02:	421c      	tst	r4, r3
   86a04:	4640      	mov	r0, r8
   86a06:	f47f ae4c 	bne.w	866a2 <_malloc_r+0xe6>
   86a0a:	0064      	lsls	r4, r4, #1
   86a0c:	421c      	tst	r4, r3
   86a0e:	f100 0004 	add.w	r0, r0, #4
   86a12:	d0fa      	beq.n	86a0a <_malloc_r+0x44e>
   86a14:	e645      	b.n	866a2 <_malloc_r+0xe6>
   86a16:	468c      	mov	ip, r1
   86a18:	e78c      	b.n	86934 <_malloc_r+0x378>
   86a1a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86a1e:	d815      	bhi.n	86a4c <_malloc_r+0x490>
   86a20:	0bf3      	lsrs	r3, r6, #15
   86a22:	f103 0078 	add.w	r0, r3, #120	; 0x78
   86a26:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   86a2a:	00c1      	lsls	r1, r0, #3
   86a2c:	e5e8      	b.n	86600 <_malloc_r+0x44>
   86a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   86a32:	e6ee      	b.n	86812 <_malloc_r+0x256>
   86a34:	2101      	movs	r1, #1
   86a36:	687b      	ldr	r3, [r7, #4]
   86a38:	1092      	asrs	r2, r2, #2
   86a3a:	fa01 f202 	lsl.w	r2, r1, r2
   86a3e:	431a      	orrs	r2, r3
   86a40:	607a      	str	r2, [r7, #4]
   86a42:	4663      	mov	r3, ip
   86a44:	e779      	b.n	8693a <_malloc_r+0x37e>
   86a46:	2301      	movs	r3, #1
   86a48:	6053      	str	r3, [r2, #4]
   86a4a:	e72a      	b.n	868a2 <_malloc_r+0x2e6>
   86a4c:	f240 5254 	movw	r2, #1364	; 0x554
   86a50:	4293      	cmp	r3, r2
   86a52:	d822      	bhi.n	86a9a <_malloc_r+0x4de>
   86a54:	0cb3      	lsrs	r3, r6, #18
   86a56:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   86a5a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   86a5e:	00c1      	lsls	r1, r0, #3
   86a60:	e5ce      	b.n	86600 <_malloc_r+0x44>
   86a62:	f103 0b10 	add.w	fp, r3, #16
   86a66:	e6af      	b.n	867c8 <_malloc_r+0x20c>
   86a68:	2a54      	cmp	r2, #84	; 0x54
   86a6a:	d829      	bhi.n	86ac0 <_malloc_r+0x504>
   86a6c:	0b1a      	lsrs	r2, r3, #12
   86a6e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   86a72:	00c9      	lsls	r1, r1, #3
   86a74:	326e      	adds	r2, #110	; 0x6e
   86a76:	e74d      	b.n	86914 <_malloc_r+0x358>
   86a78:	4b20      	ldr	r3, [pc, #128]	; (86afc <_malloc_r+0x540>)
   86a7a:	6819      	ldr	r1, [r3, #0]
   86a7c:	4459      	add	r1, fp
   86a7e:	6019      	str	r1, [r3, #0]
   86a80:	e6b3      	b.n	867ea <_malloc_r+0x22e>
   86a82:	f3ca 000b 	ubfx	r0, sl, #0, #12
   86a86:	2800      	cmp	r0, #0
   86a88:	f47f aeaf 	bne.w	867ea <_malloc_r+0x22e>
   86a8c:	eb08 030b 	add.w	r3, r8, fp
   86a90:	68ba      	ldr	r2, [r7, #8]
   86a92:	f043 0301 	orr.w	r3, r3, #1
   86a96:	6053      	str	r3, [r2, #4]
   86a98:	e6ef      	b.n	8687a <_malloc_r+0x2be>
   86a9a:	207f      	movs	r0, #127	; 0x7f
   86a9c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86aa0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   86aa4:	e5ac      	b.n	86600 <_malloc_r+0x44>
   86aa6:	f104 0108 	add.w	r1, r4, #8
   86aaa:	4628      	mov	r0, r5
   86aac:	9300      	str	r3, [sp, #0]
   86aae:	f000 fd6b 	bl	87588 <_free_r>
   86ab2:	9b00      	ldr	r3, [sp, #0]
   86ab4:	6819      	ldr	r1, [r3, #0]
   86ab6:	e6e0      	b.n	8687a <_malloc_r+0x2be>
   86ab8:	2001      	movs	r0, #1
   86aba:	f04f 0900 	mov.w	r9, #0
   86abe:	e6bd      	b.n	8683c <_malloc_r+0x280>
   86ac0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86ac4:	d805      	bhi.n	86ad2 <_malloc_r+0x516>
   86ac6:	0bda      	lsrs	r2, r3, #15
   86ac8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   86acc:	00c9      	lsls	r1, r1, #3
   86ace:	3277      	adds	r2, #119	; 0x77
   86ad0:	e720      	b.n	86914 <_malloc_r+0x358>
   86ad2:	f240 5154 	movw	r1, #1364	; 0x554
   86ad6:	428a      	cmp	r2, r1
   86ad8:	d805      	bhi.n	86ae6 <_malloc_r+0x52a>
   86ada:	0c9a      	lsrs	r2, r3, #18
   86adc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   86ae0:	00c9      	lsls	r1, r1, #3
   86ae2:	327c      	adds	r2, #124	; 0x7c
   86ae4:	e716      	b.n	86914 <_malloc_r+0x358>
   86ae6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86aea:	227e      	movs	r2, #126	; 0x7e
   86aec:	e712      	b.n	86914 <_malloc_r+0x358>
   86aee:	687b      	ldr	r3, [r7, #4]
   86af0:	e780      	b.n	869f4 <_malloc_r+0x438>
   86af2:	08f0      	lsrs	r0, r6, #3
   86af4:	f106 0308 	add.w	r3, r6, #8
   86af8:	e60e      	b.n	86718 <_malloc_r+0x15c>
   86afa:	bf00      	nop
   86afc:	2000107c 	.word	0x2000107c

00086b00 <__ascii_mbtowc>:
   86b00:	b082      	sub	sp, #8
   86b02:	b149      	cbz	r1, 86b18 <__ascii_mbtowc+0x18>
   86b04:	b15a      	cbz	r2, 86b1e <__ascii_mbtowc+0x1e>
   86b06:	b16b      	cbz	r3, 86b24 <__ascii_mbtowc+0x24>
   86b08:	7813      	ldrb	r3, [r2, #0]
   86b0a:	600b      	str	r3, [r1, #0]
   86b0c:	7812      	ldrb	r2, [r2, #0]
   86b0e:	1c10      	adds	r0, r2, #0
   86b10:	bf18      	it	ne
   86b12:	2001      	movne	r0, #1
   86b14:	b002      	add	sp, #8
   86b16:	4770      	bx	lr
   86b18:	a901      	add	r1, sp, #4
   86b1a:	2a00      	cmp	r2, #0
   86b1c:	d1f3      	bne.n	86b06 <__ascii_mbtowc+0x6>
   86b1e:	4610      	mov	r0, r2
   86b20:	b002      	add	sp, #8
   86b22:	4770      	bx	lr
   86b24:	f06f 0001 	mvn.w	r0, #1
   86b28:	e7f4      	b.n	86b14 <__ascii_mbtowc+0x14>
   86b2a:	bf00      	nop

00086b2c <memchr>:
   86b2c:	0783      	lsls	r3, r0, #30
   86b2e:	b470      	push	{r4, r5, r6}
   86b30:	b2cd      	uxtb	r5, r1
   86b32:	d03d      	beq.n	86bb0 <memchr+0x84>
   86b34:	1e54      	subs	r4, r2, #1
   86b36:	b30a      	cbz	r2, 86b7c <memchr+0x50>
   86b38:	7803      	ldrb	r3, [r0, #0]
   86b3a:	42ab      	cmp	r3, r5
   86b3c:	d01f      	beq.n	86b7e <memchr+0x52>
   86b3e:	1c43      	adds	r3, r0, #1
   86b40:	e005      	b.n	86b4e <memchr+0x22>
   86b42:	f114 34ff 	adds.w	r4, r4, #4294967295
   86b46:	d319      	bcc.n	86b7c <memchr+0x50>
   86b48:	7802      	ldrb	r2, [r0, #0]
   86b4a:	42aa      	cmp	r2, r5
   86b4c:	d017      	beq.n	86b7e <memchr+0x52>
   86b4e:	f013 0f03 	tst.w	r3, #3
   86b52:	4618      	mov	r0, r3
   86b54:	f103 0301 	add.w	r3, r3, #1
   86b58:	d1f3      	bne.n	86b42 <memchr+0x16>
   86b5a:	2c03      	cmp	r4, #3
   86b5c:	d811      	bhi.n	86b82 <memchr+0x56>
   86b5e:	b34c      	cbz	r4, 86bb4 <memchr+0x88>
   86b60:	7803      	ldrb	r3, [r0, #0]
   86b62:	42ab      	cmp	r3, r5
   86b64:	d00b      	beq.n	86b7e <memchr+0x52>
   86b66:	4404      	add	r4, r0
   86b68:	1c43      	adds	r3, r0, #1
   86b6a:	e002      	b.n	86b72 <memchr+0x46>
   86b6c:	7802      	ldrb	r2, [r0, #0]
   86b6e:	42aa      	cmp	r2, r5
   86b70:	d005      	beq.n	86b7e <memchr+0x52>
   86b72:	429c      	cmp	r4, r3
   86b74:	4618      	mov	r0, r3
   86b76:	f103 0301 	add.w	r3, r3, #1
   86b7a:	d1f7      	bne.n	86b6c <memchr+0x40>
   86b7c:	2000      	movs	r0, #0
   86b7e:	bc70      	pop	{r4, r5, r6}
   86b80:	4770      	bx	lr
   86b82:	0209      	lsls	r1, r1, #8
   86b84:	b289      	uxth	r1, r1
   86b86:	4329      	orrs	r1, r5
   86b88:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   86b8c:	6803      	ldr	r3, [r0, #0]
   86b8e:	4606      	mov	r6, r0
   86b90:	404b      	eors	r3, r1
   86b92:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   86b96:	ea22 0303 	bic.w	r3, r2, r3
   86b9a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   86b9e:	f100 0004 	add.w	r0, r0, #4
   86ba2:	d103      	bne.n	86bac <memchr+0x80>
   86ba4:	3c04      	subs	r4, #4
   86ba6:	2c03      	cmp	r4, #3
   86ba8:	d8f0      	bhi.n	86b8c <memchr+0x60>
   86baa:	e7d8      	b.n	86b5e <memchr+0x32>
   86bac:	4630      	mov	r0, r6
   86bae:	e7d7      	b.n	86b60 <memchr+0x34>
   86bb0:	4614      	mov	r4, r2
   86bb2:	e7d2      	b.n	86b5a <memchr+0x2e>
   86bb4:	4620      	mov	r0, r4
   86bb6:	e7e2      	b.n	86b7e <memchr+0x52>

00086bb8 <memcpy>:
   86bb8:	4684      	mov	ip, r0
   86bba:	ea41 0300 	orr.w	r3, r1, r0
   86bbe:	f013 0303 	ands.w	r3, r3, #3
   86bc2:	d149      	bne.n	86c58 <memcpy+0xa0>
   86bc4:	3a40      	subs	r2, #64	; 0x40
   86bc6:	d323      	bcc.n	86c10 <memcpy+0x58>
   86bc8:	680b      	ldr	r3, [r1, #0]
   86bca:	6003      	str	r3, [r0, #0]
   86bcc:	684b      	ldr	r3, [r1, #4]
   86bce:	6043      	str	r3, [r0, #4]
   86bd0:	688b      	ldr	r3, [r1, #8]
   86bd2:	6083      	str	r3, [r0, #8]
   86bd4:	68cb      	ldr	r3, [r1, #12]
   86bd6:	60c3      	str	r3, [r0, #12]
   86bd8:	690b      	ldr	r3, [r1, #16]
   86bda:	6103      	str	r3, [r0, #16]
   86bdc:	694b      	ldr	r3, [r1, #20]
   86bde:	6143      	str	r3, [r0, #20]
   86be0:	698b      	ldr	r3, [r1, #24]
   86be2:	6183      	str	r3, [r0, #24]
   86be4:	69cb      	ldr	r3, [r1, #28]
   86be6:	61c3      	str	r3, [r0, #28]
   86be8:	6a0b      	ldr	r3, [r1, #32]
   86bea:	6203      	str	r3, [r0, #32]
   86bec:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86bee:	6243      	str	r3, [r0, #36]	; 0x24
   86bf0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86bf2:	6283      	str	r3, [r0, #40]	; 0x28
   86bf4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86bf6:	62c3      	str	r3, [r0, #44]	; 0x2c
   86bf8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86bfa:	6303      	str	r3, [r0, #48]	; 0x30
   86bfc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86bfe:	6343      	str	r3, [r0, #52]	; 0x34
   86c00:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86c02:	6383      	str	r3, [r0, #56]	; 0x38
   86c04:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86c06:	63c3      	str	r3, [r0, #60]	; 0x3c
   86c08:	3040      	adds	r0, #64	; 0x40
   86c0a:	3140      	adds	r1, #64	; 0x40
   86c0c:	3a40      	subs	r2, #64	; 0x40
   86c0e:	d2db      	bcs.n	86bc8 <memcpy+0x10>
   86c10:	3230      	adds	r2, #48	; 0x30
   86c12:	d30b      	bcc.n	86c2c <memcpy+0x74>
   86c14:	680b      	ldr	r3, [r1, #0]
   86c16:	6003      	str	r3, [r0, #0]
   86c18:	684b      	ldr	r3, [r1, #4]
   86c1a:	6043      	str	r3, [r0, #4]
   86c1c:	688b      	ldr	r3, [r1, #8]
   86c1e:	6083      	str	r3, [r0, #8]
   86c20:	68cb      	ldr	r3, [r1, #12]
   86c22:	60c3      	str	r3, [r0, #12]
   86c24:	3010      	adds	r0, #16
   86c26:	3110      	adds	r1, #16
   86c28:	3a10      	subs	r2, #16
   86c2a:	d2f3      	bcs.n	86c14 <memcpy+0x5c>
   86c2c:	320c      	adds	r2, #12
   86c2e:	d305      	bcc.n	86c3c <memcpy+0x84>
   86c30:	f851 3b04 	ldr.w	r3, [r1], #4
   86c34:	f840 3b04 	str.w	r3, [r0], #4
   86c38:	3a04      	subs	r2, #4
   86c3a:	d2f9      	bcs.n	86c30 <memcpy+0x78>
   86c3c:	3204      	adds	r2, #4
   86c3e:	d008      	beq.n	86c52 <memcpy+0x9a>
   86c40:	07d2      	lsls	r2, r2, #31
   86c42:	bf1c      	itt	ne
   86c44:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86c48:	f800 3b01 	strbne.w	r3, [r0], #1
   86c4c:	d301      	bcc.n	86c52 <memcpy+0x9a>
   86c4e:	880b      	ldrh	r3, [r1, #0]
   86c50:	8003      	strh	r3, [r0, #0]
   86c52:	4660      	mov	r0, ip
   86c54:	4770      	bx	lr
   86c56:	bf00      	nop
   86c58:	2a08      	cmp	r2, #8
   86c5a:	d313      	bcc.n	86c84 <memcpy+0xcc>
   86c5c:	078b      	lsls	r3, r1, #30
   86c5e:	d0b1      	beq.n	86bc4 <memcpy+0xc>
   86c60:	f010 0303 	ands.w	r3, r0, #3
   86c64:	d0ae      	beq.n	86bc4 <memcpy+0xc>
   86c66:	f1c3 0304 	rsb	r3, r3, #4
   86c6a:	1ad2      	subs	r2, r2, r3
   86c6c:	07db      	lsls	r3, r3, #31
   86c6e:	bf1c      	itt	ne
   86c70:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86c74:	f800 3b01 	strbne.w	r3, [r0], #1
   86c78:	d3a4      	bcc.n	86bc4 <memcpy+0xc>
   86c7a:	f831 3b02 	ldrh.w	r3, [r1], #2
   86c7e:	f820 3b02 	strh.w	r3, [r0], #2
   86c82:	e79f      	b.n	86bc4 <memcpy+0xc>
   86c84:	3a04      	subs	r2, #4
   86c86:	d3d9      	bcc.n	86c3c <memcpy+0x84>
   86c88:	3a01      	subs	r2, #1
   86c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
   86c8e:	f800 3b01 	strb.w	r3, [r0], #1
   86c92:	d2f9      	bcs.n	86c88 <memcpy+0xd0>
   86c94:	780b      	ldrb	r3, [r1, #0]
   86c96:	7003      	strb	r3, [r0, #0]
   86c98:	784b      	ldrb	r3, [r1, #1]
   86c9a:	7043      	strb	r3, [r0, #1]
   86c9c:	788b      	ldrb	r3, [r1, #2]
   86c9e:	7083      	strb	r3, [r0, #2]
   86ca0:	4660      	mov	r0, ip
   86ca2:	4770      	bx	lr

00086ca4 <__malloc_lock>:
   86ca4:	4770      	bx	lr
   86ca6:	bf00      	nop

00086ca8 <__malloc_unlock>:
   86ca8:	4770      	bx	lr
   86caa:	bf00      	nop

00086cac <_Balloc>:
   86cac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86cae:	b570      	push	{r4, r5, r6, lr}
   86cb0:	4605      	mov	r5, r0
   86cb2:	460c      	mov	r4, r1
   86cb4:	b14b      	cbz	r3, 86cca <_Balloc+0x1e>
   86cb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   86cba:	b180      	cbz	r0, 86cde <_Balloc+0x32>
   86cbc:	6802      	ldr	r2, [r0, #0]
   86cbe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   86cc2:	2300      	movs	r3, #0
   86cc4:	6103      	str	r3, [r0, #16]
   86cc6:	60c3      	str	r3, [r0, #12]
   86cc8:	bd70      	pop	{r4, r5, r6, pc}
   86cca:	2221      	movs	r2, #33	; 0x21
   86ccc:	2104      	movs	r1, #4
   86cce:	f000 fbdb 	bl	87488 <_calloc_r>
   86cd2:	64e8      	str	r0, [r5, #76]	; 0x4c
   86cd4:	4603      	mov	r3, r0
   86cd6:	2800      	cmp	r0, #0
   86cd8:	d1ed      	bne.n	86cb6 <_Balloc+0xa>
   86cda:	2000      	movs	r0, #0
   86cdc:	bd70      	pop	{r4, r5, r6, pc}
   86cde:	2101      	movs	r1, #1
   86ce0:	fa01 f604 	lsl.w	r6, r1, r4
   86ce4:	1d72      	adds	r2, r6, #5
   86ce6:	4628      	mov	r0, r5
   86ce8:	0092      	lsls	r2, r2, #2
   86cea:	f000 fbcd 	bl	87488 <_calloc_r>
   86cee:	2800      	cmp	r0, #0
   86cf0:	d0f3      	beq.n	86cda <_Balloc+0x2e>
   86cf2:	6044      	str	r4, [r0, #4]
   86cf4:	6086      	str	r6, [r0, #8]
   86cf6:	e7e4      	b.n	86cc2 <_Balloc+0x16>

00086cf8 <_Bfree>:
   86cf8:	b131      	cbz	r1, 86d08 <_Bfree+0x10>
   86cfa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86cfc:	684a      	ldr	r2, [r1, #4]
   86cfe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   86d02:	6008      	str	r0, [r1, #0]
   86d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   86d08:	4770      	bx	lr
   86d0a:	bf00      	nop

00086d0c <__multadd>:
   86d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   86d0e:	460c      	mov	r4, r1
   86d10:	4605      	mov	r5, r0
   86d12:	f04f 0e00 	mov.w	lr, #0
   86d16:	690e      	ldr	r6, [r1, #16]
   86d18:	b083      	sub	sp, #12
   86d1a:	f101 0714 	add.w	r7, r1, #20
   86d1e:	6838      	ldr	r0, [r7, #0]
   86d20:	f10e 0e01 	add.w	lr, lr, #1
   86d24:	b281      	uxth	r1, r0
   86d26:	fb02 3301 	mla	r3, r2, r1, r3
   86d2a:	0c01      	lsrs	r1, r0, #16
   86d2c:	0c18      	lsrs	r0, r3, #16
   86d2e:	fb02 0101 	mla	r1, r2, r1, r0
   86d32:	b29b      	uxth	r3, r3
   86d34:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   86d38:	4576      	cmp	r6, lr
   86d3a:	f847 3b04 	str.w	r3, [r7], #4
   86d3e:	ea4f 4311 	mov.w	r3, r1, lsr #16
   86d42:	dcec      	bgt.n	86d1e <__multadd+0x12>
   86d44:	b13b      	cbz	r3, 86d56 <__multadd+0x4a>
   86d46:	68a2      	ldr	r2, [r4, #8]
   86d48:	4296      	cmp	r6, r2
   86d4a:	da07      	bge.n	86d5c <__multadd+0x50>
   86d4c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   86d50:	3601      	adds	r6, #1
   86d52:	6153      	str	r3, [r2, #20]
   86d54:	6126      	str	r6, [r4, #16]
   86d56:	4620      	mov	r0, r4
   86d58:	b003      	add	sp, #12
   86d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86d5c:	6861      	ldr	r1, [r4, #4]
   86d5e:	4628      	mov	r0, r5
   86d60:	3101      	adds	r1, #1
   86d62:	9301      	str	r3, [sp, #4]
   86d64:	f7ff ffa2 	bl	86cac <_Balloc>
   86d68:	4607      	mov	r7, r0
   86d6a:	6922      	ldr	r2, [r4, #16]
   86d6c:	f104 010c 	add.w	r1, r4, #12
   86d70:	3202      	adds	r2, #2
   86d72:	0092      	lsls	r2, r2, #2
   86d74:	300c      	adds	r0, #12
   86d76:	f7ff ff1f 	bl	86bb8 <memcpy>
   86d7a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   86d7c:	6861      	ldr	r1, [r4, #4]
   86d7e:	9b01      	ldr	r3, [sp, #4]
   86d80:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   86d84:	6020      	str	r0, [r4, #0]
   86d86:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   86d8a:	463c      	mov	r4, r7
   86d8c:	e7de      	b.n	86d4c <__multadd+0x40>
   86d8e:	bf00      	nop

00086d90 <__hi0bits>:
   86d90:	0c02      	lsrs	r2, r0, #16
   86d92:	0412      	lsls	r2, r2, #16
   86d94:	4603      	mov	r3, r0
   86d96:	b9b2      	cbnz	r2, 86dc6 <__hi0bits+0x36>
   86d98:	0403      	lsls	r3, r0, #16
   86d9a:	2010      	movs	r0, #16
   86d9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   86da0:	bf04      	itt	eq
   86da2:	021b      	lsleq	r3, r3, #8
   86da4:	3008      	addeq	r0, #8
   86da6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   86daa:	bf04      	itt	eq
   86dac:	011b      	lsleq	r3, r3, #4
   86dae:	3004      	addeq	r0, #4
   86db0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   86db4:	bf04      	itt	eq
   86db6:	009b      	lsleq	r3, r3, #2
   86db8:	3002      	addeq	r0, #2
   86dba:	2b00      	cmp	r3, #0
   86dbc:	db02      	blt.n	86dc4 <__hi0bits+0x34>
   86dbe:	005b      	lsls	r3, r3, #1
   86dc0:	d403      	bmi.n	86dca <__hi0bits+0x3a>
   86dc2:	2020      	movs	r0, #32
   86dc4:	4770      	bx	lr
   86dc6:	2000      	movs	r0, #0
   86dc8:	e7e8      	b.n	86d9c <__hi0bits+0xc>
   86dca:	3001      	adds	r0, #1
   86dcc:	4770      	bx	lr
   86dce:	bf00      	nop

00086dd0 <__lo0bits>:
   86dd0:	6803      	ldr	r3, [r0, #0]
   86dd2:	4601      	mov	r1, r0
   86dd4:	f013 0207 	ands.w	r2, r3, #7
   86dd8:	d007      	beq.n	86dea <__lo0bits+0x1a>
   86dda:	07da      	lsls	r2, r3, #31
   86ddc:	d421      	bmi.n	86e22 <__lo0bits+0x52>
   86dde:	0798      	lsls	r0, r3, #30
   86de0:	d421      	bmi.n	86e26 <__lo0bits+0x56>
   86de2:	089b      	lsrs	r3, r3, #2
   86de4:	600b      	str	r3, [r1, #0]
   86de6:	2002      	movs	r0, #2
   86de8:	4770      	bx	lr
   86dea:	b298      	uxth	r0, r3
   86dec:	b198      	cbz	r0, 86e16 <__lo0bits+0x46>
   86dee:	4610      	mov	r0, r2
   86df0:	f013 0fff 	tst.w	r3, #255	; 0xff
   86df4:	bf04      	itt	eq
   86df6:	0a1b      	lsreq	r3, r3, #8
   86df8:	3008      	addeq	r0, #8
   86dfa:	071a      	lsls	r2, r3, #28
   86dfc:	bf04      	itt	eq
   86dfe:	091b      	lsreq	r3, r3, #4
   86e00:	3004      	addeq	r0, #4
   86e02:	079a      	lsls	r2, r3, #30
   86e04:	bf04      	itt	eq
   86e06:	089b      	lsreq	r3, r3, #2
   86e08:	3002      	addeq	r0, #2
   86e0a:	07da      	lsls	r2, r3, #31
   86e0c:	d407      	bmi.n	86e1e <__lo0bits+0x4e>
   86e0e:	085b      	lsrs	r3, r3, #1
   86e10:	d104      	bne.n	86e1c <__lo0bits+0x4c>
   86e12:	2020      	movs	r0, #32
   86e14:	4770      	bx	lr
   86e16:	0c1b      	lsrs	r3, r3, #16
   86e18:	2010      	movs	r0, #16
   86e1a:	e7e9      	b.n	86df0 <__lo0bits+0x20>
   86e1c:	3001      	adds	r0, #1
   86e1e:	600b      	str	r3, [r1, #0]
   86e20:	4770      	bx	lr
   86e22:	2000      	movs	r0, #0
   86e24:	4770      	bx	lr
   86e26:	085b      	lsrs	r3, r3, #1
   86e28:	600b      	str	r3, [r1, #0]
   86e2a:	2001      	movs	r0, #1
   86e2c:	4770      	bx	lr
   86e2e:	bf00      	nop

00086e30 <__i2b>:
   86e30:	b510      	push	{r4, lr}
   86e32:	460c      	mov	r4, r1
   86e34:	2101      	movs	r1, #1
   86e36:	f7ff ff39 	bl	86cac <_Balloc>
   86e3a:	2201      	movs	r2, #1
   86e3c:	6144      	str	r4, [r0, #20]
   86e3e:	6102      	str	r2, [r0, #16]
   86e40:	bd10      	pop	{r4, pc}
   86e42:	bf00      	nop

00086e44 <__multiply>:
   86e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86e48:	690c      	ldr	r4, [r1, #16]
   86e4a:	6915      	ldr	r5, [r2, #16]
   86e4c:	b083      	sub	sp, #12
   86e4e:	42ac      	cmp	r4, r5
   86e50:	468b      	mov	fp, r1
   86e52:	4616      	mov	r6, r2
   86e54:	da04      	bge.n	86e60 <__multiply+0x1c>
   86e56:	4622      	mov	r2, r4
   86e58:	46b3      	mov	fp, r6
   86e5a:	462c      	mov	r4, r5
   86e5c:	460e      	mov	r6, r1
   86e5e:	4615      	mov	r5, r2
   86e60:	f8db 3008 	ldr.w	r3, [fp, #8]
   86e64:	eb04 0805 	add.w	r8, r4, r5
   86e68:	f8db 1004 	ldr.w	r1, [fp, #4]
   86e6c:	4598      	cmp	r8, r3
   86e6e:	bfc8      	it	gt
   86e70:	3101      	addgt	r1, #1
   86e72:	f7ff ff1b 	bl	86cac <_Balloc>
   86e76:	f100 0914 	add.w	r9, r0, #20
   86e7a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   86e7e:	45d1      	cmp	r9, sl
   86e80:	9000      	str	r0, [sp, #0]
   86e82:	d205      	bcs.n	86e90 <__multiply+0x4c>
   86e84:	464b      	mov	r3, r9
   86e86:	2100      	movs	r1, #0
   86e88:	f843 1b04 	str.w	r1, [r3], #4
   86e8c:	459a      	cmp	sl, r3
   86e8e:	d8fb      	bhi.n	86e88 <__multiply+0x44>
   86e90:	f106 0c14 	add.w	ip, r6, #20
   86e94:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   86e98:	f10b 0b14 	add.w	fp, fp, #20
   86e9c:	459c      	cmp	ip, r3
   86e9e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   86ea2:	d24b      	bcs.n	86f3c <__multiply+0xf8>
   86ea4:	f8cd a004 	str.w	sl, [sp, #4]
   86ea8:	469a      	mov	sl, r3
   86eaa:	f8dc 5000 	ldr.w	r5, [ip]
   86eae:	b2af      	uxth	r7, r5
   86eb0:	b1e7      	cbz	r7, 86eec <__multiply+0xa8>
   86eb2:	464d      	mov	r5, r9
   86eb4:	465e      	mov	r6, fp
   86eb6:	2100      	movs	r1, #0
   86eb8:	f856 2b04 	ldr.w	r2, [r6], #4
   86ebc:	6828      	ldr	r0, [r5, #0]
   86ebe:	b293      	uxth	r3, r2
   86ec0:	b284      	uxth	r4, r0
   86ec2:	0c12      	lsrs	r2, r2, #16
   86ec4:	fb07 4303 	mla	r3, r7, r3, r4
   86ec8:	0c00      	lsrs	r0, r0, #16
   86eca:	fb07 0202 	mla	r2, r7, r2, r0
   86ece:	440b      	add	r3, r1
   86ed0:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   86ed4:	b29b      	uxth	r3, r3
   86ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   86eda:	45b6      	cmp	lr, r6
   86edc:	f845 3b04 	str.w	r3, [r5], #4
   86ee0:	ea4f 4111 	mov.w	r1, r1, lsr #16
   86ee4:	d8e8      	bhi.n	86eb8 <__multiply+0x74>
   86ee6:	6029      	str	r1, [r5, #0]
   86ee8:	f8dc 5000 	ldr.w	r5, [ip]
   86eec:	0c2d      	lsrs	r5, r5, #16
   86eee:	d01d      	beq.n	86f2c <__multiply+0xe8>
   86ef0:	f8d9 3000 	ldr.w	r3, [r9]
   86ef4:	4648      	mov	r0, r9
   86ef6:	461c      	mov	r4, r3
   86ef8:	4659      	mov	r1, fp
   86efa:	2200      	movs	r2, #0
   86efc:	880e      	ldrh	r6, [r1, #0]
   86efe:	0c24      	lsrs	r4, r4, #16
   86f00:	fb05 4406 	mla	r4, r5, r6, r4
   86f04:	b29b      	uxth	r3, r3
   86f06:	4422      	add	r2, r4
   86f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   86f0c:	f840 3b04 	str.w	r3, [r0], #4
   86f10:	f851 3b04 	ldr.w	r3, [r1], #4
   86f14:	6804      	ldr	r4, [r0, #0]
   86f16:	0c1b      	lsrs	r3, r3, #16
   86f18:	b2a6      	uxth	r6, r4
   86f1a:	fb05 6303 	mla	r3, r5, r3, r6
   86f1e:	458e      	cmp	lr, r1
   86f20:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   86f24:	ea4f 4213 	mov.w	r2, r3, lsr #16
   86f28:	d8e8      	bhi.n	86efc <__multiply+0xb8>
   86f2a:	6003      	str	r3, [r0, #0]
   86f2c:	f10c 0c04 	add.w	ip, ip, #4
   86f30:	45e2      	cmp	sl, ip
   86f32:	f109 0904 	add.w	r9, r9, #4
   86f36:	d8b8      	bhi.n	86eaa <__multiply+0x66>
   86f38:	f8dd a004 	ldr.w	sl, [sp, #4]
   86f3c:	f1b8 0f00 	cmp.w	r8, #0
   86f40:	dd0b      	ble.n	86f5a <__multiply+0x116>
   86f42:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   86f46:	f1aa 0a04 	sub.w	sl, sl, #4
   86f4a:	b11b      	cbz	r3, 86f54 <__multiply+0x110>
   86f4c:	e005      	b.n	86f5a <__multiply+0x116>
   86f4e:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   86f52:	b913      	cbnz	r3, 86f5a <__multiply+0x116>
   86f54:	f1b8 0801 	subs.w	r8, r8, #1
   86f58:	d1f9      	bne.n	86f4e <__multiply+0x10a>
   86f5a:	9800      	ldr	r0, [sp, #0]
   86f5c:	f8c0 8010 	str.w	r8, [r0, #16]
   86f60:	b003      	add	sp, #12
   86f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86f66:	bf00      	nop

00086f68 <__pow5mult>:
   86f68:	f012 0303 	ands.w	r3, r2, #3
   86f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86f70:	4614      	mov	r4, r2
   86f72:	4607      	mov	r7, r0
   86f74:	d12e      	bne.n	86fd4 <__pow5mult+0x6c>
   86f76:	460d      	mov	r5, r1
   86f78:	10a4      	asrs	r4, r4, #2
   86f7a:	d01c      	beq.n	86fb6 <__pow5mult+0x4e>
   86f7c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   86f7e:	b396      	cbz	r6, 86fe6 <__pow5mult+0x7e>
   86f80:	07e3      	lsls	r3, r4, #31
   86f82:	f04f 0800 	mov.w	r8, #0
   86f86:	d406      	bmi.n	86f96 <__pow5mult+0x2e>
   86f88:	1064      	asrs	r4, r4, #1
   86f8a:	d014      	beq.n	86fb6 <__pow5mult+0x4e>
   86f8c:	6830      	ldr	r0, [r6, #0]
   86f8e:	b1a8      	cbz	r0, 86fbc <__pow5mult+0x54>
   86f90:	4606      	mov	r6, r0
   86f92:	07e3      	lsls	r3, r4, #31
   86f94:	d5f8      	bpl.n	86f88 <__pow5mult+0x20>
   86f96:	4632      	mov	r2, r6
   86f98:	4629      	mov	r1, r5
   86f9a:	4638      	mov	r0, r7
   86f9c:	f7ff ff52 	bl	86e44 <__multiply>
   86fa0:	b1b5      	cbz	r5, 86fd0 <__pow5mult+0x68>
   86fa2:	686a      	ldr	r2, [r5, #4]
   86fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86fa6:	1064      	asrs	r4, r4, #1
   86fa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86fac:	6029      	str	r1, [r5, #0]
   86fae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   86fb2:	4605      	mov	r5, r0
   86fb4:	d1ea      	bne.n	86f8c <__pow5mult+0x24>
   86fb6:	4628      	mov	r0, r5
   86fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86fbc:	4632      	mov	r2, r6
   86fbe:	4631      	mov	r1, r6
   86fc0:	4638      	mov	r0, r7
   86fc2:	f7ff ff3f 	bl	86e44 <__multiply>
   86fc6:	6030      	str	r0, [r6, #0]
   86fc8:	f8c0 8000 	str.w	r8, [r0]
   86fcc:	4606      	mov	r6, r0
   86fce:	e7e0      	b.n	86f92 <__pow5mult+0x2a>
   86fd0:	4605      	mov	r5, r0
   86fd2:	e7d9      	b.n	86f88 <__pow5mult+0x20>
   86fd4:	4a0b      	ldr	r2, [pc, #44]	; (87004 <__pow5mult+0x9c>)
   86fd6:	3b01      	subs	r3, #1
   86fd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   86fdc:	2300      	movs	r3, #0
   86fde:	f7ff fe95 	bl	86d0c <__multadd>
   86fe2:	4605      	mov	r5, r0
   86fe4:	e7c8      	b.n	86f78 <__pow5mult+0x10>
   86fe6:	2101      	movs	r1, #1
   86fe8:	4638      	mov	r0, r7
   86fea:	f7ff fe5f 	bl	86cac <_Balloc>
   86fee:	f240 2171 	movw	r1, #625	; 0x271
   86ff2:	2201      	movs	r2, #1
   86ff4:	2300      	movs	r3, #0
   86ff6:	6141      	str	r1, [r0, #20]
   86ff8:	6102      	str	r2, [r0, #16]
   86ffa:	4606      	mov	r6, r0
   86ffc:	64b8      	str	r0, [r7, #72]	; 0x48
   86ffe:	6003      	str	r3, [r0, #0]
   87000:	e7be      	b.n	86f80 <__pow5mult+0x18>
   87002:	bf00      	nop
   87004:	00089918 	.word	0x00089918

00087008 <__lshift>:
   87008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8700c:	690b      	ldr	r3, [r1, #16]
   8700e:	1154      	asrs	r4, r2, #5
   87010:	eb04 0803 	add.w	r8, r4, r3
   87014:	688b      	ldr	r3, [r1, #8]
   87016:	f108 0501 	add.w	r5, r8, #1
   8701a:	429d      	cmp	r5, r3
   8701c:	460e      	mov	r6, r1
   8701e:	4691      	mov	r9, r2
   87020:	4607      	mov	r7, r0
   87022:	6849      	ldr	r1, [r1, #4]
   87024:	dd04      	ble.n	87030 <__lshift+0x28>
   87026:	005b      	lsls	r3, r3, #1
   87028:	429d      	cmp	r5, r3
   8702a:	f101 0101 	add.w	r1, r1, #1
   8702e:	dcfa      	bgt.n	87026 <__lshift+0x1e>
   87030:	4638      	mov	r0, r7
   87032:	f7ff fe3b 	bl	86cac <_Balloc>
   87036:	2c00      	cmp	r4, #0
   87038:	f100 0314 	add.w	r3, r0, #20
   8703c:	dd06      	ble.n	8704c <__lshift+0x44>
   8703e:	2100      	movs	r1, #0
   87040:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   87044:	f843 1b04 	str.w	r1, [r3], #4
   87048:	429a      	cmp	r2, r3
   8704a:	d1fb      	bne.n	87044 <__lshift+0x3c>
   8704c:	6934      	ldr	r4, [r6, #16]
   8704e:	f106 0114 	add.w	r1, r6, #20
   87052:	f019 091f 	ands.w	r9, r9, #31
   87056:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8705a:	d01d      	beq.n	87098 <__lshift+0x90>
   8705c:	2200      	movs	r2, #0
   8705e:	f1c9 0c20 	rsb	ip, r9, #32
   87062:	680c      	ldr	r4, [r1, #0]
   87064:	fa04 f409 	lsl.w	r4, r4, r9
   87068:	4314      	orrs	r4, r2
   8706a:	f843 4b04 	str.w	r4, [r3], #4
   8706e:	f851 2b04 	ldr.w	r2, [r1], #4
   87072:	458e      	cmp	lr, r1
   87074:	fa22 f20c 	lsr.w	r2, r2, ip
   87078:	d8f3      	bhi.n	87062 <__lshift+0x5a>
   8707a:	601a      	str	r2, [r3, #0]
   8707c:	b10a      	cbz	r2, 87082 <__lshift+0x7a>
   8707e:	f108 0502 	add.w	r5, r8, #2
   87082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   87084:	6872      	ldr	r2, [r6, #4]
   87086:	3d01      	subs	r5, #1
   87088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8708c:	6105      	str	r5, [r0, #16]
   8708e:	6031      	str	r1, [r6, #0]
   87090:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   87094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   87098:	3b04      	subs	r3, #4
   8709a:	f851 2b04 	ldr.w	r2, [r1], #4
   8709e:	458e      	cmp	lr, r1
   870a0:	f843 2f04 	str.w	r2, [r3, #4]!
   870a4:	d8f9      	bhi.n	8709a <__lshift+0x92>
   870a6:	e7ec      	b.n	87082 <__lshift+0x7a>

000870a8 <__mcmp>:
   870a8:	b430      	push	{r4, r5}
   870aa:	690b      	ldr	r3, [r1, #16]
   870ac:	4605      	mov	r5, r0
   870ae:	6900      	ldr	r0, [r0, #16]
   870b0:	1ac0      	subs	r0, r0, r3
   870b2:	d10f      	bne.n	870d4 <__mcmp+0x2c>
   870b4:	009b      	lsls	r3, r3, #2
   870b6:	3514      	adds	r5, #20
   870b8:	3114      	adds	r1, #20
   870ba:	4419      	add	r1, r3
   870bc:	442b      	add	r3, r5
   870be:	e001      	b.n	870c4 <__mcmp+0x1c>
   870c0:	429d      	cmp	r5, r3
   870c2:	d207      	bcs.n	870d4 <__mcmp+0x2c>
   870c4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   870c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   870cc:	4294      	cmp	r4, r2
   870ce:	d0f7      	beq.n	870c0 <__mcmp+0x18>
   870d0:	d302      	bcc.n	870d8 <__mcmp+0x30>
   870d2:	2001      	movs	r0, #1
   870d4:	bc30      	pop	{r4, r5}
   870d6:	4770      	bx	lr
   870d8:	f04f 30ff 	mov.w	r0, #4294967295
   870dc:	e7fa      	b.n	870d4 <__mcmp+0x2c>
   870de:	bf00      	nop

000870e0 <__mdiff>:
   870e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   870e4:	690c      	ldr	r4, [r1, #16]
   870e6:	4689      	mov	r9, r1
   870e8:	6911      	ldr	r1, [r2, #16]
   870ea:	4692      	mov	sl, r2
   870ec:	1a64      	subs	r4, r4, r1
   870ee:	2c00      	cmp	r4, #0
   870f0:	d117      	bne.n	87122 <__mdiff+0x42>
   870f2:	0089      	lsls	r1, r1, #2
   870f4:	f109 0714 	add.w	r7, r9, #20
   870f8:	f102 0614 	add.w	r6, r2, #20
   870fc:	187b      	adds	r3, r7, r1
   870fe:	4431      	add	r1, r6
   87100:	e001      	b.n	87106 <__mdiff+0x26>
   87102:	429f      	cmp	r7, r3
   87104:	d265      	bcs.n	871d2 <__mdiff+0xf2>
   87106:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8710a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8710e:	4295      	cmp	r5, r2
   87110:	d0f7      	beq.n	87102 <__mdiff+0x22>
   87112:	d267      	bcs.n	871e4 <__mdiff+0x104>
   87114:	464b      	mov	r3, r9
   87116:	46bb      	mov	fp, r7
   87118:	46d1      	mov	r9, sl
   8711a:	4637      	mov	r7, r6
   8711c:	469a      	mov	sl, r3
   8711e:	2401      	movs	r4, #1
   87120:	e005      	b.n	8712e <__mdiff+0x4e>
   87122:	db61      	blt.n	871e8 <__mdiff+0x108>
   87124:	2400      	movs	r4, #0
   87126:	f109 0714 	add.w	r7, r9, #20
   8712a:	f10a 0b14 	add.w	fp, sl, #20
   8712e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   87132:	f7ff fdbb 	bl	86cac <_Balloc>
   87136:	465d      	mov	r5, fp
   87138:	f04f 0800 	mov.w	r8, #0
   8713c:	f8d9 e010 	ldr.w	lr, [r9, #16]
   87140:	f8da 3010 	ldr.w	r3, [sl, #16]
   87144:	463e      	mov	r6, r7
   87146:	60c4      	str	r4, [r0, #12]
   87148:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8714c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   87150:	f100 0414 	add.w	r4, r0, #20
   87154:	f856 9b04 	ldr.w	r9, [r6], #4
   87158:	f855 2b04 	ldr.w	r2, [r5], #4
   8715c:	fa1f f389 	uxth.w	r3, r9
   87160:	4443      	add	r3, r8
   87162:	fa1f f882 	uxth.w	r8, r2
   87166:	0c12      	lsrs	r2, r2, #16
   87168:	eba3 0308 	sub.w	r3, r3, r8
   8716c:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   87170:	eb02 4223 	add.w	r2, r2, r3, asr #16
   87174:	b29b      	uxth	r3, r3
   87176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8717a:	45ac      	cmp	ip, r5
   8717c:	f844 3b04 	str.w	r3, [r4], #4
   87180:	ea4f 4822 	mov.w	r8, r2, asr #16
   87184:	d8e6      	bhi.n	87154 <__mdiff+0x74>
   87186:	42b7      	cmp	r7, r6
   87188:	d917      	bls.n	871ba <__mdiff+0xda>
   8718a:	46a4      	mov	ip, r4
   8718c:	4635      	mov	r5, r6
   8718e:	f855 3b04 	ldr.w	r3, [r5], #4
   87192:	b299      	uxth	r1, r3
   87194:	4441      	add	r1, r8
   87196:	140a      	asrs	r2, r1, #16
   87198:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8719c:	b289      	uxth	r1, r1
   8719e:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   871a2:	42af      	cmp	r7, r5
   871a4:	f84c 3b04 	str.w	r3, [ip], #4
   871a8:	ea4f 4822 	mov.w	r8, r2, asr #16
   871ac:	d8ef      	bhi.n	8718e <__mdiff+0xae>
   871ae:	43f6      	mvns	r6, r6
   871b0:	4437      	add	r7, r6
   871b2:	f027 0703 	bic.w	r7, r7, #3
   871b6:	3704      	adds	r7, #4
   871b8:	443c      	add	r4, r7
   871ba:	3c04      	subs	r4, #4
   871bc:	b92b      	cbnz	r3, 871ca <__mdiff+0xea>
   871be:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   871c2:	f10e 3eff 	add.w	lr, lr, #4294967295
   871c6:	2b00      	cmp	r3, #0
   871c8:	d0f9      	beq.n	871be <__mdiff+0xde>
   871ca:	f8c0 e010 	str.w	lr, [r0, #16]
   871ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   871d2:	2100      	movs	r1, #0
   871d4:	f7ff fd6a 	bl	86cac <_Balloc>
   871d8:	2201      	movs	r2, #1
   871da:	2300      	movs	r3, #0
   871dc:	6102      	str	r2, [r0, #16]
   871de:	6143      	str	r3, [r0, #20]
   871e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   871e4:	46b3      	mov	fp, r6
   871e6:	e7a2      	b.n	8712e <__mdiff+0x4e>
   871e8:	464b      	mov	r3, r9
   871ea:	f109 0b14 	add.w	fp, r9, #20
   871ee:	f102 0714 	add.w	r7, r2, #20
   871f2:	4691      	mov	r9, r2
   871f4:	2401      	movs	r4, #1
   871f6:	469a      	mov	sl, r3
   871f8:	e799      	b.n	8712e <__mdiff+0x4e>
   871fa:	bf00      	nop

000871fc <__d2b>:
   871fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   871fe:	2101      	movs	r1, #1
   87200:	b083      	sub	sp, #12
   87202:	461c      	mov	r4, r3
   87204:	f3c3 550a 	ubfx	r5, r3, #20, #11
   87208:	4616      	mov	r6, r2
   8720a:	f7ff fd4f 	bl	86cac <_Balloc>
   8720e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   87212:	4607      	mov	r7, r0
   87214:	b10d      	cbz	r5, 8721a <__d2b+0x1e>
   87216:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8721a:	9401      	str	r4, [sp, #4]
   8721c:	b306      	cbz	r6, 87260 <__d2b+0x64>
   8721e:	a802      	add	r0, sp, #8
   87220:	f840 6d08 	str.w	r6, [r0, #-8]!
   87224:	f7ff fdd4 	bl	86dd0 <__lo0bits>
   87228:	2800      	cmp	r0, #0
   8722a:	d130      	bne.n	8728e <__d2b+0x92>
   8722c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87230:	617a      	str	r2, [r7, #20]
   87232:	2b00      	cmp	r3, #0
   87234:	bf0c      	ite	eq
   87236:	2101      	moveq	r1, #1
   87238:	2102      	movne	r1, #2
   8723a:	61bb      	str	r3, [r7, #24]
   8723c:	6139      	str	r1, [r7, #16]
   8723e:	b9d5      	cbnz	r5, 87276 <__d2b+0x7a>
   87240:	9a08      	ldr	r2, [sp, #32]
   87242:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   87246:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8724a:	6010      	str	r0, [r2, #0]
   8724c:	6918      	ldr	r0, [r3, #16]
   8724e:	f7ff fd9f 	bl	86d90 <__hi0bits>
   87252:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87254:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   87258:	6018      	str	r0, [r3, #0]
   8725a:	4638      	mov	r0, r7
   8725c:	b003      	add	sp, #12
   8725e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87260:	a801      	add	r0, sp, #4
   87262:	f7ff fdb5 	bl	86dd0 <__lo0bits>
   87266:	2201      	movs	r2, #1
   87268:	9b01      	ldr	r3, [sp, #4]
   8726a:	4611      	mov	r1, r2
   8726c:	3020      	adds	r0, #32
   8726e:	613a      	str	r2, [r7, #16]
   87270:	617b      	str	r3, [r7, #20]
   87272:	2d00      	cmp	r5, #0
   87274:	d0e4      	beq.n	87240 <__d2b+0x44>
   87276:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8727a:	9a08      	ldr	r2, [sp, #32]
   8727c:	4403      	add	r3, r0
   8727e:	6013      	str	r3, [r2, #0]
   87280:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87282:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   87286:	6018      	str	r0, [r3, #0]
   87288:	4638      	mov	r0, r7
   8728a:	b003      	add	sp, #12
   8728c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8728e:	9b01      	ldr	r3, [sp, #4]
   87290:	f1c0 0220 	rsb	r2, r0, #32
   87294:	9900      	ldr	r1, [sp, #0]
   87296:	fa03 f202 	lsl.w	r2, r3, r2
   8729a:	430a      	orrs	r2, r1
   8729c:	40c3      	lsrs	r3, r0
   8729e:	9301      	str	r3, [sp, #4]
   872a0:	617a      	str	r2, [r7, #20]
   872a2:	e7c6      	b.n	87232 <__d2b+0x36>

000872a4 <_sbrk_r>:
   872a4:	b538      	push	{r3, r4, r5, lr}
   872a6:	2300      	movs	r3, #0
   872a8:	4c06      	ldr	r4, [pc, #24]	; (872c4 <_sbrk_r+0x20>)
   872aa:	4605      	mov	r5, r0
   872ac:	4608      	mov	r0, r1
   872ae:	6023      	str	r3, [r4, #0]
   872b0:	f7f9 ff5a 	bl	81168 <_sbrk>
   872b4:	1c43      	adds	r3, r0, #1
   872b6:	d000      	beq.n	872ba <_sbrk_r+0x16>
   872b8:	bd38      	pop	{r3, r4, r5, pc}
   872ba:	6823      	ldr	r3, [r4, #0]
   872bc:	2b00      	cmp	r3, #0
   872be:	d0fb      	beq.n	872b8 <_sbrk_r+0x14>
   872c0:	602b      	str	r3, [r5, #0]
   872c2:	bd38      	pop	{r3, r4, r5, pc}
   872c4:	20001834 	.word	0x20001834

000872c8 <__ssprint_r>:
   872c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   872cc:	6893      	ldr	r3, [r2, #8]
   872ce:	b083      	sub	sp, #12
   872d0:	4690      	mov	r8, r2
   872d2:	2b00      	cmp	r3, #0
   872d4:	d070      	beq.n	873b8 <__ssprint_r+0xf0>
   872d6:	4682      	mov	sl, r0
   872d8:	460c      	mov	r4, r1
   872da:	6817      	ldr	r7, [r2, #0]
   872dc:	688d      	ldr	r5, [r1, #8]
   872de:	6808      	ldr	r0, [r1, #0]
   872e0:	e042      	b.n	87368 <__ssprint_r+0xa0>
   872e2:	89a3      	ldrh	r3, [r4, #12]
   872e4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   872e8:	d02e      	beq.n	87348 <__ssprint_r+0x80>
   872ea:	6965      	ldr	r5, [r4, #20]
   872ec:	6921      	ldr	r1, [r4, #16]
   872ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   872f2:	eba0 0b01 	sub.w	fp, r0, r1
   872f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   872fa:	f10b 0001 	add.w	r0, fp, #1
   872fe:	106d      	asrs	r5, r5, #1
   87300:	4430      	add	r0, r6
   87302:	42a8      	cmp	r0, r5
   87304:	462a      	mov	r2, r5
   87306:	bf84      	itt	hi
   87308:	4605      	movhi	r5, r0
   8730a:	462a      	movhi	r2, r5
   8730c:	055b      	lsls	r3, r3, #21
   8730e:	d538      	bpl.n	87382 <__ssprint_r+0xba>
   87310:	4611      	mov	r1, r2
   87312:	4650      	mov	r0, sl
   87314:	f7ff f952 	bl	865bc <_malloc_r>
   87318:	2800      	cmp	r0, #0
   8731a:	d03c      	beq.n	87396 <__ssprint_r+0xce>
   8731c:	465a      	mov	r2, fp
   8731e:	6921      	ldr	r1, [r4, #16]
   87320:	9001      	str	r0, [sp, #4]
   87322:	f7ff fc49 	bl	86bb8 <memcpy>
   87326:	89a2      	ldrh	r2, [r4, #12]
   87328:	9b01      	ldr	r3, [sp, #4]
   8732a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8732e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   87332:	81a2      	strh	r2, [r4, #12]
   87334:	eba5 020b 	sub.w	r2, r5, fp
   87338:	eb03 000b 	add.w	r0, r3, fp
   8733c:	6165      	str	r5, [r4, #20]
   8733e:	46b3      	mov	fp, r6
   87340:	4635      	mov	r5, r6
   87342:	6123      	str	r3, [r4, #16]
   87344:	6020      	str	r0, [r4, #0]
   87346:	60a2      	str	r2, [r4, #8]
   87348:	465a      	mov	r2, fp
   8734a:	4649      	mov	r1, r9
   8734c:	f000 fa02 	bl	87754 <memmove>
   87350:	f8d8 3008 	ldr.w	r3, [r8, #8]
   87354:	68a2      	ldr	r2, [r4, #8]
   87356:	6820      	ldr	r0, [r4, #0]
   87358:	1b55      	subs	r5, r2, r5
   8735a:	4458      	add	r0, fp
   8735c:	1b9e      	subs	r6, r3, r6
   8735e:	60a5      	str	r5, [r4, #8]
   87360:	6020      	str	r0, [r4, #0]
   87362:	f8c8 6008 	str.w	r6, [r8, #8]
   87366:	b33e      	cbz	r6, 873b8 <__ssprint_r+0xf0>
   87368:	687e      	ldr	r6, [r7, #4]
   8736a:	463b      	mov	r3, r7
   8736c:	3708      	adds	r7, #8
   8736e:	2e00      	cmp	r6, #0
   87370:	d0fa      	beq.n	87368 <__ssprint_r+0xa0>
   87372:	42ae      	cmp	r6, r5
   87374:	f8d3 9000 	ldr.w	r9, [r3]
   87378:	46ab      	mov	fp, r5
   8737a:	d2b2      	bcs.n	872e2 <__ssprint_r+0x1a>
   8737c:	4635      	mov	r5, r6
   8737e:	46b3      	mov	fp, r6
   87380:	e7e2      	b.n	87348 <__ssprint_r+0x80>
   87382:	4650      	mov	r0, sl
   87384:	f000 fa4a 	bl	8781c <_realloc_r>
   87388:	4603      	mov	r3, r0
   8738a:	2800      	cmp	r0, #0
   8738c:	d1d2      	bne.n	87334 <__ssprint_r+0x6c>
   8738e:	6921      	ldr	r1, [r4, #16]
   87390:	4650      	mov	r0, sl
   87392:	f000 f8f9 	bl	87588 <_free_r>
   87396:	230c      	movs	r3, #12
   87398:	2200      	movs	r2, #0
   8739a:	f04f 30ff 	mov.w	r0, #4294967295
   8739e:	f8ca 3000 	str.w	r3, [sl]
   873a2:	89a3      	ldrh	r3, [r4, #12]
   873a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   873a8:	81a3      	strh	r3, [r4, #12]
   873aa:	f8c8 2008 	str.w	r2, [r8, #8]
   873ae:	f8c8 2004 	str.w	r2, [r8, #4]
   873b2:	b003      	add	sp, #12
   873b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   873b8:	2000      	movs	r0, #0
   873ba:	f8c8 0004 	str.w	r0, [r8, #4]
   873be:	b003      	add	sp, #12
   873c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000873c4 <__ascii_wctomb>:
   873c4:	b119      	cbz	r1, 873ce <__ascii_wctomb+0xa>
   873c6:	2aff      	cmp	r2, #255	; 0xff
   873c8:	d803      	bhi.n	873d2 <__ascii_wctomb+0xe>
   873ca:	700a      	strb	r2, [r1, #0]
   873cc:	2101      	movs	r1, #1
   873ce:	4608      	mov	r0, r1
   873d0:	4770      	bx	lr
   873d2:	238a      	movs	r3, #138	; 0x8a
   873d4:	f04f 31ff 	mov.w	r1, #4294967295
   873d8:	6003      	str	r3, [r0, #0]
   873da:	e7f8      	b.n	873ce <__ascii_wctomb+0xa>

000873dc <__register_exitproc>:
   873dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   873e0:	4c27      	ldr	r4, [pc, #156]	; (87480 <__register_exitproc+0xa4>)
   873e2:	4607      	mov	r7, r0
   873e4:	6826      	ldr	r6, [r4, #0]
   873e6:	4688      	mov	r8, r1
   873e8:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   873ec:	4692      	mov	sl, r2
   873ee:	4699      	mov	r9, r3
   873f0:	2c00      	cmp	r4, #0
   873f2:	d03c      	beq.n	8746e <__register_exitproc+0x92>
   873f4:	6865      	ldr	r5, [r4, #4]
   873f6:	2d1f      	cmp	r5, #31
   873f8:	dc1a      	bgt.n	87430 <__register_exitproc+0x54>
   873fa:	f105 0e01 	add.w	lr, r5, #1
   873fe:	b17f      	cbz	r7, 87420 <__register_exitproc+0x44>
   87400:	2001      	movs	r0, #1
   87402:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   87406:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   8740a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
   8740e:	fa00 f205 	lsl.w	r2, r0, r5
   87412:	4311      	orrs	r1, r2
   87414:	2f02      	cmp	r7, #2
   87416:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
   8741a:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   8741e:	d020      	beq.n	87462 <__register_exitproc+0x86>
   87420:	3502      	adds	r5, #2
   87422:	f8c4 e004 	str.w	lr, [r4, #4]
   87426:	2000      	movs	r0, #0
   87428:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
   8742c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87430:	4b14      	ldr	r3, [pc, #80]	; (87484 <__register_exitproc+0xa8>)
   87432:	b30b      	cbz	r3, 87478 <__register_exitproc+0x9c>
   87434:	f44f 70c8 	mov.w	r0, #400	; 0x190
   87438:	f3af 8000 	nop.w
   8743c:	4604      	mov	r4, r0
   8743e:	b1d8      	cbz	r0, 87478 <__register_exitproc+0x9c>
   87440:	2000      	movs	r0, #0
   87442:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
   87446:	f04f 0e01 	mov.w	lr, #1
   8744a:	6060      	str	r0, [r4, #4]
   8744c:	6023      	str	r3, [r4, #0]
   8744e:	4605      	mov	r5, r0
   87450:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   87454:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   87458:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8745c:	2f00      	cmp	r7, #0
   8745e:	d0df      	beq.n	87420 <__register_exitproc+0x44>
   87460:	e7ce      	b.n	87400 <__register_exitproc+0x24>
   87462:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   87466:	431a      	orrs	r2, r3
   87468:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8746c:	e7d8      	b.n	87420 <__register_exitproc+0x44>
   8746e:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   87472:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   87476:	e7bd      	b.n	873f4 <__register_exitproc+0x18>
   87478:	f04f 30ff 	mov.w	r0, #4294967295
   8747c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87480:	000897a0 	.word	0x000897a0
   87484:	00000000 	.word	0x00000000

00087488 <_calloc_r>:
   87488:	b510      	push	{r4, lr}
   8748a:	fb02 f101 	mul.w	r1, r2, r1
   8748e:	f7ff f895 	bl	865bc <_malloc_r>
   87492:	4604      	mov	r4, r0
   87494:	b1d8      	cbz	r0, 874ce <_calloc_r+0x46>
   87496:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8749a:	f022 0203 	bic.w	r2, r2, #3
   8749e:	3a04      	subs	r2, #4
   874a0:	2a24      	cmp	r2, #36	; 0x24
   874a2:	d818      	bhi.n	874d6 <_calloc_r+0x4e>
   874a4:	2a13      	cmp	r2, #19
   874a6:	d914      	bls.n	874d2 <_calloc_r+0x4a>
   874a8:	2300      	movs	r3, #0
   874aa:	2a1b      	cmp	r2, #27
   874ac:	6003      	str	r3, [r0, #0]
   874ae:	6043      	str	r3, [r0, #4]
   874b0:	d916      	bls.n	874e0 <_calloc_r+0x58>
   874b2:	2a24      	cmp	r2, #36	; 0x24
   874b4:	6083      	str	r3, [r0, #8]
   874b6:	60c3      	str	r3, [r0, #12]
   874b8:	bf11      	iteee	ne
   874ba:	f100 0210 	addne.w	r2, r0, #16
   874be:	6103      	streq	r3, [r0, #16]
   874c0:	6143      	streq	r3, [r0, #20]
   874c2:	f100 0218 	addeq.w	r2, r0, #24
   874c6:	2300      	movs	r3, #0
   874c8:	6013      	str	r3, [r2, #0]
   874ca:	6053      	str	r3, [r2, #4]
   874cc:	6093      	str	r3, [r2, #8]
   874ce:	4620      	mov	r0, r4
   874d0:	bd10      	pop	{r4, pc}
   874d2:	4602      	mov	r2, r0
   874d4:	e7f7      	b.n	874c6 <_calloc_r+0x3e>
   874d6:	2100      	movs	r1, #0
   874d8:	f7fc fc7c 	bl	83dd4 <memset>
   874dc:	4620      	mov	r0, r4
   874de:	bd10      	pop	{r4, pc}
   874e0:	f100 0208 	add.w	r2, r0, #8
   874e4:	e7ef      	b.n	874c6 <_calloc_r+0x3e>
   874e6:	bf00      	nop

000874e8 <_malloc_trim_r>:
   874e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   874ea:	460c      	mov	r4, r1
   874ec:	4f23      	ldr	r7, [pc, #140]	; (8757c <_malloc_trim_r+0x94>)
   874ee:	4606      	mov	r6, r0
   874f0:	f7ff fbd8 	bl	86ca4 <__malloc_lock>
   874f4:	68bb      	ldr	r3, [r7, #8]
   874f6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   874fa:	685d      	ldr	r5, [r3, #4]
   874fc:	310f      	adds	r1, #15
   874fe:	f025 0503 	bic.w	r5, r5, #3
   87502:	4429      	add	r1, r5
   87504:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   87508:	f021 010f 	bic.w	r1, r1, #15
   8750c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   87510:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   87514:	db07      	blt.n	87526 <_malloc_trim_r+0x3e>
   87516:	2100      	movs	r1, #0
   87518:	4630      	mov	r0, r6
   8751a:	f7ff fec3 	bl	872a4 <_sbrk_r>
   8751e:	68bb      	ldr	r3, [r7, #8]
   87520:	442b      	add	r3, r5
   87522:	4298      	cmp	r0, r3
   87524:	d004      	beq.n	87530 <_malloc_trim_r+0x48>
   87526:	4630      	mov	r0, r6
   87528:	f7ff fbbe 	bl	86ca8 <__malloc_unlock>
   8752c:	2000      	movs	r0, #0
   8752e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87530:	4261      	negs	r1, r4
   87532:	4630      	mov	r0, r6
   87534:	f7ff feb6 	bl	872a4 <_sbrk_r>
   87538:	3001      	adds	r0, #1
   8753a:	d00d      	beq.n	87558 <_malloc_trim_r+0x70>
   8753c:	4b10      	ldr	r3, [pc, #64]	; (87580 <_malloc_trim_r+0x98>)
   8753e:	68ba      	ldr	r2, [r7, #8]
   87540:	6819      	ldr	r1, [r3, #0]
   87542:	1b2d      	subs	r5, r5, r4
   87544:	f045 0501 	orr.w	r5, r5, #1
   87548:	4630      	mov	r0, r6
   8754a:	1b09      	subs	r1, r1, r4
   8754c:	6055      	str	r5, [r2, #4]
   8754e:	6019      	str	r1, [r3, #0]
   87550:	f7ff fbaa 	bl	86ca8 <__malloc_unlock>
   87554:	2001      	movs	r0, #1
   87556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87558:	2100      	movs	r1, #0
   8755a:	4630      	mov	r0, r6
   8755c:	f7ff fea2 	bl	872a4 <_sbrk_r>
   87560:	68ba      	ldr	r2, [r7, #8]
   87562:	1a83      	subs	r3, r0, r2
   87564:	2b0f      	cmp	r3, #15
   87566:	ddde      	ble.n	87526 <_malloc_trim_r+0x3e>
   87568:	4c06      	ldr	r4, [pc, #24]	; (87584 <_malloc_trim_r+0x9c>)
   8756a:	4905      	ldr	r1, [pc, #20]	; (87580 <_malloc_trim_r+0x98>)
   8756c:	6824      	ldr	r4, [r4, #0]
   8756e:	f043 0301 	orr.w	r3, r3, #1
   87572:	1b00      	subs	r0, r0, r4
   87574:	6053      	str	r3, [r2, #4]
   87576:	6008      	str	r0, [r1, #0]
   87578:	e7d5      	b.n	87526 <_malloc_trim_r+0x3e>
   8757a:	bf00      	nop
   8757c:	20000bc4 	.word	0x20000bc4
   87580:	2000107c 	.word	0x2000107c
   87584:	20000fcc 	.word	0x20000fcc

00087588 <_free_r>:
   87588:	2900      	cmp	r1, #0
   8758a:	d044      	beq.n	87616 <_free_r+0x8e>
   8758c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87590:	460d      	mov	r5, r1
   87592:	4680      	mov	r8, r0
   87594:	f7ff fb86 	bl	86ca4 <__malloc_lock>
   87598:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8759c:	4969      	ldr	r1, [pc, #420]	; (87744 <_free_r+0x1bc>)
   8759e:	f1a5 0408 	sub.w	r4, r5, #8
   875a2:	f027 0301 	bic.w	r3, r7, #1
   875a6:	18e2      	adds	r2, r4, r3
   875a8:	688e      	ldr	r6, [r1, #8]
   875aa:	6850      	ldr	r0, [r2, #4]
   875ac:	42b2      	cmp	r2, r6
   875ae:	f020 0003 	bic.w	r0, r0, #3
   875b2:	d05e      	beq.n	87672 <_free_r+0xea>
   875b4:	07fe      	lsls	r6, r7, #31
   875b6:	6050      	str	r0, [r2, #4]
   875b8:	d40b      	bmi.n	875d2 <_free_r+0x4a>
   875ba:	f855 7c08 	ldr.w	r7, [r5, #-8]
   875be:	f101 0e08 	add.w	lr, r1, #8
   875c2:	1be4      	subs	r4, r4, r7
   875c4:	68a5      	ldr	r5, [r4, #8]
   875c6:	443b      	add	r3, r7
   875c8:	4575      	cmp	r5, lr
   875ca:	d06d      	beq.n	876a8 <_free_r+0x120>
   875cc:	68e7      	ldr	r7, [r4, #12]
   875ce:	60ef      	str	r7, [r5, #12]
   875d0:	60bd      	str	r5, [r7, #8]
   875d2:	1815      	adds	r5, r2, r0
   875d4:	686d      	ldr	r5, [r5, #4]
   875d6:	07ed      	lsls	r5, r5, #31
   875d8:	d53e      	bpl.n	87658 <_free_r+0xd0>
   875da:	f043 0201 	orr.w	r2, r3, #1
   875de:	6062      	str	r2, [r4, #4]
   875e0:	50e3      	str	r3, [r4, r3]
   875e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   875e6:	d217      	bcs.n	87618 <_free_r+0x90>
   875e8:	2201      	movs	r2, #1
   875ea:	08db      	lsrs	r3, r3, #3
   875ec:	1098      	asrs	r0, r3, #2
   875ee:	684d      	ldr	r5, [r1, #4]
   875f0:	4413      	add	r3, r2
   875f2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   875f6:	4082      	lsls	r2, r0
   875f8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   875fc:	432a      	orrs	r2, r5
   875fe:	3808      	subs	r0, #8
   87600:	60e0      	str	r0, [r4, #12]
   87602:	60a7      	str	r7, [r4, #8]
   87604:	604a      	str	r2, [r1, #4]
   87606:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8760a:	60fc      	str	r4, [r7, #12]
   8760c:	4640      	mov	r0, r8
   8760e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   87612:	f7ff bb49 	b.w	86ca8 <__malloc_unlock>
   87616:	4770      	bx	lr
   87618:	0a5a      	lsrs	r2, r3, #9
   8761a:	2a04      	cmp	r2, #4
   8761c:	d852      	bhi.n	876c4 <_free_r+0x13c>
   8761e:	099a      	lsrs	r2, r3, #6
   87620:	f102 0739 	add.w	r7, r2, #57	; 0x39
   87624:	00ff      	lsls	r7, r7, #3
   87626:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8762a:	19c8      	adds	r0, r1, r7
   8762c:	59ca      	ldr	r2, [r1, r7]
   8762e:	3808      	subs	r0, #8
   87630:	4290      	cmp	r0, r2
   87632:	d04f      	beq.n	876d4 <_free_r+0x14c>
   87634:	6851      	ldr	r1, [r2, #4]
   87636:	f021 0103 	bic.w	r1, r1, #3
   8763a:	428b      	cmp	r3, r1
   8763c:	d232      	bcs.n	876a4 <_free_r+0x11c>
   8763e:	6892      	ldr	r2, [r2, #8]
   87640:	4290      	cmp	r0, r2
   87642:	d1f7      	bne.n	87634 <_free_r+0xac>
   87644:	68c3      	ldr	r3, [r0, #12]
   87646:	60a0      	str	r0, [r4, #8]
   87648:	60e3      	str	r3, [r4, #12]
   8764a:	609c      	str	r4, [r3, #8]
   8764c:	60c4      	str	r4, [r0, #12]
   8764e:	4640      	mov	r0, r8
   87650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   87654:	f7ff bb28 	b.w	86ca8 <__malloc_unlock>
   87658:	6895      	ldr	r5, [r2, #8]
   8765a:	4f3b      	ldr	r7, [pc, #236]	; (87748 <_free_r+0x1c0>)
   8765c:	4403      	add	r3, r0
   8765e:	42bd      	cmp	r5, r7
   87660:	d040      	beq.n	876e4 <_free_r+0x15c>
   87662:	68d0      	ldr	r0, [r2, #12]
   87664:	f043 0201 	orr.w	r2, r3, #1
   87668:	60e8      	str	r0, [r5, #12]
   8766a:	6085      	str	r5, [r0, #8]
   8766c:	6062      	str	r2, [r4, #4]
   8766e:	50e3      	str	r3, [r4, r3]
   87670:	e7b7      	b.n	875e2 <_free_r+0x5a>
   87672:	07ff      	lsls	r7, r7, #31
   87674:	4403      	add	r3, r0
   87676:	d407      	bmi.n	87688 <_free_r+0x100>
   87678:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8767c:	1b64      	subs	r4, r4, r5
   8767e:	68e2      	ldr	r2, [r4, #12]
   87680:	68a0      	ldr	r0, [r4, #8]
   87682:	442b      	add	r3, r5
   87684:	60c2      	str	r2, [r0, #12]
   87686:	6090      	str	r0, [r2, #8]
   87688:	4a30      	ldr	r2, [pc, #192]	; (8774c <_free_r+0x1c4>)
   8768a:	f043 0001 	orr.w	r0, r3, #1
   8768e:	6812      	ldr	r2, [r2, #0]
   87690:	6060      	str	r0, [r4, #4]
   87692:	4293      	cmp	r3, r2
   87694:	608c      	str	r4, [r1, #8]
   87696:	d3b9      	bcc.n	8760c <_free_r+0x84>
   87698:	4b2d      	ldr	r3, [pc, #180]	; (87750 <_free_r+0x1c8>)
   8769a:	4640      	mov	r0, r8
   8769c:	6819      	ldr	r1, [r3, #0]
   8769e:	f7ff ff23 	bl	874e8 <_malloc_trim_r>
   876a2:	e7b3      	b.n	8760c <_free_r+0x84>
   876a4:	4610      	mov	r0, r2
   876a6:	e7cd      	b.n	87644 <_free_r+0xbc>
   876a8:	1811      	adds	r1, r2, r0
   876aa:	6849      	ldr	r1, [r1, #4]
   876ac:	07c9      	lsls	r1, r1, #31
   876ae:	d444      	bmi.n	8773a <_free_r+0x1b2>
   876b0:	6891      	ldr	r1, [r2, #8]
   876b2:	4403      	add	r3, r0
   876b4:	68d2      	ldr	r2, [r2, #12]
   876b6:	f043 0001 	orr.w	r0, r3, #1
   876ba:	60ca      	str	r2, [r1, #12]
   876bc:	6091      	str	r1, [r2, #8]
   876be:	6060      	str	r0, [r4, #4]
   876c0:	50e3      	str	r3, [r4, r3]
   876c2:	e7a3      	b.n	8760c <_free_r+0x84>
   876c4:	2a14      	cmp	r2, #20
   876c6:	d816      	bhi.n	876f6 <_free_r+0x16e>
   876c8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   876cc:	00ff      	lsls	r7, r7, #3
   876ce:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   876d2:	e7aa      	b.n	8762a <_free_r+0xa2>
   876d4:	2301      	movs	r3, #1
   876d6:	10aa      	asrs	r2, r5, #2
   876d8:	684d      	ldr	r5, [r1, #4]
   876da:	4093      	lsls	r3, r2
   876dc:	432b      	orrs	r3, r5
   876de:	604b      	str	r3, [r1, #4]
   876e0:	4603      	mov	r3, r0
   876e2:	e7b0      	b.n	87646 <_free_r+0xbe>
   876e4:	f043 0201 	orr.w	r2, r3, #1
   876e8:	614c      	str	r4, [r1, #20]
   876ea:	610c      	str	r4, [r1, #16]
   876ec:	60e5      	str	r5, [r4, #12]
   876ee:	60a5      	str	r5, [r4, #8]
   876f0:	6062      	str	r2, [r4, #4]
   876f2:	50e3      	str	r3, [r4, r3]
   876f4:	e78a      	b.n	8760c <_free_r+0x84>
   876f6:	2a54      	cmp	r2, #84	; 0x54
   876f8:	d806      	bhi.n	87708 <_free_r+0x180>
   876fa:	0b1a      	lsrs	r2, r3, #12
   876fc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   87700:	00ff      	lsls	r7, r7, #3
   87702:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   87706:	e790      	b.n	8762a <_free_r+0xa2>
   87708:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8770c:	d806      	bhi.n	8771c <_free_r+0x194>
   8770e:	0bda      	lsrs	r2, r3, #15
   87710:	f102 0778 	add.w	r7, r2, #120	; 0x78
   87714:	00ff      	lsls	r7, r7, #3
   87716:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8771a:	e786      	b.n	8762a <_free_r+0xa2>
   8771c:	f240 5054 	movw	r0, #1364	; 0x554
   87720:	4282      	cmp	r2, r0
   87722:	d806      	bhi.n	87732 <_free_r+0x1aa>
   87724:	0c9a      	lsrs	r2, r3, #18
   87726:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8772a:	00ff      	lsls	r7, r7, #3
   8772c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   87730:	e77b      	b.n	8762a <_free_r+0xa2>
   87732:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   87736:	257e      	movs	r5, #126	; 0x7e
   87738:	e777      	b.n	8762a <_free_r+0xa2>
   8773a:	f043 0101 	orr.w	r1, r3, #1
   8773e:	6061      	str	r1, [r4, #4]
   87740:	6013      	str	r3, [r2, #0]
   87742:	e763      	b.n	8760c <_free_r+0x84>
   87744:	20000bc4 	.word	0x20000bc4
   87748:	20000bcc 	.word	0x20000bcc
   8774c:	20000fd0 	.word	0x20000fd0
   87750:	200010ac 	.word	0x200010ac

00087754 <memmove>:
   87754:	4288      	cmp	r0, r1
   87756:	b5f0      	push	{r4, r5, r6, r7, lr}
   87758:	d90d      	bls.n	87776 <memmove+0x22>
   8775a:	188b      	adds	r3, r1, r2
   8775c:	4298      	cmp	r0, r3
   8775e:	d20a      	bcs.n	87776 <memmove+0x22>
   87760:	1884      	adds	r4, r0, r2
   87762:	2a00      	cmp	r2, #0
   87764:	d051      	beq.n	8780a <memmove+0xb6>
   87766:	4622      	mov	r2, r4
   87768:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8776c:	4299      	cmp	r1, r3
   8776e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   87772:	d1f9      	bne.n	87768 <memmove+0x14>
   87774:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87776:	2a0f      	cmp	r2, #15
   87778:	d948      	bls.n	8780c <memmove+0xb8>
   8777a:	ea41 0300 	orr.w	r3, r1, r0
   8777e:	079b      	lsls	r3, r3, #30
   87780:	d146      	bne.n	87810 <memmove+0xbc>
   87782:	4615      	mov	r5, r2
   87784:	f100 0410 	add.w	r4, r0, #16
   87788:	f101 0310 	add.w	r3, r1, #16
   8778c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   87790:	3d10      	subs	r5, #16
   87792:	f844 6c10 	str.w	r6, [r4, #-16]
   87796:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8779a:	2d0f      	cmp	r5, #15
   8779c:	f844 6c0c 	str.w	r6, [r4, #-12]
   877a0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   877a4:	f104 0410 	add.w	r4, r4, #16
   877a8:	f844 6c18 	str.w	r6, [r4, #-24]
   877ac:	f853 6c04 	ldr.w	r6, [r3, #-4]
   877b0:	f103 0310 	add.w	r3, r3, #16
   877b4:	f844 6c14 	str.w	r6, [r4, #-20]
   877b8:	d8e8      	bhi.n	8778c <memmove+0x38>
   877ba:	f1a2 0310 	sub.w	r3, r2, #16
   877be:	f023 030f 	bic.w	r3, r3, #15
   877c2:	f002 0e0f 	and.w	lr, r2, #15
   877c6:	3310      	adds	r3, #16
   877c8:	f1be 0f03 	cmp.w	lr, #3
   877cc:	4419      	add	r1, r3
   877ce:	4403      	add	r3, r0
   877d0:	d921      	bls.n	87816 <memmove+0xc2>
   877d2:	460e      	mov	r6, r1
   877d4:	4674      	mov	r4, lr
   877d6:	1f1d      	subs	r5, r3, #4
   877d8:	f856 7b04 	ldr.w	r7, [r6], #4
   877dc:	3c04      	subs	r4, #4
   877de:	2c03      	cmp	r4, #3
   877e0:	f845 7f04 	str.w	r7, [r5, #4]!
   877e4:	d8f8      	bhi.n	877d8 <memmove+0x84>
   877e6:	f1ae 0404 	sub.w	r4, lr, #4
   877ea:	f024 0403 	bic.w	r4, r4, #3
   877ee:	3404      	adds	r4, #4
   877f0:	4421      	add	r1, r4
   877f2:	4423      	add	r3, r4
   877f4:	f002 0203 	and.w	r2, r2, #3
   877f8:	b162      	cbz	r2, 87814 <memmove+0xc0>
   877fa:	3b01      	subs	r3, #1
   877fc:	440a      	add	r2, r1
   877fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   87802:	428a      	cmp	r2, r1
   87804:	f803 4f01 	strb.w	r4, [r3, #1]!
   87808:	d1f9      	bne.n	877fe <memmove+0xaa>
   8780a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8780c:	4603      	mov	r3, r0
   8780e:	e7f3      	b.n	877f8 <memmove+0xa4>
   87810:	4603      	mov	r3, r0
   87812:	e7f2      	b.n	877fa <memmove+0xa6>
   87814:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87816:	4672      	mov	r2, lr
   87818:	e7ee      	b.n	877f8 <memmove+0xa4>
   8781a:	bf00      	nop

0008781c <_realloc_r>:
   8781c:	2900      	cmp	r1, #0
   8781e:	f000 8094 	beq.w	8794a <_realloc_r+0x12e>
   87822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87826:	460c      	mov	r4, r1
   87828:	4615      	mov	r5, r2
   8782a:	b083      	sub	sp, #12
   8782c:	4680      	mov	r8, r0
   8782e:	f105 060b 	add.w	r6, r5, #11
   87832:	f7ff fa37 	bl	86ca4 <__malloc_lock>
   87836:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8783a:	2e16      	cmp	r6, #22
   8783c:	f02e 0703 	bic.w	r7, lr, #3
   87840:	f1a4 0908 	sub.w	r9, r4, #8
   87844:	d83c      	bhi.n	878c0 <_realloc_r+0xa4>
   87846:	2210      	movs	r2, #16
   87848:	4616      	mov	r6, r2
   8784a:	42b5      	cmp	r5, r6
   8784c:	d83d      	bhi.n	878ca <_realloc_r+0xae>
   8784e:	4297      	cmp	r7, r2
   87850:	da43      	bge.n	878da <_realloc_r+0xbe>
   87852:	4bc6      	ldr	r3, [pc, #792]	; (87b6c <_realloc_r+0x350>)
   87854:	eb09 0007 	add.w	r0, r9, r7
   87858:	6899      	ldr	r1, [r3, #8]
   8785a:	4288      	cmp	r0, r1
   8785c:	f000 80c3 	beq.w	879e6 <_realloc_r+0x1ca>
   87860:	6843      	ldr	r3, [r0, #4]
   87862:	f023 0101 	bic.w	r1, r3, #1
   87866:	4401      	add	r1, r0
   87868:	6849      	ldr	r1, [r1, #4]
   8786a:	07c9      	lsls	r1, r1, #31
   8786c:	d54d      	bpl.n	8790a <_realloc_r+0xee>
   8786e:	f01e 0f01 	tst.w	lr, #1
   87872:	f000 809b 	beq.w	879ac <_realloc_r+0x190>
   87876:	4629      	mov	r1, r5
   87878:	4640      	mov	r0, r8
   8787a:	f7fe fe9f 	bl	865bc <_malloc_r>
   8787e:	4605      	mov	r5, r0
   87880:	2800      	cmp	r0, #0
   87882:	d03b      	beq.n	878fc <_realloc_r+0xe0>
   87884:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87888:	f1a0 0208 	sub.w	r2, r0, #8
   8788c:	f023 0301 	bic.w	r3, r3, #1
   87890:	444b      	add	r3, r9
   87892:	429a      	cmp	r2, r3
   87894:	f000 812b 	beq.w	87aee <_realloc_r+0x2d2>
   87898:	1f3a      	subs	r2, r7, #4
   8789a:	2a24      	cmp	r2, #36	; 0x24
   8789c:	f200 8118 	bhi.w	87ad0 <_realloc_r+0x2b4>
   878a0:	2a13      	cmp	r2, #19
   878a2:	f200 80eb 	bhi.w	87a7c <_realloc_r+0x260>
   878a6:	4603      	mov	r3, r0
   878a8:	4622      	mov	r2, r4
   878aa:	6811      	ldr	r1, [r2, #0]
   878ac:	6019      	str	r1, [r3, #0]
   878ae:	6851      	ldr	r1, [r2, #4]
   878b0:	6059      	str	r1, [r3, #4]
   878b2:	6892      	ldr	r2, [r2, #8]
   878b4:	609a      	str	r2, [r3, #8]
   878b6:	4621      	mov	r1, r4
   878b8:	4640      	mov	r0, r8
   878ba:	f7ff fe65 	bl	87588 <_free_r>
   878be:	e01d      	b.n	878fc <_realloc_r+0xe0>
   878c0:	f026 0607 	bic.w	r6, r6, #7
   878c4:	2e00      	cmp	r6, #0
   878c6:	4632      	mov	r2, r6
   878c8:	dabf      	bge.n	8784a <_realloc_r+0x2e>
   878ca:	2500      	movs	r5, #0
   878cc:	230c      	movs	r3, #12
   878ce:	4628      	mov	r0, r5
   878d0:	f8c8 3000 	str.w	r3, [r8]
   878d4:	b003      	add	sp, #12
   878d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   878da:	4625      	mov	r5, r4
   878dc:	1bbb      	subs	r3, r7, r6
   878de:	2b0f      	cmp	r3, #15
   878e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   878e4:	d81d      	bhi.n	87922 <_realloc_r+0x106>
   878e6:	f002 0201 	and.w	r2, r2, #1
   878ea:	433a      	orrs	r2, r7
   878ec:	eb09 0107 	add.w	r1, r9, r7
   878f0:	f8c9 2004 	str.w	r2, [r9, #4]
   878f4:	684b      	ldr	r3, [r1, #4]
   878f6:	f043 0301 	orr.w	r3, r3, #1
   878fa:	604b      	str	r3, [r1, #4]
   878fc:	4640      	mov	r0, r8
   878fe:	f7ff f9d3 	bl	86ca8 <__malloc_unlock>
   87902:	4628      	mov	r0, r5
   87904:	b003      	add	sp, #12
   87906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8790a:	f023 0303 	bic.w	r3, r3, #3
   8790e:	18f9      	adds	r1, r7, r3
   87910:	4291      	cmp	r1, r2
   87912:	db1d      	blt.n	87950 <_realloc_r+0x134>
   87914:	68c3      	ldr	r3, [r0, #12]
   87916:	6882      	ldr	r2, [r0, #8]
   87918:	4625      	mov	r5, r4
   8791a:	60d3      	str	r3, [r2, #12]
   8791c:	460f      	mov	r7, r1
   8791e:	609a      	str	r2, [r3, #8]
   87920:	e7dc      	b.n	878dc <_realloc_r+0xc0>
   87922:	f002 0201 	and.w	r2, r2, #1
   87926:	eb09 0106 	add.w	r1, r9, r6
   8792a:	f043 0301 	orr.w	r3, r3, #1
   8792e:	4332      	orrs	r2, r6
   87930:	f8c9 2004 	str.w	r2, [r9, #4]
   87934:	444f      	add	r7, r9
   87936:	604b      	str	r3, [r1, #4]
   87938:	687b      	ldr	r3, [r7, #4]
   8793a:	3108      	adds	r1, #8
   8793c:	f043 0301 	orr.w	r3, r3, #1
   87940:	607b      	str	r3, [r7, #4]
   87942:	4640      	mov	r0, r8
   87944:	f7ff fe20 	bl	87588 <_free_r>
   87948:	e7d8      	b.n	878fc <_realloc_r+0xe0>
   8794a:	4611      	mov	r1, r2
   8794c:	f7fe be36 	b.w	865bc <_malloc_r>
   87950:	f01e 0f01 	tst.w	lr, #1
   87954:	d18f      	bne.n	87876 <_realloc_r+0x5a>
   87956:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8795a:	eba9 0a01 	sub.w	sl, r9, r1
   8795e:	f8da 1004 	ldr.w	r1, [sl, #4]
   87962:	f021 0103 	bic.w	r1, r1, #3
   87966:	440b      	add	r3, r1
   87968:	443b      	add	r3, r7
   8796a:	4293      	cmp	r3, r2
   8796c:	db26      	blt.n	879bc <_realloc_r+0x1a0>
   8796e:	4655      	mov	r5, sl
   87970:	68c1      	ldr	r1, [r0, #12]
   87972:	6880      	ldr	r0, [r0, #8]
   87974:	1f3a      	subs	r2, r7, #4
   87976:	60c1      	str	r1, [r0, #12]
   87978:	6088      	str	r0, [r1, #8]
   8797a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8797e:	f8da 100c 	ldr.w	r1, [sl, #12]
   87982:	2a24      	cmp	r2, #36	; 0x24
   87984:	60c1      	str	r1, [r0, #12]
   87986:	6088      	str	r0, [r1, #8]
   87988:	d826      	bhi.n	879d8 <_realloc_r+0x1bc>
   8798a:	2a13      	cmp	r2, #19
   8798c:	f240 8081 	bls.w	87a92 <_realloc_r+0x276>
   87990:	6821      	ldr	r1, [r4, #0]
   87992:	2a1b      	cmp	r2, #27
   87994:	f8ca 1008 	str.w	r1, [sl, #8]
   87998:	6861      	ldr	r1, [r4, #4]
   8799a:	f8ca 100c 	str.w	r1, [sl, #12]
   8799e:	f200 80ad 	bhi.w	87afc <_realloc_r+0x2e0>
   879a2:	f104 0008 	add.w	r0, r4, #8
   879a6:	f10a 0210 	add.w	r2, sl, #16
   879aa:	e074      	b.n	87a96 <_realloc_r+0x27a>
   879ac:	f854 3c08 	ldr.w	r3, [r4, #-8]
   879b0:	eba9 0a03 	sub.w	sl, r9, r3
   879b4:	f8da 1004 	ldr.w	r1, [sl, #4]
   879b8:	f021 0103 	bic.w	r1, r1, #3
   879bc:	187b      	adds	r3, r7, r1
   879be:	4293      	cmp	r3, r2
   879c0:	f6ff af59 	blt.w	87876 <_realloc_r+0x5a>
   879c4:	4655      	mov	r5, sl
   879c6:	f8da 100c 	ldr.w	r1, [sl, #12]
   879ca:	f855 0f08 	ldr.w	r0, [r5, #8]!
   879ce:	1f3a      	subs	r2, r7, #4
   879d0:	2a24      	cmp	r2, #36	; 0x24
   879d2:	60c1      	str	r1, [r0, #12]
   879d4:	6088      	str	r0, [r1, #8]
   879d6:	d9d8      	bls.n	8798a <_realloc_r+0x16e>
   879d8:	4621      	mov	r1, r4
   879da:	4628      	mov	r0, r5
   879dc:	461f      	mov	r7, r3
   879de:	46d1      	mov	r9, sl
   879e0:	f7ff feb8 	bl	87754 <memmove>
   879e4:	e77a      	b.n	878dc <_realloc_r+0xc0>
   879e6:	6841      	ldr	r1, [r0, #4]
   879e8:	f106 0010 	add.w	r0, r6, #16
   879ec:	f021 0b03 	bic.w	fp, r1, #3
   879f0:	44bb      	add	fp, r7
   879f2:	4583      	cmp	fp, r0
   879f4:	da58      	bge.n	87aa8 <_realloc_r+0x28c>
   879f6:	f01e 0f01 	tst.w	lr, #1
   879fa:	f47f af3c 	bne.w	87876 <_realloc_r+0x5a>
   879fe:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87a02:	eba9 0a01 	sub.w	sl, r9, r1
   87a06:	f8da 1004 	ldr.w	r1, [sl, #4]
   87a0a:	f021 0103 	bic.w	r1, r1, #3
   87a0e:	448b      	add	fp, r1
   87a10:	4558      	cmp	r0, fp
   87a12:	dcd3      	bgt.n	879bc <_realloc_r+0x1a0>
   87a14:	4655      	mov	r5, sl
   87a16:	f8da 100c 	ldr.w	r1, [sl, #12]
   87a1a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87a1e:	1f3a      	subs	r2, r7, #4
   87a20:	2a24      	cmp	r2, #36	; 0x24
   87a22:	60c1      	str	r1, [r0, #12]
   87a24:	6088      	str	r0, [r1, #8]
   87a26:	f200 808d 	bhi.w	87b44 <_realloc_r+0x328>
   87a2a:	2a13      	cmp	r2, #19
   87a2c:	f240 8087 	bls.w	87b3e <_realloc_r+0x322>
   87a30:	6821      	ldr	r1, [r4, #0]
   87a32:	2a1b      	cmp	r2, #27
   87a34:	f8ca 1008 	str.w	r1, [sl, #8]
   87a38:	6861      	ldr	r1, [r4, #4]
   87a3a:	f8ca 100c 	str.w	r1, [sl, #12]
   87a3e:	f200 8088 	bhi.w	87b52 <_realloc_r+0x336>
   87a42:	f104 0108 	add.w	r1, r4, #8
   87a46:	f10a 0210 	add.w	r2, sl, #16
   87a4a:	6808      	ldr	r0, [r1, #0]
   87a4c:	6010      	str	r0, [r2, #0]
   87a4e:	6848      	ldr	r0, [r1, #4]
   87a50:	6050      	str	r0, [r2, #4]
   87a52:	6889      	ldr	r1, [r1, #8]
   87a54:	6091      	str	r1, [r2, #8]
   87a56:	ebab 0206 	sub.w	r2, fp, r6
   87a5a:	eb0a 0106 	add.w	r1, sl, r6
   87a5e:	f042 0201 	orr.w	r2, r2, #1
   87a62:	6099      	str	r1, [r3, #8]
   87a64:	604a      	str	r2, [r1, #4]
   87a66:	f8da 3004 	ldr.w	r3, [sl, #4]
   87a6a:	4640      	mov	r0, r8
   87a6c:	f003 0301 	and.w	r3, r3, #1
   87a70:	431e      	orrs	r6, r3
   87a72:	f8ca 6004 	str.w	r6, [sl, #4]
   87a76:	f7ff f917 	bl	86ca8 <__malloc_unlock>
   87a7a:	e742      	b.n	87902 <_realloc_r+0xe6>
   87a7c:	6823      	ldr	r3, [r4, #0]
   87a7e:	2a1b      	cmp	r2, #27
   87a80:	6003      	str	r3, [r0, #0]
   87a82:	6863      	ldr	r3, [r4, #4]
   87a84:	6043      	str	r3, [r0, #4]
   87a86:	d827      	bhi.n	87ad8 <_realloc_r+0x2bc>
   87a88:	f100 0308 	add.w	r3, r0, #8
   87a8c:	f104 0208 	add.w	r2, r4, #8
   87a90:	e70b      	b.n	878aa <_realloc_r+0x8e>
   87a92:	4620      	mov	r0, r4
   87a94:	462a      	mov	r2, r5
   87a96:	6801      	ldr	r1, [r0, #0]
   87a98:	461f      	mov	r7, r3
   87a9a:	6011      	str	r1, [r2, #0]
   87a9c:	6841      	ldr	r1, [r0, #4]
   87a9e:	46d1      	mov	r9, sl
   87aa0:	6051      	str	r1, [r2, #4]
   87aa2:	6883      	ldr	r3, [r0, #8]
   87aa4:	6093      	str	r3, [r2, #8]
   87aa6:	e719      	b.n	878dc <_realloc_r+0xc0>
   87aa8:	ebab 0b06 	sub.w	fp, fp, r6
   87aac:	eb09 0106 	add.w	r1, r9, r6
   87ab0:	f04b 0201 	orr.w	r2, fp, #1
   87ab4:	6099      	str	r1, [r3, #8]
   87ab6:	604a      	str	r2, [r1, #4]
   87ab8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87abc:	4640      	mov	r0, r8
   87abe:	f003 0301 	and.w	r3, r3, #1
   87ac2:	431e      	orrs	r6, r3
   87ac4:	f844 6c04 	str.w	r6, [r4, #-4]
   87ac8:	f7ff f8ee 	bl	86ca8 <__malloc_unlock>
   87acc:	4625      	mov	r5, r4
   87ace:	e718      	b.n	87902 <_realloc_r+0xe6>
   87ad0:	4621      	mov	r1, r4
   87ad2:	f7ff fe3f 	bl	87754 <memmove>
   87ad6:	e6ee      	b.n	878b6 <_realloc_r+0x9a>
   87ad8:	68a3      	ldr	r3, [r4, #8]
   87ada:	2a24      	cmp	r2, #36	; 0x24
   87adc:	6083      	str	r3, [r0, #8]
   87ade:	68e3      	ldr	r3, [r4, #12]
   87ae0:	60c3      	str	r3, [r0, #12]
   87ae2:	d018      	beq.n	87b16 <_realloc_r+0x2fa>
   87ae4:	f100 0310 	add.w	r3, r0, #16
   87ae8:	f104 0210 	add.w	r2, r4, #16
   87aec:	e6dd      	b.n	878aa <_realloc_r+0x8e>
   87aee:	f850 3c04 	ldr.w	r3, [r0, #-4]
   87af2:	4625      	mov	r5, r4
   87af4:	f023 0303 	bic.w	r3, r3, #3
   87af8:	441f      	add	r7, r3
   87afa:	e6ef      	b.n	878dc <_realloc_r+0xc0>
   87afc:	68a1      	ldr	r1, [r4, #8]
   87afe:	2a24      	cmp	r2, #36	; 0x24
   87b00:	f8ca 1010 	str.w	r1, [sl, #16]
   87b04:	68e1      	ldr	r1, [r4, #12]
   87b06:	f8ca 1014 	str.w	r1, [sl, #20]
   87b0a:	d00d      	beq.n	87b28 <_realloc_r+0x30c>
   87b0c:	f104 0010 	add.w	r0, r4, #16
   87b10:	f10a 0218 	add.w	r2, sl, #24
   87b14:	e7bf      	b.n	87a96 <_realloc_r+0x27a>
   87b16:	6922      	ldr	r2, [r4, #16]
   87b18:	f100 0318 	add.w	r3, r0, #24
   87b1c:	6102      	str	r2, [r0, #16]
   87b1e:	6961      	ldr	r1, [r4, #20]
   87b20:	f104 0218 	add.w	r2, r4, #24
   87b24:	6141      	str	r1, [r0, #20]
   87b26:	e6c0      	b.n	878aa <_realloc_r+0x8e>
   87b28:	6922      	ldr	r2, [r4, #16]
   87b2a:	f104 0018 	add.w	r0, r4, #24
   87b2e:	f8ca 2018 	str.w	r2, [sl, #24]
   87b32:	6961      	ldr	r1, [r4, #20]
   87b34:	f10a 0220 	add.w	r2, sl, #32
   87b38:	f8ca 101c 	str.w	r1, [sl, #28]
   87b3c:	e7ab      	b.n	87a96 <_realloc_r+0x27a>
   87b3e:	4621      	mov	r1, r4
   87b40:	462a      	mov	r2, r5
   87b42:	e782      	b.n	87a4a <_realloc_r+0x22e>
   87b44:	4621      	mov	r1, r4
   87b46:	4628      	mov	r0, r5
   87b48:	9301      	str	r3, [sp, #4]
   87b4a:	f7ff fe03 	bl	87754 <memmove>
   87b4e:	9b01      	ldr	r3, [sp, #4]
   87b50:	e781      	b.n	87a56 <_realloc_r+0x23a>
   87b52:	68a1      	ldr	r1, [r4, #8]
   87b54:	2a24      	cmp	r2, #36	; 0x24
   87b56:	f8ca 1010 	str.w	r1, [sl, #16]
   87b5a:	68e1      	ldr	r1, [r4, #12]
   87b5c:	f8ca 1014 	str.w	r1, [sl, #20]
   87b60:	d006      	beq.n	87b70 <_realloc_r+0x354>
   87b62:	f104 0110 	add.w	r1, r4, #16
   87b66:	f10a 0218 	add.w	r2, sl, #24
   87b6a:	e76e      	b.n	87a4a <_realloc_r+0x22e>
   87b6c:	20000bc4 	.word	0x20000bc4
   87b70:	6922      	ldr	r2, [r4, #16]
   87b72:	f104 0118 	add.w	r1, r4, #24
   87b76:	f8ca 2018 	str.w	r2, [sl, #24]
   87b7a:	6960      	ldr	r0, [r4, #20]
   87b7c:	f10a 0220 	add.w	r2, sl, #32
   87b80:	f8ca 001c 	str.w	r0, [sl, #28]
   87b84:	e761      	b.n	87a4a <_realloc_r+0x22e>
   87b86:	bf00      	nop

00087b88 <__aeabi_drsub>:
   87b88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   87b8c:	e002      	b.n	87b94 <__adddf3>
   87b8e:	bf00      	nop

00087b90 <__aeabi_dsub>:
   87b90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00087b94 <__adddf3>:
   87b94:	b530      	push	{r4, r5, lr}
   87b96:	ea4f 0441 	mov.w	r4, r1, lsl #1
   87b9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   87b9e:	ea94 0f05 	teq	r4, r5
   87ba2:	bf08      	it	eq
   87ba4:	ea90 0f02 	teqeq	r0, r2
   87ba8:	bf1f      	itttt	ne
   87baa:	ea54 0c00 	orrsne.w	ip, r4, r0
   87bae:	ea55 0c02 	orrsne.w	ip, r5, r2
   87bb2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   87bb6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87bba:	f000 80e2 	beq.w	87d82 <__adddf3+0x1ee>
   87bbe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   87bc2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   87bc6:	bfb8      	it	lt
   87bc8:	426d      	neglt	r5, r5
   87bca:	dd0c      	ble.n	87be6 <__adddf3+0x52>
   87bcc:	442c      	add	r4, r5
   87bce:	ea80 0202 	eor.w	r2, r0, r2
   87bd2:	ea81 0303 	eor.w	r3, r1, r3
   87bd6:	ea82 0000 	eor.w	r0, r2, r0
   87bda:	ea83 0101 	eor.w	r1, r3, r1
   87bde:	ea80 0202 	eor.w	r2, r0, r2
   87be2:	ea81 0303 	eor.w	r3, r1, r3
   87be6:	2d36      	cmp	r5, #54	; 0x36
   87be8:	bf88      	it	hi
   87bea:	bd30      	pophi	{r4, r5, pc}
   87bec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   87bf0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   87bf4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   87bf8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   87bfc:	d002      	beq.n	87c04 <__adddf3+0x70>
   87bfe:	4240      	negs	r0, r0
   87c00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87c04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   87c08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   87c0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   87c10:	d002      	beq.n	87c18 <__adddf3+0x84>
   87c12:	4252      	negs	r2, r2
   87c14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   87c18:	ea94 0f05 	teq	r4, r5
   87c1c:	f000 80a7 	beq.w	87d6e <__adddf3+0x1da>
   87c20:	f1a4 0401 	sub.w	r4, r4, #1
   87c24:	f1d5 0e20 	rsbs	lr, r5, #32
   87c28:	db0d      	blt.n	87c46 <__adddf3+0xb2>
   87c2a:	fa02 fc0e 	lsl.w	ip, r2, lr
   87c2e:	fa22 f205 	lsr.w	r2, r2, r5
   87c32:	1880      	adds	r0, r0, r2
   87c34:	f141 0100 	adc.w	r1, r1, #0
   87c38:	fa03 f20e 	lsl.w	r2, r3, lr
   87c3c:	1880      	adds	r0, r0, r2
   87c3e:	fa43 f305 	asr.w	r3, r3, r5
   87c42:	4159      	adcs	r1, r3
   87c44:	e00e      	b.n	87c64 <__adddf3+0xd0>
   87c46:	f1a5 0520 	sub.w	r5, r5, #32
   87c4a:	f10e 0e20 	add.w	lr, lr, #32
   87c4e:	2a01      	cmp	r2, #1
   87c50:	fa03 fc0e 	lsl.w	ip, r3, lr
   87c54:	bf28      	it	cs
   87c56:	f04c 0c02 	orrcs.w	ip, ip, #2
   87c5a:	fa43 f305 	asr.w	r3, r3, r5
   87c5e:	18c0      	adds	r0, r0, r3
   87c60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   87c64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87c68:	d507      	bpl.n	87c7a <__adddf3+0xe6>
   87c6a:	f04f 0e00 	mov.w	lr, #0
   87c6e:	f1dc 0c00 	rsbs	ip, ip, #0
   87c72:	eb7e 0000 	sbcs.w	r0, lr, r0
   87c76:	eb6e 0101 	sbc.w	r1, lr, r1
   87c7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   87c7e:	d31b      	bcc.n	87cb8 <__adddf3+0x124>
   87c80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   87c84:	d30c      	bcc.n	87ca0 <__adddf3+0x10c>
   87c86:	0849      	lsrs	r1, r1, #1
   87c88:	ea5f 0030 	movs.w	r0, r0, rrx
   87c8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   87c90:	f104 0401 	add.w	r4, r4, #1
   87c94:	ea4f 5244 	mov.w	r2, r4, lsl #21
   87c98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   87c9c:	f080 809a 	bcs.w	87dd4 <__adddf3+0x240>
   87ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   87ca4:	bf08      	it	eq
   87ca6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   87caa:	f150 0000 	adcs.w	r0, r0, #0
   87cae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87cb2:	ea41 0105 	orr.w	r1, r1, r5
   87cb6:	bd30      	pop	{r4, r5, pc}
   87cb8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   87cbc:	4140      	adcs	r0, r0
   87cbe:	eb41 0101 	adc.w	r1, r1, r1
   87cc2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87cc6:	f1a4 0401 	sub.w	r4, r4, #1
   87cca:	d1e9      	bne.n	87ca0 <__adddf3+0x10c>
   87ccc:	f091 0f00 	teq	r1, #0
   87cd0:	bf04      	itt	eq
   87cd2:	4601      	moveq	r1, r0
   87cd4:	2000      	moveq	r0, #0
   87cd6:	fab1 f381 	clz	r3, r1
   87cda:	bf08      	it	eq
   87cdc:	3320      	addeq	r3, #32
   87cde:	f1a3 030b 	sub.w	r3, r3, #11
   87ce2:	f1b3 0220 	subs.w	r2, r3, #32
   87ce6:	da0c      	bge.n	87d02 <__adddf3+0x16e>
   87ce8:	320c      	adds	r2, #12
   87cea:	dd08      	ble.n	87cfe <__adddf3+0x16a>
   87cec:	f102 0c14 	add.w	ip, r2, #20
   87cf0:	f1c2 020c 	rsb	r2, r2, #12
   87cf4:	fa01 f00c 	lsl.w	r0, r1, ip
   87cf8:	fa21 f102 	lsr.w	r1, r1, r2
   87cfc:	e00c      	b.n	87d18 <__adddf3+0x184>
   87cfe:	f102 0214 	add.w	r2, r2, #20
   87d02:	bfd8      	it	le
   87d04:	f1c2 0c20 	rsble	ip, r2, #32
   87d08:	fa01 f102 	lsl.w	r1, r1, r2
   87d0c:	fa20 fc0c 	lsr.w	ip, r0, ip
   87d10:	bfdc      	itt	le
   87d12:	ea41 010c 	orrle.w	r1, r1, ip
   87d16:	4090      	lslle	r0, r2
   87d18:	1ae4      	subs	r4, r4, r3
   87d1a:	bfa2      	ittt	ge
   87d1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   87d20:	4329      	orrge	r1, r5
   87d22:	bd30      	popge	{r4, r5, pc}
   87d24:	ea6f 0404 	mvn.w	r4, r4
   87d28:	3c1f      	subs	r4, #31
   87d2a:	da1c      	bge.n	87d66 <__adddf3+0x1d2>
   87d2c:	340c      	adds	r4, #12
   87d2e:	dc0e      	bgt.n	87d4e <__adddf3+0x1ba>
   87d30:	f104 0414 	add.w	r4, r4, #20
   87d34:	f1c4 0220 	rsb	r2, r4, #32
   87d38:	fa20 f004 	lsr.w	r0, r0, r4
   87d3c:	fa01 f302 	lsl.w	r3, r1, r2
   87d40:	ea40 0003 	orr.w	r0, r0, r3
   87d44:	fa21 f304 	lsr.w	r3, r1, r4
   87d48:	ea45 0103 	orr.w	r1, r5, r3
   87d4c:	bd30      	pop	{r4, r5, pc}
   87d4e:	f1c4 040c 	rsb	r4, r4, #12
   87d52:	f1c4 0220 	rsb	r2, r4, #32
   87d56:	fa20 f002 	lsr.w	r0, r0, r2
   87d5a:	fa01 f304 	lsl.w	r3, r1, r4
   87d5e:	ea40 0003 	orr.w	r0, r0, r3
   87d62:	4629      	mov	r1, r5
   87d64:	bd30      	pop	{r4, r5, pc}
   87d66:	fa21 f004 	lsr.w	r0, r1, r4
   87d6a:	4629      	mov	r1, r5
   87d6c:	bd30      	pop	{r4, r5, pc}
   87d6e:	f094 0f00 	teq	r4, #0
   87d72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   87d76:	bf06      	itte	eq
   87d78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   87d7c:	3401      	addeq	r4, #1
   87d7e:	3d01      	subne	r5, #1
   87d80:	e74e      	b.n	87c20 <__adddf3+0x8c>
   87d82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87d86:	bf18      	it	ne
   87d88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87d8c:	d029      	beq.n	87de2 <__adddf3+0x24e>
   87d8e:	ea94 0f05 	teq	r4, r5
   87d92:	bf08      	it	eq
   87d94:	ea90 0f02 	teqeq	r0, r2
   87d98:	d005      	beq.n	87da6 <__adddf3+0x212>
   87d9a:	ea54 0c00 	orrs.w	ip, r4, r0
   87d9e:	bf04      	itt	eq
   87da0:	4619      	moveq	r1, r3
   87da2:	4610      	moveq	r0, r2
   87da4:	bd30      	pop	{r4, r5, pc}
   87da6:	ea91 0f03 	teq	r1, r3
   87daa:	bf1e      	ittt	ne
   87dac:	2100      	movne	r1, #0
   87dae:	2000      	movne	r0, #0
   87db0:	bd30      	popne	{r4, r5, pc}
   87db2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   87db6:	d105      	bne.n	87dc4 <__adddf3+0x230>
   87db8:	0040      	lsls	r0, r0, #1
   87dba:	4149      	adcs	r1, r1
   87dbc:	bf28      	it	cs
   87dbe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   87dc2:	bd30      	pop	{r4, r5, pc}
   87dc4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   87dc8:	bf3c      	itt	cc
   87dca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   87dce:	bd30      	popcc	{r4, r5, pc}
   87dd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87dd4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   87dd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87ddc:	f04f 0000 	mov.w	r0, #0
   87de0:	bd30      	pop	{r4, r5, pc}
   87de2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87de6:	bf1a      	itte	ne
   87de8:	4619      	movne	r1, r3
   87dea:	4610      	movne	r0, r2
   87dec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   87df0:	bf1c      	itt	ne
   87df2:	460b      	movne	r3, r1
   87df4:	4602      	movne	r2, r0
   87df6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   87dfa:	bf06      	itte	eq
   87dfc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   87e00:	ea91 0f03 	teqeq	r1, r3
   87e04:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   87e08:	bd30      	pop	{r4, r5, pc}
   87e0a:	bf00      	nop

00087e0c <__aeabi_ui2d>:
   87e0c:	f090 0f00 	teq	r0, #0
   87e10:	bf04      	itt	eq
   87e12:	2100      	moveq	r1, #0
   87e14:	4770      	bxeq	lr
   87e16:	b530      	push	{r4, r5, lr}
   87e18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87e1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87e20:	f04f 0500 	mov.w	r5, #0
   87e24:	f04f 0100 	mov.w	r1, #0
   87e28:	e750      	b.n	87ccc <__adddf3+0x138>
   87e2a:	bf00      	nop

00087e2c <__aeabi_i2d>:
   87e2c:	f090 0f00 	teq	r0, #0
   87e30:	bf04      	itt	eq
   87e32:	2100      	moveq	r1, #0
   87e34:	4770      	bxeq	lr
   87e36:	b530      	push	{r4, r5, lr}
   87e38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87e3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87e40:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   87e44:	bf48      	it	mi
   87e46:	4240      	negmi	r0, r0
   87e48:	f04f 0100 	mov.w	r1, #0
   87e4c:	e73e      	b.n	87ccc <__adddf3+0x138>
   87e4e:	bf00      	nop

00087e50 <__aeabi_f2d>:
   87e50:	0042      	lsls	r2, r0, #1
   87e52:	ea4f 01e2 	mov.w	r1, r2, asr #3
   87e56:	ea4f 0131 	mov.w	r1, r1, rrx
   87e5a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   87e5e:	bf1f      	itttt	ne
   87e60:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   87e64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87e68:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   87e6c:	4770      	bxne	lr
   87e6e:	f092 0f00 	teq	r2, #0
   87e72:	bf14      	ite	ne
   87e74:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87e78:	4770      	bxeq	lr
   87e7a:	b530      	push	{r4, r5, lr}
   87e7c:	f44f 7460 	mov.w	r4, #896	; 0x380
   87e80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87e84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87e88:	e720      	b.n	87ccc <__adddf3+0x138>
   87e8a:	bf00      	nop

00087e8c <__aeabi_ul2d>:
   87e8c:	ea50 0201 	orrs.w	r2, r0, r1
   87e90:	bf08      	it	eq
   87e92:	4770      	bxeq	lr
   87e94:	b530      	push	{r4, r5, lr}
   87e96:	f04f 0500 	mov.w	r5, #0
   87e9a:	e00a      	b.n	87eb2 <__aeabi_l2d+0x16>

00087e9c <__aeabi_l2d>:
   87e9c:	ea50 0201 	orrs.w	r2, r0, r1
   87ea0:	bf08      	it	eq
   87ea2:	4770      	bxeq	lr
   87ea4:	b530      	push	{r4, r5, lr}
   87ea6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   87eaa:	d502      	bpl.n	87eb2 <__aeabi_l2d+0x16>
   87eac:	4240      	negs	r0, r0
   87eae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87eb2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87eb6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87eba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   87ebe:	f43f aedc 	beq.w	87c7a <__adddf3+0xe6>
   87ec2:	f04f 0203 	mov.w	r2, #3
   87ec6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87eca:	bf18      	it	ne
   87ecc:	3203      	addne	r2, #3
   87ece:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87ed2:	bf18      	it	ne
   87ed4:	3203      	addne	r2, #3
   87ed6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   87eda:	f1c2 0320 	rsb	r3, r2, #32
   87ede:	fa00 fc03 	lsl.w	ip, r0, r3
   87ee2:	fa20 f002 	lsr.w	r0, r0, r2
   87ee6:	fa01 fe03 	lsl.w	lr, r1, r3
   87eea:	ea40 000e 	orr.w	r0, r0, lr
   87eee:	fa21 f102 	lsr.w	r1, r1, r2
   87ef2:	4414      	add	r4, r2
   87ef4:	e6c1      	b.n	87c7a <__adddf3+0xe6>
   87ef6:	bf00      	nop

00087ef8 <__aeabi_dmul>:
   87ef8:	b570      	push	{r4, r5, r6, lr}
   87efa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87efe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87f02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87f06:	bf1d      	ittte	ne
   87f08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87f0c:	ea94 0f0c 	teqne	r4, ip
   87f10:	ea95 0f0c 	teqne	r5, ip
   87f14:	f000 f8de 	bleq	880d4 <__aeabi_dmul+0x1dc>
   87f18:	442c      	add	r4, r5
   87f1a:	ea81 0603 	eor.w	r6, r1, r3
   87f1e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   87f22:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   87f26:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   87f2a:	bf18      	it	ne
   87f2c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   87f30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   87f38:	d038      	beq.n	87fac <__aeabi_dmul+0xb4>
   87f3a:	fba0 ce02 	umull	ip, lr, r0, r2
   87f3e:	f04f 0500 	mov.w	r5, #0
   87f42:	fbe1 e502 	umlal	lr, r5, r1, r2
   87f46:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   87f4a:	fbe0 e503 	umlal	lr, r5, r0, r3
   87f4e:	f04f 0600 	mov.w	r6, #0
   87f52:	fbe1 5603 	umlal	r5, r6, r1, r3
   87f56:	f09c 0f00 	teq	ip, #0
   87f5a:	bf18      	it	ne
   87f5c:	f04e 0e01 	orrne.w	lr, lr, #1
   87f60:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   87f64:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   87f68:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   87f6c:	d204      	bcs.n	87f78 <__aeabi_dmul+0x80>
   87f6e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   87f72:	416d      	adcs	r5, r5
   87f74:	eb46 0606 	adc.w	r6, r6, r6
   87f78:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   87f7c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   87f80:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   87f84:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   87f88:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   87f8c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   87f90:	bf88      	it	hi
   87f92:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87f96:	d81e      	bhi.n	87fd6 <__aeabi_dmul+0xde>
   87f98:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   87f9c:	bf08      	it	eq
   87f9e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   87fa2:	f150 0000 	adcs.w	r0, r0, #0
   87fa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87faa:	bd70      	pop	{r4, r5, r6, pc}
   87fac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   87fb0:	ea46 0101 	orr.w	r1, r6, r1
   87fb4:	ea40 0002 	orr.w	r0, r0, r2
   87fb8:	ea81 0103 	eor.w	r1, r1, r3
   87fbc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   87fc0:	bfc2      	ittt	gt
   87fc2:	ebd4 050c 	rsbsgt	r5, r4, ip
   87fc6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87fca:	bd70      	popgt	{r4, r5, r6, pc}
   87fcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87fd0:	f04f 0e00 	mov.w	lr, #0
   87fd4:	3c01      	subs	r4, #1
   87fd6:	f300 80ab 	bgt.w	88130 <__aeabi_dmul+0x238>
   87fda:	f114 0f36 	cmn.w	r4, #54	; 0x36
   87fde:	bfde      	ittt	le
   87fe0:	2000      	movle	r0, #0
   87fe2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   87fe6:	bd70      	pople	{r4, r5, r6, pc}
   87fe8:	f1c4 0400 	rsb	r4, r4, #0
   87fec:	3c20      	subs	r4, #32
   87fee:	da35      	bge.n	8805c <__aeabi_dmul+0x164>
   87ff0:	340c      	adds	r4, #12
   87ff2:	dc1b      	bgt.n	8802c <__aeabi_dmul+0x134>
   87ff4:	f104 0414 	add.w	r4, r4, #20
   87ff8:	f1c4 0520 	rsb	r5, r4, #32
   87ffc:	fa00 f305 	lsl.w	r3, r0, r5
   88000:	fa20 f004 	lsr.w	r0, r0, r4
   88004:	fa01 f205 	lsl.w	r2, r1, r5
   88008:	ea40 0002 	orr.w	r0, r0, r2
   8800c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   88010:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   88014:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   88018:	fa21 f604 	lsr.w	r6, r1, r4
   8801c:	eb42 0106 	adc.w	r1, r2, r6
   88020:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88024:	bf08      	it	eq
   88026:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8802a:	bd70      	pop	{r4, r5, r6, pc}
   8802c:	f1c4 040c 	rsb	r4, r4, #12
   88030:	f1c4 0520 	rsb	r5, r4, #32
   88034:	fa00 f304 	lsl.w	r3, r0, r4
   88038:	fa20 f005 	lsr.w	r0, r0, r5
   8803c:	fa01 f204 	lsl.w	r2, r1, r4
   88040:	ea40 0002 	orr.w	r0, r0, r2
   88044:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88048:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8804c:	f141 0100 	adc.w	r1, r1, #0
   88050:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88054:	bf08      	it	eq
   88056:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8805a:	bd70      	pop	{r4, r5, r6, pc}
   8805c:	f1c4 0520 	rsb	r5, r4, #32
   88060:	fa00 f205 	lsl.w	r2, r0, r5
   88064:	ea4e 0e02 	orr.w	lr, lr, r2
   88068:	fa20 f304 	lsr.w	r3, r0, r4
   8806c:	fa01 f205 	lsl.w	r2, r1, r5
   88070:	ea43 0302 	orr.w	r3, r3, r2
   88074:	fa21 f004 	lsr.w	r0, r1, r4
   88078:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8807c:	fa21 f204 	lsr.w	r2, r1, r4
   88080:	ea20 0002 	bic.w	r0, r0, r2
   88084:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   88088:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8808c:	bf08      	it	eq
   8808e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   88092:	bd70      	pop	{r4, r5, r6, pc}
   88094:	f094 0f00 	teq	r4, #0
   88098:	d10f      	bne.n	880ba <__aeabi_dmul+0x1c2>
   8809a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8809e:	0040      	lsls	r0, r0, #1
   880a0:	eb41 0101 	adc.w	r1, r1, r1
   880a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   880a8:	bf08      	it	eq
   880aa:	3c01      	subeq	r4, #1
   880ac:	d0f7      	beq.n	8809e <__aeabi_dmul+0x1a6>
   880ae:	ea41 0106 	orr.w	r1, r1, r6
   880b2:	f095 0f00 	teq	r5, #0
   880b6:	bf18      	it	ne
   880b8:	4770      	bxne	lr
   880ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   880be:	0052      	lsls	r2, r2, #1
   880c0:	eb43 0303 	adc.w	r3, r3, r3
   880c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   880c8:	bf08      	it	eq
   880ca:	3d01      	subeq	r5, #1
   880cc:	d0f7      	beq.n	880be <__aeabi_dmul+0x1c6>
   880ce:	ea43 0306 	orr.w	r3, r3, r6
   880d2:	4770      	bx	lr
   880d4:	ea94 0f0c 	teq	r4, ip
   880d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   880dc:	bf18      	it	ne
   880de:	ea95 0f0c 	teqne	r5, ip
   880e2:	d00c      	beq.n	880fe <__aeabi_dmul+0x206>
   880e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   880e8:	bf18      	it	ne
   880ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   880ee:	d1d1      	bne.n	88094 <__aeabi_dmul+0x19c>
   880f0:	ea81 0103 	eor.w	r1, r1, r3
   880f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   880f8:	f04f 0000 	mov.w	r0, #0
   880fc:	bd70      	pop	{r4, r5, r6, pc}
   880fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88102:	bf06      	itte	eq
   88104:	4610      	moveq	r0, r2
   88106:	4619      	moveq	r1, r3
   88108:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8810c:	d019      	beq.n	88142 <__aeabi_dmul+0x24a>
   8810e:	ea94 0f0c 	teq	r4, ip
   88112:	d102      	bne.n	8811a <__aeabi_dmul+0x222>
   88114:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   88118:	d113      	bne.n	88142 <__aeabi_dmul+0x24a>
   8811a:	ea95 0f0c 	teq	r5, ip
   8811e:	d105      	bne.n	8812c <__aeabi_dmul+0x234>
   88120:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   88124:	bf1c      	itt	ne
   88126:	4610      	movne	r0, r2
   88128:	4619      	movne	r1, r3
   8812a:	d10a      	bne.n	88142 <__aeabi_dmul+0x24a>
   8812c:	ea81 0103 	eor.w	r1, r1, r3
   88130:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88134:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   88138:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8813c:	f04f 0000 	mov.w	r0, #0
   88140:	bd70      	pop	{r4, r5, r6, pc}
   88142:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   88146:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8814a:	bd70      	pop	{r4, r5, r6, pc}

0008814c <__aeabi_ddiv>:
   8814c:	b570      	push	{r4, r5, r6, lr}
   8814e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   88152:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   88156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8815a:	bf1d      	ittte	ne
   8815c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   88160:	ea94 0f0c 	teqne	r4, ip
   88164:	ea95 0f0c 	teqne	r5, ip
   88168:	f000 f8a7 	bleq	882ba <__aeabi_ddiv+0x16e>
   8816c:	eba4 0405 	sub.w	r4, r4, r5
   88170:	ea81 0e03 	eor.w	lr, r1, r3
   88174:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   88178:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8817c:	f000 8088 	beq.w	88290 <__aeabi_ddiv+0x144>
   88180:	ea4f 3303 	mov.w	r3, r3, lsl #12
   88184:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   88188:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8818c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   88190:	ea4f 2202 	mov.w	r2, r2, lsl #8
   88194:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   88198:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8819c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   881a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   881a4:	429d      	cmp	r5, r3
   881a6:	bf08      	it	eq
   881a8:	4296      	cmpeq	r6, r2
   881aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   881ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
   881b2:	d202      	bcs.n	881ba <__aeabi_ddiv+0x6e>
   881b4:	085b      	lsrs	r3, r3, #1
   881b6:	ea4f 0232 	mov.w	r2, r2, rrx
   881ba:	1ab6      	subs	r6, r6, r2
   881bc:	eb65 0503 	sbc.w	r5, r5, r3
   881c0:	085b      	lsrs	r3, r3, #1
   881c2:	ea4f 0232 	mov.w	r2, r2, rrx
   881c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   881ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   881ce:	ebb6 0e02 	subs.w	lr, r6, r2
   881d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   881d6:	bf22      	ittt	cs
   881d8:	1ab6      	subcs	r6, r6, r2
   881da:	4675      	movcs	r5, lr
   881dc:	ea40 000c 	orrcs.w	r0, r0, ip
   881e0:	085b      	lsrs	r3, r3, #1
   881e2:	ea4f 0232 	mov.w	r2, r2, rrx
   881e6:	ebb6 0e02 	subs.w	lr, r6, r2
   881ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   881ee:	bf22      	ittt	cs
   881f0:	1ab6      	subcs	r6, r6, r2
   881f2:	4675      	movcs	r5, lr
   881f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   881f8:	085b      	lsrs	r3, r3, #1
   881fa:	ea4f 0232 	mov.w	r2, r2, rrx
   881fe:	ebb6 0e02 	subs.w	lr, r6, r2
   88202:	eb75 0e03 	sbcs.w	lr, r5, r3
   88206:	bf22      	ittt	cs
   88208:	1ab6      	subcs	r6, r6, r2
   8820a:	4675      	movcs	r5, lr
   8820c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   88210:	085b      	lsrs	r3, r3, #1
   88212:	ea4f 0232 	mov.w	r2, r2, rrx
   88216:	ebb6 0e02 	subs.w	lr, r6, r2
   8821a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8821e:	bf22      	ittt	cs
   88220:	1ab6      	subcs	r6, r6, r2
   88222:	4675      	movcs	r5, lr
   88224:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   88228:	ea55 0e06 	orrs.w	lr, r5, r6
   8822c:	d018      	beq.n	88260 <__aeabi_ddiv+0x114>
   8822e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   88232:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   88236:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8823a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8823e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   88242:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   88246:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8824a:	d1c0      	bne.n	881ce <__aeabi_ddiv+0x82>
   8824c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88250:	d10b      	bne.n	8826a <__aeabi_ddiv+0x11e>
   88252:	ea41 0100 	orr.w	r1, r1, r0
   88256:	f04f 0000 	mov.w	r0, #0
   8825a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8825e:	e7b6      	b.n	881ce <__aeabi_ddiv+0x82>
   88260:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88264:	bf04      	itt	eq
   88266:	4301      	orreq	r1, r0
   88268:	2000      	moveq	r0, #0
   8826a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8826e:	bf88      	it	hi
   88270:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   88274:	f63f aeaf 	bhi.w	87fd6 <__aeabi_dmul+0xde>
   88278:	ebb5 0c03 	subs.w	ip, r5, r3
   8827c:	bf04      	itt	eq
   8827e:	ebb6 0c02 	subseq.w	ip, r6, r2
   88282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   88286:	f150 0000 	adcs.w	r0, r0, #0
   8828a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8828e:	bd70      	pop	{r4, r5, r6, pc}
   88290:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   88294:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   88298:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8829c:	bfc2      	ittt	gt
   8829e:	ebd4 050c 	rsbsgt	r5, r4, ip
   882a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   882a6:	bd70      	popgt	{r4, r5, r6, pc}
   882a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   882ac:	f04f 0e00 	mov.w	lr, #0
   882b0:	3c01      	subs	r4, #1
   882b2:	e690      	b.n	87fd6 <__aeabi_dmul+0xde>
   882b4:	ea45 0e06 	orr.w	lr, r5, r6
   882b8:	e68d      	b.n	87fd6 <__aeabi_dmul+0xde>
   882ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   882be:	ea94 0f0c 	teq	r4, ip
   882c2:	bf08      	it	eq
   882c4:	ea95 0f0c 	teqeq	r5, ip
   882c8:	f43f af3b 	beq.w	88142 <__aeabi_dmul+0x24a>
   882cc:	ea94 0f0c 	teq	r4, ip
   882d0:	d10a      	bne.n	882e8 <__aeabi_ddiv+0x19c>
   882d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   882d6:	f47f af34 	bne.w	88142 <__aeabi_dmul+0x24a>
   882da:	ea95 0f0c 	teq	r5, ip
   882de:	f47f af25 	bne.w	8812c <__aeabi_dmul+0x234>
   882e2:	4610      	mov	r0, r2
   882e4:	4619      	mov	r1, r3
   882e6:	e72c      	b.n	88142 <__aeabi_dmul+0x24a>
   882e8:	ea95 0f0c 	teq	r5, ip
   882ec:	d106      	bne.n	882fc <__aeabi_ddiv+0x1b0>
   882ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   882f2:	f43f aefd 	beq.w	880f0 <__aeabi_dmul+0x1f8>
   882f6:	4610      	mov	r0, r2
   882f8:	4619      	mov	r1, r3
   882fa:	e722      	b.n	88142 <__aeabi_dmul+0x24a>
   882fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88300:	bf18      	it	ne
   88302:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88306:	f47f aec5 	bne.w	88094 <__aeabi_dmul+0x19c>
   8830a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8830e:	f47f af0d 	bne.w	8812c <__aeabi_dmul+0x234>
   88312:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   88316:	f47f aeeb 	bne.w	880f0 <__aeabi_dmul+0x1f8>
   8831a:	e712      	b.n	88142 <__aeabi_dmul+0x24a>

0008831c <__gedf2>:
   8831c:	f04f 3cff 	mov.w	ip, #4294967295
   88320:	e006      	b.n	88330 <__cmpdf2+0x4>
   88322:	bf00      	nop

00088324 <__ledf2>:
   88324:	f04f 0c01 	mov.w	ip, #1
   88328:	e002      	b.n	88330 <__cmpdf2+0x4>
   8832a:	bf00      	nop

0008832c <__cmpdf2>:
   8832c:	f04f 0c01 	mov.w	ip, #1
   88330:	f84d cd04 	str.w	ip, [sp, #-4]!
   88334:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88338:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8833c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88340:	bf18      	it	ne
   88342:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   88346:	d01b      	beq.n	88380 <__cmpdf2+0x54>
   88348:	b001      	add	sp, #4
   8834a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8834e:	bf0c      	ite	eq
   88350:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   88354:	ea91 0f03 	teqne	r1, r3
   88358:	bf02      	ittt	eq
   8835a:	ea90 0f02 	teqeq	r0, r2
   8835e:	2000      	moveq	r0, #0
   88360:	4770      	bxeq	lr
   88362:	f110 0f00 	cmn.w	r0, #0
   88366:	ea91 0f03 	teq	r1, r3
   8836a:	bf58      	it	pl
   8836c:	4299      	cmppl	r1, r3
   8836e:	bf08      	it	eq
   88370:	4290      	cmpeq	r0, r2
   88372:	bf2c      	ite	cs
   88374:	17d8      	asrcs	r0, r3, #31
   88376:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8837a:	f040 0001 	orr.w	r0, r0, #1
   8837e:	4770      	bx	lr
   88380:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88384:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88388:	d102      	bne.n	88390 <__cmpdf2+0x64>
   8838a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8838e:	d107      	bne.n	883a0 <__cmpdf2+0x74>
   88390:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88394:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88398:	d1d6      	bne.n	88348 <__cmpdf2+0x1c>
   8839a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8839e:	d0d3      	beq.n	88348 <__cmpdf2+0x1c>
   883a0:	f85d 0b04 	ldr.w	r0, [sp], #4
   883a4:	4770      	bx	lr
   883a6:	bf00      	nop

000883a8 <__aeabi_cdrcmple>:
   883a8:	4684      	mov	ip, r0
   883aa:	4610      	mov	r0, r2
   883ac:	4662      	mov	r2, ip
   883ae:	468c      	mov	ip, r1
   883b0:	4619      	mov	r1, r3
   883b2:	4663      	mov	r3, ip
   883b4:	e000      	b.n	883b8 <__aeabi_cdcmpeq>
   883b6:	bf00      	nop

000883b8 <__aeabi_cdcmpeq>:
   883b8:	b501      	push	{r0, lr}
   883ba:	f7ff ffb7 	bl	8832c <__cmpdf2>
   883be:	2800      	cmp	r0, #0
   883c0:	bf48      	it	mi
   883c2:	f110 0f00 	cmnmi.w	r0, #0
   883c6:	bd01      	pop	{r0, pc}

000883c8 <__aeabi_dcmpeq>:
   883c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   883cc:	f7ff fff4 	bl	883b8 <__aeabi_cdcmpeq>
   883d0:	bf0c      	ite	eq
   883d2:	2001      	moveq	r0, #1
   883d4:	2000      	movne	r0, #0
   883d6:	f85d fb08 	ldr.w	pc, [sp], #8
   883da:	bf00      	nop

000883dc <__aeabi_dcmplt>:
   883dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   883e0:	f7ff ffea 	bl	883b8 <__aeabi_cdcmpeq>
   883e4:	bf34      	ite	cc
   883e6:	2001      	movcc	r0, #1
   883e8:	2000      	movcs	r0, #0
   883ea:	f85d fb08 	ldr.w	pc, [sp], #8
   883ee:	bf00      	nop

000883f0 <__aeabi_dcmple>:
   883f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   883f4:	f7ff ffe0 	bl	883b8 <__aeabi_cdcmpeq>
   883f8:	bf94      	ite	ls
   883fa:	2001      	movls	r0, #1
   883fc:	2000      	movhi	r0, #0
   883fe:	f85d fb08 	ldr.w	pc, [sp], #8
   88402:	bf00      	nop

00088404 <__aeabi_dcmpge>:
   88404:	f84d ed08 	str.w	lr, [sp, #-8]!
   88408:	f7ff ffce 	bl	883a8 <__aeabi_cdrcmple>
   8840c:	bf94      	ite	ls
   8840e:	2001      	movls	r0, #1
   88410:	2000      	movhi	r0, #0
   88412:	f85d fb08 	ldr.w	pc, [sp], #8
   88416:	bf00      	nop

00088418 <__aeabi_dcmpgt>:
   88418:	f84d ed08 	str.w	lr, [sp, #-8]!
   8841c:	f7ff ffc4 	bl	883a8 <__aeabi_cdrcmple>
   88420:	bf34      	ite	cc
   88422:	2001      	movcc	r0, #1
   88424:	2000      	movcs	r0, #0
   88426:	f85d fb08 	ldr.w	pc, [sp], #8
   8842a:	bf00      	nop

0008842c <__aeabi_dcmpun>:
   8842c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88430:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88434:	d102      	bne.n	8843c <__aeabi_dcmpun+0x10>
   88436:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8843a:	d10a      	bne.n	88452 <__aeabi_dcmpun+0x26>
   8843c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88440:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88444:	d102      	bne.n	8844c <__aeabi_dcmpun+0x20>
   88446:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8844a:	d102      	bne.n	88452 <__aeabi_dcmpun+0x26>
   8844c:	f04f 0000 	mov.w	r0, #0
   88450:	4770      	bx	lr
   88452:	f04f 0001 	mov.w	r0, #1
   88456:	4770      	bx	lr

00088458 <__aeabi_d2iz>:
   88458:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8845c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   88460:	d215      	bcs.n	8848e <__aeabi_d2iz+0x36>
   88462:	d511      	bpl.n	88488 <__aeabi_d2iz+0x30>
   88464:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   88468:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8846c:	d912      	bls.n	88494 <__aeabi_d2iz+0x3c>
   8846e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   88472:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   88476:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8847a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8847e:	fa23 f002 	lsr.w	r0, r3, r2
   88482:	bf18      	it	ne
   88484:	4240      	negne	r0, r0
   88486:	4770      	bx	lr
   88488:	f04f 0000 	mov.w	r0, #0
   8848c:	4770      	bx	lr
   8848e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   88492:	d105      	bne.n	884a0 <__aeabi_d2iz+0x48>
   88494:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   88498:	bf08      	it	eq
   8849a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8849e:	4770      	bx	lr
   884a0:	f04f 0000 	mov.w	r0, #0
   884a4:	4770      	bx	lr
   884a6:	bf00      	nop

000884a8 <__aeabi_uldivmod>:
   884a8:	b953      	cbnz	r3, 884c0 <__aeabi_uldivmod+0x18>
   884aa:	b94a      	cbnz	r2, 884c0 <__aeabi_uldivmod+0x18>
   884ac:	2900      	cmp	r1, #0
   884ae:	bf08      	it	eq
   884b0:	2800      	cmpeq	r0, #0
   884b2:	bf1c      	itt	ne
   884b4:	f04f 31ff 	movne.w	r1, #4294967295
   884b8:	f04f 30ff 	movne.w	r0, #4294967295
   884bc:	f000 b97a 	b.w	887b4 <__aeabi_idiv0>
   884c0:	f1ad 0c08 	sub.w	ip, sp, #8
   884c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   884c8:	f000 f806 	bl	884d8 <__udivmoddi4>
   884cc:	f8dd e004 	ldr.w	lr, [sp, #4]
   884d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   884d4:	b004      	add	sp, #16
   884d6:	4770      	bx	lr

000884d8 <__udivmoddi4>:
   884d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   884dc:	468c      	mov	ip, r1
   884de:	460e      	mov	r6, r1
   884e0:	4604      	mov	r4, r0
   884e2:	9d08      	ldr	r5, [sp, #32]
   884e4:	2b00      	cmp	r3, #0
   884e6:	d150      	bne.n	8858a <__udivmoddi4+0xb2>
   884e8:	428a      	cmp	r2, r1
   884ea:	4617      	mov	r7, r2
   884ec:	d96c      	bls.n	885c8 <__udivmoddi4+0xf0>
   884ee:	fab2 fe82 	clz	lr, r2
   884f2:	f1be 0f00 	cmp.w	lr, #0
   884f6:	d00b      	beq.n	88510 <__udivmoddi4+0x38>
   884f8:	f1ce 0c20 	rsb	ip, lr, #32
   884fc:	fa01 f60e 	lsl.w	r6, r1, lr
   88500:	fa20 fc0c 	lsr.w	ip, r0, ip
   88504:	fa02 f70e 	lsl.w	r7, r2, lr
   88508:	ea4c 0c06 	orr.w	ip, ip, r6
   8850c:	fa00 f40e 	lsl.w	r4, r0, lr
   88510:	0c3a      	lsrs	r2, r7, #16
   88512:	fbbc f9f2 	udiv	r9, ip, r2
   88516:	b2bb      	uxth	r3, r7
   88518:	fb02 cc19 	mls	ip, r2, r9, ip
   8851c:	fb09 fa03 	mul.w	sl, r9, r3
   88520:	ea4f 4814 	mov.w	r8, r4, lsr #16
   88524:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   88528:	45b2      	cmp	sl, r6
   8852a:	d90a      	bls.n	88542 <__udivmoddi4+0x6a>
   8852c:	19f6      	adds	r6, r6, r7
   8852e:	f109 31ff 	add.w	r1, r9, #4294967295
   88532:	f080 8125 	bcs.w	88780 <__udivmoddi4+0x2a8>
   88536:	45b2      	cmp	sl, r6
   88538:	f240 8122 	bls.w	88780 <__udivmoddi4+0x2a8>
   8853c:	f1a9 0902 	sub.w	r9, r9, #2
   88540:	443e      	add	r6, r7
   88542:	eba6 060a 	sub.w	r6, r6, sl
   88546:	fbb6 f0f2 	udiv	r0, r6, r2
   8854a:	fb02 6610 	mls	r6, r2, r0, r6
   8854e:	fb00 f303 	mul.w	r3, r0, r3
   88552:	b2a4      	uxth	r4, r4
   88554:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   88558:	42a3      	cmp	r3, r4
   8855a:	d909      	bls.n	88570 <__udivmoddi4+0x98>
   8855c:	19e4      	adds	r4, r4, r7
   8855e:	f100 32ff 	add.w	r2, r0, #4294967295
   88562:	f080 810b 	bcs.w	8877c <__udivmoddi4+0x2a4>
   88566:	42a3      	cmp	r3, r4
   88568:	f240 8108 	bls.w	8877c <__udivmoddi4+0x2a4>
   8856c:	3802      	subs	r0, #2
   8856e:	443c      	add	r4, r7
   88570:	2100      	movs	r1, #0
   88572:	1ae4      	subs	r4, r4, r3
   88574:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   88578:	2d00      	cmp	r5, #0
   8857a:	d062      	beq.n	88642 <__udivmoddi4+0x16a>
   8857c:	2300      	movs	r3, #0
   8857e:	fa24 f40e 	lsr.w	r4, r4, lr
   88582:	602c      	str	r4, [r5, #0]
   88584:	606b      	str	r3, [r5, #4]
   88586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8858a:	428b      	cmp	r3, r1
   8858c:	d907      	bls.n	8859e <__udivmoddi4+0xc6>
   8858e:	2d00      	cmp	r5, #0
   88590:	d055      	beq.n	8863e <__udivmoddi4+0x166>
   88592:	2100      	movs	r1, #0
   88594:	e885 0041 	stmia.w	r5, {r0, r6}
   88598:	4608      	mov	r0, r1
   8859a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8859e:	fab3 f183 	clz	r1, r3
   885a2:	2900      	cmp	r1, #0
   885a4:	f040 808f 	bne.w	886c6 <__udivmoddi4+0x1ee>
   885a8:	42b3      	cmp	r3, r6
   885aa:	d302      	bcc.n	885b2 <__udivmoddi4+0xda>
   885ac:	4282      	cmp	r2, r0
   885ae:	f200 80fc 	bhi.w	887aa <__udivmoddi4+0x2d2>
   885b2:	1a84      	subs	r4, r0, r2
   885b4:	eb66 0603 	sbc.w	r6, r6, r3
   885b8:	2001      	movs	r0, #1
   885ba:	46b4      	mov	ip, r6
   885bc:	2d00      	cmp	r5, #0
   885be:	d040      	beq.n	88642 <__udivmoddi4+0x16a>
   885c0:	e885 1010 	stmia.w	r5, {r4, ip}
   885c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   885c8:	b912      	cbnz	r2, 885d0 <__udivmoddi4+0xf8>
   885ca:	2701      	movs	r7, #1
   885cc:	fbb7 f7f2 	udiv	r7, r7, r2
   885d0:	fab7 fe87 	clz	lr, r7
   885d4:	f1be 0f00 	cmp.w	lr, #0
   885d8:	d135      	bne.n	88646 <__udivmoddi4+0x16e>
   885da:	2101      	movs	r1, #1
   885dc:	1bf6      	subs	r6, r6, r7
   885de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   885e2:	fa1f f887 	uxth.w	r8, r7
   885e6:	fbb6 f2fc 	udiv	r2, r6, ip
   885ea:	fb0c 6612 	mls	r6, ip, r2, r6
   885ee:	fb08 f002 	mul.w	r0, r8, r2
   885f2:	0c23      	lsrs	r3, r4, #16
   885f4:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   885f8:	42b0      	cmp	r0, r6
   885fa:	d907      	bls.n	8860c <__udivmoddi4+0x134>
   885fc:	19f6      	adds	r6, r6, r7
   885fe:	f102 33ff 	add.w	r3, r2, #4294967295
   88602:	d202      	bcs.n	8860a <__udivmoddi4+0x132>
   88604:	42b0      	cmp	r0, r6
   88606:	f200 80d2 	bhi.w	887ae <__udivmoddi4+0x2d6>
   8860a:	461a      	mov	r2, r3
   8860c:	1a36      	subs	r6, r6, r0
   8860e:	fbb6 f0fc 	udiv	r0, r6, ip
   88612:	fb0c 6610 	mls	r6, ip, r0, r6
   88616:	fb08 f800 	mul.w	r8, r8, r0
   8861a:	b2a3      	uxth	r3, r4
   8861c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   88620:	45a0      	cmp	r8, r4
   88622:	d907      	bls.n	88634 <__udivmoddi4+0x15c>
   88624:	19e4      	adds	r4, r4, r7
   88626:	f100 33ff 	add.w	r3, r0, #4294967295
   8862a:	d202      	bcs.n	88632 <__udivmoddi4+0x15a>
   8862c:	45a0      	cmp	r8, r4
   8862e:	f200 80b9 	bhi.w	887a4 <__udivmoddi4+0x2cc>
   88632:	4618      	mov	r0, r3
   88634:	eba4 0408 	sub.w	r4, r4, r8
   88638:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   8863c:	e79c      	b.n	88578 <__udivmoddi4+0xa0>
   8863e:	4629      	mov	r1, r5
   88640:	4628      	mov	r0, r5
   88642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88646:	fa07 f70e 	lsl.w	r7, r7, lr
   8864a:	f1ce 0320 	rsb	r3, lr, #32
   8864e:	fa26 f203 	lsr.w	r2, r6, r3
   88652:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   88656:	fbb2 f1fc 	udiv	r1, r2, ip
   8865a:	fa1f f887 	uxth.w	r8, r7
   8865e:	fb0c 2211 	mls	r2, ip, r1, r2
   88662:	fa06 f60e 	lsl.w	r6, r6, lr
   88666:	fa20 f303 	lsr.w	r3, r0, r3
   8866a:	fb01 f908 	mul.w	r9, r1, r8
   8866e:	4333      	orrs	r3, r6
   88670:	0c1e      	lsrs	r6, r3, #16
   88672:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   88676:	45b1      	cmp	r9, r6
   88678:	fa00 f40e 	lsl.w	r4, r0, lr
   8867c:	d909      	bls.n	88692 <__udivmoddi4+0x1ba>
   8867e:	19f6      	adds	r6, r6, r7
   88680:	f101 32ff 	add.w	r2, r1, #4294967295
   88684:	f080 808c 	bcs.w	887a0 <__udivmoddi4+0x2c8>
   88688:	45b1      	cmp	r9, r6
   8868a:	f240 8089 	bls.w	887a0 <__udivmoddi4+0x2c8>
   8868e:	3902      	subs	r1, #2
   88690:	443e      	add	r6, r7
   88692:	eba6 0609 	sub.w	r6, r6, r9
   88696:	fbb6 f0fc 	udiv	r0, r6, ip
   8869a:	fb0c 6210 	mls	r2, ip, r0, r6
   8869e:	fb00 f908 	mul.w	r9, r0, r8
   886a2:	b29e      	uxth	r6, r3
   886a4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   886a8:	45b1      	cmp	r9, r6
   886aa:	d907      	bls.n	886bc <__udivmoddi4+0x1e4>
   886ac:	19f6      	adds	r6, r6, r7
   886ae:	f100 33ff 	add.w	r3, r0, #4294967295
   886b2:	d271      	bcs.n	88798 <__udivmoddi4+0x2c0>
   886b4:	45b1      	cmp	r9, r6
   886b6:	d96f      	bls.n	88798 <__udivmoddi4+0x2c0>
   886b8:	3802      	subs	r0, #2
   886ba:	443e      	add	r6, r7
   886bc:	eba6 0609 	sub.w	r6, r6, r9
   886c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   886c4:	e78f      	b.n	885e6 <__udivmoddi4+0x10e>
   886c6:	f1c1 0720 	rsb	r7, r1, #32
   886ca:	fa22 f807 	lsr.w	r8, r2, r7
   886ce:	408b      	lsls	r3, r1
   886d0:	ea48 0303 	orr.w	r3, r8, r3
   886d4:	fa26 f407 	lsr.w	r4, r6, r7
   886d8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   886dc:	fbb4 f9fe 	udiv	r9, r4, lr
   886e0:	fa1f fc83 	uxth.w	ip, r3
   886e4:	fb0e 4419 	mls	r4, lr, r9, r4
   886e8:	408e      	lsls	r6, r1
   886ea:	fa20 f807 	lsr.w	r8, r0, r7
   886ee:	fb09 fa0c 	mul.w	sl, r9, ip
   886f2:	ea48 0806 	orr.w	r8, r8, r6
   886f6:	ea4f 4618 	mov.w	r6, r8, lsr #16
   886fa:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   886fe:	45a2      	cmp	sl, r4
   88700:	fa02 f201 	lsl.w	r2, r2, r1
   88704:	fa00 f601 	lsl.w	r6, r0, r1
   88708:	d908      	bls.n	8871c <__udivmoddi4+0x244>
   8870a:	18e4      	adds	r4, r4, r3
   8870c:	f109 30ff 	add.w	r0, r9, #4294967295
   88710:	d244      	bcs.n	8879c <__udivmoddi4+0x2c4>
   88712:	45a2      	cmp	sl, r4
   88714:	d942      	bls.n	8879c <__udivmoddi4+0x2c4>
   88716:	f1a9 0902 	sub.w	r9, r9, #2
   8871a:	441c      	add	r4, r3
   8871c:	eba4 040a 	sub.w	r4, r4, sl
   88720:	fbb4 f0fe 	udiv	r0, r4, lr
   88724:	fb0e 4410 	mls	r4, lr, r0, r4
   88728:	fb00 fc0c 	mul.w	ip, r0, ip
   8872c:	fa1f f888 	uxth.w	r8, r8
   88730:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   88734:	45a4      	cmp	ip, r4
   88736:	d907      	bls.n	88748 <__udivmoddi4+0x270>
   88738:	18e4      	adds	r4, r4, r3
   8873a:	f100 3eff 	add.w	lr, r0, #4294967295
   8873e:	d229      	bcs.n	88794 <__udivmoddi4+0x2bc>
   88740:	45a4      	cmp	ip, r4
   88742:	d927      	bls.n	88794 <__udivmoddi4+0x2bc>
   88744:	3802      	subs	r0, #2
   88746:	441c      	add	r4, r3
   88748:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8874c:	fba0 8902 	umull	r8, r9, r0, r2
   88750:	eba4 0c0c 	sub.w	ip, r4, ip
   88754:	45cc      	cmp	ip, r9
   88756:	46c2      	mov	sl, r8
   88758:	46ce      	mov	lr, r9
   8875a:	d315      	bcc.n	88788 <__udivmoddi4+0x2b0>
   8875c:	d012      	beq.n	88784 <__udivmoddi4+0x2ac>
   8875e:	b155      	cbz	r5, 88776 <__udivmoddi4+0x29e>
   88760:	ebb6 030a 	subs.w	r3, r6, sl
   88764:	eb6c 060e 	sbc.w	r6, ip, lr
   88768:	fa06 f707 	lsl.w	r7, r6, r7
   8876c:	40cb      	lsrs	r3, r1
   8876e:	431f      	orrs	r7, r3
   88770:	40ce      	lsrs	r6, r1
   88772:	602f      	str	r7, [r5, #0]
   88774:	606e      	str	r6, [r5, #4]
   88776:	2100      	movs	r1, #0
   88778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8877c:	4610      	mov	r0, r2
   8877e:	e6f7      	b.n	88570 <__udivmoddi4+0x98>
   88780:	4689      	mov	r9, r1
   88782:	e6de      	b.n	88542 <__udivmoddi4+0x6a>
   88784:	4546      	cmp	r6, r8
   88786:	d2ea      	bcs.n	8875e <__udivmoddi4+0x286>
   88788:	ebb8 0a02 	subs.w	sl, r8, r2
   8878c:	eb69 0e03 	sbc.w	lr, r9, r3
   88790:	3801      	subs	r0, #1
   88792:	e7e4      	b.n	8875e <__udivmoddi4+0x286>
   88794:	4670      	mov	r0, lr
   88796:	e7d7      	b.n	88748 <__udivmoddi4+0x270>
   88798:	4618      	mov	r0, r3
   8879a:	e78f      	b.n	886bc <__udivmoddi4+0x1e4>
   8879c:	4681      	mov	r9, r0
   8879e:	e7bd      	b.n	8871c <__udivmoddi4+0x244>
   887a0:	4611      	mov	r1, r2
   887a2:	e776      	b.n	88692 <__udivmoddi4+0x1ba>
   887a4:	3802      	subs	r0, #2
   887a6:	443c      	add	r4, r7
   887a8:	e744      	b.n	88634 <__udivmoddi4+0x15c>
   887aa:	4608      	mov	r0, r1
   887ac:	e706      	b.n	885bc <__udivmoddi4+0xe4>
   887ae:	3a02      	subs	r2, #2
   887b0:	443e      	add	r6, r7
   887b2:	e72b      	b.n	8860c <__udivmoddi4+0x134>

000887b4 <__aeabi_idiv0>:
   887b4:	4770      	bx	lr
   887b6:	bf00      	nop
   887b8:	090a0a0d 	.word	0x090a0a0d
   887bc:	5f5f5f2a 	.word	0x5f5f5f2a
   887c0:	5f5f5f5f 	.word	0x5f5f5f5f
   887c4:	5f5f5f5f 	.word	0x5f5f5f5f
   887c8:	205f5f5f 	.word	0x205f5f5f
   887cc:	2e555043 	.word	0x2e555043
   887d0:	2d584341 	.word	0x2d584341
   887d4:	41535441 	.word	0x41535441
   887d8:	3455334d 	.word	0x3455334d
   887dc:	412d4143 	.word	0x412d4143
   887e0:	5f5f2055 	.word	0x5f5f2055
   887e4:	5f5f5f5f 	.word	0x5f5f5f5f
   887e8:	5f5f5f5f 	.word	0x5f5f5f5f
   887ec:	5f5f5f5f 	.word	0x5f5f5f5f
   887f0:	0a0a0d2a 	.word	0x0a0a0d2a
   887f4:	00000000 	.word	0x00000000
   887f8:	2e555043 	.word	0x2e555043
   887fc:	20584341 	.word	0x20584341
   88800:	53544120 	.word	0x53544120
   88804:	55334d41 	.word	0x55334d41
   88808:	00004334 	.word	0x00004334
   8880c:	2e777777 	.word	0x2e777777
   88810:	2d322d61 	.word	0x2d322d61
   88814:	656e2e73 	.word	0x656e2e73
   88818:	00000074 	.word	0x00000074
   8881c:	554e454d 	.word	0x554e454d
   88820:	57454e5f 	.word	0x57454e5f
   88824:	0000000d 	.word	0x0000000d
   88828:	554e454d 	.word	0x554e454d
   8882c:	57454e20 	.word	0x57454e20
   88830:	4e494620 	.word	0x4e494620
   88834:	45485349 	.word	0x45485349
   88838:	0a0d2044 	.word	0x0a0d2044
   8883c:	00000000 	.word	0x00000000

00088840 <_etatMenu>:
   88840:	000888d0 00088988 00000000 000802f5     ................
   88850:	000888e0 00088988 00000000 0008032d     ............-...
   88860:	000888f0 00088988 00000000 00080365     ............e...
	...

00088880 <_mainMenu>:
   88880:	000889c8 00000000 00000000 0008024d     ............M...
   88890:	000889d4 00000000 00088988 00000000     ................
   888a0:	000889e4 00000000 00088988 00000000     ................
   888b0:	000889f4 00000000 00088988 00000000     ................
	...
   888d0:	74617445 726f7020 31206574 00000000     Etat porte 1....
   888e0:	74617445 726f7020 32206574 00000000     Etat porte 2....
   888f0:	74617445 726f7020 00736574 6e656d5f     Etat portes._men
   88900:	74704f75 536e6f69 75467361 203a636e     uOptionSasFunc: 
   88910:	20444142 00004353 6d726546 72757465     BAD SC..Fermetur
   88920:	61732065 00000073 6e656d5f 726f5075     e sas..._menuPor
   88930:	65466574 72656d72 42203a31 53204441     teFermer1: BAD S
   88940:	00000043 6d726546 72757465 6f702065     C...Fermeture po
   88950:	20657472 00000031 6e656d5f 726f5075     rte 1..._menuPor
   88960:	65466574 72656d72 42203a32 53204441     teFermer2: BAD S
   88970:	00000043 6d726546 72757465 6f702065     C...Fermeture po
   88980:	20657472 00000032                       rte 2...

00088988 <_porteMenu>:
   88988:	00088a04 00088880 00000000 00080285     ................
   88998:	00088a14 00088880 00000000 000802bd     ................
   889a8:	000888f0 00088880 00088840 00000000     ........@.......
	...
   889c8:	6974704f 73206e6f 00007361 6974704f     Option sas..Opti
   889d8:	70206e6f 6574726f 00000073 6974704f     on portes...Opti
   889e8:	66206e6f 74656e65 00006572 6974704f     on fenetre..Opti
   889f8:	74206e6f 70706172 00000065 6d726546     on trappe...Ferm
   88a08:	70207265 6574726f 00003120 6d726546     er porte 1..Ferm
   88a18:	70207265 6574726f 00003220 00000001     er porte 2......
   88a28:	00000002 00000004 00000008 00000010     ................
   88a38:	00000020 00000040 00000080 00000100      ...@...........
   88a48:	00000200 00000400 000186a0 000186a0     ................
   88a58:	00b71b00 65540a0d 73207473 74726174     ......Test start
   88a68:	2e2e6465 000a0d2e 48500a0d 2d64253a     ed........PH:%d-
   88a78:	0d64252d 0000000a 454e4550 56554f20     -%d.....PENE OUV
   88a88:	00545245 00203a09 00004e4f 0046464f     ERT..: .ON..OFF.
   88a98:	454e4550 52454620 0000454d 00534c49     PENE FERME..ILS.
   88aa8:	203a0909 00000000 00005653 41444152     ..: ....SV..RADA
   88ab8:	00000052 00555644 4d455250 45524549     R...DVU.PREMIERE
   88ac8:	544e4520 00454552 20555644 454e4547      ENTREE.DVU GENE
   88ad8:	004c4152 52544e45 4c204545 45524249     RAL.ENTREE LIBRE
   88ae8:	00000000 52544e45 4f204545 4f495450     ....ENTREE OPTIO
   88af8:	0000004e 65540a0d 74207473 696d7265     N.....Test termi
   88b08:	6574616e 2e2e2e64 00000a0d              nated.......

00088b14 <commands>:
   88b14:	0000624f 0008159d 0000ae76 000814f9     Ob......v.......
	...
   88b2c:	624e0a0d 74736554 6425203a 00000a0d     ..NbTest: %d....
   88b3c:	75420a0d 72657a7a 206e6f20 20726f66     ..Buzzer on for 
   88b4c:	00000000 6d206425 2e2e2e73 00000a0d     ....%d ms.......
   88b5c:	75420a0d 72657a7a 66666f20 0d2e2e2e     ..Buzzer off....
   88b6c:	0000000a 000a0d20 25207325 73252064     .... ...%s %d %s
   88b7c:	64342520 00000000                        %4d....

00088b84 <nbDaysInMonth>:
   88b84:	1e1f1c1f 1f1f1e1f 1f1e1f1e 756e614a     ............Janu
   88b94:	00797261 72626546 79726175 00000000     ary.February....
   88ba4:	6372614d 00000068 69727041 0000006c     March...April...
   88bb4:	0079614d 656e754a 00000000 796c754a     May.June....July
   88bc4:	00000000 75677541 00007473 74706553     ....August..Sept
   88bd4:	65626d65 00000072 6f74634f 00726562     ember...October.
   88be4:	65766f4e 7265626d 00000000 65636544     November....Dece
   88bf4:	7265626d 00000000 646e7553 00007961     mber....Sunday..
   88c04:	646e6f4d 00007961 73657554 00796164     Monday..Tuesday.
   88c14:	6e646557 61647365 00000079 72756854     Wednesday...Thur
   88c24:	79616473 00000000 64697246 00007961     sday....Friday..
   88c34:	75746153 79616472 00000000              Saturday....

00088c40 <line2addr>:
   88c40:	54144000 3230250d 30253a64 253a6432     .@.T.%02d:%02d:%
   88c50:	00643230 64323025 3230253a 30253a64     02d.%02d:%02d:%0
   88c60:	00006432 64323025 3230252f 30252f64     2d..%02d/%02d/%0
   88c70:	00006434 003e0a0d 00445b1b 00435b1b     4d....>..[D..[C.
   88c80:	3e2f0a0d 00000000 6b6e7509 6e776f6e     ../>.....unknown
   88c90:	646d6320 3025203a 0a0d5834 00000000      cmd: %04X......
   88ca0:	2a090a0d 2a2a2a2a 73616320 535f2065     ...***** case _S
   88cb0:	4c4c4548 48424b5f 203a5449 20444142     HELL_KBHIT: BAD 
   88cc0:	65736163 2a2a2021 2a2a2a2a 00000a0d     case! ******....
   88cd0:	20200a0d 43534520 5145535f 0000203a     ..   ESC_SEQ: ..
   88ce0:	30253c20 0d3e5834 0000000a 4b325b1b      <%04X>......[2K
   88cf0:	0000000d 3b315b1b 00004335              .....[1;5C..

00088cfc <heartBeatRhythm>:
   88cfc:	00000028 000000fe 00000028 00000548     (.......(...H...
   88d0c:	00000000                                ....

00088d10 <hexDigits>:
   88d10:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   88d20:	00000000                                ....

00088d24 <separators>:
   88d24:	3a3b2e20 0d095c2f 0000000a 4a325b1b      .;:/\.......[2J
   88d34:	00000000 3d090a0d 3d3d3d3d 3d3d3d3d     .......=========
   88d44:	3d3d3d3d 43203d3d 20504948 4e454449     ====== CHIP IDEN
   88d54:	49464954 49205245 534f464e 3d3d3d20     TIFIER INFOS ===
   88d64:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0a0d     ============....
   88d74:	52455609 4e4f4953 6325203a 00000a0d     .VERSION: %c....
   88d84:	45202009 434f5250 0000203a 564e2009     .  EPROC: ... NV
   88d94:	5a495350 0000203a 50564e09 325a4953     PSIZ: ...NVPSIZ2
   88da4:	0000203a 41525309 5a49534d 0000203a     : ...SRAMSIZ: ..
   88db4:	20202009 48435241 0000203a 2d2d2d20     .   ARCH: .. ---
   88dc4:	00000020 564e2009 50595450 0000203a      .... NVPTYP: ..
   88dd4:	20202009 44495845 3025203a 0a0d5838     .   EXID: %08X..
   88de4:	00000000 3d090a0d 3d3d3d3d 3d3d3d3d     .......=========
   88df4:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   88e04:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   88e14:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0a0d     ============....
   88e24:	7379530d 206d6574 6c6c6977 73657220     .System will res
   88e34:	74726174 206e6920 73206925 6e6f6365     tart in %i secon
   88e44:	2e2e2e64 00000000 2f2e3a20 00000a0d     d....... :./....
   88e54:	4b325b1b 00000000 646d6320 61747320     .[2K.... cmd sta
   88e64:	3a207472 00000020                       rt : ...

00088e6c <arch>:
   88e6c:	00000019 00089138 00089144 00000029     ....8...D...)...
   88e7c:	00089158 00089168 00000034 0008917c     X...h...4...|...
   88e8c:	00089184 00000037 00089194 0008919c     ....7...........
   88e9c:	00000039 000891a8 000891b0 0000003b     9...........;...
   88eac:	000891bc 000891c4 00000040 000891d4     ........@.......
   88ebc:	000891dc 00000042 000891ec 000891f4     ....B...........
   88ecc:	00000055 00089204 0008920c 00000060     U...........`...
   88edc:	0008921c 00089228 00000061 0008923c     ....(...a...<...
   88eec:	0008924c 00000063 00089260 00089268     L...c...`...h...
   88efc:	00000070 00089278 00089284 00000071     p...x.......q...
   88f0c:	00089298 000892a8 00000072 000892bc     ........r.......
   88f1c:	000892cc 00000073 000892e0 000892ec     ....s...........
   88f2c:	00000075 00089300 0008930c 00000076     u...........v...
   88f3c:	00089320 00089330 00000080 00089344      ...0.......D...
   88f4c:	0008934c 00000081 00089370 00089378     L.......p...x...
   88f5c:	00000083 0008939c 000893ac 00000084     ................
   88f6c:	000893d8 000893e8 00000085 00089414     ................
   88f7c:	00089424 00000086 00089450 00089460     $.......P...`...
   88f8c:	00000088 00089490 000894a0 00000089     ................
   88f9c:	000894c8 000894d8 0000008a 00089500     ................
   88fac:	00089510 00000092 0008953c 00089544     ........<...D...
   88fbc:	00000093 00089554 0008955c 00000094     ....T...\.......
   88fcc:	0008957c 00089584 00000095 000895a4     |...............
   88fdc:	000895ac 00000099 000895d0 000895dc     ................
   88fec:	0000009a 00089600 0008960c 000000a5     ................
   88ffc:	00089630 00089630 000000f0 00089638     0...0.......8...
   8900c:	00089640 00000000 00089650 00000000     @.......P.......

0008901c <cmdEntries>:
   8901c:	0000624f 00082f09 00006cab 00082f39     Ob.../...l..9/..
   8902c:	00003bed 00082f25 0000aaf6 00082e89     .;..%/..........
   8903c:	0000b326 00082ec9 0000902b 00083135     &.......+...51..
   8904c:	0000b344 00083135 0000ebe8 00083169     D...51......i1..
   8905c:	000010e1 00083051 00000000 00000000     ....Q0..........
   8906c:	204d4f52 202d2d2d 004d4f52 4c4d4f52     ROM --- ROM.ROML
   8907c:	20535345 202d2d2d 6c4d4f52 20737365     ESS --- ROMless 
   8908c:	6f20726f 68632d6e 46207069 6873616c     or on-chip Flash
   8909c:	00000000 53414c46 2d2d2048 6d45202d     ....FLASH --- Em
   890ac:	64646562 46206465 6873616c 6d654d20     bedded Flash Mem
   890bc:	0079726f 5f4d4f52 53414c46 2d2d2048     ory.ROM_FLASH --
   890cc:	4f52202d 6e61204d 6d452064 64646562     - ROM and Embedd
   890dc:	46206465 6873616c 6d654d20 2079726f     ed Flash Memory 
   890ec:	50564e5b 205a4953 52207369 73204d4f     [NVPSIZ is ROM s
   890fc:	20657a69 564e202f 5a495350 73692032     ize / NVPSIZ2 is
   8910c:	616c4620 73206873 5d657a69 00000000      Flash size]....
   8911c:	4d415253 2d2d2d20 41525320 6d65204d     SRAM --- SRAM em
   8912c:	74616c75 20676e69 004d4f52 31395441     ulating ROM.AT91
   8913c:	394d4153 00007878 31395441 394d4153     SAM9xx..AT91SAM9
   8914c:	53207878 65697265 00000073 31395441     xx Series...AT91
   8915c:	394d4153 78784558 00000000 31395441     SAM9XExx....AT91
   8916c:	394d4153 78784558 72655320 00736569     SAM9XExx Series.
   8917c:	31395441 00343378 31395441 20343378     AT91x34.AT91x34 
   8918c:	69726553 00007365 37504143 00000000     Series..CAP7....
   8919c:	37504143 72655320 00736569 39504143     CAP7 Series.CAP9
   891ac:	00000000 39504143 72655320 00736569     ....CAP9 Series.
   891bc:	31504143 00000031 31504143 65532031     CAP11...CAP11 Se
   891cc:	73656972 00000000 31395441 00303478     ries....AT91x40.
   891dc:	31395441 20303478 69726553 00007365     AT91x40 Series..
   891ec:	31395441 00323478 31395441 20323478     AT91x42.AT91x42 
   891fc:	69726553 00007365 31395441 00353578     Series..AT91x55.
   8920c:	31395441 20353578 69726553 00007365     AT91x55 Series..
   8921c:	31395441 374d4153 00787841 31395441     AT91SAM7Axx.AT91
   8922c:	374d4153 20787841 69726553 00007365     SAM7Axx Series..
   8923c:	31395441 374d4153 78785141 00000000     AT91SAM7AQxx....
   8924c:	31395441 374d4153 78785141 72655320     AT91SAM7AQxx Ser
   8925c:	00736569 31395441 00333678 31395441     ies.AT91x63.AT91
   8926c:	20333678 69726553 00007365 31395441     x63 Series..AT91
   8927c:	374d4153 00787853 31395441 374d4153     SAM7Sxx.AT91SAM7
   8928c:	20787853 69726553 00007365 31395441     Sxx Series..AT91
   8929c:	374d4153 78784358 00000000 31395441     SAM7XCxx....AT91
   892ac:	374d4153 78784358 72655320 00736569     SAM7XCxx Series.
   892bc:	31395441 374d4153 78784553 00000000     AT91SAM7SExx....
   892cc:	31395441 374d4153 78784553 72655320     AT91SAM7SExx Ser
   892dc:	00736569 31395441 374d4153 0078784c     ies.AT91SAM7Lxx.
   892ec:	31395441 374d4153 2078784c 69726553     AT91SAM7Lxx Seri
   892fc:	00007365 31395441 374d4153 00787858     es..AT91SAM7Xxx.
   8930c:	31395441 374d4153 20787858 69726553     AT91SAM7Xxx Seri
   8931c:	00007365 31395441 374d4153 78784c53     es..AT91SAM7SLxx
   8932c:	00000000 31395441 374d4153 78784c53     ....AT91SAM7SLxx
   8933c:	72655320 00736569 334d4153 00437855      Series.SAM3UxC.
   8934c:	334d4153 20437855 69726553 28207365     SAM3UxC Series (
   8935c:	2d303031 206e6970 73726576 296e6f69     100-pin version)
   8936c:	00000000 334d4153 00457855 334d4153     ....SAM3UxE.SAM3
   8937c:	20457855 69726553 28207365 2d343431     UxE Series (144-
   8938c:	206e6970 73726576 296e6f69 00000000     pin version)....
   8939c:	334d4153 2f437841 334d4153 00437841     SAM3AxC/SAM3AxC.
   893ac:	334d4153 2f437841 344d4153 20437841     SAM3AxC/SAM4AxC 
   893bc:	69726553 28207365 2d303031 206e6970     Series (100-pin 
   893cc:	73726576 296e6f69 00000000 334d4153     version)....SAM3
   893dc:	2f437858 344d4153 00437858 334d4153     XxC/SAM4XxC.SAM3
   893ec:	2f437858 344d4153 20437858 69726553     XxC/SAM4XxC Seri
   893fc:	28207365 2d303031 206e6970 73726576     es (100-pin vers
   8940c:	296e6f69 00000000 334d4153 2f457858     ion)....SAM3XxE/
   8941c:	344d4153 00457858 334d4153 2f457858     SAM4XxE.SAM3XxE/
   8942c:	344d4153 20457858 69726553 28207365     SAM4XxE Series (
   8943c:	2d343431 206e6970 73726576 296e6f69     144-pin version)
   8944c:	00000000 334d4153 2f477858 344d4153     ....SAM3XxG/SAM4
   8945c:	00477858 334d4153 2f477858 344d4153     XxG.SAM3XxG/SAM4
   8946c:	20477858 69726553 28207365 2f383032     XxG Series (208/
   8947c:	2d373132 206e6970 73726576 296e6f69     217-pin version)
   8948c:	00000000 334d4153 2f417853 344d4153     ....SAM3SxA/SAM4
   8949c:	00417853 334d4153 2f417853 344d4153     SxA.SAM3SxA/SAM4
   894ac:	20417853 69726553 28207365 702d3834     SxA Series (48-p
   894bc:	76206e69 69737265 00296e6f 334d4153     in version).SAM3
   894cc:	2f427853 344d4153 00427853 334d4153     SxB/SAM4SxB.SAM3
   894dc:	2f427853 344d4153 20427853 69726553     SxB/SAM4SxB Seri
   894ec:	28207365 702d3436 76206e69 69737265     es (64-pin versi
   894fc:	00296e6f 334d4153 2f437853 344d4153     on).SAM3SxC/SAM4
   8950c:	00437853 334d4153 2f437853 344d4153     SxC.SAM3SxC/SAM4
   8951c:	20437853 69726553 28207365 2d303031     SxC Series (100-
   8952c:	206e6970 73726576 296e6f69 00000000     pin version)....
   8953c:	31395441 00323978 31395441 20323978     AT91x92.AT91x92 
   8954c:	69726553 00007365 334d4153 0041784e     Series..SAM3NxA.
   8955c:	334d4153 2041784e 69726553 28207365     SAM3NxA Series (
   8956c:	702d3834 76206e69 69737265 00296e6f     48-pin version).
   8957c:	334d4153 0042784e 334d4153 2042784e     SAM3NxB.SAM3NxB 
   8958c:	69726553 28207365 702d3436 76206e69     Series (64-pin v
   8959c:	69737265 00296e6f 334d4153 0043784e     ersion).SAM3NxC.
   895ac:	334d4153 2043784e 69726553 28207365     SAM3NxC Series (
   895bc:	2d303031 206e6970 73726576 296e6f69     100-pin version)
   895cc:	00000000 334d4153 42784453 00000000     ....SAM3SDxB....
   895dc:	334d4153 42784453 72655320 20736569     SAM3SDxB Series 
   895ec:	2d343628 206e6970 73726576 296e6f69     (64-pin version)
   895fc:	00000000 334d4153 43784453 00000000     ....SAM3SDxC....
   8960c:	334d4153 43784453 72655320 20736569     SAM3SDxC Series 
   8961c:	30303128 6e69702d 72657620 6e6f6973     (100-pin version
   8962c:	00000029 354d4153 00000041 35375441     )...SAM5A...AT75
   8963c:	00787843 35375441 20787843 69726553     Cxx.AT75Cxx Seri
   8964c:	00007365 41204f4e 21484352 00000000     es..NO ARCH!....
   8965c:	204b3834 65747962 00000073 62204b31     48K bytes...1K b
   8966c:	73657479 00000000 62204b32 73657479     ytes....2K bytes
   8967c:	00000000 62204b36 73657479 00000000     ....6K bytes....
   8968c:	204b3432 65747962 00000073 62204b34     24K bytes...4K b
   8969c:	73657479 00000000 204b3038 65747962     ytes....80K byte
   896ac:	00000073 4b303631 74796220 00007365     s...160K bytes..
   896bc:	62204b38 73657479 00000000 204b3631     8K bytes....16K 
   896cc:	65747962 00000073 204b3233 65747962     bytes...32K byte
   896dc:	00000073 204b3436 65747962 00000073     s...64K bytes...
   896ec:	4b383231 74796220 00007365 4b363532     128K bytes..256K
   896fc:	74796220 00007365 204b3639 65747962      bytes..96K byte
   8970c:	00000073 4b323135 74796220 00007365     s...512K bytes..
   8971c:	454e4f4e 00000000 34323031 7962204b     NONE....1024K by
   8972c:	00736574 38343032 7962204b 00736574     tes.2048K bytes.
   8973c:	45444e55 454e4946 00002144 394d5241     UNDEFINED!..ARM9
   8974c:	00533634 374d5241 494d4454 00000000     46S.ARM7TDMI....
   8975c:	74726f43 4d2d7865 00000033 394d5241     Cortex-M3...ARM9
   8976c:	00543032 394d5241 4a453632 00000053     20T.ARM926EJS...
   8977c:	74726f43 412d7865 00000035 74726f43     Cortex-A5...Cort
   8978c:	4d2d7865 00000034                       ex-M4...

00089794 <uart_opt>:
   89794:	05b8d800 0001c200 00000800              ............

000897a0 <_global_impure_ptr>:
   897a0:	20000630 00464e49 00666e69 004e414e     0.. INF.inf.NAN.
   897b0:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   897c0:	46454443 00000000 33323130 37363534     CDEF....01234567
   897d0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   897e0:	0000296c 00000030                       l)..0...

000897e8 <blanks.7208>:
   897e8:	20202020 20202020 20202020 20202020                     

000897f8 <zeroes.7209>:
   897f8:	30303030 30303030 30303030 30303030     0000000000000000
   89808:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   89818:	49534f50 00000058 0000002e 00000000     POSIX...........

00089828 <__mprec_bigtens>:
   89828:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   89838:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   89848:	7f73bf3c 75154fdd                       <.s..O.u

00089850 <__mprec_tens>:
   89850:	00000000 3ff00000 00000000 40240000     .......?......$@
   89860:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   89870:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   89880:	00000000 412e8480 00000000 416312d0     .......A......cA
   89890:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   898a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   898b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   898c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   898d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   898e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   898f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   89900:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   89910:	79d99db4 44ea7843                       ...yCx.D

00089918 <p05.6040>:
   89918:	00000005 00000019 0000007d              ........}...

00089924 <_ctype_>:
   89924:	20202000 20202020 28282020 20282828     .         ((((( 
   89934:	20202020 20202020 20202020 20202020                     
   89944:	10108820 10101010 10101010 10101010      ...............
   89954:	04040410 04040404 10040404 10101010     ................
   89964:	41411010 41414141 01010101 01010101     ..AAAAAA........
   89974:	01010101 01010101 01010101 10101010     ................
   89984:	42421010 42424242 02020202 02020202     ..BBBBBB........
   89994:	02020202 02020202 02020202 10101010     ................
   899a4:	00000020 00000000 00000000 00000000      ...............
	...

00089a28 <_init>:
   89a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89a2a:	bf00      	nop
   89a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89a2e:	bc08      	pop	{r3}
   89a30:	469e      	mov	lr, r3
   89a32:	4770      	bx	lr

00089a34 <__init_array_start>:
   89a34:	000855d9 	.word	0x000855d9

00089a38 <__frame_dummy_init_array_entry>:
   89a38:	000800e1                                ....

00089a3c <_fini>:
   89a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89a3e:	bf00      	nop
   89a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89a42:	bc08      	pop	{r3}
   89a44:	469e      	mov	lr, r3
   89a46:	4770      	bx	lr

00089a48 <__fini_array_start>:
   89a48:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000010:	4a21      	ldr	r2, [pc, #132]	; (20000098 <SystemInit+0x8c>)
20000012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000001a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
2000001e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
20000022:	6a1b      	ldr	r3, [r3, #32]
20000024:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20000028:	d107      	bne.n	2000003a <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000002a:	4a1c      	ldr	r2, [pc, #112]	; (2000009c <SystemInit+0x90>)
2000002c:	4b1c      	ldr	r3, [pc, #112]	; (200000a0 <SystemInit+0x94>)
2000002e:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000030:	461a      	mov	r2, r3
20000032:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000034:	f013 0f01 	tst.w	r3, #1
20000038:	d0fb      	beq.n	20000032 <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000003a:	4a1a      	ldr	r2, [pc, #104]	; (200000a4 <SystemInit+0x98>)
2000003c:	4b18      	ldr	r3, [pc, #96]	; (200000a0 <SystemInit+0x94>)
2000003e:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000040:	461a      	mov	r2, r3
20000042:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000044:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20000048:	d0fb      	beq.n	20000042 <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2000004a:	4a15      	ldr	r2, [pc, #84]	; (200000a0 <SystemInit+0x94>)
2000004c:	6b13      	ldr	r3, [r2, #48]	; 0x30
2000004e:	f023 0303 	bic.w	r3, r3, #3
20000052:	f043 0301 	orr.w	r3, r3, #1
20000056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000005a:	f013 0f08 	tst.w	r3, #8
2000005e:	d0fb      	beq.n	20000058 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000060:	4a11      	ldr	r2, [pc, #68]	; (200000a8 <SystemInit+0x9c>)
20000062:	4b0f      	ldr	r3, [pc, #60]	; (200000a0 <SystemInit+0x94>)
20000064:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000066:	461a      	mov	r2, r3
20000068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000006a:	f013 0f02 	tst.w	r3, #2
2000006e:	d0fb      	beq.n	20000068 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000070:	2211      	movs	r2, #17
20000072:	4b0b      	ldr	r3, [pc, #44]	; (200000a0 <SystemInit+0x94>)
20000074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000076:	461a      	mov	r2, r3
20000078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000007a:	f013 0f08 	tst.w	r3, #8
2000007e:	d0fb      	beq.n	20000078 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000080:	2212      	movs	r2, #18
20000082:	4b07      	ldr	r3, [pc, #28]	; (200000a0 <SystemInit+0x94>)
20000084:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000086:	461a      	mov	r2, r3
20000088:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000008a:	f013 0f08 	tst.w	r3, #8
2000008e:	d0fb      	beq.n	20000088 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000090:	4a06      	ldr	r2, [pc, #24]	; (200000ac <SystemInit+0xa0>)
20000092:	4b07      	ldr	r3, [pc, #28]	; (200000b0 <SystemInit+0xa4>)
20000094:	601a      	str	r2, [r3, #0]
20000096:	4770      	bx	lr
20000098:	400e0800 	.word	0x400e0800
2000009c:	00370809 	.word	0x00370809
200000a0:	400e0400 	.word	0x400e0400
200000a4:	01370809 	.word	0x01370809
200000a8:	200f3f01 	.word	0x200f3f01
200000ac:	05b8d800 	.word	0x05b8d800
200000b0:	20000128 	.word	0x20000128

200000b4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000b4:	4b16      	ldr	r3, [pc, #88]	; (20000110 <system_init_flash+0x5c>)
200000b6:	4298      	cmp	r0, r3
200000b8:	d912      	bls.n	200000e0 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000ba:	4b16      	ldr	r3, [pc, #88]	; (20000114 <system_init_flash+0x60>)
200000bc:	4298      	cmp	r0, r3
200000be:	d916      	bls.n	200000ee <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000c0:	4b15      	ldr	r3, [pc, #84]	; (20000118 <system_init_flash+0x64>)
200000c2:	4298      	cmp	r0, r3
200000c4:	d91b      	bls.n	200000fe <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200000c6:	4b15      	ldr	r3, [pc, #84]	; (2000011c <system_init_flash+0x68>)
200000c8:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200000ca:	bf94      	ite	ls
200000cc:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000d0:	f44f 6380 	movhi.w	r3, #1024	; 0x400
200000d4:	4a12      	ldr	r2, [pc, #72]	; (20000120 <system_init_flash+0x6c>)
200000d6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000dc:	6013      	str	r3, [r2, #0]
200000de:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200000e0:	2300      	movs	r3, #0
200000e2:	4a0f      	ldr	r2, [pc, #60]	; (20000120 <system_init_flash+0x6c>)
200000e4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200000e6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000ea:	6013      	str	r3, [r2, #0]
200000ec:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200000ee:	f44f 7380 	mov.w	r3, #256	; 0x100
200000f2:	4a0b      	ldr	r2, [pc, #44]	; (20000120 <system_init_flash+0x6c>)
200000f4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200000f6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000fa:	6013      	str	r3, [r2, #0]
200000fc:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200000fe:	f44f 7300 	mov.w	r3, #512	; 0x200
20000102:	4a07      	ldr	r2, [pc, #28]	; (20000120 <system_init_flash+0x6c>)
20000104:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000106:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000010a:	6013      	str	r3, [r2, #0]
2000010c:	4770      	bx	lr
2000010e:	bf00      	nop
20000110:	016e35ff 	.word	0x016e35ff
20000114:	026259ff 	.word	0x026259ff
20000118:	044aa1ff 	.word	0x044aa1ff
2000011c:	0501bcff 	.word	0x0501bcff
20000120:	400e0800 	.word	0x400e0800

20000124 <g_interrupt_enabled>:
20000124:	00000001                                ....

20000128 <SystemCoreClock>:
20000128:	003d0900                                ..=.

2000012c <wCRCTable>:
2000012c:	00000000 0000c0c1 0000c181 00000140     ............@...
2000013c:	0000c301 000003c0 00000280 0000c241     ............A...
2000014c:	0000c601 000006c0 00000780 0000c741     ............A...
2000015c:	00000500 0000c5c1 0000c481 00000440     ............@...
2000016c:	0000cc01 00000cc0 00000d80 0000cd41     ............A...
2000017c:	00000f00 0000cfc1 0000ce81 00000e40     ............@...
2000018c:	00000a00 0000cac1 0000cb81 00000b40     ............@...
2000019c:	0000c901 000009c0 00000880 0000c841     ............A...
200001ac:	0000d801 000018c0 00001980 0000d941     ............A...
200001bc:	00001b00 0000dbc1 0000da81 00001a40     ............@...
200001cc:	00001e00 0000dec1 0000df81 00001f40     ............@...
200001dc:	0000dd01 00001dc0 00001c80 0000dc41     ............A...
200001ec:	00001400 0000d4c1 0000d581 00001540     ............@...
200001fc:	0000d701 000017c0 00001680 0000d641     ............A...
2000020c:	0000d201 000012c0 00001380 0000d341     ............A...
2000021c:	00001100 0000d1c1 0000d081 00001040     ............@...
2000022c:	0000f001 000030c0 00003180 0000f141     .....0...1..A...
2000023c:	00003300 0000f3c1 0000f281 00003240     .3..........@2..
2000024c:	00003600 0000f6c1 0000f781 00003740     .6..........@7..
2000025c:	0000f501 000035c0 00003480 0000f441     .....5...4..A...
2000026c:	00003c00 0000fcc1 0000fd81 00003d40     .<..........@=..
2000027c:	0000ff01 00003fc0 00003e80 0000fe41     .....?...>..A...
2000028c:	0000fa01 00003ac0 00003b80 0000fb41     .....:...;..A...
2000029c:	00003900 0000f9c1 0000f881 00003840     .9..........@8..
200002ac:	00002800 0000e8c1 0000e981 00002940     .(..........@)..
200002bc:	0000eb01 00002bc0 00002a80 0000ea41     .....+...*..A...
200002cc:	0000ee01 00002ec0 00002f80 0000ef41     ........./..A...
200002dc:	00002d00 0000edc1 0000ec81 00002c40     .-..........@,..
200002ec:	0000e401 000024c0 00002580 0000e541     .....$...%..A...
200002fc:	00002700 0000e7c1 0000e681 00002640     .'..........@&..
2000030c:	00002200 0000e2c1 0000e381 00002340     ."..........@#..
2000031c:	0000e101 000021c0 00002080 0000e041     .....!... ..A...
2000032c:	0000a001 000060c0 00006180 0000a141     .....`...a..A...
2000033c:	00006300 0000a3c1 0000a281 00006240     .c..........@b..
2000034c:	00006600 0000a6c1 0000a781 00006740     .f..........@g..
2000035c:	0000a501 000065c0 00006480 0000a441     .....e...d..A...
2000036c:	00006c00 0000acc1 0000ad81 00006d40     .l..........@m..
2000037c:	0000af01 00006fc0 00006e80 0000ae41     .....o...n..A...
2000038c:	0000aa01 00006ac0 00006b80 0000ab41     .....j...k..A...
2000039c:	00006900 0000a9c1 0000a881 00006840     .i..........@h..
200003ac:	00007800 0000b8c1 0000b981 00007940     .x..........@y..
200003bc:	0000bb01 00007bc0 00007a80 0000ba41     .....{...z..A...
200003cc:	0000be01 00007ec0 00007f80 0000bf41     .....~......A...
200003dc:	00007d00 0000bdc1 0000bc81 00007c40     .}..........@|..
200003ec:	0000b401 000074c0 00007580 0000b541     .....t...u..A...
200003fc:	00007700 0000b7c1 0000b681 00007640     .w..........@v..
2000040c:	00007200 0000b2c1 0000b381 00007340     .r..........@s..
2000041c:	0000b101 000071c0 00007080 0000b041     .....q...p..A...
2000042c:	00005000 000090c1 00009181 00005140     .P..........@Q..
2000043c:	00009301 000053c0 00005280 00009241     .....S...R..A...
2000044c:	00009601 000056c0 00005780 00009741     .....V...W..A...
2000045c:	00005500 000095c1 00009481 00005440     .U..........@T..
2000046c:	00009c01 00005cc0 00005d80 00009d41     .....\...]..A...
2000047c:	00005f00 00009fc1 00009e81 00005e40     ._..........@^..
2000048c:	00005a00 00009ac1 00009b81 00005b40     .Z..........@[..
2000049c:	00009901 000059c0 00005880 00009841     .....Y...X..A...
200004ac:	00008801 000048c0 00004980 00008941     .....H...I..A...
200004bc:	00004b00 00008bc1 00008a81 00004a40     .K..........@J..
200004cc:	00004e00 00008ec1 00008f81 00004f40     .N..........@O..
200004dc:	00008d01 00004dc0 00004c80 00008c41     .....M...L..A...
200004ec:	00004400 000084c1 00008581 00004540     .D..........@E..
200004fc:	00008701 000047c0 00004680 00008641     .....G...F..A...
2000050c:	00008201 000042c0 00004380 00008341     .....B...C..A...
2000051c:	00004100 000081c1 00008081 00004040     .A..........@@..

2000052c <daysOfWeek>:
2000052c:	00088bfc 00088c04 00088c0c 00088c14     ................
2000053c:	00088c20 00088c2c 00088c34               ...,...4...

20000548 <months>:
20000548:	00088b90 00088b98 00088ba4 00088bac     ................
20000558:	00088bb4 00088bb8 00088bc0 00088bc8     ................
20000568:	00088bd0 00088bdc 00088be4 00088bf0     ................

20000578 <eprocs>:
20000578:	0008973c 00089748 00089750 0008975c     <...H...P...\...
20000588:	00089768 00089770 0008977c 00089788     h...p...|.......

20000598 <nvpsiz>:
20000598:	0008971c 000896bc 000896c8 000896d4     ................
200005a8:	00000000 000896e0 00000000 000896ec     ................
200005b8:	00000000 000896f8 00089710 00000000     ................
200005c8:	00089724 00000000 00089730 00000000     $.......0.......

200005d8 <nvptyp>:
200005d8:	0008906c 00089078 000890a0 000890c0     l...x...........
200005e8:	0008911c                                ....

200005ec <sramsiz>:
200005ec:	0008965c 00089668 00089674 00089680     \...h...t.......
200005fc:	0008968c 00089698 000896a4 000896b0     ................
2000060c:	000896bc 000896c8 000896d4 000896e0     ................
2000061c:	000896ec 000896f8 00089704 00089710     ................

2000062c <_impure_ptr>:
2000062c:	20000630                                0.. 

20000630 <impure_data>:
20000630:	00000000 2000091c 20000984 200009ec     ....... ... ... 
	...
200006d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200006e8:	0005deec 0000000b 00000000 00000000     ................
	...

20000a58 <__global_locale>:
20000a58:	00000043 00000000 00000000 00000000     C...............
	...
20000a78:	00000043 00000000 00000000 00000000     C...............
	...
20000a98:	00000043 00000000 00000000 00000000     C...............
	...
20000ab8:	00000043 00000000 00000000 00000000     C...............
	...
20000ad8:	00000043 00000000 00000000 00000000     C...............
	...
20000af8:	00000043 00000000 00000000 00000000     C...............
	...
20000b18:	00000043 00000000 00000000 00000000     C...............
	...
20000b38:	000873c5 00086b01 00000000 00089924     .s...k......$...
20000b48:	00089820 000887f4 000887f4 000887f4      ...............
20000b58:	000887f4 000887f4 000887f4 000887f4     ................
20000b68:	000887f4 000887f4 ffffffff ffffffff     ................
20000b78:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000ba0:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000bc4 <__malloc_av_>:
	...
20000bcc:	20000bc4 20000bc4 20000bcc 20000bcc     ... ... ... ... 
20000bdc:	20000bd4 20000bd4 20000bdc 20000bdc     ... ... ... ... 
20000bec:	20000be4 20000be4 20000bec 20000bec     ... ... ... ... 
20000bfc:	20000bf4 20000bf4 20000bfc 20000bfc     ... ... ... ... 
20000c0c:	20000c04 20000c04 20000c0c 20000c0c     ... ... ... ... 
20000c1c:	20000c14 20000c14 20000c1c 20000c1c     ... ... ... ... 
20000c2c:	20000c24 20000c24 20000c2c 20000c2c     $.. $.. ,.. ,.. 
20000c3c:	20000c34 20000c34 20000c3c 20000c3c     4.. 4.. <.. <.. 
20000c4c:	20000c44 20000c44 20000c4c 20000c4c     D.. D.. L.. L.. 
20000c5c:	20000c54 20000c54 20000c5c 20000c5c     T.. T.. \.. \.. 
20000c6c:	20000c64 20000c64 20000c6c 20000c6c     d.. d.. l.. l.. 
20000c7c:	20000c74 20000c74 20000c7c 20000c7c     t.. t.. |.. |.. 
20000c8c:	20000c84 20000c84 20000c8c 20000c8c     ... ... ... ... 
20000c9c:	20000c94 20000c94 20000c9c 20000c9c     ... ... ... ... 
20000cac:	20000ca4 20000ca4 20000cac 20000cac     ... ... ... ... 
20000cbc:	20000cb4 20000cb4 20000cbc 20000cbc     ... ... ... ... 
20000ccc:	20000cc4 20000cc4 20000ccc 20000ccc     ... ... ... ... 
20000cdc:	20000cd4 20000cd4 20000cdc 20000cdc     ... ... ... ... 
20000cec:	20000ce4 20000ce4 20000cec 20000cec     ... ... ... ... 
20000cfc:	20000cf4 20000cf4 20000cfc 20000cfc     ... ... ... ... 
20000d0c:	20000d04 20000d04 20000d0c 20000d0c     ... ... ... ... 
20000d1c:	20000d14 20000d14 20000d1c 20000d1c     ... ... ... ... 
20000d2c:	20000d24 20000d24 20000d2c 20000d2c     $.. $.. ,.. ,.. 
20000d3c:	20000d34 20000d34 20000d3c 20000d3c     4.. 4.. <.. <.. 
20000d4c:	20000d44 20000d44 20000d4c 20000d4c     D.. D.. L.. L.. 
20000d5c:	20000d54 20000d54 20000d5c 20000d5c     T.. T.. \.. \.. 
20000d6c:	20000d64 20000d64 20000d6c 20000d6c     d.. d.. l.. l.. 
20000d7c:	20000d74 20000d74 20000d7c 20000d7c     t.. t.. |.. |.. 
20000d8c:	20000d84 20000d84 20000d8c 20000d8c     ... ... ... ... 
20000d9c:	20000d94 20000d94 20000d9c 20000d9c     ... ... ... ... 
20000dac:	20000da4 20000da4 20000dac 20000dac     ... ... ... ... 
20000dbc:	20000db4 20000db4 20000dbc 20000dbc     ... ... ... ... 
20000dcc:	20000dc4 20000dc4 20000dcc 20000dcc     ... ... ... ... 
20000ddc:	20000dd4 20000dd4 20000ddc 20000ddc     ... ... ... ... 
20000dec:	20000de4 20000de4 20000dec 20000dec     ... ... ... ... 
20000dfc:	20000df4 20000df4 20000dfc 20000dfc     ... ... ... ... 
20000e0c:	20000e04 20000e04 20000e0c 20000e0c     ... ... ... ... 
20000e1c:	20000e14 20000e14 20000e1c 20000e1c     ... ... ... ... 
20000e2c:	20000e24 20000e24 20000e2c 20000e2c     $.. $.. ,.. ,.. 
20000e3c:	20000e34 20000e34 20000e3c 20000e3c     4.. 4.. <.. <.. 
20000e4c:	20000e44 20000e44 20000e4c 20000e4c     D.. D.. L.. L.. 
20000e5c:	20000e54 20000e54 20000e5c 20000e5c     T.. T.. \.. \.. 
20000e6c:	20000e64 20000e64 20000e6c 20000e6c     d.. d.. l.. l.. 
20000e7c:	20000e74 20000e74 20000e7c 20000e7c     t.. t.. |.. |.. 
20000e8c:	20000e84 20000e84 20000e8c 20000e8c     ... ... ... ... 
20000e9c:	20000e94 20000e94 20000e9c 20000e9c     ... ... ... ... 
20000eac:	20000ea4 20000ea4 20000eac 20000eac     ... ... ... ... 
20000ebc:	20000eb4 20000eb4 20000ebc 20000ebc     ... ... ... ... 
20000ecc:	20000ec4 20000ec4 20000ecc 20000ecc     ... ... ... ... 
20000edc:	20000ed4 20000ed4 20000edc 20000edc     ... ... ... ... 
20000eec:	20000ee4 20000ee4 20000eec 20000eec     ... ... ... ... 
20000efc:	20000ef4 20000ef4 20000efc 20000efc     ... ... ... ... 
20000f0c:	20000f04 20000f04 20000f0c 20000f0c     ... ... ... ... 
20000f1c:	20000f14 20000f14 20000f1c 20000f1c     ... ... ... ... 
20000f2c:	20000f24 20000f24 20000f2c 20000f2c     $.. $.. ,.. ,.. 
20000f3c:	20000f34 20000f34 20000f3c 20000f3c     4.. 4.. <.. <.. 
20000f4c:	20000f44 20000f44 20000f4c 20000f4c     D.. D.. L.. L.. 
20000f5c:	20000f54 20000f54 20000f5c 20000f5c     T.. T.. \.. \.. 
20000f6c:	20000f64 20000f64 20000f6c 20000f6c     d.. d.. l.. l.. 
20000f7c:	20000f74 20000f74 20000f7c 20000f7c     t.. t.. |.. |.. 
20000f8c:	20000f84 20000f84 20000f8c 20000f8c     ... ... ... ... 
20000f9c:	20000f94 20000f94 20000f9c 20000f9c     ... ... ... ... 
20000fac:	20000fa4 20000fa4 20000fac 20000fac     ... ... ... ... 
20000fbc:	20000fb4 20000fb4 20000fbc 20000fbc     ... ... ... ... 

20000fcc <__malloc_sbrk_base>:
20000fcc:	ffffffff                                ....

20000fd0 <__malloc_trim_threshold>:
20000fd0:	00020000                                ....
